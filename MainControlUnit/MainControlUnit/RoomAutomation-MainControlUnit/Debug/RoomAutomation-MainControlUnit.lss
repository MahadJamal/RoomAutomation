
RoomAutomation-MainControlUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e14  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083e14  00083e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  00083e1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000180  20070ae0  000848fc  00020ae0  2**2
                  ALLOC
  4 .stack        00002000  20070c60  00084a7c  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   00013fa9  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e61  00000000  00000000  00034b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004cc8  00000000  00000000  0003796c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac8  00000000  00000000  0003c634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a98  00000000  00000000  0003d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000064e7  00000000  00000000  0003db94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d007  00000000  00000000  0004407b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00068bfd  00000000  00000000  00051082  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000024dc  00000000  00000000  000b9c80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	60 2c 07 20 ed 09 08 00 e9 09 08 00 e9 09 08 00     `,. ............
   80010:	e9 09 08 00 e9 09 08 00 e9 09 08 00 00 00 00 00     ................
	...
   8002c:	b5 02 08 00 e9 09 08 00 00 00 00 00 ed 02 08 00     ................
   8003c:	29 03 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     )...............
   8004c:	e9 09 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................
   8005c:	e9 09 08 00 e9 09 08 00 e9 09 08 00 00 00 00 00     ................
   8006c:	5d 08 08 00 71 08 08 00 85 08 08 00 99 08 08 00     ]...q...........
	...
   80084:	e9 09 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................
   80094:	e9 09 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................
   800a4:	00 00 00 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................
   800b4:	e9 09 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................
   800c4:	e9 09 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................
   800d4:	e9 09 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................
   800e4:	e9 09 08 00 e9 09 08 00 e9 09 08 00 e9 09 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	00083e1c 	.word	0x00083e1c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083e1c 	.word	0x00083e1c
   80154:	20070ae4 	.word	0x20070ae4
   80158:	00083e1c 	.word	0x00083e1c
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070c34 	.word	0x20070c34
   80198:	20070c2c 	.word	0x20070c2c

0008019c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8019c:	3801      	subs	r0, #1
   8019e:	2802      	cmp	r0, #2
   801a0:	d815      	bhi.n	801ce <_write+0x32>
{
   801a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   801a6:	460e      	mov	r6, r1
   801a8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   801aa:	b19a      	cbz	r2, 801d4 <_write+0x38>
   801ac:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   801ae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 801e8 <_write+0x4c>
   801b2:	4f0c      	ldr	r7, [pc, #48]	; (801e4 <_write+0x48>)
   801b4:	f8d8 0000 	ldr.w	r0, [r8]
   801b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   801bc:	683b      	ldr	r3, [r7, #0]
   801be:	4798      	blx	r3
   801c0:	2800      	cmp	r0, #0
   801c2:	db0a      	blt.n	801da <_write+0x3e>
   801c4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   801c6:	3c01      	subs	r4, #1
   801c8:	d1f4      	bne.n	801b4 <_write+0x18>
   801ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   801ce:	f04f 30ff 	mov.w	r0, #4294967295
   801d2:	4770      	bx	lr
	for (; len != 0; --len) {
   801d4:	4610      	mov	r0, r2
   801d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   801da:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   801de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   801e2:	bf00      	nop
   801e4:	20070c30 	.word	0x20070c30
   801e8:	20070c34 	.word	0x20070c34

000801ec <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   801ec:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   801ee:	23ac      	movs	r3, #172	; 0xac
   801f0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   801f2:	680b      	ldr	r3, [r1, #0]
   801f4:	684a      	ldr	r2, [r1, #4]
   801f6:	fbb3 f3f2 	udiv	r3, r3, r2
   801fa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   801fc:	1e5c      	subs	r4, r3, #1
   801fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80202:	4294      	cmp	r4, r2
   80204:	d80b      	bhi.n	8021e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80206:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80208:	688b      	ldr	r3, [r1, #8]
   8020a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8020c:	f240 2302 	movw	r3, #514	; 0x202
   80210:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80214:	2350      	movs	r3, #80	; 0x50
   80216:	6003      	str	r3, [r0, #0]

	return 0;
   80218:	2000      	movs	r0, #0
}
   8021a:	bc10      	pop	{r4}
   8021c:	4770      	bx	lr
		return 1;
   8021e:	2001      	movs	r0, #1
   80220:	e7fb      	b.n	8021a <uart_init+0x2e>

00080222 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80222:	6943      	ldr	r3, [r0, #20]
   80224:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80228:	bf1a      	itte	ne
   8022a:	61c1      	strne	r1, [r0, #28]
	return 0;
   8022c:	2000      	movne	r0, #0
		return 1;
   8022e:	2001      	moveq	r0, #1
}
   80230:	4770      	bx	lr

00080232 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80232:	6943      	ldr	r3, [r0, #20]
   80234:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80238:	bf1d      	ittte	ne
   8023a:	6983      	ldrne	r3, [r0, #24]
   8023c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8023e:	2000      	movne	r0, #0
		return 1;
   80240:	2001      	moveq	r0, #1
}
   80242:	4770      	bx	lr

00080244 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80244:	6943      	ldr	r3, [r0, #20]
   80246:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8024a:	bf1d      	ittte	ne
   8024c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80250:	61c1      	strne	r1, [r0, #28]
	return 0;
   80252:	2000      	movne	r0, #0
		return 1;
   80254:	2001      	moveq	r0, #1
}
   80256:	4770      	bx	lr

00080258 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80258:	6943      	ldr	r3, [r0, #20]
   8025a:	f013 0f01 	tst.w	r3, #1
   8025e:	d005      	beq.n	8026c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80260:	6983      	ldr	r3, [r0, #24]
   80262:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80266:	600b      	str	r3, [r1, #0]

	return 0;
   80268:	2000      	movs	r0, #0
   8026a:	4770      	bx	lr
		return 1;
   8026c:	2001      	movs	r0, #1
}
   8026e:	4770      	bx	lr

00080270 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80270:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80272:	685a      	ldr	r2, [r3, #4]
   80274:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80276:	6842      	ldr	r2, [r0, #4]
   80278:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8027a:	685a      	ldr	r2, [r3, #4]
   8027c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8027e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80280:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80282:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80284:	6803      	ldr	r3, [r0, #0]
   80286:	3301      	adds	r3, #1
   80288:	6003      	str	r3, [r0, #0]
   8028a:	4770      	bx	lr

0008028c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8028c:	6843      	ldr	r3, [r0, #4]
   8028e:	6882      	ldr	r2, [r0, #8]
   80290:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80292:	6883      	ldr	r3, [r0, #8]
   80294:	6842      	ldr	r2, [r0, #4]
   80296:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80298:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8029a:	685a      	ldr	r2, [r3, #4]
   8029c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8029e:	bf04      	itt	eq
   802a0:	6882      	ldreq	r2, [r0, #8]
   802a2:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   802a4:	2200      	movs	r2, #0
   802a6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   802a8:	681a      	ldr	r2, [r3, #0]
   802aa:	3a01      	subs	r2, #1
   802ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   802ae:	6818      	ldr	r0, [r3, #0]
}
   802b0:	4770      	bx	lr
	...

000802b4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   802b4:	4b06      	ldr	r3, [pc, #24]	; (802d0 <pxCurrentTCBConst2>)
   802b6:	6819      	ldr	r1, [r3, #0]
   802b8:	6808      	ldr	r0, [r1, #0]
   802ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   802be:	f380 8809 	msr	PSP, r0
   802c2:	f04f 0000 	mov.w	r0, #0
   802c6:	f380 8811 	msr	BASEPRI, r0
   802ca:	f04e 0e0d 	orr.w	lr, lr, #13
   802ce:	4770      	bx	lr

000802d0 <pxCurrentTCBConst2>:
   802d0:	20070afc 	.word	0x20070afc

000802d4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   802d4:	f3ef 8011 	mrs	r0, BASEPRI
   802d8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   802dc:	f381 8811 	msr	BASEPRI, r1
   802e0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   802e2:	2000      	movs	r0, #0

000802e4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   802e4:	f380 8811 	msr	BASEPRI, r0
   802e8:	4770      	bx	lr
	...

000802ec <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   802ec:	f3ef 8009 	mrs	r0, PSP
   802f0:	4b0c      	ldr	r3, [pc, #48]	; (80324 <pxCurrentTCBConst>)
   802f2:	681a      	ldr	r2, [r3, #0]
   802f4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   802f8:	6010      	str	r0, [r2, #0]
   802fa:	e92d 4008 	stmdb	sp!, {r3, lr}
   802fe:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80302:	f380 8811 	msr	BASEPRI, r0
   80306:	f000 f8b9 	bl	8047c <vTaskSwitchContext>
   8030a:	f04f 0000 	mov.w	r0, #0
   8030e:	f380 8811 	msr	BASEPRI, r0
   80312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80316:	6819      	ldr	r1, [r3, #0]
   80318:	6808      	ldr	r0, [r1, #0]
   8031a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8031e:	f380 8809 	msr	PSP, r0
   80322:	4770      	bx	lr

00080324 <pxCurrentTCBConst>:
   80324:	20070afc 	.word	0x20070afc

00080328 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80328:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8032a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8032e:	4b05      	ldr	r3, [pc, #20]	; (80344 <SysTick_Handler+0x1c>)
   80330:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80332:	4b05      	ldr	r3, [pc, #20]	; (80348 <SysTick_Handler+0x20>)
   80334:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80336:	4b05      	ldr	r3, [pc, #20]	; (8034c <SysTick_Handler+0x24>)
   80338:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8033a:	2000      	movs	r0, #0
   8033c:	4b04      	ldr	r3, [pc, #16]	; (80350 <SysTick_Handler+0x28>)
   8033e:	4798      	blx	r3
   80340:	bd08      	pop	{r3, pc}
   80342:	bf00      	nop
   80344:	e000ed04 	.word	0xe000ed04
   80348:	000802d5 	.word	0x000802d5
   8034c:	00080355 	.word	0x00080355
   80350:	000802e5 	.word	0x000802e5

00080354 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80354:	4b3d      	ldr	r3, [pc, #244]	; (8044c <vTaskIncrementTick+0xf8>)
   80356:	681b      	ldr	r3, [r3, #0]
   80358:	2b00      	cmp	r3, #0
   8035a:	d16f      	bne.n	8043c <vTaskIncrementTick+0xe8>
{
   8035c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   80360:	4b3b      	ldr	r3, [pc, #236]	; (80450 <vTaskIncrementTick+0xfc>)
   80362:	681a      	ldr	r2, [r3, #0]
   80364:	3201      	adds	r2, #1
   80366:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80368:	681b      	ldr	r3, [r3, #0]
   8036a:	b9ab      	cbnz	r3, 80398 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8036c:	4b39      	ldr	r3, [pc, #228]	; (80454 <vTaskIncrementTick+0x100>)
   8036e:	681b      	ldr	r3, [r3, #0]
   80370:	681b      	ldr	r3, [r3, #0]
   80372:	2b00      	cmp	r3, #0
   80374:	d128      	bne.n	803c8 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   80376:	4b37      	ldr	r3, [pc, #220]	; (80454 <vTaskIncrementTick+0x100>)
   80378:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8037a:	4a37      	ldr	r2, [pc, #220]	; (80458 <vTaskIncrementTick+0x104>)
   8037c:	6810      	ldr	r0, [r2, #0]
   8037e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80380:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80382:	4936      	ldr	r1, [pc, #216]	; (8045c <vTaskIncrementTick+0x108>)
   80384:	680a      	ldr	r2, [r1, #0]
   80386:	3201      	adds	r2, #1
   80388:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8038a:	681b      	ldr	r3, [r3, #0]
   8038c:	681b      	ldr	r3, [r3, #0]
   8038e:	b9fb      	cbnz	r3, 803d0 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80390:	f04f 32ff 	mov.w	r2, #4294967295
   80394:	4b32      	ldr	r3, [pc, #200]	; (80460 <vTaskIncrementTick+0x10c>)
   80396:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80398:	4b2d      	ldr	r3, [pc, #180]	; (80450 <vTaskIncrementTick+0xfc>)
   8039a:	681a      	ldr	r2, [r3, #0]
   8039c:	4b30      	ldr	r3, [pc, #192]	; (80460 <vTaskIncrementTick+0x10c>)
   8039e:	681b      	ldr	r3, [r3, #0]
   803a0:	429a      	cmp	r2, r3
   803a2:	d350      	bcc.n	80446 <vTaskIncrementTick+0xf2>
   803a4:	4b2b      	ldr	r3, [pc, #172]	; (80454 <vTaskIncrementTick+0x100>)
   803a6:	681b      	ldr	r3, [r3, #0]
   803a8:	681b      	ldr	r3, [r3, #0]
   803aa:	b1cb      	cbz	r3, 803e0 <vTaskIncrementTick+0x8c>
   803ac:	4b29      	ldr	r3, [pc, #164]	; (80454 <vTaskIncrementTick+0x100>)
   803ae:	681b      	ldr	r3, [r3, #0]
   803b0:	68db      	ldr	r3, [r3, #12]
   803b2:	68dc      	ldr	r4, [r3, #12]
   803b4:	6863      	ldr	r3, [r4, #4]
   803b6:	4a26      	ldr	r2, [pc, #152]	; (80450 <vTaskIncrementTick+0xfc>)
   803b8:	6812      	ldr	r2, [r2, #0]
   803ba:	4293      	cmp	r3, r2
   803bc:	d816      	bhi.n	803ec <vTaskIncrementTick+0x98>
   803be:	4e29      	ldr	r6, [pc, #164]	; (80464 <vTaskIncrementTick+0x110>)
   803c0:	4f29      	ldr	r7, [pc, #164]	; (80468 <vTaskIncrementTick+0x114>)
   803c2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80478 <vTaskIncrementTick+0x124>
   803c6:	e02f      	b.n	80428 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   803c8:	4b28      	ldr	r3, [pc, #160]	; (8046c <vTaskIncrementTick+0x118>)
   803ca:	4798      	blx	r3
   803cc:	bf00      	nop
   803ce:	e7fd      	b.n	803cc <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   803d0:	4b20      	ldr	r3, [pc, #128]	; (80454 <vTaskIncrementTick+0x100>)
   803d2:	681b      	ldr	r3, [r3, #0]
   803d4:	68db      	ldr	r3, [r3, #12]
   803d6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   803d8:	685a      	ldr	r2, [r3, #4]
   803da:	4b21      	ldr	r3, [pc, #132]	; (80460 <vTaskIncrementTick+0x10c>)
   803dc:	601a      	str	r2, [r3, #0]
   803de:	e7db      	b.n	80398 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   803e0:	f04f 32ff 	mov.w	r2, #4294967295
   803e4:	4b1e      	ldr	r3, [pc, #120]	; (80460 <vTaskIncrementTick+0x10c>)
   803e6:	601a      	str	r2, [r3, #0]
   803e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803ec:	4a1c      	ldr	r2, [pc, #112]	; (80460 <vTaskIncrementTick+0x10c>)
   803ee:	6013      	str	r3, [r2, #0]
   803f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   803f6:	683b      	ldr	r3, [r7, #0]
   803f8:	4298      	cmp	r0, r3
   803fa:	bf88      	it	hi
   803fc:	6038      	strhi	r0, [r7, #0]
   803fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80402:	4629      	mov	r1, r5
   80404:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80408:	4b19      	ldr	r3, [pc, #100]	; (80470 <vTaskIncrementTick+0x11c>)
   8040a:	4798      	blx	r3
   8040c:	4b11      	ldr	r3, [pc, #68]	; (80454 <vTaskIncrementTick+0x100>)
   8040e:	681b      	ldr	r3, [r3, #0]
   80410:	681b      	ldr	r3, [r3, #0]
   80412:	2b00      	cmp	r3, #0
   80414:	d0e4      	beq.n	803e0 <vTaskIncrementTick+0x8c>
   80416:	4b0f      	ldr	r3, [pc, #60]	; (80454 <vTaskIncrementTick+0x100>)
   80418:	681b      	ldr	r3, [r3, #0]
   8041a:	68db      	ldr	r3, [r3, #12]
   8041c:	68dc      	ldr	r4, [r3, #12]
   8041e:	6863      	ldr	r3, [r4, #4]
   80420:	4a0b      	ldr	r2, [pc, #44]	; (80450 <vTaskIncrementTick+0xfc>)
   80422:	6812      	ldr	r2, [r2, #0]
   80424:	4293      	cmp	r3, r2
   80426:	d8e1      	bhi.n	803ec <vTaskIncrementTick+0x98>
   80428:	1d25      	adds	r5, r4, #4
   8042a:	4628      	mov	r0, r5
   8042c:	47b0      	blx	r6
   8042e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80430:	2b00      	cmp	r3, #0
   80432:	d0df      	beq.n	803f4 <vTaskIncrementTick+0xa0>
   80434:	f104 0018 	add.w	r0, r4, #24
   80438:	47b0      	blx	r6
   8043a:	e7db      	b.n	803f4 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   8043c:	4a0d      	ldr	r2, [pc, #52]	; (80474 <vTaskIncrementTick+0x120>)
   8043e:	6813      	ldr	r3, [r2, #0]
   80440:	3301      	adds	r3, #1
   80442:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80444:	4770      	bx	lr
   80446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8044a:	bf00      	nop
   8044c:	20070b70 	.word	0x20070b70
   80450:	20070b80 	.word	0x20070b80
   80454:	20070b00 	.word	0x20070b00
   80458:	20070b04 	.word	0x20070b04
   8045c:	20070b7c 	.word	0x20070b7c
   80460:	2007012c 	.word	0x2007012c
   80464:	0008028d 	.word	0x0008028d
   80468:	20070b74 	.word	0x20070b74
   8046c:	000802d5 	.word	0x000802d5
   80470:	00080271 	.word	0x00080271
   80474:	20070b6c 	.word	0x20070b6c
   80478:	20070b08 	.word	0x20070b08

0008047c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8047c:	4b21      	ldr	r3, [pc, #132]	; (80504 <vTaskSwitchContext+0x88>)
   8047e:	681b      	ldr	r3, [r3, #0]
   80480:	b9eb      	cbnz	r3, 804be <vTaskSwitchContext+0x42>
{
   80482:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80484:	4b20      	ldr	r3, [pc, #128]	; (80508 <vTaskSwitchContext+0x8c>)
   80486:	681b      	ldr	r3, [r3, #0]
   80488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8048c:	009b      	lsls	r3, r3, #2
   8048e:	4a1f      	ldr	r2, [pc, #124]	; (8050c <vTaskSwitchContext+0x90>)
   80490:	58d3      	ldr	r3, [r2, r3]
   80492:	b9c3      	cbnz	r3, 804c6 <vTaskSwitchContext+0x4a>
   80494:	4b1c      	ldr	r3, [pc, #112]	; (80508 <vTaskSwitchContext+0x8c>)
   80496:	681b      	ldr	r3, [r3, #0]
   80498:	b16b      	cbz	r3, 804b6 <vTaskSwitchContext+0x3a>
   8049a:	4a1b      	ldr	r2, [pc, #108]	; (80508 <vTaskSwitchContext+0x8c>)
   8049c:	491b      	ldr	r1, [pc, #108]	; (8050c <vTaskSwitchContext+0x90>)
   8049e:	6813      	ldr	r3, [r2, #0]
   804a0:	3b01      	subs	r3, #1
   804a2:	6013      	str	r3, [r2, #0]
   804a4:	6813      	ldr	r3, [r2, #0]
   804a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   804aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   804ae:	b953      	cbnz	r3, 804c6 <vTaskSwitchContext+0x4a>
   804b0:	6813      	ldr	r3, [r2, #0]
   804b2:	2b00      	cmp	r3, #0
   804b4:	d1f3      	bne.n	8049e <vTaskSwitchContext+0x22>
   804b6:	4b16      	ldr	r3, [pc, #88]	; (80510 <vTaskSwitchContext+0x94>)
   804b8:	4798      	blx	r3
   804ba:	bf00      	nop
   804bc:	e7fd      	b.n	804ba <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   804be:	2201      	movs	r2, #1
   804c0:	4b14      	ldr	r3, [pc, #80]	; (80514 <vTaskSwitchContext+0x98>)
   804c2:	601a      	str	r2, [r3, #0]
   804c4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   804c6:	4b10      	ldr	r3, [pc, #64]	; (80508 <vTaskSwitchContext+0x8c>)
   804c8:	681b      	ldr	r3, [r3, #0]
   804ca:	4a10      	ldr	r2, [pc, #64]	; (8050c <vTaskSwitchContext+0x90>)
   804cc:	0099      	lsls	r1, r3, #2
   804ce:	18c8      	adds	r0, r1, r3
   804d0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   804d4:	6844      	ldr	r4, [r0, #4]
   804d6:	6864      	ldr	r4, [r4, #4]
   804d8:	6044      	str	r4, [r0, #4]
   804da:	4419      	add	r1, r3
   804dc:	4602      	mov	r2, r0
   804de:	3208      	adds	r2, #8
   804e0:	4294      	cmp	r4, r2
   804e2:	d009      	beq.n	804f8 <vTaskSwitchContext+0x7c>
   804e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   804e8:	4a08      	ldr	r2, [pc, #32]	; (8050c <vTaskSwitchContext+0x90>)
   804ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   804ee:	685b      	ldr	r3, [r3, #4]
   804f0:	68da      	ldr	r2, [r3, #12]
   804f2:	4b09      	ldr	r3, [pc, #36]	; (80518 <vTaskSwitchContext+0x9c>)
   804f4:	601a      	str	r2, [r3, #0]
   804f6:	bd10      	pop	{r4, pc}
   804f8:	6860      	ldr	r0, [r4, #4]
   804fa:	4a04      	ldr	r2, [pc, #16]	; (8050c <vTaskSwitchContext+0x90>)
   804fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80500:	6050      	str	r0, [r2, #4]
   80502:	e7ef      	b.n	804e4 <vTaskSwitchContext+0x68>
   80504:	20070b70 	.word	0x20070b70
   80508:	20070b74 	.word	0x20070b74
   8050c:	20070b08 	.word	0x20070b08
   80510:	000802d5 	.word	0x000802d5
   80514:	20070b78 	.word	0x20070b78
   80518:	20070afc 	.word	0x20070afc

0008051c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8051c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8051e:	480e      	ldr	r0, [pc, #56]	; (80558 <sysclk_init+0x3c>)
   80520:	4b0e      	ldr	r3, [pc, #56]	; (8055c <sysclk_init+0x40>)
   80522:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80524:	213e      	movs	r1, #62	; 0x3e
   80526:	2000      	movs	r0, #0
   80528:	4b0d      	ldr	r3, [pc, #52]	; (80560 <sysclk_init+0x44>)
   8052a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8052c:	4c0d      	ldr	r4, [pc, #52]	; (80564 <sysclk_init+0x48>)
   8052e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80530:	2800      	cmp	r0, #0
   80532:	d0fc      	beq.n	8052e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80534:	4b0c      	ldr	r3, [pc, #48]	; (80568 <sysclk_init+0x4c>)
   80536:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80538:	4a0c      	ldr	r2, [pc, #48]	; (8056c <sysclk_init+0x50>)
   8053a:	4b0d      	ldr	r3, [pc, #52]	; (80570 <sysclk_init+0x54>)
   8053c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8053e:	4c0d      	ldr	r4, [pc, #52]	; (80574 <sysclk_init+0x58>)
   80540:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80542:	2800      	cmp	r0, #0
   80544:	d0fc      	beq.n	80540 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80546:	2010      	movs	r0, #16
   80548:	4b0b      	ldr	r3, [pc, #44]	; (80578 <sysclk_init+0x5c>)
   8054a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8054c:	4b0b      	ldr	r3, [pc, #44]	; (8057c <sysclk_init+0x60>)
   8054e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80550:	4801      	ldr	r0, [pc, #4]	; (80558 <sysclk_init+0x3c>)
   80552:	4b02      	ldr	r3, [pc, #8]	; (8055c <sysclk_init+0x40>)
   80554:	4798      	blx	r3
   80556:	bd10      	pop	{r4, pc}
   80558:	0501bd00 	.word	0x0501bd00
   8055c:	200700a5 	.word	0x200700a5
   80560:	00080911 	.word	0x00080911
   80564:	00080965 	.word	0x00080965
   80568:	00080975 	.word	0x00080975
   8056c:	200d3f01 	.word	0x200d3f01
   80570:	400e0600 	.word	0x400e0600
   80574:	00080985 	.word	0x00080985
   80578:	000808ad 	.word	0x000808ad
   8057c:	00080a85 	.word	0x00080a85

00080580 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80580:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80586:	4b16      	ldr	r3, [pc, #88]	; (805e0 <board_init+0x60>)
   80588:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8058a:	200b      	movs	r0, #11
   8058c:	4c15      	ldr	r4, [pc, #84]	; (805e4 <board_init+0x64>)
   8058e:	47a0      	blx	r4
   80590:	200c      	movs	r0, #12
   80592:	47a0      	blx	r4
   80594:	200d      	movs	r0, #13
   80596:	47a0      	blx	r4
   80598:	200e      	movs	r0, #14
   8059a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8059c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805a0:	203b      	movs	r0, #59	; 0x3b
   805a2:	4c11      	ldr	r4, [pc, #68]	; (805e8 <board_init+0x68>)
   805a4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805a6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805aa:	2055      	movs	r0, #85	; 0x55
   805ac:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805b2:	2056      	movs	r0, #86	; 0x56
   805b4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805b6:	490d      	ldr	r1, [pc, #52]	; (805ec <board_init+0x6c>)
   805b8:	2068      	movs	r0, #104	; 0x68
   805ba:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805bc:	490c      	ldr	r1, [pc, #48]	; (805f0 <board_init+0x70>)
   805be:	205c      	movs	r0, #92	; 0x5c
   805c0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   805c2:	4a0c      	ldr	r2, [pc, #48]	; (805f4 <board_init+0x74>)
   805c4:	f44f 7140 	mov.w	r1, #768	; 0x300
   805c8:	480b      	ldr	r0, [pc, #44]	; (805f8 <board_init+0x78>)
   805ca:	4b0c      	ldr	r3, [pc, #48]	; (805fc <board_init+0x7c>)
   805cc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   805ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805d2:	202b      	movs	r0, #43	; 0x2b
   805d4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   805d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805da:	202a      	movs	r0, #42	; 0x2a
   805dc:	47a0      	blx	r4
   805de:	bd10      	pop	{r4, pc}
   805e0:	400e1a50 	.word	0x400e1a50
   805e4:	00080995 	.word	0x00080995
   805e8:	000806a1 	.word	0x000806a1
   805ec:	28000079 	.word	0x28000079
   805f0:	28000001 	.word	0x28000001
   805f4:	08000001 	.word	0x08000001
   805f8:	400e0e00 	.word	0x400e0e00
   805fc:	00080771 	.word	0x00080771

00080600 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80600:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80602:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80606:	d016      	beq.n	80636 <pio_set_peripheral+0x36>
   80608:	d80b      	bhi.n	80622 <pio_set_peripheral+0x22>
   8060a:	b149      	cbz	r1, 80620 <pio_set_peripheral+0x20>
   8060c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80610:	d105      	bne.n	8061e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80612:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80614:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80616:	400b      	ands	r3, r1
   80618:	ea23 0302 	bic.w	r3, r3, r2
   8061c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8061e:	6042      	str	r2, [r0, #4]
   80620:	4770      	bx	lr
	switch (ul_type) {
   80622:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80626:	d0fb      	beq.n	80620 <pio_set_peripheral+0x20>
   80628:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8062c:	d0f8      	beq.n	80620 <pio_set_peripheral+0x20>
   8062e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80632:	d1f4      	bne.n	8061e <pio_set_peripheral+0x1e>
   80634:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80636:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80638:	4313      	orrs	r3, r2
   8063a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8063c:	e7ef      	b.n	8061e <pio_set_peripheral+0x1e>

0008063e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8063e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80640:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80644:	bf14      	ite	ne
   80646:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80648:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8064a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8064e:	bf14      	ite	ne
   80650:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80652:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80654:	f012 0f02 	tst.w	r2, #2
   80658:	d107      	bne.n	8066a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8065a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8065e:	bf18      	it	ne
   80660:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80664:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80666:	6001      	str	r1, [r0, #0]
   80668:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8066a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8066e:	e7f9      	b.n	80664 <pio_set_input+0x26>

00080670 <pio_set_output>:
{
   80670:	b410      	push	{r4}
   80672:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80674:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80676:	b944      	cbnz	r4, 8068a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80678:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8067a:	b143      	cbz	r3, 8068e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8067c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8067e:	b942      	cbnz	r2, 80692 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80680:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80682:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80684:	6001      	str	r1, [r0, #0]
}
   80686:	bc10      	pop	{r4}
   80688:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8068a:	6641      	str	r1, [r0, #100]	; 0x64
   8068c:	e7f5      	b.n	8067a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8068e:	6541      	str	r1, [r0, #84]	; 0x54
   80690:	e7f5      	b.n	8067e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80692:	6301      	str	r1, [r0, #48]	; 0x30
   80694:	e7f5      	b.n	80682 <pio_set_output+0x12>

00080696 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80696:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80698:	4770      	bx	lr

0008069a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8069a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8069c:	4770      	bx	lr
	...

000806a0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   806a0:	b570      	push	{r4, r5, r6, lr}
   806a2:	b082      	sub	sp, #8
   806a4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   806a6:	0943      	lsrs	r3, r0, #5
   806a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   806ac:	f203 7307 	addw	r3, r3, #1799	; 0x707
   806b0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   806b2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   806b6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   806ba:	d031      	beq.n	80720 <pio_configure_pin+0x80>
   806bc:	d816      	bhi.n	806ec <pio_configure_pin+0x4c>
   806be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   806c2:	d01b      	beq.n	806fc <pio_configure_pin+0x5c>
   806c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   806c8:	d116      	bne.n	806f8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   806ca:	f000 001f 	and.w	r0, r0, #31
   806ce:	2601      	movs	r6, #1
   806d0:	4086      	lsls	r6, r0
   806d2:	4632      	mov	r2, r6
   806d4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806d8:	4620      	mov	r0, r4
   806da:	4b22      	ldr	r3, [pc, #136]	; (80764 <pio_configure_pin+0xc4>)
   806dc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   806de:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   806e2:	bf14      	ite	ne
   806e4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   806e6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   806e8:	2001      	movs	r0, #1
   806ea:	e017      	b.n	8071c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   806ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   806f0:	d021      	beq.n	80736 <pio_configure_pin+0x96>
   806f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   806f6:	d01e      	beq.n	80736 <pio_configure_pin+0x96>
		return 0;
   806f8:	2000      	movs	r0, #0
   806fa:	e00f      	b.n	8071c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   806fc:	f000 001f 	and.w	r0, r0, #31
   80700:	2601      	movs	r6, #1
   80702:	4086      	lsls	r6, r0
   80704:	4632      	mov	r2, r6
   80706:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8070a:	4620      	mov	r0, r4
   8070c:	4b15      	ldr	r3, [pc, #84]	; (80764 <pio_configure_pin+0xc4>)
   8070e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80710:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80714:	bf14      	ite	ne
   80716:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80718:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8071a:	2001      	movs	r0, #1
}
   8071c:	b002      	add	sp, #8
   8071e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80720:	f000 011f 	and.w	r1, r0, #31
   80724:	2601      	movs	r6, #1
   80726:	462a      	mov	r2, r5
   80728:	fa06 f101 	lsl.w	r1, r6, r1
   8072c:	4620      	mov	r0, r4
   8072e:	4b0e      	ldr	r3, [pc, #56]	; (80768 <pio_configure_pin+0xc8>)
   80730:	4798      	blx	r3
	return 1;
   80732:	4630      	mov	r0, r6
		break;
   80734:	e7f2      	b.n	8071c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80736:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8073a:	f000 011f 	and.w	r1, r0, #31
   8073e:	2601      	movs	r6, #1
   80740:	ea05 0306 	and.w	r3, r5, r6
   80744:	9300      	str	r3, [sp, #0]
   80746:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8074a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8074e:	bf14      	ite	ne
   80750:	2200      	movne	r2, #0
   80752:	2201      	moveq	r2, #1
   80754:	fa06 f101 	lsl.w	r1, r6, r1
   80758:	4620      	mov	r0, r4
   8075a:	4c04      	ldr	r4, [pc, #16]	; (8076c <pio_configure_pin+0xcc>)
   8075c:	47a0      	blx	r4
	return 1;
   8075e:	4630      	mov	r0, r6
		break;
   80760:	e7dc      	b.n	8071c <pio_configure_pin+0x7c>
   80762:	bf00      	nop
   80764:	00080601 	.word	0x00080601
   80768:	0008063f 	.word	0x0008063f
   8076c:	00080671 	.word	0x00080671

00080770 <pio_configure_pin_group>:
{
   80770:	b570      	push	{r4, r5, r6, lr}
   80772:	b082      	sub	sp, #8
   80774:	4605      	mov	r5, r0
   80776:	460e      	mov	r6, r1
   80778:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8077a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8077e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80782:	d027      	beq.n	807d4 <pio_configure_pin_group+0x64>
   80784:	d811      	bhi.n	807aa <pio_configure_pin_group+0x3a>
   80786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8078a:	d016      	beq.n	807ba <pio_configure_pin_group+0x4a>
   8078c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80790:	d111      	bne.n	807b6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80792:	460a      	mov	r2, r1
   80794:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80798:	4b19      	ldr	r3, [pc, #100]	; (80800 <pio_configure_pin_group+0x90>)
   8079a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8079c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   807a0:	bf14      	ite	ne
   807a2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807a4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   807a6:	2001      	movs	r0, #1
   807a8:	e012      	b.n	807d0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   807aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   807ae:	d015      	beq.n	807dc <pio_configure_pin_group+0x6c>
   807b0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   807b4:	d012      	beq.n	807dc <pio_configure_pin_group+0x6c>
		return 0;
   807b6:	2000      	movs	r0, #0
   807b8:	e00a      	b.n	807d0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   807ba:	460a      	mov	r2, r1
   807bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807c0:	4b0f      	ldr	r3, [pc, #60]	; (80800 <pio_configure_pin_group+0x90>)
   807c2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   807c4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   807c8:	bf14      	ite	ne
   807ca:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807cc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   807ce:	2001      	movs	r0, #1
}
   807d0:	b002      	add	sp, #8
   807d2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   807d4:	4b0b      	ldr	r3, [pc, #44]	; (80804 <pio_configure_pin_group+0x94>)
   807d6:	4798      	blx	r3
	return 1;
   807d8:	2001      	movs	r0, #1
		break;
   807da:	e7f9      	b.n	807d0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   807dc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   807e0:	f004 0301 	and.w	r3, r4, #1
   807e4:	9300      	str	r3, [sp, #0]
   807e6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   807ea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   807ee:	bf14      	ite	ne
   807f0:	2200      	movne	r2, #0
   807f2:	2201      	moveq	r2, #1
   807f4:	4631      	mov	r1, r6
   807f6:	4628      	mov	r0, r5
   807f8:	4c03      	ldr	r4, [pc, #12]	; (80808 <pio_configure_pin_group+0x98>)
   807fa:	47a0      	blx	r4
	return 1;
   807fc:	2001      	movs	r0, #1
		break;
   807fe:	e7e7      	b.n	807d0 <pio_configure_pin_group+0x60>
   80800:	00080601 	.word	0x00080601
   80804:	0008063f 	.word	0x0008063f
   80808:	00080671 	.word	0x00080671

0008080c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80810:	4604      	mov	r4, r0
   80812:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80814:	4b0e      	ldr	r3, [pc, #56]	; (80850 <pio_handler_process+0x44>)
   80816:	4798      	blx	r3
   80818:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8081a:	4620      	mov	r0, r4
   8081c:	4b0d      	ldr	r3, [pc, #52]	; (80854 <pio_handler_process+0x48>)
   8081e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80820:	4005      	ands	r5, r0
   80822:	d013      	beq.n	8084c <pio_handler_process+0x40>
   80824:	4c0c      	ldr	r4, [pc, #48]	; (80858 <pio_handler_process+0x4c>)
   80826:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8082a:	e003      	b.n	80834 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8082c:	42b4      	cmp	r4, r6
   8082e:	d00d      	beq.n	8084c <pio_handler_process+0x40>
   80830:	3410      	adds	r4, #16
		while (status != 0) {
   80832:	b15d      	cbz	r5, 8084c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80834:	6820      	ldr	r0, [r4, #0]
   80836:	4540      	cmp	r0, r8
   80838:	d1f8      	bne.n	8082c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8083a:	6861      	ldr	r1, [r4, #4]
   8083c:	4229      	tst	r1, r5
   8083e:	d0f5      	beq.n	8082c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80840:	68e3      	ldr	r3, [r4, #12]
   80842:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80844:	6863      	ldr	r3, [r4, #4]
   80846:	ea25 0503 	bic.w	r5, r5, r3
   8084a:	e7ef      	b.n	8082c <pio_handler_process+0x20>
   8084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80850:	00080697 	.word	0x00080697
   80854:	0008069b 	.word	0x0008069b
   80858:	20070b84 	.word	0x20070b84

0008085c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8085c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8085e:	210b      	movs	r1, #11
   80860:	4801      	ldr	r0, [pc, #4]	; (80868 <PIOA_Handler+0xc>)
   80862:	4b02      	ldr	r3, [pc, #8]	; (8086c <PIOA_Handler+0x10>)
   80864:	4798      	blx	r3
   80866:	bd08      	pop	{r3, pc}
   80868:	400e0e00 	.word	0x400e0e00
   8086c:	0008080d 	.word	0x0008080d

00080870 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80870:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80872:	210c      	movs	r1, #12
   80874:	4801      	ldr	r0, [pc, #4]	; (8087c <PIOB_Handler+0xc>)
   80876:	4b02      	ldr	r3, [pc, #8]	; (80880 <PIOB_Handler+0x10>)
   80878:	4798      	blx	r3
   8087a:	bd08      	pop	{r3, pc}
   8087c:	400e1000 	.word	0x400e1000
   80880:	0008080d 	.word	0x0008080d

00080884 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80884:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80886:	210d      	movs	r1, #13
   80888:	4801      	ldr	r0, [pc, #4]	; (80890 <PIOC_Handler+0xc>)
   8088a:	4b02      	ldr	r3, [pc, #8]	; (80894 <PIOC_Handler+0x10>)
   8088c:	4798      	blx	r3
   8088e:	bd08      	pop	{r3, pc}
   80890:	400e1200 	.word	0x400e1200
   80894:	0008080d 	.word	0x0008080d

00080898 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80898:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8089a:	210e      	movs	r1, #14
   8089c:	4801      	ldr	r0, [pc, #4]	; (808a4 <PIOD_Handler+0xc>)
   8089e:	4b02      	ldr	r3, [pc, #8]	; (808a8 <PIOD_Handler+0x10>)
   808a0:	4798      	blx	r3
   808a2:	bd08      	pop	{r3, pc}
   808a4:	400e1400 	.word	0x400e1400
   808a8:	0008080d 	.word	0x0008080d

000808ac <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   808ac:	4a17      	ldr	r2, [pc, #92]	; (8090c <pmc_switch_mck_to_pllack+0x60>)
   808ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   808b4:	4318      	orrs	r0, r3
   808b6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808ba:	f013 0f08 	tst.w	r3, #8
   808be:	d10a      	bne.n	808d6 <pmc_switch_mck_to_pllack+0x2a>
   808c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808c4:	4911      	ldr	r1, [pc, #68]	; (8090c <pmc_switch_mck_to_pllack+0x60>)
   808c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808c8:	f012 0f08 	tst.w	r2, #8
   808cc:	d103      	bne.n	808d6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   808ce:	3b01      	subs	r3, #1
   808d0:	d1f9      	bne.n	808c6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   808d2:	2001      	movs	r0, #1
   808d4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   808d6:	4a0d      	ldr	r2, [pc, #52]	; (8090c <pmc_switch_mck_to_pllack+0x60>)
   808d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808da:	f023 0303 	bic.w	r3, r3, #3
   808de:	f043 0302 	orr.w	r3, r3, #2
   808e2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808e6:	f013 0f08 	tst.w	r3, #8
   808ea:	d10a      	bne.n	80902 <pmc_switch_mck_to_pllack+0x56>
   808ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808f0:	4906      	ldr	r1, [pc, #24]	; (8090c <pmc_switch_mck_to_pllack+0x60>)
   808f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808f4:	f012 0f08 	tst.w	r2, #8
   808f8:	d105      	bne.n	80906 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   808fa:	3b01      	subs	r3, #1
   808fc:	d1f9      	bne.n	808f2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   808fe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80900:	4770      	bx	lr
	return 0;
   80902:	2000      	movs	r0, #0
   80904:	4770      	bx	lr
   80906:	2000      	movs	r0, #0
   80908:	4770      	bx	lr
   8090a:	bf00      	nop
   8090c:	400e0600 	.word	0x400e0600

00080910 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80910:	b9c8      	cbnz	r0, 80946 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80912:	4a11      	ldr	r2, [pc, #68]	; (80958 <pmc_switch_mainck_to_xtal+0x48>)
   80914:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80916:	0209      	lsls	r1, r1, #8
   80918:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8091a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8091e:	f023 0303 	bic.w	r3, r3, #3
   80922:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80926:	f043 0301 	orr.w	r3, r3, #1
   8092a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8092c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8092e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80930:	f013 0f01 	tst.w	r3, #1
   80934:	d0fb      	beq.n	8092e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80936:	4a08      	ldr	r2, [pc, #32]	; (80958 <pmc_switch_mainck_to_xtal+0x48>)
   80938:	6a13      	ldr	r3, [r2, #32]
   8093a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8093e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80942:	6213      	str	r3, [r2, #32]
   80944:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80946:	4904      	ldr	r1, [pc, #16]	; (80958 <pmc_switch_mainck_to_xtal+0x48>)
   80948:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8094a:	4a04      	ldr	r2, [pc, #16]	; (8095c <pmc_switch_mainck_to_xtal+0x4c>)
   8094c:	401a      	ands	r2, r3
   8094e:	4b04      	ldr	r3, [pc, #16]	; (80960 <pmc_switch_mainck_to_xtal+0x50>)
   80950:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80952:	620b      	str	r3, [r1, #32]
   80954:	4770      	bx	lr
   80956:	bf00      	nop
   80958:	400e0600 	.word	0x400e0600
   8095c:	fec8fffc 	.word	0xfec8fffc
   80960:	01370002 	.word	0x01370002

00080964 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80964:	4b02      	ldr	r3, [pc, #8]	; (80970 <pmc_osc_is_ready_mainck+0xc>)
   80966:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80968:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop
   80970:	400e0600 	.word	0x400e0600

00080974 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80974:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80978:	4b01      	ldr	r3, [pc, #4]	; (80980 <pmc_disable_pllack+0xc>)
   8097a:	629a      	str	r2, [r3, #40]	; 0x28
   8097c:	4770      	bx	lr
   8097e:	bf00      	nop
   80980:	400e0600 	.word	0x400e0600

00080984 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80984:	4b02      	ldr	r3, [pc, #8]	; (80990 <pmc_is_locked_pllack+0xc>)
   80986:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80988:	f000 0002 	and.w	r0, r0, #2
   8098c:	4770      	bx	lr
   8098e:	bf00      	nop
   80990:	400e0600 	.word	0x400e0600

00080994 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80994:	282c      	cmp	r0, #44	; 0x2c
   80996:	d81e      	bhi.n	809d6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80998:	281f      	cmp	r0, #31
   8099a:	d80c      	bhi.n	809b6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8099c:	4b11      	ldr	r3, [pc, #68]	; (809e4 <pmc_enable_periph_clk+0x50>)
   8099e:	699a      	ldr	r2, [r3, #24]
   809a0:	2301      	movs	r3, #1
   809a2:	4083      	lsls	r3, r0
   809a4:	4393      	bics	r3, r2
   809a6:	d018      	beq.n	809da <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   809a8:	2301      	movs	r3, #1
   809aa:	fa03 f000 	lsl.w	r0, r3, r0
   809ae:	4b0d      	ldr	r3, [pc, #52]	; (809e4 <pmc_enable_periph_clk+0x50>)
   809b0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   809b2:	2000      	movs	r0, #0
   809b4:	4770      	bx	lr
		ul_id -= 32;
   809b6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809b8:	4b0a      	ldr	r3, [pc, #40]	; (809e4 <pmc_enable_periph_clk+0x50>)
   809ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   809be:	2301      	movs	r3, #1
   809c0:	4083      	lsls	r3, r0
   809c2:	4393      	bics	r3, r2
   809c4:	d00b      	beq.n	809de <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   809c6:	2301      	movs	r3, #1
   809c8:	fa03 f000 	lsl.w	r0, r3, r0
   809cc:	4b05      	ldr	r3, [pc, #20]	; (809e4 <pmc_enable_periph_clk+0x50>)
   809ce:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   809d2:	2000      	movs	r0, #0
   809d4:	4770      	bx	lr
		return 1;
   809d6:	2001      	movs	r0, #1
   809d8:	4770      	bx	lr
	return 0;
   809da:	2000      	movs	r0, #0
   809dc:	4770      	bx	lr
   809de:	2000      	movs	r0, #0
}
   809e0:	4770      	bx	lr
   809e2:	bf00      	nop
   809e4:	400e0600 	.word	0x400e0600

000809e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   809e8:	e7fe      	b.n	809e8 <Dummy_Handler>
	...

000809ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   809ec:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   809ee:	4b1c      	ldr	r3, [pc, #112]	; (80a60 <Reset_Handler+0x74>)
   809f0:	4a1c      	ldr	r2, [pc, #112]	; (80a64 <Reset_Handler+0x78>)
   809f2:	429a      	cmp	r2, r3
   809f4:	d010      	beq.n	80a18 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   809f6:	4b1c      	ldr	r3, [pc, #112]	; (80a68 <Reset_Handler+0x7c>)
   809f8:	4a19      	ldr	r2, [pc, #100]	; (80a60 <Reset_Handler+0x74>)
   809fa:	429a      	cmp	r2, r3
   809fc:	d20c      	bcs.n	80a18 <Reset_Handler+0x2c>
   809fe:	3b01      	subs	r3, #1
   80a00:	1a9b      	subs	r3, r3, r2
   80a02:	f023 0303 	bic.w	r3, r3, #3
   80a06:	3304      	adds	r3, #4
   80a08:	4413      	add	r3, r2
   80a0a:	4916      	ldr	r1, [pc, #88]	; (80a64 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80a0c:	f851 0b04 	ldr.w	r0, [r1], #4
   80a10:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80a14:	429a      	cmp	r2, r3
   80a16:	d1f9      	bne.n	80a0c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a18:	4b14      	ldr	r3, [pc, #80]	; (80a6c <Reset_Handler+0x80>)
   80a1a:	4a15      	ldr	r2, [pc, #84]	; (80a70 <Reset_Handler+0x84>)
   80a1c:	429a      	cmp	r2, r3
   80a1e:	d20a      	bcs.n	80a36 <Reset_Handler+0x4a>
   80a20:	3b01      	subs	r3, #1
   80a22:	1a9b      	subs	r3, r3, r2
   80a24:	f023 0303 	bic.w	r3, r3, #3
   80a28:	3304      	adds	r3, #4
   80a2a:	4413      	add	r3, r2
		*pDest++ = 0;
   80a2c:	2100      	movs	r1, #0
   80a2e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80a32:	4293      	cmp	r3, r2
   80a34:	d1fb      	bne.n	80a2e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a36:	4b0f      	ldr	r3, [pc, #60]	; (80a74 <Reset_Handler+0x88>)
   80a38:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80a3c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80a40:	490d      	ldr	r1, [pc, #52]	; (80a78 <Reset_Handler+0x8c>)
   80a42:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a44:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80a4c:	d203      	bcs.n	80a56 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80a4e:	688b      	ldr	r3, [r1, #8]
   80a50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80a54:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a56:	4b09      	ldr	r3, [pc, #36]	; (80a7c <Reset_Handler+0x90>)
   80a58:	4798      	blx	r3

	/* Branch to main function */
	main();
   80a5a:	4b09      	ldr	r3, [pc, #36]	; (80a80 <Reset_Handler+0x94>)
   80a5c:	4798      	blx	r3
   80a5e:	e7fe      	b.n	80a5e <Reset_Handler+0x72>
   80a60:	20070000 	.word	0x20070000
   80a64:	00083e1c 	.word	0x00083e1c
   80a68:	20070ae0 	.word	0x20070ae0
   80a6c:	20070c60 	.word	0x20070c60
   80a70:	20070ae0 	.word	0x20070ae0
   80a74:	00080000 	.word	0x00080000
   80a78:	e000ed00 	.word	0xe000ed00
   80a7c:	00080ddd 	.word	0x00080ddd
   80a80:	00080db1 	.word	0x00080db1

00080a84 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80a84:	4b3d      	ldr	r3, [pc, #244]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80a88:	f003 0303 	and.w	r3, r3, #3
   80a8c:	2b03      	cmp	r3, #3
   80a8e:	d80e      	bhi.n	80aae <SystemCoreClockUpdate+0x2a>
   80a90:	e8df f003 	tbb	[pc, r3]
   80a94:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80a98:	4b39      	ldr	r3, [pc, #228]	; (80b80 <SystemCoreClockUpdate+0xfc>)
   80a9a:	695b      	ldr	r3, [r3, #20]
   80a9c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80aa0:	bf14      	ite	ne
   80aa2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80aa6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80aaa:	4b36      	ldr	r3, [pc, #216]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80aac:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80aae:	4b33      	ldr	r3, [pc, #204]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ab6:	2b70      	cmp	r3, #112	; 0x70
   80ab8:	d057      	beq.n	80b6a <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80aba:	4b30      	ldr	r3, [pc, #192]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80abe:	4931      	ldr	r1, [pc, #196]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80ac0:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80ac4:	680b      	ldr	r3, [r1, #0]
   80ac6:	40d3      	lsrs	r3, r2
   80ac8:	600b      	str	r3, [r1, #0]
   80aca:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80acc:	4b2b      	ldr	r3, [pc, #172]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80ace:	6a1b      	ldr	r3, [r3, #32]
   80ad0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ad4:	d003      	beq.n	80ade <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ad6:	4a2c      	ldr	r2, [pc, #176]	; (80b88 <SystemCoreClockUpdate+0x104>)
   80ad8:	4b2a      	ldr	r3, [pc, #168]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80ada:	601a      	str	r2, [r3, #0]
   80adc:	e7e7      	b.n	80aae <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ade:	4a2b      	ldr	r2, [pc, #172]	; (80b8c <SystemCoreClockUpdate+0x108>)
   80ae0:	4b28      	ldr	r3, [pc, #160]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80ae2:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ae4:	4b25      	ldr	r3, [pc, #148]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80ae6:	6a1b      	ldr	r3, [r3, #32]
   80ae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80aec:	2b10      	cmp	r3, #16
   80aee:	d005      	beq.n	80afc <SystemCoreClockUpdate+0x78>
   80af0:	2b20      	cmp	r3, #32
   80af2:	d1dc      	bne.n	80aae <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80af4:	4a24      	ldr	r2, [pc, #144]	; (80b88 <SystemCoreClockUpdate+0x104>)
   80af6:	4b23      	ldr	r3, [pc, #140]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80af8:	601a      	str	r2, [r3, #0]
				break;
   80afa:	e7d8      	b.n	80aae <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80afc:	4a24      	ldr	r2, [pc, #144]	; (80b90 <SystemCoreClockUpdate+0x10c>)
   80afe:	4b21      	ldr	r3, [pc, #132]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80b00:	601a      	str	r2, [r3, #0]
				break;
   80b02:	e7d4      	b.n	80aae <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b04:	4b1d      	ldr	r3, [pc, #116]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80b06:	6a1b      	ldr	r3, [r3, #32]
   80b08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b0c:	d00c      	beq.n	80b28 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b0e:	4a1e      	ldr	r2, [pc, #120]	; (80b88 <SystemCoreClockUpdate+0x104>)
   80b10:	4b1c      	ldr	r3, [pc, #112]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80b12:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b14:	4b19      	ldr	r3, [pc, #100]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b18:	f003 0303 	and.w	r3, r3, #3
   80b1c:	2b02      	cmp	r3, #2
   80b1e:	d016      	beq.n	80b4e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b20:	4a1c      	ldr	r2, [pc, #112]	; (80b94 <SystemCoreClockUpdate+0x110>)
   80b22:	4b18      	ldr	r3, [pc, #96]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80b24:	601a      	str	r2, [r3, #0]
   80b26:	e7c2      	b.n	80aae <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b28:	4a18      	ldr	r2, [pc, #96]	; (80b8c <SystemCoreClockUpdate+0x108>)
   80b2a:	4b16      	ldr	r3, [pc, #88]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80b2c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b2e:	4b13      	ldr	r3, [pc, #76]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80b30:	6a1b      	ldr	r3, [r3, #32]
   80b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b36:	2b10      	cmp	r3, #16
   80b38:	d005      	beq.n	80b46 <SystemCoreClockUpdate+0xc2>
   80b3a:	2b20      	cmp	r3, #32
   80b3c:	d1ea      	bne.n	80b14 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80b3e:	4a12      	ldr	r2, [pc, #72]	; (80b88 <SystemCoreClockUpdate+0x104>)
   80b40:	4b10      	ldr	r3, [pc, #64]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80b42:	601a      	str	r2, [r3, #0]
				break;
   80b44:	e7e6      	b.n	80b14 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80b46:	4a12      	ldr	r2, [pc, #72]	; (80b90 <SystemCoreClockUpdate+0x10c>)
   80b48:	4b0e      	ldr	r3, [pc, #56]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80b4a:	601a      	str	r2, [r3, #0]
				break;
   80b4c:	e7e2      	b.n	80b14 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b4e:	4a0b      	ldr	r2, [pc, #44]	; (80b7c <SystemCoreClockUpdate+0xf8>)
   80b50:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b52:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80b54:	480b      	ldr	r0, [pc, #44]	; (80b84 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b56:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80b5a:	6803      	ldr	r3, [r0, #0]
   80b5c:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b60:	b2d2      	uxtb	r2, r2
   80b62:	fbb3 f3f2 	udiv	r3, r3, r2
   80b66:	6003      	str	r3, [r0, #0]
   80b68:	e7a1      	b.n	80aae <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80b6a:	4a06      	ldr	r2, [pc, #24]	; (80b84 <SystemCoreClockUpdate+0x100>)
   80b6c:	6813      	ldr	r3, [r2, #0]
   80b6e:	490a      	ldr	r1, [pc, #40]	; (80b98 <SystemCoreClockUpdate+0x114>)
   80b70:	fba1 1303 	umull	r1, r3, r1, r3
   80b74:	085b      	lsrs	r3, r3, #1
   80b76:	6013      	str	r3, [r2, #0]
   80b78:	4770      	bx	lr
   80b7a:	bf00      	nop
   80b7c:	400e0600 	.word	0x400e0600
   80b80:	400e1a10 	.word	0x400e1a10
   80b84:	20070130 	.word	0x20070130
   80b88:	00b71b00 	.word	0x00b71b00
   80b8c:	003d0900 	.word	0x003d0900
   80b90:	007a1200 	.word	0x007a1200
   80b94:	0e4e1c00 	.word	0x0e4e1c00
   80b98:	aaaaaaab 	.word	0xaaaaaaab

00080b9c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80b9c:	4b0a      	ldr	r3, [pc, #40]	; (80bc8 <_sbrk+0x2c>)
   80b9e:	681b      	ldr	r3, [r3, #0]
   80ba0:	b153      	cbz	r3, 80bb8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80ba2:	4b09      	ldr	r3, [pc, #36]	; (80bc8 <_sbrk+0x2c>)
   80ba4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ba6:	181a      	adds	r2, r3, r0
   80ba8:	4908      	ldr	r1, [pc, #32]	; (80bcc <_sbrk+0x30>)
   80baa:	4291      	cmp	r1, r2
   80bac:	db08      	blt.n	80bc0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80bae:	4610      	mov	r0, r2
   80bb0:	4a05      	ldr	r2, [pc, #20]	; (80bc8 <_sbrk+0x2c>)
   80bb2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80bb4:	4618      	mov	r0, r3
   80bb6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80bb8:	4a05      	ldr	r2, [pc, #20]	; (80bd0 <_sbrk+0x34>)
   80bba:	4b03      	ldr	r3, [pc, #12]	; (80bc8 <_sbrk+0x2c>)
   80bbc:	601a      	str	r2, [r3, #0]
   80bbe:	e7f0      	b.n	80ba2 <_sbrk+0x6>
		return (caddr_t) -1;	
   80bc0:	f04f 30ff 	mov.w	r0, #4294967295
}
   80bc4:	4770      	bx	lr
   80bc6:	bf00      	nop
   80bc8:	20070bf4 	.word	0x20070bf4
   80bcc:	20087ffc 	.word	0x20087ffc
   80bd0:	20072c60 	.word	0x20072c60

00080bd4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80bd4:	f04f 30ff 	mov.w	r0, #4294967295
   80bd8:	4770      	bx	lr

00080bda <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80bde:	604b      	str	r3, [r1, #4]

	return 0;
}
   80be0:	2000      	movs	r0, #0
   80be2:	4770      	bx	lr

00080be4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80be4:	2001      	movs	r0, #1
   80be6:	4770      	bx	lr

00080be8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80be8:	2000      	movs	r0, #0
   80bea:	4770      	bx	lr

00080bec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   80bee:	b083      	sub	sp, #12
   80bf0:	4604      	mov	r4, r0
   80bf2:	460d      	mov	r5, r1
	uint32_t val = 0;
   80bf4:	2300      	movs	r3, #0
   80bf6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80bf8:	4b20      	ldr	r3, [pc, #128]	; (80c7c <usart_serial_getchar+0x90>)
   80bfa:	4298      	cmp	r0, r3
   80bfc:	d00d      	beq.n	80c1a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80bfe:	4b20      	ldr	r3, [pc, #128]	; (80c80 <usart_serial_getchar+0x94>)
   80c00:	4298      	cmp	r0, r3
   80c02:	d012      	beq.n	80c2a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c04:	4b1f      	ldr	r3, [pc, #124]	; (80c84 <usart_serial_getchar+0x98>)
   80c06:	4298      	cmp	r0, r3
   80c08:	d019      	beq.n	80c3e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c0a:	4b1f      	ldr	r3, [pc, #124]	; (80c88 <usart_serial_getchar+0x9c>)
   80c0c:	429c      	cmp	r4, r3
   80c0e:	d020      	beq.n	80c52 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c10:	4b1e      	ldr	r3, [pc, #120]	; (80c8c <usart_serial_getchar+0xa0>)
   80c12:	429c      	cmp	r4, r3
   80c14:	d027      	beq.n	80c66 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80c16:	b003      	add	sp, #12
   80c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80c1a:	461f      	mov	r7, r3
   80c1c:	4e1c      	ldr	r6, [pc, #112]	; (80c90 <usart_serial_getchar+0xa4>)
   80c1e:	4629      	mov	r1, r5
   80c20:	4638      	mov	r0, r7
   80c22:	47b0      	blx	r6
   80c24:	2800      	cmp	r0, #0
   80c26:	d1fa      	bne.n	80c1e <usart_serial_getchar+0x32>
   80c28:	e7ef      	b.n	80c0a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80c2a:	461f      	mov	r7, r3
   80c2c:	4e19      	ldr	r6, [pc, #100]	; (80c94 <usart_serial_getchar+0xa8>)
   80c2e:	a901      	add	r1, sp, #4
   80c30:	4638      	mov	r0, r7
   80c32:	47b0      	blx	r6
   80c34:	2800      	cmp	r0, #0
   80c36:	d1fa      	bne.n	80c2e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80c38:	9b01      	ldr	r3, [sp, #4]
   80c3a:	702b      	strb	r3, [r5, #0]
   80c3c:	e7e8      	b.n	80c10 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80c3e:	461e      	mov	r6, r3
   80c40:	4c14      	ldr	r4, [pc, #80]	; (80c94 <usart_serial_getchar+0xa8>)
   80c42:	a901      	add	r1, sp, #4
   80c44:	4630      	mov	r0, r6
   80c46:	47a0      	blx	r4
   80c48:	2800      	cmp	r0, #0
   80c4a:	d1fa      	bne.n	80c42 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80c4c:	9b01      	ldr	r3, [sp, #4]
   80c4e:	702b      	strb	r3, [r5, #0]
   80c50:	e7e1      	b.n	80c16 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80c52:	461e      	mov	r6, r3
   80c54:	4c0f      	ldr	r4, [pc, #60]	; (80c94 <usart_serial_getchar+0xa8>)
   80c56:	a901      	add	r1, sp, #4
   80c58:	4630      	mov	r0, r6
   80c5a:	47a0      	blx	r4
   80c5c:	2800      	cmp	r0, #0
   80c5e:	d1fa      	bne.n	80c56 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80c60:	9b01      	ldr	r3, [sp, #4]
   80c62:	702b      	strb	r3, [r5, #0]
   80c64:	e7d7      	b.n	80c16 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80c66:	461e      	mov	r6, r3
   80c68:	4c0a      	ldr	r4, [pc, #40]	; (80c94 <usart_serial_getchar+0xa8>)
   80c6a:	a901      	add	r1, sp, #4
   80c6c:	4630      	mov	r0, r6
   80c6e:	47a0      	blx	r4
   80c70:	2800      	cmp	r0, #0
   80c72:	d1fa      	bne.n	80c6a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80c74:	9b01      	ldr	r3, [sp, #4]
   80c76:	702b      	strb	r3, [r5, #0]
}
   80c78:	e7cd      	b.n	80c16 <usart_serial_getchar+0x2a>
   80c7a:	bf00      	nop
   80c7c:	400e0800 	.word	0x400e0800
   80c80:	40098000 	.word	0x40098000
   80c84:	4009c000 	.word	0x4009c000
   80c88:	400a0000 	.word	0x400a0000
   80c8c:	400a4000 	.word	0x400a4000
   80c90:	00080233 	.word	0x00080233
   80c94:	00080259 	.word	0x00080259

00080c98 <usart_serial_putchar>:
{
   80c98:	b570      	push	{r4, r5, r6, lr}
   80c9a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80c9c:	4b1e      	ldr	r3, [pc, #120]	; (80d18 <usart_serial_putchar+0x80>)
   80c9e:	4298      	cmp	r0, r3
   80ca0:	d00d      	beq.n	80cbe <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80ca2:	4b1e      	ldr	r3, [pc, #120]	; (80d1c <usart_serial_putchar+0x84>)
   80ca4:	4298      	cmp	r0, r3
   80ca6:	d013      	beq.n	80cd0 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80ca8:	4b1d      	ldr	r3, [pc, #116]	; (80d20 <usart_serial_putchar+0x88>)
   80caa:	4298      	cmp	r0, r3
   80cac:	d019      	beq.n	80ce2 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80cae:	4b1d      	ldr	r3, [pc, #116]	; (80d24 <usart_serial_putchar+0x8c>)
   80cb0:	4298      	cmp	r0, r3
   80cb2:	d01f      	beq.n	80cf4 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80cb4:	4b1c      	ldr	r3, [pc, #112]	; (80d28 <usart_serial_putchar+0x90>)
   80cb6:	4298      	cmp	r0, r3
   80cb8:	d025      	beq.n	80d06 <usart_serial_putchar+0x6e>
	return 0;
   80cba:	2000      	movs	r0, #0
}
   80cbc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80cbe:	461e      	mov	r6, r3
   80cc0:	4d1a      	ldr	r5, [pc, #104]	; (80d2c <usart_serial_putchar+0x94>)
   80cc2:	4621      	mov	r1, r4
   80cc4:	4630      	mov	r0, r6
   80cc6:	47a8      	blx	r5
   80cc8:	2800      	cmp	r0, #0
   80cca:	d1fa      	bne.n	80cc2 <usart_serial_putchar+0x2a>
		return 1;
   80ccc:	2001      	movs	r0, #1
   80cce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80cd0:	461e      	mov	r6, r3
   80cd2:	4d17      	ldr	r5, [pc, #92]	; (80d30 <usart_serial_putchar+0x98>)
   80cd4:	4621      	mov	r1, r4
   80cd6:	4630      	mov	r0, r6
   80cd8:	47a8      	blx	r5
   80cda:	2800      	cmp	r0, #0
   80cdc:	d1fa      	bne.n	80cd4 <usart_serial_putchar+0x3c>
		return 1;
   80cde:	2001      	movs	r0, #1
   80ce0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80ce2:	461e      	mov	r6, r3
   80ce4:	4d12      	ldr	r5, [pc, #72]	; (80d30 <usart_serial_putchar+0x98>)
   80ce6:	4621      	mov	r1, r4
   80ce8:	4630      	mov	r0, r6
   80cea:	47a8      	blx	r5
   80cec:	2800      	cmp	r0, #0
   80cee:	d1fa      	bne.n	80ce6 <usart_serial_putchar+0x4e>
		return 1;
   80cf0:	2001      	movs	r0, #1
   80cf2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80cf4:	461e      	mov	r6, r3
   80cf6:	4d0e      	ldr	r5, [pc, #56]	; (80d30 <usart_serial_putchar+0x98>)
   80cf8:	4621      	mov	r1, r4
   80cfa:	4630      	mov	r0, r6
   80cfc:	47a8      	blx	r5
   80cfe:	2800      	cmp	r0, #0
   80d00:	d1fa      	bne.n	80cf8 <usart_serial_putchar+0x60>
		return 1;
   80d02:	2001      	movs	r0, #1
   80d04:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d06:	461e      	mov	r6, r3
   80d08:	4d09      	ldr	r5, [pc, #36]	; (80d30 <usart_serial_putchar+0x98>)
   80d0a:	4621      	mov	r1, r4
   80d0c:	4630      	mov	r0, r6
   80d0e:	47a8      	blx	r5
   80d10:	2800      	cmp	r0, #0
   80d12:	d1fa      	bne.n	80d0a <usart_serial_putchar+0x72>
		return 1;
   80d14:	2001      	movs	r0, #1
   80d16:	bd70      	pop	{r4, r5, r6, pc}
   80d18:	400e0800 	.word	0x400e0800
   80d1c:	40098000 	.word	0x40098000
   80d20:	4009c000 	.word	0x4009c000
   80d24:	400a0000 	.word	0x400a0000
   80d28:	400a4000 	.word	0x400a4000
   80d2c:	00080223 	.word	0x00080223
   80d30:	00080245 	.word	0x00080245

00080d34 <config_console_uart>:
#include "stdio_serial.h"



void config_console_uart(void)
{
   80d34:	b530      	push	{r4, r5, lr}
   80d36:	b085      	sub	sp, #20
   80d38:	2008      	movs	r0, #8
   80d3a:	4d12      	ldr	r5, [pc, #72]	; (80d84 <config_console_uart+0x50>)
   80d3c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80d3e:	4c12      	ldr	r4, [pc, #72]	; (80d88 <config_console_uart+0x54>)
   80d40:	4b12      	ldr	r3, [pc, #72]	; (80d8c <config_console_uart+0x58>)
   80d42:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80d44:	4a12      	ldr	r2, [pc, #72]	; (80d90 <config_console_uart+0x5c>)
   80d46:	4b13      	ldr	r3, [pc, #76]	; (80d94 <config_console_uart+0x60>)
   80d48:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80d4a:	4a13      	ldr	r2, [pc, #76]	; (80d98 <config_console_uart+0x64>)
   80d4c:	4b13      	ldr	r3, [pc, #76]	; (80d9c <config_console_uart+0x68>)
   80d4e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80d50:	4b13      	ldr	r3, [pc, #76]	; (80da0 <config_console_uart+0x6c>)
   80d52:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80d54:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80d58:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80d5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d5e:	9303      	str	r3, [sp, #12]
   80d60:	2008      	movs	r0, #8
   80d62:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80d64:	a901      	add	r1, sp, #4
   80d66:	4620      	mov	r0, r4
   80d68:	4b0e      	ldr	r3, [pc, #56]	; (80da4 <config_console_uart+0x70>)
   80d6a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80d6c:	4d0e      	ldr	r5, [pc, #56]	; (80da8 <config_console_uart+0x74>)
   80d6e:	682b      	ldr	r3, [r5, #0]
   80d70:	2100      	movs	r1, #0
   80d72:	6898      	ldr	r0, [r3, #8]
   80d74:	4c0d      	ldr	r4, [pc, #52]	; (80dac <config_console_uart+0x78>)
   80d76:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80d78:	682b      	ldr	r3, [r5, #0]
   80d7a:	2100      	movs	r1, #0
   80d7c:	6858      	ldr	r0, [r3, #4]
   80d7e:	47a0      	blx	r4
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
	
}
   80d80:	b005      	add	sp, #20
   80d82:	bd30      	pop	{r4, r5, pc}
   80d84:	00080995 	.word	0x00080995
   80d88:	400e0800 	.word	0x400e0800
   80d8c:	20070c34 	.word	0x20070c34
   80d90:	00080c99 	.word	0x00080c99
   80d94:	20070c30 	.word	0x20070c30
   80d98:	00080bed 	.word	0x00080bed
   80d9c:	20070c2c 	.word	0x20070c2c
   80da0:	0501bd00 	.word	0x0501bd00
   80da4:	000801ed 	.word	0x000801ed
   80da8:	20070134 	.word	0x20070134
   80dac:	00080fdd 	.word	0x00080fdd

00080db0 <main>:

int main (void)
{
   80db0:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	
	sysclk_init();
   80db2:	4b05      	ldr	r3, [pc, #20]	; (80dc8 <main+0x18>)
   80db4:	4798      	blx	r3

	board_init();
   80db6:	4b05      	ldr	r3, [pc, #20]	; (80dcc <main+0x1c>)
   80db8:	4798      	blx	r3
	
	config_console_uart();
   80dba:	4b05      	ldr	r3, [pc, #20]	; (80dd0 <main+0x20>)
   80dbc:	4798      	blx	r3
	
	printf("This is Arduino Console UART Application.\n");
   80dbe:	4805      	ldr	r0, [pc, #20]	; (80dd4 <main+0x24>)
   80dc0:	4b05      	ldr	r3, [pc, #20]	; (80dd8 <main+0x28>)
   80dc2:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
}
   80dc4:	2000      	movs	r0, #0
   80dc6:	bd08      	pop	{r3, pc}
   80dc8:	0008051d 	.word	0x0008051d
   80dcc:	00080581 	.word	0x00080581
   80dd0:	00080d35 	.word	0x00080d35
   80dd4:	00083c5c 	.word	0x00083c5c
   80dd8:	00080e2d 	.word	0x00080e2d

00080ddc <__libc_init_array>:
   80ddc:	b570      	push	{r4, r5, r6, lr}
   80dde:	4e0f      	ldr	r6, [pc, #60]	; (80e1c <__libc_init_array+0x40>)
   80de0:	4d0f      	ldr	r5, [pc, #60]	; (80e20 <__libc_init_array+0x44>)
   80de2:	1b76      	subs	r6, r6, r5
   80de4:	10b6      	asrs	r6, r6, #2
   80de6:	bf18      	it	ne
   80de8:	2400      	movne	r4, #0
   80dea:	d005      	beq.n	80df8 <__libc_init_array+0x1c>
   80dec:	3401      	adds	r4, #1
   80dee:	f855 3b04 	ldr.w	r3, [r5], #4
   80df2:	4798      	blx	r3
   80df4:	42a6      	cmp	r6, r4
   80df6:	d1f9      	bne.n	80dec <__libc_init_array+0x10>
   80df8:	4e0a      	ldr	r6, [pc, #40]	; (80e24 <__libc_init_array+0x48>)
   80dfa:	4d0b      	ldr	r5, [pc, #44]	; (80e28 <__libc_init_array+0x4c>)
   80dfc:	f002 fff8 	bl	83df0 <_init>
   80e00:	1b76      	subs	r6, r6, r5
   80e02:	10b6      	asrs	r6, r6, #2
   80e04:	bf18      	it	ne
   80e06:	2400      	movne	r4, #0
   80e08:	d006      	beq.n	80e18 <__libc_init_array+0x3c>
   80e0a:	3401      	adds	r4, #1
   80e0c:	f855 3b04 	ldr.w	r3, [r5], #4
   80e10:	4798      	blx	r3
   80e12:	42a6      	cmp	r6, r4
   80e14:	d1f9      	bne.n	80e0a <__libc_init_array+0x2e>
   80e16:	bd70      	pop	{r4, r5, r6, pc}
   80e18:	bd70      	pop	{r4, r5, r6, pc}
   80e1a:	bf00      	nop
   80e1c:	00083dfc 	.word	0x00083dfc
   80e20:	00083dfc 	.word	0x00083dfc
   80e24:	00083e04 	.word	0x00083e04
   80e28:	00083dfc 	.word	0x00083dfc

00080e2c <iprintf>:
   80e2c:	b40f      	push	{r0, r1, r2, r3}
   80e2e:	b510      	push	{r4, lr}
   80e30:	4b07      	ldr	r3, [pc, #28]	; (80e50 <iprintf+0x24>)
   80e32:	b082      	sub	sp, #8
   80e34:	ac04      	add	r4, sp, #16
   80e36:	f854 2b04 	ldr.w	r2, [r4], #4
   80e3a:	6818      	ldr	r0, [r3, #0]
   80e3c:	4623      	mov	r3, r4
   80e3e:	6881      	ldr	r1, [r0, #8]
   80e40:	9401      	str	r4, [sp, #4]
   80e42:	f000 fa09 	bl	81258 <_vfiprintf_r>
   80e46:	b002      	add	sp, #8
   80e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80e4c:	b004      	add	sp, #16
   80e4e:	4770      	bx	lr
   80e50:	20070134 	.word	0x20070134

00080e54 <memcpy>:
   80e54:	4684      	mov	ip, r0
   80e56:	ea41 0300 	orr.w	r3, r1, r0
   80e5a:	f013 0303 	ands.w	r3, r3, #3
   80e5e:	d149      	bne.n	80ef4 <memcpy+0xa0>
   80e60:	3a40      	subs	r2, #64	; 0x40
   80e62:	d323      	bcc.n	80eac <memcpy+0x58>
   80e64:	680b      	ldr	r3, [r1, #0]
   80e66:	6003      	str	r3, [r0, #0]
   80e68:	684b      	ldr	r3, [r1, #4]
   80e6a:	6043      	str	r3, [r0, #4]
   80e6c:	688b      	ldr	r3, [r1, #8]
   80e6e:	6083      	str	r3, [r0, #8]
   80e70:	68cb      	ldr	r3, [r1, #12]
   80e72:	60c3      	str	r3, [r0, #12]
   80e74:	690b      	ldr	r3, [r1, #16]
   80e76:	6103      	str	r3, [r0, #16]
   80e78:	694b      	ldr	r3, [r1, #20]
   80e7a:	6143      	str	r3, [r0, #20]
   80e7c:	698b      	ldr	r3, [r1, #24]
   80e7e:	6183      	str	r3, [r0, #24]
   80e80:	69cb      	ldr	r3, [r1, #28]
   80e82:	61c3      	str	r3, [r0, #28]
   80e84:	6a0b      	ldr	r3, [r1, #32]
   80e86:	6203      	str	r3, [r0, #32]
   80e88:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   80e8a:	6243      	str	r3, [r0, #36]	; 0x24
   80e8c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   80e8e:	6283      	str	r3, [r0, #40]	; 0x28
   80e90:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   80e92:	62c3      	str	r3, [r0, #44]	; 0x2c
   80e94:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80e96:	6303      	str	r3, [r0, #48]	; 0x30
   80e98:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   80e9a:	6343      	str	r3, [r0, #52]	; 0x34
   80e9c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   80e9e:	6383      	str	r3, [r0, #56]	; 0x38
   80ea0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   80ea2:	63c3      	str	r3, [r0, #60]	; 0x3c
   80ea4:	3040      	adds	r0, #64	; 0x40
   80ea6:	3140      	adds	r1, #64	; 0x40
   80ea8:	3a40      	subs	r2, #64	; 0x40
   80eaa:	d2db      	bcs.n	80e64 <memcpy+0x10>
   80eac:	3230      	adds	r2, #48	; 0x30
   80eae:	d30b      	bcc.n	80ec8 <memcpy+0x74>
   80eb0:	680b      	ldr	r3, [r1, #0]
   80eb2:	6003      	str	r3, [r0, #0]
   80eb4:	684b      	ldr	r3, [r1, #4]
   80eb6:	6043      	str	r3, [r0, #4]
   80eb8:	688b      	ldr	r3, [r1, #8]
   80eba:	6083      	str	r3, [r0, #8]
   80ebc:	68cb      	ldr	r3, [r1, #12]
   80ebe:	60c3      	str	r3, [r0, #12]
   80ec0:	3010      	adds	r0, #16
   80ec2:	3110      	adds	r1, #16
   80ec4:	3a10      	subs	r2, #16
   80ec6:	d2f3      	bcs.n	80eb0 <memcpy+0x5c>
   80ec8:	320c      	adds	r2, #12
   80eca:	d305      	bcc.n	80ed8 <memcpy+0x84>
   80ecc:	f851 3b04 	ldr.w	r3, [r1], #4
   80ed0:	f840 3b04 	str.w	r3, [r0], #4
   80ed4:	3a04      	subs	r2, #4
   80ed6:	d2f9      	bcs.n	80ecc <memcpy+0x78>
   80ed8:	3204      	adds	r2, #4
   80eda:	d008      	beq.n	80eee <memcpy+0x9a>
   80edc:	07d2      	lsls	r2, r2, #31
   80ede:	bf1c      	itt	ne
   80ee0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   80ee4:	f800 3b01 	strbne.w	r3, [r0], #1
   80ee8:	d301      	bcc.n	80eee <memcpy+0x9a>
   80eea:	880b      	ldrh	r3, [r1, #0]
   80eec:	8003      	strh	r3, [r0, #0]
   80eee:	4660      	mov	r0, ip
   80ef0:	4770      	bx	lr
   80ef2:	bf00      	nop
   80ef4:	2a08      	cmp	r2, #8
   80ef6:	d313      	bcc.n	80f20 <memcpy+0xcc>
   80ef8:	078b      	lsls	r3, r1, #30
   80efa:	d0b1      	beq.n	80e60 <memcpy+0xc>
   80efc:	f010 0303 	ands.w	r3, r0, #3
   80f00:	d0ae      	beq.n	80e60 <memcpy+0xc>
   80f02:	f1c3 0304 	rsb	r3, r3, #4
   80f06:	1ad2      	subs	r2, r2, r3
   80f08:	07db      	lsls	r3, r3, #31
   80f0a:	bf1c      	itt	ne
   80f0c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   80f10:	f800 3b01 	strbne.w	r3, [r0], #1
   80f14:	d3a4      	bcc.n	80e60 <memcpy+0xc>
   80f16:	f831 3b02 	ldrh.w	r3, [r1], #2
   80f1a:	f820 3b02 	strh.w	r3, [r0], #2
   80f1e:	e79f      	b.n	80e60 <memcpy+0xc>
   80f20:	3a04      	subs	r2, #4
   80f22:	d3d9      	bcc.n	80ed8 <memcpy+0x84>
   80f24:	3a01      	subs	r2, #1
   80f26:	f811 3b01 	ldrb.w	r3, [r1], #1
   80f2a:	f800 3b01 	strb.w	r3, [r0], #1
   80f2e:	d2f9      	bcs.n	80f24 <memcpy+0xd0>
   80f30:	780b      	ldrb	r3, [r1, #0]
   80f32:	7003      	strb	r3, [r0, #0]
   80f34:	784b      	ldrb	r3, [r1, #1]
   80f36:	7043      	strb	r3, [r0, #1]
   80f38:	788b      	ldrb	r3, [r1, #2]
   80f3a:	7083      	strb	r3, [r0, #2]
   80f3c:	4660      	mov	r0, ip
   80f3e:	4770      	bx	lr

00080f40 <memset>:
   80f40:	b470      	push	{r4, r5, r6}
   80f42:	0786      	lsls	r6, r0, #30
   80f44:	d046      	beq.n	80fd4 <memset+0x94>
   80f46:	1e54      	subs	r4, r2, #1
   80f48:	2a00      	cmp	r2, #0
   80f4a:	d041      	beq.n	80fd0 <memset+0x90>
   80f4c:	b2ca      	uxtb	r2, r1
   80f4e:	4603      	mov	r3, r0
   80f50:	e002      	b.n	80f58 <memset+0x18>
   80f52:	f114 34ff 	adds.w	r4, r4, #4294967295
   80f56:	d33b      	bcc.n	80fd0 <memset+0x90>
   80f58:	f803 2b01 	strb.w	r2, [r3], #1
   80f5c:	079d      	lsls	r5, r3, #30
   80f5e:	d1f8      	bne.n	80f52 <memset+0x12>
   80f60:	2c03      	cmp	r4, #3
   80f62:	d92e      	bls.n	80fc2 <memset+0x82>
   80f64:	b2cd      	uxtb	r5, r1
   80f66:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80f6a:	2c0f      	cmp	r4, #15
   80f6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80f70:	d919      	bls.n	80fa6 <memset+0x66>
   80f72:	4626      	mov	r6, r4
   80f74:	f103 0210 	add.w	r2, r3, #16
   80f78:	3e10      	subs	r6, #16
   80f7a:	2e0f      	cmp	r6, #15
   80f7c:	f842 5c10 	str.w	r5, [r2, #-16]
   80f80:	f842 5c0c 	str.w	r5, [r2, #-12]
   80f84:	f842 5c08 	str.w	r5, [r2, #-8]
   80f88:	f842 5c04 	str.w	r5, [r2, #-4]
   80f8c:	f102 0210 	add.w	r2, r2, #16
   80f90:	d8f2      	bhi.n	80f78 <memset+0x38>
   80f92:	f1a4 0210 	sub.w	r2, r4, #16
   80f96:	f022 020f 	bic.w	r2, r2, #15
   80f9a:	f004 040f 	and.w	r4, r4, #15
   80f9e:	3210      	adds	r2, #16
   80fa0:	2c03      	cmp	r4, #3
   80fa2:	4413      	add	r3, r2
   80fa4:	d90d      	bls.n	80fc2 <memset+0x82>
   80fa6:	461e      	mov	r6, r3
   80fa8:	4622      	mov	r2, r4
   80faa:	3a04      	subs	r2, #4
   80fac:	2a03      	cmp	r2, #3
   80fae:	f846 5b04 	str.w	r5, [r6], #4
   80fb2:	d8fa      	bhi.n	80faa <memset+0x6a>
   80fb4:	1f22      	subs	r2, r4, #4
   80fb6:	f022 0203 	bic.w	r2, r2, #3
   80fba:	3204      	adds	r2, #4
   80fbc:	4413      	add	r3, r2
   80fbe:	f004 0403 	and.w	r4, r4, #3
   80fc2:	b12c      	cbz	r4, 80fd0 <memset+0x90>
   80fc4:	b2c9      	uxtb	r1, r1
   80fc6:	441c      	add	r4, r3
   80fc8:	f803 1b01 	strb.w	r1, [r3], #1
   80fcc:	429c      	cmp	r4, r3
   80fce:	d1fb      	bne.n	80fc8 <memset+0x88>
   80fd0:	bc70      	pop	{r4, r5, r6}
   80fd2:	4770      	bx	lr
   80fd4:	4614      	mov	r4, r2
   80fd6:	4603      	mov	r3, r0
   80fd8:	e7c2      	b.n	80f60 <memset+0x20>
   80fda:	bf00      	nop

00080fdc <setbuf>:
   80fdc:	2900      	cmp	r1, #0
   80fde:	bf0c      	ite	eq
   80fe0:	2202      	moveq	r2, #2
   80fe2:	2200      	movne	r2, #0
   80fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80fe8:	f000 b800 	b.w	80fec <setvbuf>

00080fec <setvbuf>:
   80fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80ff0:	4d61      	ldr	r5, [pc, #388]	; (81178 <setvbuf+0x18c>)
   80ff2:	b083      	sub	sp, #12
   80ff4:	682d      	ldr	r5, [r5, #0]
   80ff6:	4604      	mov	r4, r0
   80ff8:	460f      	mov	r7, r1
   80ffa:	4690      	mov	r8, r2
   80ffc:	461e      	mov	r6, r3
   80ffe:	b115      	cbz	r5, 81006 <setvbuf+0x1a>
   81000:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81002:	2b00      	cmp	r3, #0
   81004:	d064      	beq.n	810d0 <setvbuf+0xe4>
   81006:	f1b8 0f02 	cmp.w	r8, #2
   8100a:	d006      	beq.n	8101a <setvbuf+0x2e>
   8100c:	f1b8 0f01 	cmp.w	r8, #1
   81010:	f200 809f 	bhi.w	81152 <setvbuf+0x166>
   81014:	2e00      	cmp	r6, #0
   81016:	f2c0 809c 	blt.w	81152 <setvbuf+0x166>
   8101a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8101c:	07d8      	lsls	r0, r3, #31
   8101e:	d534      	bpl.n	8108a <setvbuf+0x9e>
   81020:	4621      	mov	r1, r4
   81022:	4628      	mov	r0, r5
   81024:	f001 f8b0 	bl	82188 <_fflush_r>
   81028:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8102a:	b141      	cbz	r1, 8103e <setvbuf+0x52>
   8102c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81030:	4299      	cmp	r1, r3
   81032:	d002      	beq.n	8103a <setvbuf+0x4e>
   81034:	4628      	mov	r0, r5
   81036:	f001 fa25 	bl	82484 <_free_r>
   8103a:	2300      	movs	r3, #0
   8103c:	6323      	str	r3, [r4, #48]	; 0x30
   8103e:	2200      	movs	r2, #0
   81040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81044:	61a2      	str	r2, [r4, #24]
   81046:	6062      	str	r2, [r4, #4]
   81048:	061a      	lsls	r2, r3, #24
   8104a:	d43a      	bmi.n	810c2 <setvbuf+0xd6>
   8104c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81050:	f023 0303 	bic.w	r3, r3, #3
   81054:	f1b8 0f02 	cmp.w	r8, #2
   81058:	81a3      	strh	r3, [r4, #12]
   8105a:	d01d      	beq.n	81098 <setvbuf+0xac>
   8105c:	ab01      	add	r3, sp, #4
   8105e:	466a      	mov	r2, sp
   81060:	4621      	mov	r1, r4
   81062:	4628      	mov	r0, r5
   81064:	f001 fcac 	bl	829c0 <__swhatbuf_r>
   81068:	89a3      	ldrh	r3, [r4, #12]
   8106a:	4318      	orrs	r0, r3
   8106c:	81a0      	strh	r0, [r4, #12]
   8106e:	2e00      	cmp	r6, #0
   81070:	d132      	bne.n	810d8 <setvbuf+0xec>
   81072:	9e00      	ldr	r6, [sp, #0]
   81074:	4630      	mov	r0, r6
   81076:	f001 fd1b 	bl	82ab0 <malloc>
   8107a:	4607      	mov	r7, r0
   8107c:	2800      	cmp	r0, #0
   8107e:	d06b      	beq.n	81158 <setvbuf+0x16c>
   81080:	89a3      	ldrh	r3, [r4, #12]
   81082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81086:	81a3      	strh	r3, [r4, #12]
   81088:	e028      	b.n	810dc <setvbuf+0xf0>
   8108a:	89a3      	ldrh	r3, [r4, #12]
   8108c:	0599      	lsls	r1, r3, #22
   8108e:	d4c7      	bmi.n	81020 <setvbuf+0x34>
   81090:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81092:	f001 fc91 	bl	829b8 <__retarget_lock_acquire_recursive>
   81096:	e7c3      	b.n	81020 <setvbuf+0x34>
   81098:	2500      	movs	r5, #0
   8109a:	2600      	movs	r6, #0
   8109c:	2001      	movs	r0, #1
   8109e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   810a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   810a4:	f043 0302 	orr.w	r3, r3, #2
   810a8:	60a6      	str	r6, [r4, #8]
   810aa:	07ce      	lsls	r6, r1, #31
   810ac:	81a3      	strh	r3, [r4, #12]
   810ae:	6160      	str	r0, [r4, #20]
   810b0:	6022      	str	r2, [r4, #0]
   810b2:	6122      	str	r2, [r4, #16]
   810b4:	d401      	bmi.n	810ba <setvbuf+0xce>
   810b6:	0598      	lsls	r0, r3, #22
   810b8:	d53e      	bpl.n	81138 <setvbuf+0x14c>
   810ba:	4628      	mov	r0, r5
   810bc:	b003      	add	sp, #12
   810be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   810c2:	6921      	ldr	r1, [r4, #16]
   810c4:	4628      	mov	r0, r5
   810c6:	f001 f9dd 	bl	82484 <_free_r>
   810ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   810ce:	e7bd      	b.n	8104c <setvbuf+0x60>
   810d0:	4628      	mov	r0, r5
   810d2:	f001 f8b1 	bl	82238 <__sinit>
   810d6:	e796      	b.n	81006 <setvbuf+0x1a>
   810d8:	2f00      	cmp	r7, #0
   810da:	d0cb      	beq.n	81074 <setvbuf+0x88>
   810dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   810de:	2b00      	cmp	r3, #0
   810e0:	d033      	beq.n	8114a <setvbuf+0x15e>
   810e2:	9b00      	ldr	r3, [sp, #0]
   810e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   810e8:	429e      	cmp	r6, r3
   810ea:	bf1c      	itt	ne
   810ec:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   810f0:	81a2      	strhne	r2, [r4, #12]
   810f2:	f1b8 0f01 	cmp.w	r8, #1
   810f6:	bf04      	itt	eq
   810f8:	f042 0201 	orreq.w	r2, r2, #1
   810fc:	81a2      	strheq	r2, [r4, #12]
   810fe:	b292      	uxth	r2, r2
   81100:	f012 0308 	ands.w	r3, r2, #8
   81104:	6027      	str	r7, [r4, #0]
   81106:	6127      	str	r7, [r4, #16]
   81108:	6166      	str	r6, [r4, #20]
   8110a:	d00e      	beq.n	8112a <setvbuf+0x13e>
   8110c:	07d1      	lsls	r1, r2, #31
   8110e:	d51a      	bpl.n	81146 <setvbuf+0x15a>
   81110:	2300      	movs	r3, #0
   81112:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81114:	4276      	negs	r6, r6
   81116:	f015 0501 	ands.w	r5, r5, #1
   8111a:	61a6      	str	r6, [r4, #24]
   8111c:	60a3      	str	r3, [r4, #8]
   8111e:	d009      	beq.n	81134 <setvbuf+0x148>
   81120:	2500      	movs	r5, #0
   81122:	4628      	mov	r0, r5
   81124:	b003      	add	sp, #12
   81126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8112a:	60a3      	str	r3, [r4, #8]
   8112c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8112e:	f015 0501 	ands.w	r5, r5, #1
   81132:	d1f5      	bne.n	81120 <setvbuf+0x134>
   81134:	0593      	lsls	r3, r2, #22
   81136:	d4c0      	bmi.n	810ba <setvbuf+0xce>
   81138:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8113a:	f001 fc3f 	bl	829bc <__retarget_lock_release_recursive>
   8113e:	4628      	mov	r0, r5
   81140:	b003      	add	sp, #12
   81142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81146:	60a6      	str	r6, [r4, #8]
   81148:	e7f0      	b.n	8112c <setvbuf+0x140>
   8114a:	4628      	mov	r0, r5
   8114c:	f001 f874 	bl	82238 <__sinit>
   81150:	e7c7      	b.n	810e2 <setvbuf+0xf6>
   81152:	f04f 35ff 	mov.w	r5, #4294967295
   81156:	e7b0      	b.n	810ba <setvbuf+0xce>
   81158:	f8dd 9000 	ldr.w	r9, [sp]
   8115c:	45b1      	cmp	r9, r6
   8115e:	d004      	beq.n	8116a <setvbuf+0x17e>
   81160:	4648      	mov	r0, r9
   81162:	f001 fca5 	bl	82ab0 <malloc>
   81166:	4607      	mov	r7, r0
   81168:	b920      	cbnz	r0, 81174 <setvbuf+0x188>
   8116a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8116e:	f04f 35ff 	mov.w	r5, #4294967295
   81172:	e792      	b.n	8109a <setvbuf+0xae>
   81174:	464e      	mov	r6, r9
   81176:	e783      	b.n	81080 <setvbuf+0x94>
   81178:	20070134 	.word	0x20070134

0008117c <strlen>:
   8117c:	f020 0103 	bic.w	r1, r0, #3
   81180:	f010 0003 	ands.w	r0, r0, #3
   81184:	f1c0 0000 	rsb	r0, r0, #0
   81188:	f851 3b04 	ldr.w	r3, [r1], #4
   8118c:	f100 0c04 	add.w	ip, r0, #4
   81190:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81194:	f06f 0200 	mvn.w	r2, #0
   81198:	bf1c      	itt	ne
   8119a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8119e:	4313      	orrne	r3, r2
   811a0:	f04f 0c01 	mov.w	ip, #1
   811a4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   811a8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   811ac:	eba3 020c 	sub.w	r2, r3, ip
   811b0:	ea22 0203 	bic.w	r2, r2, r3
   811b4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   811b8:	bf04      	itt	eq
   811ba:	f851 3b04 	ldreq.w	r3, [r1], #4
   811be:	3004      	addeq	r0, #4
   811c0:	d0f4      	beq.n	811ac <strlen+0x30>
   811c2:	f1c2 0100 	rsb	r1, r2, #0
   811c6:	ea02 0201 	and.w	r2, r2, r1
   811ca:	fab2 f282 	clz	r2, r2
   811ce:	f1c2 021f 	rsb	r2, r2, #31
   811d2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   811d6:	4770      	bx	lr

000811d8 <__sprint_r.part.0>:
   811d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811dc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   811de:	4693      	mov	fp, r2
   811e0:	049c      	lsls	r4, r3, #18
   811e2:	d52f      	bpl.n	81244 <__sprint_r.part.0+0x6c>
   811e4:	6893      	ldr	r3, [r2, #8]
   811e6:	6812      	ldr	r2, [r2, #0]
   811e8:	b353      	cbz	r3, 81240 <__sprint_r.part.0+0x68>
   811ea:	460e      	mov	r6, r1
   811ec:	4607      	mov	r7, r0
   811ee:	f102 0908 	add.w	r9, r2, #8
   811f2:	e919 0420 	ldmdb	r9, {r5, sl}
   811f6:	ea5f 089a 	movs.w	r8, sl, lsr #2
   811fa:	d017      	beq.n	8122c <__sprint_r.part.0+0x54>
   811fc:	2400      	movs	r4, #0
   811fe:	3d04      	subs	r5, #4
   81200:	e001      	b.n	81206 <__sprint_r.part.0+0x2e>
   81202:	45a0      	cmp	r8, r4
   81204:	d010      	beq.n	81228 <__sprint_r.part.0+0x50>
   81206:	4632      	mov	r2, r6
   81208:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8120c:	4638      	mov	r0, r7
   8120e:	f001 f8b5 	bl	8237c <_fputwc_r>
   81212:	1c43      	adds	r3, r0, #1
   81214:	f104 0401 	add.w	r4, r4, #1
   81218:	d1f3      	bne.n	81202 <__sprint_r.part.0+0x2a>
   8121a:	2300      	movs	r3, #0
   8121c:	f8cb 3008 	str.w	r3, [fp, #8]
   81220:	f8cb 3004 	str.w	r3, [fp, #4]
   81224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81228:	f8db 3008 	ldr.w	r3, [fp, #8]
   8122c:	f02a 0a03 	bic.w	sl, sl, #3
   81230:	eba3 030a 	sub.w	r3, r3, sl
   81234:	f8cb 3008 	str.w	r3, [fp, #8]
   81238:	f109 0908 	add.w	r9, r9, #8
   8123c:	2b00      	cmp	r3, #0
   8123e:	d1d8      	bne.n	811f2 <__sprint_r.part.0+0x1a>
   81240:	2000      	movs	r0, #0
   81242:	e7ea      	b.n	8121a <__sprint_r.part.0+0x42>
   81244:	f001 fa04 	bl	82650 <__sfvwrite_r>
   81248:	2300      	movs	r3, #0
   8124a:	f8cb 3008 	str.w	r3, [fp, #8]
   8124e:	f8cb 3004 	str.w	r3, [fp, #4]
   81252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81256:	bf00      	nop

00081258 <_vfiprintf_r>:
   81258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8125c:	b0ad      	sub	sp, #180	; 0xb4
   8125e:	461d      	mov	r5, r3
   81260:	468b      	mov	fp, r1
   81262:	4690      	mov	r8, r2
   81264:	9307      	str	r3, [sp, #28]
   81266:	9006      	str	r0, [sp, #24]
   81268:	b118      	cbz	r0, 81272 <_vfiprintf_r+0x1a>
   8126a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8126c:	2b00      	cmp	r3, #0
   8126e:	f000 80f3 	beq.w	81458 <_vfiprintf_r+0x200>
   81272:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81276:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8127a:	07df      	lsls	r7, r3, #31
   8127c:	b281      	uxth	r1, r0
   8127e:	d402      	bmi.n	81286 <_vfiprintf_r+0x2e>
   81280:	058e      	lsls	r6, r1, #22
   81282:	f140 80fc 	bpl.w	8147e <_vfiprintf_r+0x226>
   81286:	048c      	lsls	r4, r1, #18
   81288:	d40a      	bmi.n	812a0 <_vfiprintf_r+0x48>
   8128a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8128e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81296:	f8ab 100c 	strh.w	r1, [fp, #12]
   8129a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8129e:	b289      	uxth	r1, r1
   812a0:	0708      	lsls	r0, r1, #28
   812a2:	f140 80b3 	bpl.w	8140c <_vfiprintf_r+0x1b4>
   812a6:	f8db 3010 	ldr.w	r3, [fp, #16]
   812aa:	2b00      	cmp	r3, #0
   812ac:	f000 80ae 	beq.w	8140c <_vfiprintf_r+0x1b4>
   812b0:	f001 031a 	and.w	r3, r1, #26
   812b4:	2b0a      	cmp	r3, #10
   812b6:	f000 80b5 	beq.w	81424 <_vfiprintf_r+0x1cc>
   812ba:	2300      	movs	r3, #0
   812bc:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   812c0:	46d1      	mov	r9, sl
   812c2:	930b      	str	r3, [sp, #44]	; 0x2c
   812c4:	9303      	str	r3, [sp, #12]
   812c6:	9311      	str	r3, [sp, #68]	; 0x44
   812c8:	9310      	str	r3, [sp, #64]	; 0x40
   812ca:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   812ce:	f8cd b010 	str.w	fp, [sp, #16]
   812d2:	f898 3000 	ldrb.w	r3, [r8]
   812d6:	4644      	mov	r4, r8
   812d8:	b1fb      	cbz	r3, 8131a <_vfiprintf_r+0xc2>
   812da:	2b25      	cmp	r3, #37	; 0x25
   812dc:	d102      	bne.n	812e4 <_vfiprintf_r+0x8c>
   812de:	e01c      	b.n	8131a <_vfiprintf_r+0xc2>
   812e0:	2b25      	cmp	r3, #37	; 0x25
   812e2:	d003      	beq.n	812ec <_vfiprintf_r+0x94>
   812e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   812e8:	2b00      	cmp	r3, #0
   812ea:	d1f9      	bne.n	812e0 <_vfiprintf_r+0x88>
   812ec:	eba4 0508 	sub.w	r5, r4, r8
   812f0:	b19d      	cbz	r5, 8131a <_vfiprintf_r+0xc2>
   812f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   812f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   812f6:	3301      	adds	r3, #1
   812f8:	442a      	add	r2, r5
   812fa:	2b07      	cmp	r3, #7
   812fc:	f8c9 8000 	str.w	r8, [r9]
   81300:	f8c9 5004 	str.w	r5, [r9, #4]
   81304:	9211      	str	r2, [sp, #68]	; 0x44
   81306:	9310      	str	r3, [sp, #64]	; 0x40
   81308:	dd7a      	ble.n	81400 <_vfiprintf_r+0x1a8>
   8130a:	2a00      	cmp	r2, #0
   8130c:	f040 84b5 	bne.w	81c7a <_vfiprintf_r+0xa22>
   81310:	46d1      	mov	r9, sl
   81312:	9b03      	ldr	r3, [sp, #12]
   81314:	9210      	str	r2, [sp, #64]	; 0x40
   81316:	442b      	add	r3, r5
   81318:	9303      	str	r3, [sp, #12]
   8131a:	7823      	ldrb	r3, [r4, #0]
   8131c:	2b00      	cmp	r3, #0
   8131e:	f000 83e5 	beq.w	81aec <_vfiprintf_r+0x894>
   81322:	2000      	movs	r0, #0
   81324:	f04f 0300 	mov.w	r3, #0
   81328:	f104 0801 	add.w	r8, r4, #1
   8132c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81330:	7862      	ldrb	r2, [r4, #1]
   81332:	4606      	mov	r6, r0
   81334:	4605      	mov	r5, r0
   81336:	4603      	mov	r3, r0
   81338:	f04f 34ff 	mov.w	r4, #4294967295
   8133c:	f108 0801 	add.w	r8, r8, #1
   81340:	f1a2 0120 	sub.w	r1, r2, #32
   81344:	2958      	cmp	r1, #88	; 0x58
   81346:	f200 82d9 	bhi.w	818fc <_vfiprintf_r+0x6a4>
   8134a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8134e:	0228      	.short	0x0228
   81350:	02d702d7 	.word	0x02d702d7
   81354:	02d70230 	.word	0x02d70230
   81358:	02d702d7 	.word	0x02d702d7
   8135c:	02d702d7 	.word	0x02d702d7
   81360:	00a002d7 	.word	0x00a002d7
   81364:	02d70288 	.word	0x02d70288
   81368:	02b800a8 	.word	0x02b800a8
   8136c:	01a602d7 	.word	0x01a602d7
   81370:	01ab01ab 	.word	0x01ab01ab
   81374:	01ab01ab 	.word	0x01ab01ab
   81378:	01ab01ab 	.word	0x01ab01ab
   8137c:	01ab01ab 	.word	0x01ab01ab
   81380:	02d701ab 	.word	0x02d701ab
   81384:	02d702d7 	.word	0x02d702d7
   81388:	02d702d7 	.word	0x02d702d7
   8138c:	02d702d7 	.word	0x02d702d7
   81390:	02d702d7 	.word	0x02d702d7
   81394:	01b902d7 	.word	0x01b902d7
   81398:	02d702d7 	.word	0x02d702d7
   8139c:	02d702d7 	.word	0x02d702d7
   813a0:	02d702d7 	.word	0x02d702d7
   813a4:	02d702d7 	.word	0x02d702d7
   813a8:	02d702d7 	.word	0x02d702d7
   813ac:	02d7019e 	.word	0x02d7019e
   813b0:	02d702d7 	.word	0x02d702d7
   813b4:	02d702d7 	.word	0x02d702d7
   813b8:	02d701a2 	.word	0x02d701a2
   813bc:	025a02d7 	.word	0x025a02d7
   813c0:	02d702d7 	.word	0x02d702d7
   813c4:	02d702d7 	.word	0x02d702d7
   813c8:	02d702d7 	.word	0x02d702d7
   813cc:	02d702d7 	.word	0x02d702d7
   813d0:	02d702d7 	.word	0x02d702d7
   813d4:	02220261 	.word	0x02220261
   813d8:	02d702d7 	.word	0x02d702d7
   813dc:	027602d7 	.word	0x027602d7
   813e0:	02d70222 	.word	0x02d70222
   813e4:	027b02d7 	.word	0x027b02d7
   813e8:	01fc02d7 	.word	0x01fc02d7
   813ec:	02100189 	.word	0x02100189
   813f0:	02d702d2 	.word	0x02d702d2
   813f4:	02d70295 	.word	0x02d70295
   813f8:	02d700ad 	.word	0x02d700ad
   813fc:	023502d7 	.word	0x023502d7
   81400:	f109 0908 	add.w	r9, r9, #8
   81404:	9b03      	ldr	r3, [sp, #12]
   81406:	442b      	add	r3, r5
   81408:	9303      	str	r3, [sp, #12]
   8140a:	e786      	b.n	8131a <_vfiprintf_r+0xc2>
   8140c:	4659      	mov	r1, fp
   8140e:	9806      	ldr	r0, [sp, #24]
   81410:	f000 fdaa 	bl	81f68 <__swsetup_r>
   81414:	bb18      	cbnz	r0, 8145e <_vfiprintf_r+0x206>
   81416:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8141a:	f001 031a 	and.w	r3, r1, #26
   8141e:	2b0a      	cmp	r3, #10
   81420:	f47f af4b 	bne.w	812ba <_vfiprintf_r+0x62>
   81424:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81428:	2b00      	cmp	r3, #0
   8142a:	f6ff af46 	blt.w	812ba <_vfiprintf_r+0x62>
   8142e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81432:	07db      	lsls	r3, r3, #31
   81434:	d405      	bmi.n	81442 <_vfiprintf_r+0x1ea>
   81436:	058f      	lsls	r7, r1, #22
   81438:	d403      	bmi.n	81442 <_vfiprintf_r+0x1ea>
   8143a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8143e:	f001 fabd 	bl	829bc <__retarget_lock_release_recursive>
   81442:	462b      	mov	r3, r5
   81444:	4642      	mov	r2, r8
   81446:	4659      	mov	r1, fp
   81448:	9806      	ldr	r0, [sp, #24]
   8144a:	f000 fd49 	bl	81ee0 <__sbprintf>
   8144e:	9003      	str	r0, [sp, #12]
   81450:	9803      	ldr	r0, [sp, #12]
   81452:	b02d      	add	sp, #180	; 0xb4
   81454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81458:	f000 feee 	bl	82238 <__sinit>
   8145c:	e709      	b.n	81272 <_vfiprintf_r+0x1a>
   8145e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81462:	07d9      	lsls	r1, r3, #31
   81464:	d404      	bmi.n	81470 <_vfiprintf_r+0x218>
   81466:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8146a:	059a      	lsls	r2, r3, #22
   8146c:	f140 84ae 	bpl.w	81dcc <_vfiprintf_r+0xb74>
   81470:	f04f 33ff 	mov.w	r3, #4294967295
   81474:	9303      	str	r3, [sp, #12]
   81476:	9803      	ldr	r0, [sp, #12]
   81478:	b02d      	add	sp, #180	; 0xb4
   8147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8147e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81482:	f001 fa99 	bl	829b8 <__retarget_lock_acquire_recursive>
   81486:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8148a:	b281      	uxth	r1, r0
   8148c:	e6fb      	b.n	81286 <_vfiprintf_r+0x2e>
   8148e:	9907      	ldr	r1, [sp, #28]
   81490:	460a      	mov	r2, r1
   81492:	680d      	ldr	r5, [r1, #0]
   81494:	3204      	adds	r2, #4
   81496:	2d00      	cmp	r5, #0
   81498:	9207      	str	r2, [sp, #28]
   8149a:	da02      	bge.n	814a2 <_vfiprintf_r+0x24a>
   8149c:	426d      	negs	r5, r5
   8149e:	f043 0304 	orr.w	r3, r3, #4
   814a2:	f898 2000 	ldrb.w	r2, [r8]
   814a6:	e749      	b.n	8133c <_vfiprintf_r+0xe4>
   814a8:	9508      	str	r5, [sp, #32]
   814aa:	069e      	lsls	r6, r3, #26
   814ac:	f100 845a 	bmi.w	81d64 <_vfiprintf_r+0xb0c>
   814b0:	9907      	ldr	r1, [sp, #28]
   814b2:	06dd      	lsls	r5, r3, #27
   814b4:	460a      	mov	r2, r1
   814b6:	f100 83ef 	bmi.w	81c98 <_vfiprintf_r+0xa40>
   814ba:	0658      	lsls	r0, r3, #25
   814bc:	f140 83ec 	bpl.w	81c98 <_vfiprintf_r+0xa40>
   814c0:	2700      	movs	r7, #0
   814c2:	2201      	movs	r2, #1
   814c4:	880e      	ldrh	r6, [r1, #0]
   814c6:	3104      	adds	r1, #4
   814c8:	9107      	str	r1, [sp, #28]
   814ca:	f04f 0100 	mov.w	r1, #0
   814ce:	2500      	movs	r5, #0
   814d0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   814d4:	1c61      	adds	r1, r4, #1
   814d6:	f000 8117 	beq.w	81708 <_vfiprintf_r+0x4b0>
   814da:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   814de:	9102      	str	r1, [sp, #8]
   814e0:	ea56 0107 	orrs.w	r1, r6, r7
   814e4:	f040 8115 	bne.w	81712 <_vfiprintf_r+0x4ba>
   814e8:	2c00      	cmp	r4, #0
   814ea:	f040 835b 	bne.w	81ba4 <_vfiprintf_r+0x94c>
   814ee:	2a00      	cmp	r2, #0
   814f0:	f040 83b6 	bne.w	81c60 <_vfiprintf_r+0xa08>
   814f4:	f013 0301 	ands.w	r3, r3, #1
   814f8:	9305      	str	r3, [sp, #20]
   814fa:	f000 8455 	beq.w	81da8 <_vfiprintf_r+0xb50>
   814fe:	2330      	movs	r3, #48	; 0x30
   81500:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81504:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81508:	9b05      	ldr	r3, [sp, #20]
   8150a:	42a3      	cmp	r3, r4
   8150c:	bfb8      	it	lt
   8150e:	4623      	movlt	r3, r4
   81510:	9301      	str	r3, [sp, #4]
   81512:	b10d      	cbz	r5, 81518 <_vfiprintf_r+0x2c0>
   81514:	3301      	adds	r3, #1
   81516:	9301      	str	r3, [sp, #4]
   81518:	9b02      	ldr	r3, [sp, #8]
   8151a:	f013 0302 	ands.w	r3, r3, #2
   8151e:	9309      	str	r3, [sp, #36]	; 0x24
   81520:	d002      	beq.n	81528 <_vfiprintf_r+0x2d0>
   81522:	9b01      	ldr	r3, [sp, #4]
   81524:	3302      	adds	r3, #2
   81526:	9301      	str	r3, [sp, #4]
   81528:	9b02      	ldr	r3, [sp, #8]
   8152a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8152e:	930a      	str	r3, [sp, #40]	; 0x28
   81530:	f040 8215 	bne.w	8195e <_vfiprintf_r+0x706>
   81534:	9b08      	ldr	r3, [sp, #32]
   81536:	9a01      	ldr	r2, [sp, #4]
   81538:	1a9d      	subs	r5, r3, r2
   8153a:	2d00      	cmp	r5, #0
   8153c:	f340 820f 	ble.w	8195e <_vfiprintf_r+0x706>
   81540:	2d10      	cmp	r5, #16
   81542:	f340 8484 	ble.w	81e4e <_vfiprintf_r+0xbf6>
   81546:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81548:	46ce      	mov	lr, r9
   8154a:	2710      	movs	r7, #16
   8154c:	46a1      	mov	r9, r4
   8154e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81550:	4ec5      	ldr	r6, [pc, #788]	; (81868 <_vfiprintf_r+0x610>)
   81552:	4619      	mov	r1, r3
   81554:	9c06      	ldr	r4, [sp, #24]
   81556:	e007      	b.n	81568 <_vfiprintf_r+0x310>
   81558:	f101 0c02 	add.w	ip, r1, #2
   8155c:	4601      	mov	r1, r0
   8155e:	f10e 0e08 	add.w	lr, lr, #8
   81562:	3d10      	subs	r5, #16
   81564:	2d10      	cmp	r5, #16
   81566:	dd11      	ble.n	8158c <_vfiprintf_r+0x334>
   81568:	1c48      	adds	r0, r1, #1
   8156a:	3210      	adds	r2, #16
   8156c:	2807      	cmp	r0, #7
   8156e:	9211      	str	r2, [sp, #68]	; 0x44
   81570:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81574:	9010      	str	r0, [sp, #64]	; 0x40
   81576:	ddef      	ble.n	81558 <_vfiprintf_r+0x300>
   81578:	2a00      	cmp	r2, #0
   8157a:	f040 81d9 	bne.w	81930 <_vfiprintf_r+0x6d8>
   8157e:	3d10      	subs	r5, #16
   81580:	2d10      	cmp	r5, #16
   81582:	4611      	mov	r1, r2
   81584:	f04f 0c01 	mov.w	ip, #1
   81588:	46d6      	mov	lr, sl
   8158a:	dced      	bgt.n	81568 <_vfiprintf_r+0x310>
   8158c:	464c      	mov	r4, r9
   8158e:	4661      	mov	r1, ip
   81590:	46f1      	mov	r9, lr
   81592:	442a      	add	r2, r5
   81594:	2907      	cmp	r1, #7
   81596:	9211      	str	r2, [sp, #68]	; 0x44
   81598:	f8c9 6000 	str.w	r6, [r9]
   8159c:	f8c9 5004 	str.w	r5, [r9, #4]
   815a0:	9110      	str	r1, [sp, #64]	; 0x40
   815a2:	f300 82eb 	bgt.w	81b7c <_vfiprintf_r+0x924>
   815a6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   815aa:	f109 0908 	add.w	r9, r9, #8
   815ae:	1c48      	adds	r0, r1, #1
   815b0:	2d00      	cmp	r5, #0
   815b2:	f040 81dc 	bne.w	8196e <_vfiprintf_r+0x716>
   815b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   815b8:	2b00      	cmp	r3, #0
   815ba:	f000 81f6 	beq.w	819aa <_vfiprintf_r+0x752>
   815be:	2102      	movs	r1, #2
   815c0:	ab0e      	add	r3, sp, #56	; 0x38
   815c2:	440a      	add	r2, r1
   815c4:	2807      	cmp	r0, #7
   815c6:	9211      	str	r2, [sp, #68]	; 0x44
   815c8:	9010      	str	r0, [sp, #64]	; 0x40
   815ca:	f8c9 1004 	str.w	r1, [r9, #4]
   815ce:	f8c9 3000 	str.w	r3, [r9]
   815d2:	f340 81e6 	ble.w	819a2 <_vfiprintf_r+0x74a>
   815d6:	2a00      	cmp	r2, #0
   815d8:	f040 8395 	bne.w	81d06 <_vfiprintf_r+0xaae>
   815dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   815de:	2001      	movs	r0, #1
   815e0:	2b80      	cmp	r3, #128	; 0x80
   815e2:	4611      	mov	r1, r2
   815e4:	46d1      	mov	r9, sl
   815e6:	f040 81e4 	bne.w	819b2 <_vfiprintf_r+0x75a>
   815ea:	9b08      	ldr	r3, [sp, #32]
   815ec:	9d01      	ldr	r5, [sp, #4]
   815ee:	1b5e      	subs	r6, r3, r5
   815f0:	2e00      	cmp	r6, #0
   815f2:	f340 81de 	ble.w	819b2 <_vfiprintf_r+0x75a>
   815f6:	2e10      	cmp	r6, #16
   815f8:	f340 843c 	ble.w	81e74 <_vfiprintf_r+0xc1c>
   815fc:	46cc      	mov	ip, r9
   815fe:	2710      	movs	r7, #16
   81600:	46a1      	mov	r9, r4
   81602:	4d9a      	ldr	r5, [pc, #616]	; (8186c <_vfiprintf_r+0x614>)
   81604:	9c06      	ldr	r4, [sp, #24]
   81606:	e007      	b.n	81618 <_vfiprintf_r+0x3c0>
   81608:	f101 0e02 	add.w	lr, r1, #2
   8160c:	4601      	mov	r1, r0
   8160e:	f10c 0c08 	add.w	ip, ip, #8
   81612:	3e10      	subs	r6, #16
   81614:	2e10      	cmp	r6, #16
   81616:	dd11      	ble.n	8163c <_vfiprintf_r+0x3e4>
   81618:	1c48      	adds	r0, r1, #1
   8161a:	3210      	adds	r2, #16
   8161c:	2807      	cmp	r0, #7
   8161e:	9211      	str	r2, [sp, #68]	; 0x44
   81620:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81624:	9010      	str	r0, [sp, #64]	; 0x40
   81626:	ddef      	ble.n	81608 <_vfiprintf_r+0x3b0>
   81628:	2a00      	cmp	r2, #0
   8162a:	f040 829b 	bne.w	81b64 <_vfiprintf_r+0x90c>
   8162e:	3e10      	subs	r6, #16
   81630:	2e10      	cmp	r6, #16
   81632:	f04f 0e01 	mov.w	lr, #1
   81636:	4611      	mov	r1, r2
   81638:	46d4      	mov	ip, sl
   8163a:	dced      	bgt.n	81618 <_vfiprintf_r+0x3c0>
   8163c:	464c      	mov	r4, r9
   8163e:	46e1      	mov	r9, ip
   81640:	4432      	add	r2, r6
   81642:	f1be 0f07 	cmp.w	lr, #7
   81646:	9211      	str	r2, [sp, #68]	; 0x44
   81648:	e889 0060 	stmia.w	r9, {r5, r6}
   8164c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81650:	f300 8366 	bgt.w	81d20 <_vfiprintf_r+0xac8>
   81654:	f109 0908 	add.w	r9, r9, #8
   81658:	f10e 0001 	add.w	r0, lr, #1
   8165c:	4671      	mov	r1, lr
   8165e:	e1a8      	b.n	819b2 <_vfiprintf_r+0x75a>
   81660:	9508      	str	r5, [sp, #32]
   81662:	f013 0220 	ands.w	r2, r3, #32
   81666:	f040 8389 	bne.w	81d7c <_vfiprintf_r+0xb24>
   8166a:	f013 0110 	ands.w	r1, r3, #16
   8166e:	f040 8319 	bne.w	81ca4 <_vfiprintf_r+0xa4c>
   81672:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81676:	f000 8315 	beq.w	81ca4 <_vfiprintf_r+0xa4c>
   8167a:	9807      	ldr	r0, [sp, #28]
   8167c:	460a      	mov	r2, r1
   8167e:	4601      	mov	r1, r0
   81680:	3104      	adds	r1, #4
   81682:	8806      	ldrh	r6, [r0, #0]
   81684:	2700      	movs	r7, #0
   81686:	9107      	str	r1, [sp, #28]
   81688:	e71f      	b.n	814ca <_vfiprintf_r+0x272>
   8168a:	9508      	str	r5, [sp, #32]
   8168c:	f043 0310 	orr.w	r3, r3, #16
   81690:	e7e7      	b.n	81662 <_vfiprintf_r+0x40a>
   81692:	9508      	str	r5, [sp, #32]
   81694:	f043 0310 	orr.w	r3, r3, #16
   81698:	e707      	b.n	814aa <_vfiprintf_r+0x252>
   8169a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8169e:	f898 2000 	ldrb.w	r2, [r8]
   816a2:	e64b      	b.n	8133c <_vfiprintf_r+0xe4>
   816a4:	2500      	movs	r5, #0
   816a6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   816aa:	f818 2b01 	ldrb.w	r2, [r8], #1
   816ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   816b2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   816b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   816ba:	2909      	cmp	r1, #9
   816bc:	d9f5      	bls.n	816aa <_vfiprintf_r+0x452>
   816be:	e63f      	b.n	81340 <_vfiprintf_r+0xe8>
   816c0:	9508      	str	r5, [sp, #32]
   816c2:	2800      	cmp	r0, #0
   816c4:	f040 8402 	bne.w	81ecc <_vfiprintf_r+0xc74>
   816c8:	f043 0310 	orr.w	r3, r3, #16
   816cc:	069e      	lsls	r6, r3, #26
   816ce:	f100 833d 	bmi.w	81d4c <_vfiprintf_r+0xaf4>
   816d2:	9907      	ldr	r1, [sp, #28]
   816d4:	06dd      	lsls	r5, r3, #27
   816d6:	460a      	mov	r2, r1
   816d8:	f100 82f0 	bmi.w	81cbc <_vfiprintf_r+0xa64>
   816dc:	0658      	lsls	r0, r3, #25
   816de:	f140 82ed 	bpl.w	81cbc <_vfiprintf_r+0xa64>
   816e2:	f9b1 6000 	ldrsh.w	r6, [r1]
   816e6:	3204      	adds	r2, #4
   816e8:	17f7      	asrs	r7, r6, #31
   816ea:	4630      	mov	r0, r6
   816ec:	4639      	mov	r1, r7
   816ee:	9207      	str	r2, [sp, #28]
   816f0:	2800      	cmp	r0, #0
   816f2:	f171 0200 	sbcs.w	r2, r1, #0
   816f6:	f2c0 835a 	blt.w	81dae <_vfiprintf_r+0xb56>
   816fa:	1c61      	adds	r1, r4, #1
   816fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81700:	f04f 0201 	mov.w	r2, #1
   81704:	f47f aee9 	bne.w	814da <_vfiprintf_r+0x282>
   81708:	ea56 0107 	orrs.w	r1, r6, r7
   8170c:	f000 824b 	beq.w	81ba6 <_vfiprintf_r+0x94e>
   81710:	9302      	str	r3, [sp, #8]
   81712:	2a01      	cmp	r2, #1
   81714:	f000 828a 	beq.w	81c2c <_vfiprintf_r+0x9d4>
   81718:	2a02      	cmp	r2, #2
   8171a:	f040 825a 	bne.w	81bd2 <_vfiprintf_r+0x97a>
   8171e:	46d3      	mov	fp, sl
   81720:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81722:	0933      	lsrs	r3, r6, #4
   81724:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81728:	0939      	lsrs	r1, r7, #4
   8172a:	f006 020f 	and.w	r2, r6, #15
   8172e:	460f      	mov	r7, r1
   81730:	461e      	mov	r6, r3
   81732:	5c83      	ldrb	r3, [r0, r2]
   81734:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81738:	ea56 0307 	orrs.w	r3, r6, r7
   8173c:	d1f1      	bne.n	81722 <_vfiprintf_r+0x4ca>
   8173e:	ebaa 030b 	sub.w	r3, sl, fp
   81742:	9305      	str	r3, [sp, #20]
   81744:	e6e0      	b.n	81508 <_vfiprintf_r+0x2b0>
   81746:	2800      	cmp	r0, #0
   81748:	f040 83bd 	bne.w	81ec6 <_vfiprintf_r+0xc6e>
   8174c:	0699      	lsls	r1, r3, #26
   8174e:	f100 8359 	bmi.w	81e04 <_vfiprintf_r+0xbac>
   81752:	06da      	lsls	r2, r3, #27
   81754:	f100 80e5 	bmi.w	81922 <_vfiprintf_r+0x6ca>
   81758:	065b      	lsls	r3, r3, #25
   8175a:	f140 80e2 	bpl.w	81922 <_vfiprintf_r+0x6ca>
   8175e:	9a07      	ldr	r2, [sp, #28]
   81760:	6813      	ldr	r3, [r2, #0]
   81762:	3204      	adds	r2, #4
   81764:	9207      	str	r2, [sp, #28]
   81766:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8176a:	801a      	strh	r2, [r3, #0]
   8176c:	e5b1      	b.n	812d2 <_vfiprintf_r+0x7a>
   8176e:	2278      	movs	r2, #120	; 0x78
   81770:	2130      	movs	r1, #48	; 0x30
   81772:	9508      	str	r5, [sp, #32]
   81774:	9d07      	ldr	r5, [sp, #28]
   81776:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8177a:	1d2a      	adds	r2, r5, #4
   8177c:	9207      	str	r2, [sp, #28]
   8177e:	4a3c      	ldr	r2, [pc, #240]	; (81870 <_vfiprintf_r+0x618>)
   81780:	682e      	ldr	r6, [r5, #0]
   81782:	920b      	str	r2, [sp, #44]	; 0x2c
   81784:	f043 0302 	orr.w	r3, r3, #2
   81788:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8178c:	2700      	movs	r7, #0
   8178e:	2202      	movs	r2, #2
   81790:	e69b      	b.n	814ca <_vfiprintf_r+0x272>
   81792:	9508      	str	r5, [sp, #32]
   81794:	2800      	cmp	r0, #0
   81796:	d099      	beq.n	816cc <_vfiprintf_r+0x474>
   81798:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8179c:	e796      	b.n	816cc <_vfiprintf_r+0x474>
   8179e:	f898 2000 	ldrb.w	r2, [r8]
   817a2:	2e00      	cmp	r6, #0
   817a4:	f47f adca 	bne.w	8133c <_vfiprintf_r+0xe4>
   817a8:	2001      	movs	r0, #1
   817aa:	2620      	movs	r6, #32
   817ac:	e5c6      	b.n	8133c <_vfiprintf_r+0xe4>
   817ae:	f043 0301 	orr.w	r3, r3, #1
   817b2:	f898 2000 	ldrb.w	r2, [r8]
   817b6:	e5c1      	b.n	8133c <_vfiprintf_r+0xe4>
   817b8:	9508      	str	r5, [sp, #32]
   817ba:	2800      	cmp	r0, #0
   817bc:	f040 8380 	bne.w	81ec0 <_vfiprintf_r+0xc68>
   817c0:	492b      	ldr	r1, [pc, #172]	; (81870 <_vfiprintf_r+0x618>)
   817c2:	910b      	str	r1, [sp, #44]	; 0x2c
   817c4:	069f      	lsls	r7, r3, #26
   817c6:	f100 82e5 	bmi.w	81d94 <_vfiprintf_r+0xb3c>
   817ca:	9807      	ldr	r0, [sp, #28]
   817cc:	06de      	lsls	r6, r3, #27
   817ce:	4601      	mov	r1, r0
   817d0:	f100 826f 	bmi.w	81cb2 <_vfiprintf_r+0xa5a>
   817d4:	065d      	lsls	r5, r3, #25
   817d6:	f140 826c 	bpl.w	81cb2 <_vfiprintf_r+0xa5a>
   817da:	2700      	movs	r7, #0
   817dc:	3104      	adds	r1, #4
   817de:	8806      	ldrh	r6, [r0, #0]
   817e0:	9107      	str	r1, [sp, #28]
   817e2:	07d8      	lsls	r0, r3, #31
   817e4:	f140 8220 	bpl.w	81c28 <_vfiprintf_r+0x9d0>
   817e8:	ea56 0107 	orrs.w	r1, r6, r7
   817ec:	f000 821c 	beq.w	81c28 <_vfiprintf_r+0x9d0>
   817f0:	2130      	movs	r1, #48	; 0x30
   817f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   817f6:	f043 0302 	orr.w	r3, r3, #2
   817fa:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   817fe:	2202      	movs	r2, #2
   81800:	e663      	b.n	814ca <_vfiprintf_r+0x272>
   81802:	9508      	str	r5, [sp, #32]
   81804:	2800      	cmp	r0, #0
   81806:	f040 8355 	bne.w	81eb4 <_vfiprintf_r+0xc5c>
   8180a:	491a      	ldr	r1, [pc, #104]	; (81874 <_vfiprintf_r+0x61c>)
   8180c:	910b      	str	r1, [sp, #44]	; 0x2c
   8180e:	e7d9      	b.n	817c4 <_vfiprintf_r+0x56c>
   81810:	2201      	movs	r2, #1
   81812:	9807      	ldr	r0, [sp, #28]
   81814:	4611      	mov	r1, r2
   81816:	9201      	str	r2, [sp, #4]
   81818:	6802      	ldr	r2, [r0, #0]
   8181a:	f04f 0400 	mov.w	r4, #0
   8181e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81822:	4602      	mov	r2, r0
   81824:	3204      	adds	r2, #4
   81826:	9508      	str	r5, [sp, #32]
   81828:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   8182c:	9105      	str	r1, [sp, #20]
   8182e:	9207      	str	r2, [sp, #28]
   81830:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81834:	9302      	str	r3, [sp, #8]
   81836:	2400      	movs	r4, #0
   81838:	e66e      	b.n	81518 <_vfiprintf_r+0x2c0>
   8183a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8183e:	f898 2000 	ldrb.w	r2, [r8]
   81842:	e57b      	b.n	8133c <_vfiprintf_r+0xe4>
   81844:	f898 2000 	ldrb.w	r2, [r8]
   81848:	2a6c      	cmp	r2, #108	; 0x6c
   8184a:	bf03      	ittte	eq
   8184c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81850:	f043 0320 	orreq.w	r3, r3, #32
   81854:	f108 0801 	addeq.w	r8, r8, #1
   81858:	f043 0310 	orrne.w	r3, r3, #16
   8185c:	e56e      	b.n	8133c <_vfiprintf_r+0xe4>
   8185e:	f898 2000 	ldrb.w	r2, [r8]
   81862:	2001      	movs	r0, #1
   81864:	262b      	movs	r6, #43	; 0x2b
   81866:	e569      	b.n	8133c <_vfiprintf_r+0xe4>
   81868:	00083cbc 	.word	0x00083cbc
   8186c:	00083ccc 	.word	0x00083ccc
   81870:	00083ca0 	.word	0x00083ca0
   81874:	00083c8c 	.word	0x00083c8c
   81878:	f04f 0200 	mov.w	r2, #0
   8187c:	9907      	ldr	r1, [sp, #28]
   8187e:	9508      	str	r5, [sp, #32]
   81880:	f8d1 b000 	ldr.w	fp, [r1]
   81884:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81888:	1d0d      	adds	r5, r1, #4
   8188a:	f1bb 0f00 	cmp.w	fp, #0
   8188e:	f000 82e4 	beq.w	81e5a <_vfiprintf_r+0xc02>
   81892:	1c67      	adds	r7, r4, #1
   81894:	f000 82c3 	beq.w	81e1e <_vfiprintf_r+0xbc6>
   81898:	4622      	mov	r2, r4
   8189a:	2100      	movs	r1, #0
   8189c:	4658      	mov	r0, fp
   8189e:	9301      	str	r3, [sp, #4]
   818a0:	f001 fbc6 	bl	83030 <memchr>
   818a4:	9b01      	ldr	r3, [sp, #4]
   818a6:	2800      	cmp	r0, #0
   818a8:	f000 82e8 	beq.w	81e7c <_vfiprintf_r+0xc24>
   818ac:	eba0 020b 	sub.w	r2, r0, fp
   818b0:	9507      	str	r5, [sp, #28]
   818b2:	9205      	str	r2, [sp, #20]
   818b4:	9302      	str	r3, [sp, #8]
   818b6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   818ba:	2400      	movs	r4, #0
   818bc:	e624      	b.n	81508 <_vfiprintf_r+0x2b0>
   818be:	f898 2000 	ldrb.w	r2, [r8]
   818c2:	f108 0701 	add.w	r7, r8, #1
   818c6:	2a2a      	cmp	r2, #42	; 0x2a
   818c8:	f000 82e9 	beq.w	81e9e <_vfiprintf_r+0xc46>
   818cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   818d0:	2909      	cmp	r1, #9
   818d2:	46b8      	mov	r8, r7
   818d4:	f04f 0400 	mov.w	r4, #0
   818d8:	f63f ad32 	bhi.w	81340 <_vfiprintf_r+0xe8>
   818dc:	f818 2b01 	ldrb.w	r2, [r8], #1
   818e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   818e4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   818e8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   818ec:	2909      	cmp	r1, #9
   818ee:	d9f5      	bls.n	818dc <_vfiprintf_r+0x684>
   818f0:	e526      	b.n	81340 <_vfiprintf_r+0xe8>
   818f2:	f043 0320 	orr.w	r3, r3, #32
   818f6:	f898 2000 	ldrb.w	r2, [r8]
   818fa:	e51f      	b.n	8133c <_vfiprintf_r+0xe4>
   818fc:	9508      	str	r5, [sp, #32]
   818fe:	2800      	cmp	r0, #0
   81900:	f040 82db 	bne.w	81eba <_vfiprintf_r+0xc62>
   81904:	2a00      	cmp	r2, #0
   81906:	f000 80f1 	beq.w	81aec <_vfiprintf_r+0x894>
   8190a:	2101      	movs	r1, #1
   8190c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81910:	f04f 0200 	mov.w	r2, #0
   81914:	9101      	str	r1, [sp, #4]
   81916:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8191a:	9105      	str	r1, [sp, #20]
   8191c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81920:	e788      	b.n	81834 <_vfiprintf_r+0x5dc>
   81922:	9a07      	ldr	r2, [sp, #28]
   81924:	6813      	ldr	r3, [r2, #0]
   81926:	3204      	adds	r2, #4
   81928:	9207      	str	r2, [sp, #28]
   8192a:	9a03      	ldr	r2, [sp, #12]
   8192c:	601a      	str	r2, [r3, #0]
   8192e:	e4d0      	b.n	812d2 <_vfiprintf_r+0x7a>
   81930:	aa0f      	add	r2, sp, #60	; 0x3c
   81932:	9904      	ldr	r1, [sp, #16]
   81934:	4620      	mov	r0, r4
   81936:	f7ff fc4f 	bl	811d8 <__sprint_r.part.0>
   8193a:	2800      	cmp	r0, #0
   8193c:	f040 8143 	bne.w	81bc6 <_vfiprintf_r+0x96e>
   81940:	9910      	ldr	r1, [sp, #64]	; 0x40
   81942:	46d6      	mov	lr, sl
   81944:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81946:	f101 0c01 	add.w	ip, r1, #1
   8194a:	e60a      	b.n	81562 <_vfiprintf_r+0x30a>
   8194c:	aa0f      	add	r2, sp, #60	; 0x3c
   8194e:	9904      	ldr	r1, [sp, #16]
   81950:	9806      	ldr	r0, [sp, #24]
   81952:	f7ff fc41 	bl	811d8 <__sprint_r.part.0>
   81956:	2800      	cmp	r0, #0
   81958:	f040 8135 	bne.w	81bc6 <_vfiprintf_r+0x96e>
   8195c:	46d1      	mov	r9, sl
   8195e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81960:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81964:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81966:	1c48      	adds	r0, r1, #1
   81968:	2d00      	cmp	r5, #0
   8196a:	f43f ae24 	beq.w	815b6 <_vfiprintf_r+0x35e>
   8196e:	2101      	movs	r1, #1
   81970:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81974:	440a      	add	r2, r1
   81976:	2807      	cmp	r0, #7
   81978:	9211      	str	r2, [sp, #68]	; 0x44
   8197a:	9010      	str	r0, [sp, #64]	; 0x40
   8197c:	f8c9 1004 	str.w	r1, [r9, #4]
   81980:	f8c9 5000 	str.w	r5, [r9]
   81984:	f340 8109 	ble.w	81b9a <_vfiprintf_r+0x942>
   81988:	2a00      	cmp	r2, #0
   8198a:	f040 81af 	bne.w	81cec <_vfiprintf_r+0xa94>
   8198e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81990:	2b00      	cmp	r3, #0
   81992:	f43f ae23 	beq.w	815dc <_vfiprintf_r+0x384>
   81996:	2202      	movs	r2, #2
   81998:	4608      	mov	r0, r1
   8199a:	46d1      	mov	r9, sl
   8199c:	ab0e      	add	r3, sp, #56	; 0x38
   8199e:	921d      	str	r2, [sp, #116]	; 0x74
   819a0:	931c      	str	r3, [sp, #112]	; 0x70
   819a2:	4601      	mov	r1, r0
   819a4:	f109 0908 	add.w	r9, r9, #8
   819a8:	3001      	adds	r0, #1
   819aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   819ac:	2b80      	cmp	r3, #128	; 0x80
   819ae:	f43f ae1c 	beq.w	815ea <_vfiprintf_r+0x392>
   819b2:	9b05      	ldr	r3, [sp, #20]
   819b4:	1ae4      	subs	r4, r4, r3
   819b6:	2c00      	cmp	r4, #0
   819b8:	dd2f      	ble.n	81a1a <_vfiprintf_r+0x7c2>
   819ba:	2c10      	cmp	r4, #16
   819bc:	f340 8220 	ble.w	81e00 <_vfiprintf_r+0xba8>
   819c0:	46ce      	mov	lr, r9
   819c2:	2610      	movs	r6, #16
   819c4:	4db2      	ldr	r5, [pc, #712]	; (81c90 <_vfiprintf_r+0xa38>)
   819c6:	9f06      	ldr	r7, [sp, #24]
   819c8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   819cc:	e006      	b.n	819dc <_vfiprintf_r+0x784>
   819ce:	1c88      	adds	r0, r1, #2
   819d0:	4619      	mov	r1, r3
   819d2:	f10e 0e08 	add.w	lr, lr, #8
   819d6:	3c10      	subs	r4, #16
   819d8:	2c10      	cmp	r4, #16
   819da:	dd10      	ble.n	819fe <_vfiprintf_r+0x7a6>
   819dc:	1c4b      	adds	r3, r1, #1
   819de:	3210      	adds	r2, #16
   819e0:	2b07      	cmp	r3, #7
   819e2:	9211      	str	r2, [sp, #68]	; 0x44
   819e4:	e88e 0060 	stmia.w	lr, {r5, r6}
   819e8:	9310      	str	r3, [sp, #64]	; 0x40
   819ea:	ddf0      	ble.n	819ce <_vfiprintf_r+0x776>
   819ec:	2a00      	cmp	r2, #0
   819ee:	d165      	bne.n	81abc <_vfiprintf_r+0x864>
   819f0:	3c10      	subs	r4, #16
   819f2:	2c10      	cmp	r4, #16
   819f4:	f04f 0001 	mov.w	r0, #1
   819f8:	4611      	mov	r1, r2
   819fa:	46d6      	mov	lr, sl
   819fc:	dcee      	bgt.n	819dc <_vfiprintf_r+0x784>
   819fe:	46f1      	mov	r9, lr
   81a00:	4422      	add	r2, r4
   81a02:	2807      	cmp	r0, #7
   81a04:	9211      	str	r2, [sp, #68]	; 0x44
   81a06:	f8c9 5000 	str.w	r5, [r9]
   81a0a:	f8c9 4004 	str.w	r4, [r9, #4]
   81a0e:	9010      	str	r0, [sp, #64]	; 0x40
   81a10:	f300 8085 	bgt.w	81b1e <_vfiprintf_r+0x8c6>
   81a14:	f109 0908 	add.w	r9, r9, #8
   81a18:	3001      	adds	r0, #1
   81a1a:	9905      	ldr	r1, [sp, #20]
   81a1c:	2807      	cmp	r0, #7
   81a1e:	440a      	add	r2, r1
   81a20:	9211      	str	r2, [sp, #68]	; 0x44
   81a22:	f8c9 b000 	str.w	fp, [r9]
   81a26:	f8c9 1004 	str.w	r1, [r9, #4]
   81a2a:	9010      	str	r0, [sp, #64]	; 0x40
   81a2c:	f340 8082 	ble.w	81b34 <_vfiprintf_r+0x8dc>
   81a30:	2a00      	cmp	r2, #0
   81a32:	f040 8118 	bne.w	81c66 <_vfiprintf_r+0xa0e>
   81a36:	9b02      	ldr	r3, [sp, #8]
   81a38:	9210      	str	r2, [sp, #64]	; 0x40
   81a3a:	0758      	lsls	r0, r3, #29
   81a3c:	d535      	bpl.n	81aaa <_vfiprintf_r+0x852>
   81a3e:	9b08      	ldr	r3, [sp, #32]
   81a40:	9901      	ldr	r1, [sp, #4]
   81a42:	1a5c      	subs	r4, r3, r1
   81a44:	2c00      	cmp	r4, #0
   81a46:	f340 80e7 	ble.w	81c18 <_vfiprintf_r+0x9c0>
   81a4a:	46d1      	mov	r9, sl
   81a4c:	2c10      	cmp	r4, #16
   81a4e:	f340 820d 	ble.w	81e6c <_vfiprintf_r+0xc14>
   81a52:	2510      	movs	r5, #16
   81a54:	9910      	ldr	r1, [sp, #64]	; 0x40
   81a56:	4e8f      	ldr	r6, [pc, #572]	; (81c94 <_vfiprintf_r+0xa3c>)
   81a58:	9f06      	ldr	r7, [sp, #24]
   81a5a:	f8dd b010 	ldr.w	fp, [sp, #16]
   81a5e:	e006      	b.n	81a6e <_vfiprintf_r+0x816>
   81a60:	1c88      	adds	r0, r1, #2
   81a62:	4619      	mov	r1, r3
   81a64:	f109 0908 	add.w	r9, r9, #8
   81a68:	3c10      	subs	r4, #16
   81a6a:	2c10      	cmp	r4, #16
   81a6c:	dd11      	ble.n	81a92 <_vfiprintf_r+0x83a>
   81a6e:	1c4b      	adds	r3, r1, #1
   81a70:	3210      	adds	r2, #16
   81a72:	2b07      	cmp	r3, #7
   81a74:	9211      	str	r2, [sp, #68]	; 0x44
   81a76:	f8c9 6000 	str.w	r6, [r9]
   81a7a:	f8c9 5004 	str.w	r5, [r9, #4]
   81a7e:	9310      	str	r3, [sp, #64]	; 0x40
   81a80:	ddee      	ble.n	81a60 <_vfiprintf_r+0x808>
   81a82:	bb42      	cbnz	r2, 81ad6 <_vfiprintf_r+0x87e>
   81a84:	3c10      	subs	r4, #16
   81a86:	2c10      	cmp	r4, #16
   81a88:	f04f 0001 	mov.w	r0, #1
   81a8c:	4611      	mov	r1, r2
   81a8e:	46d1      	mov	r9, sl
   81a90:	dced      	bgt.n	81a6e <_vfiprintf_r+0x816>
   81a92:	4422      	add	r2, r4
   81a94:	2807      	cmp	r0, #7
   81a96:	9211      	str	r2, [sp, #68]	; 0x44
   81a98:	f8c9 6000 	str.w	r6, [r9]
   81a9c:	f8c9 4004 	str.w	r4, [r9, #4]
   81aa0:	9010      	str	r0, [sp, #64]	; 0x40
   81aa2:	dd51      	ble.n	81b48 <_vfiprintf_r+0x8f0>
   81aa4:	2a00      	cmp	r2, #0
   81aa6:	f040 819a 	bne.w	81dde <_vfiprintf_r+0xb86>
   81aaa:	9b03      	ldr	r3, [sp, #12]
   81aac:	9a08      	ldr	r2, [sp, #32]
   81aae:	9901      	ldr	r1, [sp, #4]
   81ab0:	428a      	cmp	r2, r1
   81ab2:	bfac      	ite	ge
   81ab4:	189b      	addge	r3, r3, r2
   81ab6:	185b      	addlt	r3, r3, r1
   81ab8:	9303      	str	r3, [sp, #12]
   81aba:	e04e      	b.n	81b5a <_vfiprintf_r+0x902>
   81abc:	aa0f      	add	r2, sp, #60	; 0x3c
   81abe:	4649      	mov	r1, r9
   81ac0:	4638      	mov	r0, r7
   81ac2:	f7ff fb89 	bl	811d8 <__sprint_r.part.0>
   81ac6:	2800      	cmp	r0, #0
   81ac8:	f040 813e 	bne.w	81d48 <_vfiprintf_r+0xaf0>
   81acc:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ace:	46d6      	mov	lr, sl
   81ad0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ad2:	1c48      	adds	r0, r1, #1
   81ad4:	e77f      	b.n	819d6 <_vfiprintf_r+0x77e>
   81ad6:	aa0f      	add	r2, sp, #60	; 0x3c
   81ad8:	4659      	mov	r1, fp
   81ada:	4638      	mov	r0, r7
   81adc:	f7ff fb7c 	bl	811d8 <__sprint_r.part.0>
   81ae0:	b960      	cbnz	r0, 81afc <_vfiprintf_r+0x8a4>
   81ae2:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ae4:	46d1      	mov	r9, sl
   81ae6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ae8:	1c48      	adds	r0, r1, #1
   81aea:	e7bd      	b.n	81a68 <_vfiprintf_r+0x810>
   81aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81aee:	f8dd b010 	ldr.w	fp, [sp, #16]
   81af2:	2b00      	cmp	r3, #0
   81af4:	f040 81ca 	bne.w	81e8c <_vfiprintf_r+0xc34>
   81af8:	2300      	movs	r3, #0
   81afa:	9310      	str	r3, [sp, #64]	; 0x40
   81afc:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81b00:	f013 0f01 	tst.w	r3, #1
   81b04:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81b08:	d102      	bne.n	81b10 <_vfiprintf_r+0x8b8>
   81b0a:	059a      	lsls	r2, r3, #22
   81b0c:	f140 80dd 	bpl.w	81cca <_vfiprintf_r+0xa72>
   81b10:	065b      	lsls	r3, r3, #25
   81b12:	f53f acad 	bmi.w	81470 <_vfiprintf_r+0x218>
   81b16:	9803      	ldr	r0, [sp, #12]
   81b18:	b02d      	add	sp, #180	; 0xb4
   81b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b1e:	2a00      	cmp	r2, #0
   81b20:	f040 8105 	bne.w	81d2e <_vfiprintf_r+0xad6>
   81b24:	2301      	movs	r3, #1
   81b26:	46d1      	mov	r9, sl
   81b28:	9a05      	ldr	r2, [sp, #20]
   81b2a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81b2e:	921d      	str	r2, [sp, #116]	; 0x74
   81b30:	9211      	str	r2, [sp, #68]	; 0x44
   81b32:	9310      	str	r3, [sp, #64]	; 0x40
   81b34:	f109 0908 	add.w	r9, r9, #8
   81b38:	9b02      	ldr	r3, [sp, #8]
   81b3a:	0759      	lsls	r1, r3, #29
   81b3c:	d504      	bpl.n	81b48 <_vfiprintf_r+0x8f0>
   81b3e:	9b08      	ldr	r3, [sp, #32]
   81b40:	9901      	ldr	r1, [sp, #4]
   81b42:	1a5c      	subs	r4, r3, r1
   81b44:	2c00      	cmp	r4, #0
   81b46:	dc81      	bgt.n	81a4c <_vfiprintf_r+0x7f4>
   81b48:	9b03      	ldr	r3, [sp, #12]
   81b4a:	9908      	ldr	r1, [sp, #32]
   81b4c:	9801      	ldr	r0, [sp, #4]
   81b4e:	4281      	cmp	r1, r0
   81b50:	bfac      	ite	ge
   81b52:	185b      	addge	r3, r3, r1
   81b54:	181b      	addlt	r3, r3, r0
   81b56:	9303      	str	r3, [sp, #12]
   81b58:	bb72      	cbnz	r2, 81bb8 <_vfiprintf_r+0x960>
   81b5a:	2300      	movs	r3, #0
   81b5c:	46d1      	mov	r9, sl
   81b5e:	9310      	str	r3, [sp, #64]	; 0x40
   81b60:	f7ff bbb7 	b.w	812d2 <_vfiprintf_r+0x7a>
   81b64:	aa0f      	add	r2, sp, #60	; 0x3c
   81b66:	9904      	ldr	r1, [sp, #16]
   81b68:	4620      	mov	r0, r4
   81b6a:	f7ff fb35 	bl	811d8 <__sprint_r.part.0>
   81b6e:	bb50      	cbnz	r0, 81bc6 <_vfiprintf_r+0x96e>
   81b70:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b72:	46d4      	mov	ip, sl
   81b74:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b76:	f101 0e01 	add.w	lr, r1, #1
   81b7a:	e54a      	b.n	81612 <_vfiprintf_r+0x3ba>
   81b7c:	2a00      	cmp	r2, #0
   81b7e:	f47f aee5 	bne.w	8194c <_vfiprintf_r+0x6f4>
   81b82:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81b86:	2900      	cmp	r1, #0
   81b88:	f000 811a 	beq.w	81dc0 <_vfiprintf_r+0xb68>
   81b8c:	2201      	movs	r2, #1
   81b8e:	46d1      	mov	r9, sl
   81b90:	4610      	mov	r0, r2
   81b92:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81b96:	921d      	str	r2, [sp, #116]	; 0x74
   81b98:	911c      	str	r1, [sp, #112]	; 0x70
   81b9a:	4601      	mov	r1, r0
   81b9c:	f109 0908 	add.w	r9, r9, #8
   81ba0:	3001      	adds	r0, #1
   81ba2:	e508      	b.n	815b6 <_vfiprintf_r+0x35e>
   81ba4:	9b02      	ldr	r3, [sp, #8]
   81ba6:	2a01      	cmp	r2, #1
   81ba8:	f000 8097 	beq.w	81cda <_vfiprintf_r+0xa82>
   81bac:	2a02      	cmp	r2, #2
   81bae:	d10d      	bne.n	81bcc <_vfiprintf_r+0x974>
   81bb0:	9302      	str	r3, [sp, #8]
   81bb2:	2600      	movs	r6, #0
   81bb4:	2700      	movs	r7, #0
   81bb6:	e5b2      	b.n	8171e <_vfiprintf_r+0x4c6>
   81bb8:	aa0f      	add	r2, sp, #60	; 0x3c
   81bba:	9904      	ldr	r1, [sp, #16]
   81bbc:	9806      	ldr	r0, [sp, #24]
   81bbe:	f7ff fb0b 	bl	811d8 <__sprint_r.part.0>
   81bc2:	2800      	cmp	r0, #0
   81bc4:	d0c9      	beq.n	81b5a <_vfiprintf_r+0x902>
   81bc6:	f8dd b010 	ldr.w	fp, [sp, #16]
   81bca:	e797      	b.n	81afc <_vfiprintf_r+0x8a4>
   81bcc:	2600      	movs	r6, #0
   81bce:	2700      	movs	r7, #0
   81bd0:	9302      	str	r3, [sp, #8]
   81bd2:	4651      	mov	r1, sl
   81bd4:	e000      	b.n	81bd8 <_vfiprintf_r+0x980>
   81bd6:	4659      	mov	r1, fp
   81bd8:	08f2      	lsrs	r2, r6, #3
   81bda:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81bde:	08f8      	lsrs	r0, r7, #3
   81be0:	f006 0307 	and.w	r3, r6, #7
   81be4:	4607      	mov	r7, r0
   81be6:	4616      	mov	r6, r2
   81be8:	3330      	adds	r3, #48	; 0x30
   81bea:	ea56 0207 	orrs.w	r2, r6, r7
   81bee:	f801 3c01 	strb.w	r3, [r1, #-1]
   81bf2:	f101 3bff 	add.w	fp, r1, #4294967295
   81bf6:	d1ee      	bne.n	81bd6 <_vfiprintf_r+0x97e>
   81bf8:	9a02      	ldr	r2, [sp, #8]
   81bfa:	07d6      	lsls	r6, r2, #31
   81bfc:	f57f ad9f 	bpl.w	8173e <_vfiprintf_r+0x4e6>
   81c00:	2b30      	cmp	r3, #48	; 0x30
   81c02:	f43f ad9c 	beq.w	8173e <_vfiprintf_r+0x4e6>
   81c06:	2330      	movs	r3, #48	; 0x30
   81c08:	3902      	subs	r1, #2
   81c0a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81c0e:	ebaa 0301 	sub.w	r3, sl, r1
   81c12:	9305      	str	r3, [sp, #20]
   81c14:	468b      	mov	fp, r1
   81c16:	e477      	b.n	81508 <_vfiprintf_r+0x2b0>
   81c18:	9b03      	ldr	r3, [sp, #12]
   81c1a:	9a08      	ldr	r2, [sp, #32]
   81c1c:	428a      	cmp	r2, r1
   81c1e:	bfac      	ite	ge
   81c20:	189b      	addge	r3, r3, r2
   81c22:	185b      	addlt	r3, r3, r1
   81c24:	9303      	str	r3, [sp, #12]
   81c26:	e798      	b.n	81b5a <_vfiprintf_r+0x902>
   81c28:	2202      	movs	r2, #2
   81c2a:	e44e      	b.n	814ca <_vfiprintf_r+0x272>
   81c2c:	2f00      	cmp	r7, #0
   81c2e:	bf08      	it	eq
   81c30:	2e0a      	cmpeq	r6, #10
   81c32:	d351      	bcc.n	81cd8 <_vfiprintf_r+0xa80>
   81c34:	46d3      	mov	fp, sl
   81c36:	4630      	mov	r0, r6
   81c38:	4639      	mov	r1, r7
   81c3a:	220a      	movs	r2, #10
   81c3c:	2300      	movs	r3, #0
   81c3e:	f001 fe85 	bl	8394c <__aeabi_uldivmod>
   81c42:	3230      	adds	r2, #48	; 0x30
   81c44:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81c48:	4630      	mov	r0, r6
   81c4a:	4639      	mov	r1, r7
   81c4c:	2300      	movs	r3, #0
   81c4e:	220a      	movs	r2, #10
   81c50:	f001 fe7c 	bl	8394c <__aeabi_uldivmod>
   81c54:	4606      	mov	r6, r0
   81c56:	460f      	mov	r7, r1
   81c58:	ea56 0307 	orrs.w	r3, r6, r7
   81c5c:	d1eb      	bne.n	81c36 <_vfiprintf_r+0x9de>
   81c5e:	e56e      	b.n	8173e <_vfiprintf_r+0x4e6>
   81c60:	9405      	str	r4, [sp, #20]
   81c62:	46d3      	mov	fp, sl
   81c64:	e450      	b.n	81508 <_vfiprintf_r+0x2b0>
   81c66:	aa0f      	add	r2, sp, #60	; 0x3c
   81c68:	9904      	ldr	r1, [sp, #16]
   81c6a:	9806      	ldr	r0, [sp, #24]
   81c6c:	f7ff fab4 	bl	811d8 <__sprint_r.part.0>
   81c70:	2800      	cmp	r0, #0
   81c72:	d1a8      	bne.n	81bc6 <_vfiprintf_r+0x96e>
   81c74:	46d1      	mov	r9, sl
   81c76:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c78:	e75e      	b.n	81b38 <_vfiprintf_r+0x8e0>
   81c7a:	aa0f      	add	r2, sp, #60	; 0x3c
   81c7c:	9904      	ldr	r1, [sp, #16]
   81c7e:	9806      	ldr	r0, [sp, #24]
   81c80:	f7ff faaa 	bl	811d8 <__sprint_r.part.0>
   81c84:	2800      	cmp	r0, #0
   81c86:	d19e      	bne.n	81bc6 <_vfiprintf_r+0x96e>
   81c88:	46d1      	mov	r9, sl
   81c8a:	f7ff bbbb 	b.w	81404 <_vfiprintf_r+0x1ac>
   81c8e:	bf00      	nop
   81c90:	00083ccc 	.word	0x00083ccc
   81c94:	00083cbc 	.word	0x00083cbc
   81c98:	3104      	adds	r1, #4
   81c9a:	6816      	ldr	r6, [r2, #0]
   81c9c:	2700      	movs	r7, #0
   81c9e:	2201      	movs	r2, #1
   81ca0:	9107      	str	r1, [sp, #28]
   81ca2:	e412      	b.n	814ca <_vfiprintf_r+0x272>
   81ca4:	9807      	ldr	r0, [sp, #28]
   81ca6:	2700      	movs	r7, #0
   81ca8:	4601      	mov	r1, r0
   81caa:	3104      	adds	r1, #4
   81cac:	6806      	ldr	r6, [r0, #0]
   81cae:	9107      	str	r1, [sp, #28]
   81cb0:	e40b      	b.n	814ca <_vfiprintf_r+0x272>
   81cb2:	680e      	ldr	r6, [r1, #0]
   81cb4:	3104      	adds	r1, #4
   81cb6:	9107      	str	r1, [sp, #28]
   81cb8:	2700      	movs	r7, #0
   81cba:	e592      	b.n	817e2 <_vfiprintf_r+0x58a>
   81cbc:	6816      	ldr	r6, [r2, #0]
   81cbe:	3204      	adds	r2, #4
   81cc0:	17f7      	asrs	r7, r6, #31
   81cc2:	9207      	str	r2, [sp, #28]
   81cc4:	4630      	mov	r0, r6
   81cc6:	4639      	mov	r1, r7
   81cc8:	e512      	b.n	816f0 <_vfiprintf_r+0x498>
   81cca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81cce:	f000 fe75 	bl	829bc <__retarget_lock_release_recursive>
   81cd2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81cd6:	e71b      	b.n	81b10 <_vfiprintf_r+0x8b8>
   81cd8:	9b02      	ldr	r3, [sp, #8]
   81cda:	9302      	str	r3, [sp, #8]
   81cdc:	2301      	movs	r3, #1
   81cde:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81ce2:	3630      	adds	r6, #48	; 0x30
   81ce4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81ce8:	9305      	str	r3, [sp, #20]
   81cea:	e40d      	b.n	81508 <_vfiprintf_r+0x2b0>
   81cec:	aa0f      	add	r2, sp, #60	; 0x3c
   81cee:	9904      	ldr	r1, [sp, #16]
   81cf0:	9806      	ldr	r0, [sp, #24]
   81cf2:	f7ff fa71 	bl	811d8 <__sprint_r.part.0>
   81cf6:	2800      	cmp	r0, #0
   81cf8:	f47f af65 	bne.w	81bc6 <_vfiprintf_r+0x96e>
   81cfc:	9910      	ldr	r1, [sp, #64]	; 0x40
   81cfe:	46d1      	mov	r9, sl
   81d00:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d02:	1c48      	adds	r0, r1, #1
   81d04:	e457      	b.n	815b6 <_vfiprintf_r+0x35e>
   81d06:	aa0f      	add	r2, sp, #60	; 0x3c
   81d08:	9904      	ldr	r1, [sp, #16]
   81d0a:	9806      	ldr	r0, [sp, #24]
   81d0c:	f7ff fa64 	bl	811d8 <__sprint_r.part.0>
   81d10:	2800      	cmp	r0, #0
   81d12:	f47f af58 	bne.w	81bc6 <_vfiprintf_r+0x96e>
   81d16:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d18:	46d1      	mov	r9, sl
   81d1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d1c:	1c48      	adds	r0, r1, #1
   81d1e:	e644      	b.n	819aa <_vfiprintf_r+0x752>
   81d20:	2a00      	cmp	r2, #0
   81d22:	f040 8087 	bne.w	81e34 <_vfiprintf_r+0xbdc>
   81d26:	2001      	movs	r0, #1
   81d28:	4611      	mov	r1, r2
   81d2a:	46d1      	mov	r9, sl
   81d2c:	e641      	b.n	819b2 <_vfiprintf_r+0x75a>
   81d2e:	aa0f      	add	r2, sp, #60	; 0x3c
   81d30:	9904      	ldr	r1, [sp, #16]
   81d32:	9806      	ldr	r0, [sp, #24]
   81d34:	f7ff fa50 	bl	811d8 <__sprint_r.part.0>
   81d38:	2800      	cmp	r0, #0
   81d3a:	f47f af44 	bne.w	81bc6 <_vfiprintf_r+0x96e>
   81d3e:	9810      	ldr	r0, [sp, #64]	; 0x40
   81d40:	46d1      	mov	r9, sl
   81d42:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d44:	3001      	adds	r0, #1
   81d46:	e668      	b.n	81a1a <_vfiprintf_r+0x7c2>
   81d48:	46cb      	mov	fp, r9
   81d4a:	e6d7      	b.n	81afc <_vfiprintf_r+0x8a4>
   81d4c:	9d07      	ldr	r5, [sp, #28]
   81d4e:	3507      	adds	r5, #7
   81d50:	f025 0507 	bic.w	r5, r5, #7
   81d54:	f105 0208 	add.w	r2, r5, #8
   81d58:	e9d5 0100 	ldrd	r0, r1, [r5]
   81d5c:	9207      	str	r2, [sp, #28]
   81d5e:	4606      	mov	r6, r0
   81d60:	460f      	mov	r7, r1
   81d62:	e4c5      	b.n	816f0 <_vfiprintf_r+0x498>
   81d64:	9d07      	ldr	r5, [sp, #28]
   81d66:	3507      	adds	r5, #7
   81d68:	f025 0207 	bic.w	r2, r5, #7
   81d6c:	f102 0108 	add.w	r1, r2, #8
   81d70:	e9d2 6700 	ldrd	r6, r7, [r2]
   81d74:	9107      	str	r1, [sp, #28]
   81d76:	2201      	movs	r2, #1
   81d78:	f7ff bba7 	b.w	814ca <_vfiprintf_r+0x272>
   81d7c:	9d07      	ldr	r5, [sp, #28]
   81d7e:	3507      	adds	r5, #7
   81d80:	f025 0207 	bic.w	r2, r5, #7
   81d84:	f102 0108 	add.w	r1, r2, #8
   81d88:	e9d2 6700 	ldrd	r6, r7, [r2]
   81d8c:	9107      	str	r1, [sp, #28]
   81d8e:	2200      	movs	r2, #0
   81d90:	f7ff bb9b 	b.w	814ca <_vfiprintf_r+0x272>
   81d94:	9d07      	ldr	r5, [sp, #28]
   81d96:	3507      	adds	r5, #7
   81d98:	f025 0107 	bic.w	r1, r5, #7
   81d9c:	f101 0008 	add.w	r0, r1, #8
   81da0:	9007      	str	r0, [sp, #28]
   81da2:	e9d1 6700 	ldrd	r6, r7, [r1]
   81da6:	e51c      	b.n	817e2 <_vfiprintf_r+0x58a>
   81da8:	46d3      	mov	fp, sl
   81daa:	f7ff bbad 	b.w	81508 <_vfiprintf_r+0x2b0>
   81dae:	252d      	movs	r5, #45	; 0x2d
   81db0:	4276      	negs	r6, r6
   81db2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81db6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   81dba:	2201      	movs	r2, #1
   81dbc:	f7ff bb8a 	b.w	814d4 <_vfiprintf_r+0x27c>
   81dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81dc2:	b9b3      	cbnz	r3, 81df2 <_vfiprintf_r+0xb9a>
   81dc4:	4611      	mov	r1, r2
   81dc6:	2001      	movs	r0, #1
   81dc8:	46d1      	mov	r9, sl
   81dca:	e5f2      	b.n	819b2 <_vfiprintf_r+0x75a>
   81dcc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81dd0:	f000 fdf4 	bl	829bc <__retarget_lock_release_recursive>
   81dd4:	f04f 33ff 	mov.w	r3, #4294967295
   81dd8:	9303      	str	r3, [sp, #12]
   81dda:	f7ff bb4c 	b.w	81476 <_vfiprintf_r+0x21e>
   81dde:	aa0f      	add	r2, sp, #60	; 0x3c
   81de0:	9904      	ldr	r1, [sp, #16]
   81de2:	9806      	ldr	r0, [sp, #24]
   81de4:	f7ff f9f8 	bl	811d8 <__sprint_r.part.0>
   81de8:	2800      	cmp	r0, #0
   81dea:	f47f aeec 	bne.w	81bc6 <_vfiprintf_r+0x96e>
   81dee:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81df0:	e6aa      	b.n	81b48 <_vfiprintf_r+0x8f0>
   81df2:	2202      	movs	r2, #2
   81df4:	ab0e      	add	r3, sp, #56	; 0x38
   81df6:	921d      	str	r2, [sp, #116]	; 0x74
   81df8:	931c      	str	r3, [sp, #112]	; 0x70
   81dfa:	2001      	movs	r0, #1
   81dfc:	46d1      	mov	r9, sl
   81dfe:	e5d0      	b.n	819a2 <_vfiprintf_r+0x74a>
   81e00:	4d34      	ldr	r5, [pc, #208]	; (81ed4 <_vfiprintf_r+0xc7c>)
   81e02:	e5fd      	b.n	81a00 <_vfiprintf_r+0x7a8>
   81e04:	9a07      	ldr	r2, [sp, #28]
   81e06:	4613      	mov	r3, r2
   81e08:	3304      	adds	r3, #4
   81e0a:	9307      	str	r3, [sp, #28]
   81e0c:	9b03      	ldr	r3, [sp, #12]
   81e0e:	6811      	ldr	r1, [r2, #0]
   81e10:	17dd      	asrs	r5, r3, #31
   81e12:	461a      	mov	r2, r3
   81e14:	462b      	mov	r3, r5
   81e16:	e9c1 2300 	strd	r2, r3, [r1]
   81e1a:	f7ff ba5a 	b.w	812d2 <_vfiprintf_r+0x7a>
   81e1e:	4658      	mov	r0, fp
   81e20:	9507      	str	r5, [sp, #28]
   81e22:	9302      	str	r3, [sp, #8]
   81e24:	f7ff f9aa 	bl	8117c <strlen>
   81e28:	2400      	movs	r4, #0
   81e2a:	9005      	str	r0, [sp, #20]
   81e2c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e30:	f7ff bb6a 	b.w	81508 <_vfiprintf_r+0x2b0>
   81e34:	aa0f      	add	r2, sp, #60	; 0x3c
   81e36:	9904      	ldr	r1, [sp, #16]
   81e38:	9806      	ldr	r0, [sp, #24]
   81e3a:	f7ff f9cd 	bl	811d8 <__sprint_r.part.0>
   81e3e:	2800      	cmp	r0, #0
   81e40:	f47f aec1 	bne.w	81bc6 <_vfiprintf_r+0x96e>
   81e44:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e46:	46d1      	mov	r9, sl
   81e48:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e4a:	1c48      	adds	r0, r1, #1
   81e4c:	e5b1      	b.n	819b2 <_vfiprintf_r+0x75a>
   81e4e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e50:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e52:	3101      	adds	r1, #1
   81e54:	4e20      	ldr	r6, [pc, #128]	; (81ed8 <_vfiprintf_r+0xc80>)
   81e56:	f7ff bb9c 	b.w	81592 <_vfiprintf_r+0x33a>
   81e5a:	2c06      	cmp	r4, #6
   81e5c:	bf28      	it	cs
   81e5e:	2406      	movcs	r4, #6
   81e60:	9507      	str	r5, [sp, #28]
   81e62:	9405      	str	r4, [sp, #20]
   81e64:	9401      	str	r4, [sp, #4]
   81e66:	f8df b074 	ldr.w	fp, [pc, #116]	; 81edc <_vfiprintf_r+0xc84>
   81e6a:	e4e3      	b.n	81834 <_vfiprintf_r+0x5dc>
   81e6c:	9810      	ldr	r0, [sp, #64]	; 0x40
   81e6e:	4e1a      	ldr	r6, [pc, #104]	; (81ed8 <_vfiprintf_r+0xc80>)
   81e70:	3001      	adds	r0, #1
   81e72:	e60e      	b.n	81a92 <_vfiprintf_r+0x83a>
   81e74:	4686      	mov	lr, r0
   81e76:	4d17      	ldr	r5, [pc, #92]	; (81ed4 <_vfiprintf_r+0xc7c>)
   81e78:	f7ff bbe2 	b.w	81640 <_vfiprintf_r+0x3e8>
   81e7c:	9405      	str	r4, [sp, #20]
   81e7e:	9507      	str	r5, [sp, #28]
   81e80:	9302      	str	r3, [sp, #8]
   81e82:	4604      	mov	r4, r0
   81e84:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e88:	f7ff bb3e 	b.w	81508 <_vfiprintf_r+0x2b0>
   81e8c:	9806      	ldr	r0, [sp, #24]
   81e8e:	aa0f      	add	r2, sp, #60	; 0x3c
   81e90:	4659      	mov	r1, fp
   81e92:	f7ff f9a1 	bl	811d8 <__sprint_r.part.0>
   81e96:	2800      	cmp	r0, #0
   81e98:	f43f ae2e 	beq.w	81af8 <_vfiprintf_r+0x8a0>
   81e9c:	e62e      	b.n	81afc <_vfiprintf_r+0x8a4>
   81e9e:	9907      	ldr	r1, [sp, #28]
   81ea0:	f898 2001 	ldrb.w	r2, [r8, #1]
   81ea4:	680c      	ldr	r4, [r1, #0]
   81ea6:	3104      	adds	r1, #4
   81ea8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   81eac:	46b8      	mov	r8, r7
   81eae:	9107      	str	r1, [sp, #28]
   81eb0:	f7ff ba44 	b.w	8133c <_vfiprintf_r+0xe4>
   81eb4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81eb8:	e4a7      	b.n	8180a <_vfiprintf_r+0x5b2>
   81eba:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81ebe:	e521      	b.n	81904 <_vfiprintf_r+0x6ac>
   81ec0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81ec4:	e47c      	b.n	817c0 <_vfiprintf_r+0x568>
   81ec6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81eca:	e43f      	b.n	8174c <_vfiprintf_r+0x4f4>
   81ecc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81ed0:	f7ff bbfa 	b.w	816c8 <_vfiprintf_r+0x470>
   81ed4:	00083ccc 	.word	0x00083ccc
   81ed8:	00083cbc 	.word	0x00083cbc
   81edc:	00083cb4 	.word	0x00083cb4

00081ee0 <__sbprintf>:
   81ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ee4:	460c      	mov	r4, r1
   81ee6:	f04f 0e00 	mov.w	lr, #0
   81eea:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81eee:	4606      	mov	r6, r0
   81ef0:	4617      	mov	r7, r2
   81ef2:	4698      	mov	r8, r3
   81ef4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   81ef6:	89e3      	ldrh	r3, [r4, #14]
   81ef8:	8989      	ldrh	r1, [r1, #12]
   81efa:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81efe:	f021 0102 	bic.w	r1, r1, #2
   81f02:	9219      	str	r2, [sp, #100]	; 0x64
   81f04:	f8ad 300e 	strh.w	r3, [sp, #14]
   81f08:	69e2      	ldr	r2, [r4, #28]
   81f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f0c:	f8ad 100c 	strh.w	r1, [sp, #12]
   81f10:	a816      	add	r0, sp, #88	; 0x58
   81f12:	a91a      	add	r1, sp, #104	; 0x68
   81f14:	f8cd e018 	str.w	lr, [sp, #24]
   81f18:	9207      	str	r2, [sp, #28]
   81f1a:	9309      	str	r3, [sp, #36]	; 0x24
   81f1c:	9100      	str	r1, [sp, #0]
   81f1e:	9104      	str	r1, [sp, #16]
   81f20:	9502      	str	r5, [sp, #8]
   81f22:	9505      	str	r5, [sp, #20]
   81f24:	f000 fd44 	bl	829b0 <__retarget_lock_init_recursive>
   81f28:	4643      	mov	r3, r8
   81f2a:	463a      	mov	r2, r7
   81f2c:	4669      	mov	r1, sp
   81f2e:	4630      	mov	r0, r6
   81f30:	f7ff f992 	bl	81258 <_vfiprintf_r>
   81f34:	1e05      	subs	r5, r0, #0
   81f36:	db07      	blt.n	81f48 <__sbprintf+0x68>
   81f38:	4630      	mov	r0, r6
   81f3a:	4669      	mov	r1, sp
   81f3c:	f000 f924 	bl	82188 <_fflush_r>
   81f40:	2800      	cmp	r0, #0
   81f42:	bf18      	it	ne
   81f44:	f04f 35ff 	movne.w	r5, #4294967295
   81f48:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81f4c:	065b      	lsls	r3, r3, #25
   81f4e:	d503      	bpl.n	81f58 <__sbprintf+0x78>
   81f50:	89a3      	ldrh	r3, [r4, #12]
   81f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f56:	81a3      	strh	r3, [r4, #12]
   81f58:	9816      	ldr	r0, [sp, #88]	; 0x58
   81f5a:	f000 fd2b 	bl	829b4 <__retarget_lock_close_recursive>
   81f5e:	4628      	mov	r0, r5
   81f60:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081f68 <__swsetup_r>:
   81f68:	b538      	push	{r3, r4, r5, lr}
   81f6a:	4b30      	ldr	r3, [pc, #192]	; (8202c <__swsetup_r+0xc4>)
   81f6c:	4605      	mov	r5, r0
   81f6e:	6818      	ldr	r0, [r3, #0]
   81f70:	460c      	mov	r4, r1
   81f72:	b110      	cbz	r0, 81f7a <__swsetup_r+0x12>
   81f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f76:	2b00      	cmp	r3, #0
   81f78:	d038      	beq.n	81fec <__swsetup_r+0x84>
   81f7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81f7e:	b293      	uxth	r3, r2
   81f80:	0718      	lsls	r0, r3, #28
   81f82:	d50c      	bpl.n	81f9e <__swsetup_r+0x36>
   81f84:	6920      	ldr	r0, [r4, #16]
   81f86:	b1a8      	cbz	r0, 81fb4 <__swsetup_r+0x4c>
   81f88:	f013 0201 	ands.w	r2, r3, #1
   81f8c:	d01e      	beq.n	81fcc <__swsetup_r+0x64>
   81f8e:	2200      	movs	r2, #0
   81f90:	6963      	ldr	r3, [r4, #20]
   81f92:	60a2      	str	r2, [r4, #8]
   81f94:	425b      	negs	r3, r3
   81f96:	61a3      	str	r3, [r4, #24]
   81f98:	b1f0      	cbz	r0, 81fd8 <__swsetup_r+0x70>
   81f9a:	2000      	movs	r0, #0
   81f9c:	bd38      	pop	{r3, r4, r5, pc}
   81f9e:	06d9      	lsls	r1, r3, #27
   81fa0:	d53b      	bpl.n	8201a <__swsetup_r+0xb2>
   81fa2:	0758      	lsls	r0, r3, #29
   81fa4:	d425      	bmi.n	81ff2 <__swsetup_r+0x8a>
   81fa6:	6920      	ldr	r0, [r4, #16]
   81fa8:	f042 0308 	orr.w	r3, r2, #8
   81fac:	81a3      	strh	r3, [r4, #12]
   81fae:	b29b      	uxth	r3, r3
   81fb0:	2800      	cmp	r0, #0
   81fb2:	d1e9      	bne.n	81f88 <__swsetup_r+0x20>
   81fb4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81fb8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81fbc:	d0e4      	beq.n	81f88 <__swsetup_r+0x20>
   81fbe:	4628      	mov	r0, r5
   81fc0:	4621      	mov	r1, r4
   81fc2:	f000 fd2b 	bl	82a1c <__smakebuf_r>
   81fc6:	89a3      	ldrh	r3, [r4, #12]
   81fc8:	6920      	ldr	r0, [r4, #16]
   81fca:	e7dd      	b.n	81f88 <__swsetup_r+0x20>
   81fcc:	0799      	lsls	r1, r3, #30
   81fce:	bf58      	it	pl
   81fd0:	6962      	ldrpl	r2, [r4, #20]
   81fd2:	60a2      	str	r2, [r4, #8]
   81fd4:	2800      	cmp	r0, #0
   81fd6:	d1e0      	bne.n	81f9a <__swsetup_r+0x32>
   81fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81fdc:	061a      	lsls	r2, r3, #24
   81fde:	d5dd      	bpl.n	81f9c <__swsetup_r+0x34>
   81fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81fe4:	81a3      	strh	r3, [r4, #12]
   81fe6:	f04f 30ff 	mov.w	r0, #4294967295
   81fea:	bd38      	pop	{r3, r4, r5, pc}
   81fec:	f000 f924 	bl	82238 <__sinit>
   81ff0:	e7c3      	b.n	81f7a <__swsetup_r+0x12>
   81ff2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81ff4:	b151      	cbz	r1, 8200c <__swsetup_r+0xa4>
   81ff6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81ffa:	4299      	cmp	r1, r3
   81ffc:	d004      	beq.n	82008 <__swsetup_r+0xa0>
   81ffe:	4628      	mov	r0, r5
   82000:	f000 fa40 	bl	82484 <_free_r>
   82004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82008:	2300      	movs	r3, #0
   8200a:	6323      	str	r3, [r4, #48]	; 0x30
   8200c:	2300      	movs	r3, #0
   8200e:	6920      	ldr	r0, [r4, #16]
   82010:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82014:	e884 0009 	stmia.w	r4, {r0, r3}
   82018:	e7c6      	b.n	81fa8 <__swsetup_r+0x40>
   8201a:	2309      	movs	r3, #9
   8201c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82020:	602b      	str	r3, [r5, #0]
   82022:	f04f 30ff 	mov.w	r0, #4294967295
   82026:	81a2      	strh	r2, [r4, #12]
   82028:	bd38      	pop	{r3, r4, r5, pc}
   8202a:	bf00      	nop
   8202c:	20070134 	.word	0x20070134

00082030 <register_fini>:
   82030:	4b02      	ldr	r3, [pc, #8]	; (8203c <register_fini+0xc>)
   82032:	b113      	cbz	r3, 8203a <register_fini+0xa>
   82034:	4802      	ldr	r0, [pc, #8]	; (82040 <register_fini+0x10>)
   82036:	f000 b805 	b.w	82044 <atexit>
   8203a:	4770      	bx	lr
   8203c:	00000000 	.word	0x00000000
   82040:	000822b1 	.word	0x000822b1

00082044 <atexit>:
   82044:	2300      	movs	r3, #0
   82046:	4601      	mov	r1, r0
   82048:	461a      	mov	r2, r3
   8204a:	4618      	mov	r0, r3
   8204c:	f001 bb56 	b.w	836fc <__register_exitproc>

00082050 <__sflush_r>:
   82050:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82058:	b29a      	uxth	r2, r3
   8205a:	460d      	mov	r5, r1
   8205c:	0711      	lsls	r1, r2, #28
   8205e:	4680      	mov	r8, r0
   82060:	d43a      	bmi.n	820d8 <__sflush_r+0x88>
   82062:	686a      	ldr	r2, [r5, #4]
   82064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82068:	2a00      	cmp	r2, #0
   8206a:	81ab      	strh	r3, [r5, #12]
   8206c:	dd70      	ble.n	82150 <__sflush_r+0x100>
   8206e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82070:	2c00      	cmp	r4, #0
   82072:	d04a      	beq.n	8210a <__sflush_r+0xba>
   82074:	2200      	movs	r2, #0
   82076:	b29b      	uxth	r3, r3
   82078:	f8d8 6000 	ldr.w	r6, [r8]
   8207c:	f8c8 2000 	str.w	r2, [r8]
   82080:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82084:	d068      	beq.n	82158 <__sflush_r+0x108>
   82086:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82088:	075f      	lsls	r7, r3, #29
   8208a:	d505      	bpl.n	82098 <__sflush_r+0x48>
   8208c:	6869      	ldr	r1, [r5, #4]
   8208e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82090:	1a52      	subs	r2, r2, r1
   82092:	b10b      	cbz	r3, 82098 <__sflush_r+0x48>
   82094:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82096:	1ad2      	subs	r2, r2, r3
   82098:	2300      	movs	r3, #0
   8209a:	69e9      	ldr	r1, [r5, #28]
   8209c:	4640      	mov	r0, r8
   8209e:	47a0      	blx	r4
   820a0:	1c44      	adds	r4, r0, #1
   820a2:	d03d      	beq.n	82120 <__sflush_r+0xd0>
   820a4:	2100      	movs	r1, #0
   820a6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   820aa:	692a      	ldr	r2, [r5, #16]
   820ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   820b0:	81ab      	strh	r3, [r5, #12]
   820b2:	04db      	lsls	r3, r3, #19
   820b4:	6069      	str	r1, [r5, #4]
   820b6:	602a      	str	r2, [r5, #0]
   820b8:	d448      	bmi.n	8214c <__sflush_r+0xfc>
   820ba:	6b29      	ldr	r1, [r5, #48]	; 0x30
   820bc:	f8c8 6000 	str.w	r6, [r8]
   820c0:	b319      	cbz	r1, 8210a <__sflush_r+0xba>
   820c2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   820c6:	4299      	cmp	r1, r3
   820c8:	d002      	beq.n	820d0 <__sflush_r+0x80>
   820ca:	4640      	mov	r0, r8
   820cc:	f000 f9da 	bl	82484 <_free_r>
   820d0:	2000      	movs	r0, #0
   820d2:	6328      	str	r0, [r5, #48]	; 0x30
   820d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820d8:	692e      	ldr	r6, [r5, #16]
   820da:	b1b6      	cbz	r6, 8210a <__sflush_r+0xba>
   820dc:	0791      	lsls	r1, r2, #30
   820de:	bf18      	it	ne
   820e0:	2300      	movne	r3, #0
   820e2:	682c      	ldr	r4, [r5, #0]
   820e4:	bf08      	it	eq
   820e6:	696b      	ldreq	r3, [r5, #20]
   820e8:	602e      	str	r6, [r5, #0]
   820ea:	1ba4      	subs	r4, r4, r6
   820ec:	60ab      	str	r3, [r5, #8]
   820ee:	e00a      	b.n	82106 <__sflush_r+0xb6>
   820f0:	4623      	mov	r3, r4
   820f2:	4632      	mov	r2, r6
   820f4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   820f6:	69e9      	ldr	r1, [r5, #28]
   820f8:	4640      	mov	r0, r8
   820fa:	47b8      	blx	r7
   820fc:	2800      	cmp	r0, #0
   820fe:	eba4 0400 	sub.w	r4, r4, r0
   82102:	4406      	add	r6, r0
   82104:	dd04      	ble.n	82110 <__sflush_r+0xc0>
   82106:	2c00      	cmp	r4, #0
   82108:	dcf2      	bgt.n	820f0 <__sflush_r+0xa0>
   8210a:	2000      	movs	r0, #0
   8210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82110:	89ab      	ldrh	r3, [r5, #12]
   82112:	f04f 30ff 	mov.w	r0, #4294967295
   82116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8211a:	81ab      	strh	r3, [r5, #12]
   8211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82120:	f8d8 4000 	ldr.w	r4, [r8]
   82124:	2c1d      	cmp	r4, #29
   82126:	d8f3      	bhi.n	82110 <__sflush_r+0xc0>
   82128:	4b16      	ldr	r3, [pc, #88]	; (82184 <__sflush_r+0x134>)
   8212a:	40e3      	lsrs	r3, r4
   8212c:	43db      	mvns	r3, r3
   8212e:	f013 0301 	ands.w	r3, r3, #1
   82132:	d1ed      	bne.n	82110 <__sflush_r+0xc0>
   82134:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82138:	6929      	ldr	r1, [r5, #16]
   8213a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8213e:	81aa      	strh	r2, [r5, #12]
   82140:	04d2      	lsls	r2, r2, #19
   82142:	606b      	str	r3, [r5, #4]
   82144:	6029      	str	r1, [r5, #0]
   82146:	d5b8      	bpl.n	820ba <__sflush_r+0x6a>
   82148:	2c00      	cmp	r4, #0
   8214a:	d1b6      	bne.n	820ba <__sflush_r+0x6a>
   8214c:	6528      	str	r0, [r5, #80]	; 0x50
   8214e:	e7b4      	b.n	820ba <__sflush_r+0x6a>
   82150:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82152:	2a00      	cmp	r2, #0
   82154:	dc8b      	bgt.n	8206e <__sflush_r+0x1e>
   82156:	e7d8      	b.n	8210a <__sflush_r+0xba>
   82158:	2301      	movs	r3, #1
   8215a:	69e9      	ldr	r1, [r5, #28]
   8215c:	4640      	mov	r0, r8
   8215e:	47a0      	blx	r4
   82160:	1c43      	adds	r3, r0, #1
   82162:	4602      	mov	r2, r0
   82164:	d002      	beq.n	8216c <__sflush_r+0x11c>
   82166:	89ab      	ldrh	r3, [r5, #12]
   82168:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8216a:	e78d      	b.n	82088 <__sflush_r+0x38>
   8216c:	f8d8 3000 	ldr.w	r3, [r8]
   82170:	2b00      	cmp	r3, #0
   82172:	d0f8      	beq.n	82166 <__sflush_r+0x116>
   82174:	2b1d      	cmp	r3, #29
   82176:	d001      	beq.n	8217c <__sflush_r+0x12c>
   82178:	2b16      	cmp	r3, #22
   8217a:	d1c9      	bne.n	82110 <__sflush_r+0xc0>
   8217c:	f8c8 6000 	str.w	r6, [r8]
   82180:	e7c3      	b.n	8210a <__sflush_r+0xba>
   82182:	bf00      	nop
   82184:	20400001 	.word	0x20400001

00082188 <_fflush_r>:
   82188:	b538      	push	{r3, r4, r5, lr}
   8218a:	460d      	mov	r5, r1
   8218c:	4604      	mov	r4, r0
   8218e:	b108      	cbz	r0, 82194 <_fflush_r+0xc>
   82190:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82192:	b1bb      	cbz	r3, 821c4 <_fflush_r+0x3c>
   82194:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82198:	b188      	cbz	r0, 821be <_fflush_r+0x36>
   8219a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8219c:	07db      	lsls	r3, r3, #31
   8219e:	d401      	bmi.n	821a4 <_fflush_r+0x1c>
   821a0:	0581      	lsls	r1, r0, #22
   821a2:	d517      	bpl.n	821d4 <_fflush_r+0x4c>
   821a4:	4620      	mov	r0, r4
   821a6:	4629      	mov	r1, r5
   821a8:	f7ff ff52 	bl	82050 <__sflush_r>
   821ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   821ae:	4604      	mov	r4, r0
   821b0:	07da      	lsls	r2, r3, #31
   821b2:	d402      	bmi.n	821ba <_fflush_r+0x32>
   821b4:	89ab      	ldrh	r3, [r5, #12]
   821b6:	059b      	lsls	r3, r3, #22
   821b8:	d507      	bpl.n	821ca <_fflush_r+0x42>
   821ba:	4620      	mov	r0, r4
   821bc:	bd38      	pop	{r3, r4, r5, pc}
   821be:	4604      	mov	r4, r0
   821c0:	4620      	mov	r0, r4
   821c2:	bd38      	pop	{r3, r4, r5, pc}
   821c4:	f000 f838 	bl	82238 <__sinit>
   821c8:	e7e4      	b.n	82194 <_fflush_r+0xc>
   821ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
   821cc:	f000 fbf6 	bl	829bc <__retarget_lock_release_recursive>
   821d0:	4620      	mov	r0, r4
   821d2:	bd38      	pop	{r3, r4, r5, pc}
   821d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   821d6:	f000 fbef 	bl	829b8 <__retarget_lock_acquire_recursive>
   821da:	e7e3      	b.n	821a4 <_fflush_r+0x1c>

000821dc <_cleanup_r>:
   821dc:	4901      	ldr	r1, [pc, #4]	; (821e4 <_cleanup_r+0x8>)
   821de:	f000 bbb1 	b.w	82944 <_fwalk_reent>
   821e2:	bf00      	nop
   821e4:	000837e5 	.word	0x000837e5

000821e8 <std.isra.0>:
   821e8:	2300      	movs	r3, #0
   821ea:	b510      	push	{r4, lr}
   821ec:	4604      	mov	r4, r0
   821ee:	8181      	strh	r1, [r0, #12]
   821f0:	81c2      	strh	r2, [r0, #14]
   821f2:	6003      	str	r3, [r0, #0]
   821f4:	6043      	str	r3, [r0, #4]
   821f6:	6083      	str	r3, [r0, #8]
   821f8:	6643      	str	r3, [r0, #100]	; 0x64
   821fa:	6103      	str	r3, [r0, #16]
   821fc:	6143      	str	r3, [r0, #20]
   821fe:	6183      	str	r3, [r0, #24]
   82200:	4619      	mov	r1, r3
   82202:	2208      	movs	r2, #8
   82204:	305c      	adds	r0, #92	; 0x5c
   82206:	f7fe fe9b 	bl	80f40 <memset>
   8220a:	4807      	ldr	r0, [pc, #28]	; (82228 <std.isra.0+0x40>)
   8220c:	4907      	ldr	r1, [pc, #28]	; (8222c <std.isra.0+0x44>)
   8220e:	4a08      	ldr	r2, [pc, #32]	; (82230 <std.isra.0+0x48>)
   82210:	4b08      	ldr	r3, [pc, #32]	; (82234 <std.isra.0+0x4c>)
   82212:	6220      	str	r0, [r4, #32]
   82214:	61e4      	str	r4, [r4, #28]
   82216:	6261      	str	r1, [r4, #36]	; 0x24
   82218:	62a2      	str	r2, [r4, #40]	; 0x28
   8221a:	62e3      	str	r3, [r4, #44]	; 0x2c
   8221c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82224:	f000 bbc4 	b.w	829b0 <__retarget_lock_init_recursive>
   82228:	0008352d 	.word	0x0008352d
   8222c:	00083551 	.word	0x00083551
   82230:	0008358d 	.word	0x0008358d
   82234:	000835ad 	.word	0x000835ad

00082238 <__sinit>:
   82238:	b510      	push	{r4, lr}
   8223a:	4604      	mov	r4, r0
   8223c:	4814      	ldr	r0, [pc, #80]	; (82290 <__sinit+0x58>)
   8223e:	f000 fbbb 	bl	829b8 <__retarget_lock_acquire_recursive>
   82242:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82244:	b9fa      	cbnz	r2, 82286 <__sinit+0x4e>
   82246:	2003      	movs	r0, #3
   82248:	4912      	ldr	r1, [pc, #72]	; (82294 <__sinit+0x5c>)
   8224a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8224e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82252:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82256:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8225a:	63e1      	str	r1, [r4, #60]	; 0x3c
   8225c:	6860      	ldr	r0, [r4, #4]
   8225e:	2104      	movs	r1, #4
   82260:	f7ff ffc2 	bl	821e8 <std.isra.0>
   82264:	68a0      	ldr	r0, [r4, #8]
   82266:	2201      	movs	r2, #1
   82268:	2109      	movs	r1, #9
   8226a:	f7ff ffbd 	bl	821e8 <std.isra.0>
   8226e:	68e0      	ldr	r0, [r4, #12]
   82270:	2202      	movs	r2, #2
   82272:	2112      	movs	r1, #18
   82274:	f7ff ffb8 	bl	821e8 <std.isra.0>
   82278:	2301      	movs	r3, #1
   8227a:	4805      	ldr	r0, [pc, #20]	; (82290 <__sinit+0x58>)
   8227c:	63a3      	str	r3, [r4, #56]	; 0x38
   8227e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82282:	f000 bb9b 	b.w	829bc <__retarget_lock_release_recursive>
   82286:	4802      	ldr	r0, [pc, #8]	; (82290 <__sinit+0x58>)
   82288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8228c:	f000 bb96 	b.w	829bc <__retarget_lock_release_recursive>
   82290:	20070c44 	.word	0x20070c44
   82294:	000821dd 	.word	0x000821dd

00082298 <__sfp_lock_acquire>:
   82298:	4801      	ldr	r0, [pc, #4]	; (822a0 <__sfp_lock_acquire+0x8>)
   8229a:	f000 bb8d 	b.w	829b8 <__retarget_lock_acquire_recursive>
   8229e:	bf00      	nop
   822a0:	20070c58 	.word	0x20070c58

000822a4 <__sfp_lock_release>:
   822a4:	4801      	ldr	r0, [pc, #4]	; (822ac <__sfp_lock_release+0x8>)
   822a6:	f000 bb89 	b.w	829bc <__retarget_lock_release_recursive>
   822aa:	bf00      	nop
   822ac:	20070c58 	.word	0x20070c58

000822b0 <__libc_fini_array>:
   822b0:	b538      	push	{r3, r4, r5, lr}
   822b2:	4c0a      	ldr	r4, [pc, #40]	; (822dc <__libc_fini_array+0x2c>)
   822b4:	4d0a      	ldr	r5, [pc, #40]	; (822e0 <__libc_fini_array+0x30>)
   822b6:	1b64      	subs	r4, r4, r5
   822b8:	10a4      	asrs	r4, r4, #2
   822ba:	d00a      	beq.n	822d2 <__libc_fini_array+0x22>
   822bc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   822c0:	3b01      	subs	r3, #1
   822c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   822c6:	3c01      	subs	r4, #1
   822c8:	f855 3904 	ldr.w	r3, [r5], #-4
   822cc:	4798      	blx	r3
   822ce:	2c00      	cmp	r4, #0
   822d0:	d1f9      	bne.n	822c6 <__libc_fini_array+0x16>
   822d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   822d6:	f001 bd95 	b.w	83e04 <_fini>
   822da:	bf00      	nop
   822dc:	00083e14 	.word	0x00083e14
   822e0:	00083e10 	.word	0x00083e10

000822e4 <__fputwc>:
   822e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   822e8:	b083      	sub	sp, #12
   822ea:	4607      	mov	r7, r0
   822ec:	4688      	mov	r8, r1
   822ee:	4614      	mov	r4, r2
   822f0:	f000 fb50 	bl	82994 <__locale_mb_cur_max>
   822f4:	2801      	cmp	r0, #1
   822f6:	d033      	beq.n	82360 <__fputwc+0x7c>
   822f8:	4642      	mov	r2, r8
   822fa:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   822fe:	a901      	add	r1, sp, #4
   82300:	4638      	mov	r0, r7
   82302:	f001 f9af 	bl	83664 <_wcrtomb_r>
   82306:	1c42      	adds	r2, r0, #1
   82308:	4606      	mov	r6, r0
   8230a:	d022      	beq.n	82352 <__fputwc+0x6e>
   8230c:	b390      	cbz	r0, 82374 <__fputwc+0x90>
   8230e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82312:	2500      	movs	r5, #0
   82314:	f10d 0904 	add.w	r9, sp, #4
   82318:	e008      	b.n	8232c <__fputwc+0x48>
   8231a:	6823      	ldr	r3, [r4, #0]
   8231c:	1c5a      	adds	r2, r3, #1
   8231e:	6022      	str	r2, [r4, #0]
   82320:	7019      	strb	r1, [r3, #0]
   82322:	3501      	adds	r5, #1
   82324:	42b5      	cmp	r5, r6
   82326:	d225      	bcs.n	82374 <__fputwc+0x90>
   82328:	f815 1009 	ldrb.w	r1, [r5, r9]
   8232c:	68a3      	ldr	r3, [r4, #8]
   8232e:	3b01      	subs	r3, #1
   82330:	2b00      	cmp	r3, #0
   82332:	60a3      	str	r3, [r4, #8]
   82334:	daf1      	bge.n	8231a <__fputwc+0x36>
   82336:	69a2      	ldr	r2, [r4, #24]
   82338:	4293      	cmp	r3, r2
   8233a:	db01      	blt.n	82340 <__fputwc+0x5c>
   8233c:	290a      	cmp	r1, #10
   8233e:	d1ec      	bne.n	8231a <__fputwc+0x36>
   82340:	4622      	mov	r2, r4
   82342:	4638      	mov	r0, r7
   82344:	f001 f936 	bl	835b4 <__swbuf_r>
   82348:	1c43      	adds	r3, r0, #1
   8234a:	d1ea      	bne.n	82322 <__fputwc+0x3e>
   8234c:	b003      	add	sp, #12
   8234e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82352:	89a3      	ldrh	r3, [r4, #12]
   82354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82358:	81a3      	strh	r3, [r4, #12]
   8235a:	b003      	add	sp, #12
   8235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82360:	f108 33ff 	add.w	r3, r8, #4294967295
   82364:	2bfe      	cmp	r3, #254	; 0xfe
   82366:	d8c7      	bhi.n	822f8 <__fputwc+0x14>
   82368:	fa5f f188 	uxtb.w	r1, r8
   8236c:	4606      	mov	r6, r0
   8236e:	f88d 1004 	strb.w	r1, [sp, #4]
   82372:	e7ce      	b.n	82312 <__fputwc+0x2e>
   82374:	4640      	mov	r0, r8
   82376:	b003      	add	sp, #12
   82378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008237c <_fputwc_r>:
   8237c:	b530      	push	{r4, r5, lr}
   8237e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82380:	4614      	mov	r4, r2
   82382:	f013 0f01 	tst.w	r3, #1
   82386:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8238a:	b083      	sub	sp, #12
   8238c:	4605      	mov	r5, r0
   8238e:	b29a      	uxth	r2, r3
   82390:	d101      	bne.n	82396 <_fputwc_r+0x1a>
   82392:	0590      	lsls	r0, r2, #22
   82394:	d51c      	bpl.n	823d0 <_fputwc_r+0x54>
   82396:	0490      	lsls	r0, r2, #18
   82398:	d406      	bmi.n	823a8 <_fputwc_r+0x2c>
   8239a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8239c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   823a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   823a4:	81a3      	strh	r3, [r4, #12]
   823a6:	6662      	str	r2, [r4, #100]	; 0x64
   823a8:	4628      	mov	r0, r5
   823aa:	4622      	mov	r2, r4
   823ac:	f7ff ff9a 	bl	822e4 <__fputwc>
   823b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   823b2:	4605      	mov	r5, r0
   823b4:	07da      	lsls	r2, r3, #31
   823b6:	d402      	bmi.n	823be <_fputwc_r+0x42>
   823b8:	89a3      	ldrh	r3, [r4, #12]
   823ba:	059b      	lsls	r3, r3, #22
   823bc:	d502      	bpl.n	823c4 <_fputwc_r+0x48>
   823be:	4628      	mov	r0, r5
   823c0:	b003      	add	sp, #12
   823c2:	bd30      	pop	{r4, r5, pc}
   823c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   823c6:	f000 faf9 	bl	829bc <__retarget_lock_release_recursive>
   823ca:	4628      	mov	r0, r5
   823cc:	b003      	add	sp, #12
   823ce:	bd30      	pop	{r4, r5, pc}
   823d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   823d2:	9101      	str	r1, [sp, #4]
   823d4:	f000 faf0 	bl	829b8 <__retarget_lock_acquire_recursive>
   823d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   823dc:	9901      	ldr	r1, [sp, #4]
   823de:	b29a      	uxth	r2, r3
   823e0:	e7d9      	b.n	82396 <_fputwc_r+0x1a>
   823e2:	bf00      	nop

000823e4 <_malloc_trim_r>:
   823e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   823e6:	460c      	mov	r4, r1
   823e8:	4f23      	ldr	r7, [pc, #140]	; (82478 <_malloc_trim_r+0x94>)
   823ea:	4606      	mov	r6, r0
   823ec:	f000 feca 	bl	83184 <__malloc_lock>
   823f0:	68bb      	ldr	r3, [r7, #8]
   823f2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   823f6:	685d      	ldr	r5, [r3, #4]
   823f8:	310f      	adds	r1, #15
   823fa:	f025 0503 	bic.w	r5, r5, #3
   823fe:	4429      	add	r1, r5
   82400:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82404:	f021 010f 	bic.w	r1, r1, #15
   82408:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8240c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82410:	db07      	blt.n	82422 <_malloc_trim_r+0x3e>
   82412:	2100      	movs	r1, #0
   82414:	4630      	mov	r0, r6
   82416:	f001 f877 	bl	83508 <_sbrk_r>
   8241a:	68bb      	ldr	r3, [r7, #8]
   8241c:	442b      	add	r3, r5
   8241e:	4298      	cmp	r0, r3
   82420:	d004      	beq.n	8242c <_malloc_trim_r+0x48>
   82422:	4630      	mov	r0, r6
   82424:	f000 feb4 	bl	83190 <__malloc_unlock>
   82428:	2000      	movs	r0, #0
   8242a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8242c:	4261      	negs	r1, r4
   8242e:	4630      	mov	r0, r6
   82430:	f001 f86a 	bl	83508 <_sbrk_r>
   82434:	3001      	adds	r0, #1
   82436:	d00d      	beq.n	82454 <_malloc_trim_r+0x70>
   82438:	4b10      	ldr	r3, [pc, #64]	; (8247c <_malloc_trim_r+0x98>)
   8243a:	68ba      	ldr	r2, [r7, #8]
   8243c:	6819      	ldr	r1, [r3, #0]
   8243e:	1b2d      	subs	r5, r5, r4
   82440:	f045 0501 	orr.w	r5, r5, #1
   82444:	4630      	mov	r0, r6
   82446:	1b09      	subs	r1, r1, r4
   82448:	6055      	str	r5, [r2, #4]
   8244a:	6019      	str	r1, [r3, #0]
   8244c:	f000 fea0 	bl	83190 <__malloc_unlock>
   82450:	2001      	movs	r0, #1
   82452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82454:	2100      	movs	r1, #0
   82456:	4630      	mov	r0, r6
   82458:	f001 f856 	bl	83508 <_sbrk_r>
   8245c:	68ba      	ldr	r2, [r7, #8]
   8245e:	1a83      	subs	r3, r0, r2
   82460:	2b0f      	cmp	r3, #15
   82462:	ddde      	ble.n	82422 <_malloc_trim_r+0x3e>
   82464:	4c06      	ldr	r4, [pc, #24]	; (82480 <_malloc_trim_r+0x9c>)
   82466:	4905      	ldr	r1, [pc, #20]	; (8247c <_malloc_trim_r+0x98>)
   82468:	6824      	ldr	r4, [r4, #0]
   8246a:	f043 0301 	orr.w	r3, r3, #1
   8246e:	1b00      	subs	r0, r0, r4
   82470:	6053      	str	r3, [r2, #4]
   82472:	6008      	str	r0, [r1, #0]
   82474:	e7d5      	b.n	82422 <_malloc_trim_r+0x3e>
   82476:	bf00      	nop
   82478:	200706d0 	.word	0x200706d0
   8247c:	20070bf8 	.word	0x20070bf8
   82480:	20070ad8 	.word	0x20070ad8

00082484 <_free_r>:
   82484:	2900      	cmp	r1, #0
   82486:	d044      	beq.n	82512 <_free_r+0x8e>
   82488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8248c:	460d      	mov	r5, r1
   8248e:	4680      	mov	r8, r0
   82490:	f000 fe78 	bl	83184 <__malloc_lock>
   82494:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82498:	4969      	ldr	r1, [pc, #420]	; (82640 <_free_r+0x1bc>)
   8249a:	f1a5 0408 	sub.w	r4, r5, #8
   8249e:	f027 0301 	bic.w	r3, r7, #1
   824a2:	18e2      	adds	r2, r4, r3
   824a4:	688e      	ldr	r6, [r1, #8]
   824a6:	6850      	ldr	r0, [r2, #4]
   824a8:	42b2      	cmp	r2, r6
   824aa:	f020 0003 	bic.w	r0, r0, #3
   824ae:	d05e      	beq.n	8256e <_free_r+0xea>
   824b0:	07fe      	lsls	r6, r7, #31
   824b2:	6050      	str	r0, [r2, #4]
   824b4:	d40b      	bmi.n	824ce <_free_r+0x4a>
   824b6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   824ba:	f101 0e08 	add.w	lr, r1, #8
   824be:	1be4      	subs	r4, r4, r7
   824c0:	68a5      	ldr	r5, [r4, #8]
   824c2:	443b      	add	r3, r7
   824c4:	4575      	cmp	r5, lr
   824c6:	d06d      	beq.n	825a4 <_free_r+0x120>
   824c8:	68e7      	ldr	r7, [r4, #12]
   824ca:	60ef      	str	r7, [r5, #12]
   824cc:	60bd      	str	r5, [r7, #8]
   824ce:	1815      	adds	r5, r2, r0
   824d0:	686d      	ldr	r5, [r5, #4]
   824d2:	07ed      	lsls	r5, r5, #31
   824d4:	d53e      	bpl.n	82554 <_free_r+0xd0>
   824d6:	f043 0201 	orr.w	r2, r3, #1
   824da:	6062      	str	r2, [r4, #4]
   824dc:	50e3      	str	r3, [r4, r3]
   824de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   824e2:	d217      	bcs.n	82514 <_free_r+0x90>
   824e4:	2201      	movs	r2, #1
   824e6:	08db      	lsrs	r3, r3, #3
   824e8:	1098      	asrs	r0, r3, #2
   824ea:	684d      	ldr	r5, [r1, #4]
   824ec:	4413      	add	r3, r2
   824ee:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   824f2:	4082      	lsls	r2, r0
   824f4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   824f8:	432a      	orrs	r2, r5
   824fa:	3808      	subs	r0, #8
   824fc:	60e0      	str	r0, [r4, #12]
   824fe:	60a7      	str	r7, [r4, #8]
   82500:	604a      	str	r2, [r1, #4]
   82502:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82506:	60fc      	str	r4, [r7, #12]
   82508:	4640      	mov	r0, r8
   8250a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8250e:	f000 be3f 	b.w	83190 <__malloc_unlock>
   82512:	4770      	bx	lr
   82514:	0a5a      	lsrs	r2, r3, #9
   82516:	2a04      	cmp	r2, #4
   82518:	d852      	bhi.n	825c0 <_free_r+0x13c>
   8251a:	099a      	lsrs	r2, r3, #6
   8251c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82520:	00ff      	lsls	r7, r7, #3
   82522:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82526:	19c8      	adds	r0, r1, r7
   82528:	59ca      	ldr	r2, [r1, r7]
   8252a:	3808      	subs	r0, #8
   8252c:	4290      	cmp	r0, r2
   8252e:	d04f      	beq.n	825d0 <_free_r+0x14c>
   82530:	6851      	ldr	r1, [r2, #4]
   82532:	f021 0103 	bic.w	r1, r1, #3
   82536:	428b      	cmp	r3, r1
   82538:	d232      	bcs.n	825a0 <_free_r+0x11c>
   8253a:	6892      	ldr	r2, [r2, #8]
   8253c:	4290      	cmp	r0, r2
   8253e:	d1f7      	bne.n	82530 <_free_r+0xac>
   82540:	68c3      	ldr	r3, [r0, #12]
   82542:	60a0      	str	r0, [r4, #8]
   82544:	60e3      	str	r3, [r4, #12]
   82546:	609c      	str	r4, [r3, #8]
   82548:	60c4      	str	r4, [r0, #12]
   8254a:	4640      	mov	r0, r8
   8254c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82550:	f000 be1e 	b.w	83190 <__malloc_unlock>
   82554:	6895      	ldr	r5, [r2, #8]
   82556:	4f3b      	ldr	r7, [pc, #236]	; (82644 <_free_r+0x1c0>)
   82558:	4403      	add	r3, r0
   8255a:	42bd      	cmp	r5, r7
   8255c:	d040      	beq.n	825e0 <_free_r+0x15c>
   8255e:	68d0      	ldr	r0, [r2, #12]
   82560:	f043 0201 	orr.w	r2, r3, #1
   82564:	60e8      	str	r0, [r5, #12]
   82566:	6085      	str	r5, [r0, #8]
   82568:	6062      	str	r2, [r4, #4]
   8256a:	50e3      	str	r3, [r4, r3]
   8256c:	e7b7      	b.n	824de <_free_r+0x5a>
   8256e:	07ff      	lsls	r7, r7, #31
   82570:	4403      	add	r3, r0
   82572:	d407      	bmi.n	82584 <_free_r+0x100>
   82574:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82578:	1b64      	subs	r4, r4, r5
   8257a:	68e2      	ldr	r2, [r4, #12]
   8257c:	68a0      	ldr	r0, [r4, #8]
   8257e:	442b      	add	r3, r5
   82580:	60c2      	str	r2, [r0, #12]
   82582:	6090      	str	r0, [r2, #8]
   82584:	4a30      	ldr	r2, [pc, #192]	; (82648 <_free_r+0x1c4>)
   82586:	f043 0001 	orr.w	r0, r3, #1
   8258a:	6812      	ldr	r2, [r2, #0]
   8258c:	6060      	str	r0, [r4, #4]
   8258e:	4293      	cmp	r3, r2
   82590:	608c      	str	r4, [r1, #8]
   82592:	d3b9      	bcc.n	82508 <_free_r+0x84>
   82594:	4b2d      	ldr	r3, [pc, #180]	; (8264c <_free_r+0x1c8>)
   82596:	4640      	mov	r0, r8
   82598:	6819      	ldr	r1, [r3, #0]
   8259a:	f7ff ff23 	bl	823e4 <_malloc_trim_r>
   8259e:	e7b3      	b.n	82508 <_free_r+0x84>
   825a0:	4610      	mov	r0, r2
   825a2:	e7cd      	b.n	82540 <_free_r+0xbc>
   825a4:	1811      	adds	r1, r2, r0
   825a6:	6849      	ldr	r1, [r1, #4]
   825a8:	07c9      	lsls	r1, r1, #31
   825aa:	d444      	bmi.n	82636 <_free_r+0x1b2>
   825ac:	6891      	ldr	r1, [r2, #8]
   825ae:	4403      	add	r3, r0
   825b0:	68d2      	ldr	r2, [r2, #12]
   825b2:	f043 0001 	orr.w	r0, r3, #1
   825b6:	60ca      	str	r2, [r1, #12]
   825b8:	6091      	str	r1, [r2, #8]
   825ba:	6060      	str	r0, [r4, #4]
   825bc:	50e3      	str	r3, [r4, r3]
   825be:	e7a3      	b.n	82508 <_free_r+0x84>
   825c0:	2a14      	cmp	r2, #20
   825c2:	d816      	bhi.n	825f2 <_free_r+0x16e>
   825c4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   825c8:	00ff      	lsls	r7, r7, #3
   825ca:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   825ce:	e7aa      	b.n	82526 <_free_r+0xa2>
   825d0:	2301      	movs	r3, #1
   825d2:	10aa      	asrs	r2, r5, #2
   825d4:	684d      	ldr	r5, [r1, #4]
   825d6:	4093      	lsls	r3, r2
   825d8:	432b      	orrs	r3, r5
   825da:	604b      	str	r3, [r1, #4]
   825dc:	4603      	mov	r3, r0
   825de:	e7b0      	b.n	82542 <_free_r+0xbe>
   825e0:	f043 0201 	orr.w	r2, r3, #1
   825e4:	614c      	str	r4, [r1, #20]
   825e6:	610c      	str	r4, [r1, #16]
   825e8:	60e5      	str	r5, [r4, #12]
   825ea:	60a5      	str	r5, [r4, #8]
   825ec:	6062      	str	r2, [r4, #4]
   825ee:	50e3      	str	r3, [r4, r3]
   825f0:	e78a      	b.n	82508 <_free_r+0x84>
   825f2:	2a54      	cmp	r2, #84	; 0x54
   825f4:	d806      	bhi.n	82604 <_free_r+0x180>
   825f6:	0b1a      	lsrs	r2, r3, #12
   825f8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   825fc:	00ff      	lsls	r7, r7, #3
   825fe:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82602:	e790      	b.n	82526 <_free_r+0xa2>
   82604:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82608:	d806      	bhi.n	82618 <_free_r+0x194>
   8260a:	0bda      	lsrs	r2, r3, #15
   8260c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82610:	00ff      	lsls	r7, r7, #3
   82612:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82616:	e786      	b.n	82526 <_free_r+0xa2>
   82618:	f240 5054 	movw	r0, #1364	; 0x554
   8261c:	4282      	cmp	r2, r0
   8261e:	d806      	bhi.n	8262e <_free_r+0x1aa>
   82620:	0c9a      	lsrs	r2, r3, #18
   82622:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82626:	00ff      	lsls	r7, r7, #3
   82628:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8262c:	e77b      	b.n	82526 <_free_r+0xa2>
   8262e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82632:	257e      	movs	r5, #126	; 0x7e
   82634:	e777      	b.n	82526 <_free_r+0xa2>
   82636:	f043 0101 	orr.w	r1, r3, #1
   8263a:	6061      	str	r1, [r4, #4]
   8263c:	6013      	str	r3, [r2, #0]
   8263e:	e763      	b.n	82508 <_free_r+0x84>
   82640:	200706d0 	.word	0x200706d0
   82644:	200706d8 	.word	0x200706d8
   82648:	20070adc 	.word	0x20070adc
   8264c:	20070c28 	.word	0x20070c28

00082650 <__sfvwrite_r>:
   82650:	6893      	ldr	r3, [r2, #8]
   82652:	2b00      	cmp	r3, #0
   82654:	d071      	beq.n	8273a <__sfvwrite_r+0xea>
   82656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8265a:	898b      	ldrh	r3, [r1, #12]
   8265c:	b083      	sub	sp, #12
   8265e:	460c      	mov	r4, r1
   82660:	0719      	lsls	r1, r3, #28
   82662:	9000      	str	r0, [sp, #0]
   82664:	4616      	mov	r6, r2
   82666:	d525      	bpl.n	826b4 <__sfvwrite_r+0x64>
   82668:	6922      	ldr	r2, [r4, #16]
   8266a:	b31a      	cbz	r2, 826b4 <__sfvwrite_r+0x64>
   8266c:	f013 0002 	ands.w	r0, r3, #2
   82670:	6835      	ldr	r5, [r6, #0]
   82672:	d02b      	beq.n	826cc <__sfvwrite_r+0x7c>
   82674:	f04f 0900 	mov.w	r9, #0
   82678:	46b0      	mov	r8, r6
   8267a:	464f      	mov	r7, r9
   8267c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82940 <__sfvwrite_r+0x2f0>
   82680:	2f00      	cmp	r7, #0
   82682:	d055      	beq.n	82730 <__sfvwrite_r+0xe0>
   82684:	4557      	cmp	r7, sl
   82686:	463b      	mov	r3, r7
   82688:	464a      	mov	r2, r9
   8268a:	bf28      	it	cs
   8268c:	4653      	movcs	r3, sl
   8268e:	69e1      	ldr	r1, [r4, #28]
   82690:	9800      	ldr	r0, [sp, #0]
   82692:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82694:	47b0      	blx	r6
   82696:	2800      	cmp	r0, #0
   82698:	dd56      	ble.n	82748 <__sfvwrite_r+0xf8>
   8269a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8269e:	4481      	add	r9, r0
   826a0:	1a1b      	subs	r3, r3, r0
   826a2:	1a3f      	subs	r7, r7, r0
   826a4:	f8c8 3008 	str.w	r3, [r8, #8]
   826a8:	2b00      	cmp	r3, #0
   826aa:	d1e9      	bne.n	82680 <__sfvwrite_r+0x30>
   826ac:	2000      	movs	r0, #0
   826ae:	b003      	add	sp, #12
   826b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826b4:	4621      	mov	r1, r4
   826b6:	9800      	ldr	r0, [sp, #0]
   826b8:	f7ff fc56 	bl	81f68 <__swsetup_r>
   826bc:	2800      	cmp	r0, #0
   826be:	f040 8135 	bne.w	8292c <__sfvwrite_r+0x2dc>
   826c2:	89a3      	ldrh	r3, [r4, #12]
   826c4:	6835      	ldr	r5, [r6, #0]
   826c6:	f013 0002 	ands.w	r0, r3, #2
   826ca:	d1d3      	bne.n	82674 <__sfvwrite_r+0x24>
   826cc:	f013 0901 	ands.w	r9, r3, #1
   826d0:	d144      	bne.n	8275c <__sfvwrite_r+0x10c>
   826d2:	464f      	mov	r7, r9
   826d4:	9601      	str	r6, [sp, #4]
   826d6:	b337      	cbz	r7, 82726 <__sfvwrite_r+0xd6>
   826d8:	059a      	lsls	r2, r3, #22
   826da:	f8d4 8008 	ldr.w	r8, [r4, #8]
   826de:	f140 8085 	bpl.w	827ec <__sfvwrite_r+0x19c>
   826e2:	4547      	cmp	r7, r8
   826e4:	46c3      	mov	fp, r8
   826e6:	f0c0 80ad 	bcc.w	82844 <__sfvwrite_r+0x1f4>
   826ea:	f413 6f90 	tst.w	r3, #1152	; 0x480
   826ee:	f040 80ae 	bne.w	8284e <__sfvwrite_r+0x1fe>
   826f2:	46ba      	mov	sl, r7
   826f4:	6820      	ldr	r0, [r4, #0]
   826f6:	465a      	mov	r2, fp
   826f8:	4649      	mov	r1, r9
   826fa:	f000 fcdf 	bl	830bc <memmove>
   826fe:	68a2      	ldr	r2, [r4, #8]
   82700:	6823      	ldr	r3, [r4, #0]
   82702:	eba2 0208 	sub.w	r2, r2, r8
   82706:	445b      	add	r3, fp
   82708:	60a2      	str	r2, [r4, #8]
   8270a:	6023      	str	r3, [r4, #0]
   8270c:	9a01      	ldr	r2, [sp, #4]
   8270e:	44d1      	add	r9, sl
   82710:	6893      	ldr	r3, [r2, #8]
   82712:	eba7 070a 	sub.w	r7, r7, sl
   82716:	eba3 030a 	sub.w	r3, r3, sl
   8271a:	6093      	str	r3, [r2, #8]
   8271c:	2b00      	cmp	r3, #0
   8271e:	d0c5      	beq.n	826ac <__sfvwrite_r+0x5c>
   82720:	89a3      	ldrh	r3, [r4, #12]
   82722:	2f00      	cmp	r7, #0
   82724:	d1d8      	bne.n	826d8 <__sfvwrite_r+0x88>
   82726:	f8d5 9000 	ldr.w	r9, [r5]
   8272a:	686f      	ldr	r7, [r5, #4]
   8272c:	3508      	adds	r5, #8
   8272e:	e7d2      	b.n	826d6 <__sfvwrite_r+0x86>
   82730:	f8d5 9000 	ldr.w	r9, [r5]
   82734:	686f      	ldr	r7, [r5, #4]
   82736:	3508      	adds	r5, #8
   82738:	e7a2      	b.n	82680 <__sfvwrite_r+0x30>
   8273a:	2000      	movs	r0, #0
   8273c:	4770      	bx	lr
   8273e:	4621      	mov	r1, r4
   82740:	9800      	ldr	r0, [sp, #0]
   82742:	f7ff fd21 	bl	82188 <_fflush_r>
   82746:	b378      	cbz	r0, 827a8 <__sfvwrite_r+0x158>
   82748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8274c:	f04f 30ff 	mov.w	r0, #4294967295
   82750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82754:	81a3      	strh	r3, [r4, #12]
   82756:	b003      	add	sp, #12
   82758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8275c:	4681      	mov	r9, r0
   8275e:	4633      	mov	r3, r6
   82760:	464e      	mov	r6, r9
   82762:	46a8      	mov	r8, r5
   82764:	469a      	mov	sl, r3
   82766:	464d      	mov	r5, r9
   82768:	b356      	cbz	r6, 827c0 <__sfvwrite_r+0x170>
   8276a:	2800      	cmp	r0, #0
   8276c:	d032      	beq.n	827d4 <__sfvwrite_r+0x184>
   8276e:	45b1      	cmp	r9, r6
   82770:	46cb      	mov	fp, r9
   82772:	bf28      	it	cs
   82774:	46b3      	movcs	fp, r6
   82776:	6820      	ldr	r0, [r4, #0]
   82778:	6923      	ldr	r3, [r4, #16]
   8277a:	465f      	mov	r7, fp
   8277c:	4298      	cmp	r0, r3
   8277e:	6962      	ldr	r2, [r4, #20]
   82780:	d904      	bls.n	8278c <__sfvwrite_r+0x13c>
   82782:	68a3      	ldr	r3, [r4, #8]
   82784:	4413      	add	r3, r2
   82786:	459b      	cmp	fp, r3
   82788:	f300 80a8 	bgt.w	828dc <__sfvwrite_r+0x28c>
   8278c:	4593      	cmp	fp, r2
   8278e:	db4d      	blt.n	8282c <__sfvwrite_r+0x1dc>
   82790:	4613      	mov	r3, r2
   82792:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82794:	462a      	mov	r2, r5
   82796:	69e1      	ldr	r1, [r4, #28]
   82798:	9800      	ldr	r0, [sp, #0]
   8279a:	47b8      	blx	r7
   8279c:	1e07      	subs	r7, r0, #0
   8279e:	ddd3      	ble.n	82748 <__sfvwrite_r+0xf8>
   827a0:	ebb9 0907 	subs.w	r9, r9, r7
   827a4:	d0cb      	beq.n	8273e <__sfvwrite_r+0xee>
   827a6:	2001      	movs	r0, #1
   827a8:	f8da 3008 	ldr.w	r3, [sl, #8]
   827ac:	443d      	add	r5, r7
   827ae:	1bdb      	subs	r3, r3, r7
   827b0:	1bf6      	subs	r6, r6, r7
   827b2:	f8ca 3008 	str.w	r3, [sl, #8]
   827b6:	2b00      	cmp	r3, #0
   827b8:	f43f af78 	beq.w	826ac <__sfvwrite_r+0x5c>
   827bc:	2e00      	cmp	r6, #0
   827be:	d1d4      	bne.n	8276a <__sfvwrite_r+0x11a>
   827c0:	f108 0308 	add.w	r3, r8, #8
   827c4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   827c8:	4698      	mov	r8, r3
   827ca:	f853 5c08 	ldr.w	r5, [r3, #-8]
   827ce:	3308      	adds	r3, #8
   827d0:	2e00      	cmp	r6, #0
   827d2:	d0f7      	beq.n	827c4 <__sfvwrite_r+0x174>
   827d4:	4632      	mov	r2, r6
   827d6:	210a      	movs	r1, #10
   827d8:	4628      	mov	r0, r5
   827da:	f000 fc29 	bl	83030 <memchr>
   827de:	2800      	cmp	r0, #0
   827e0:	f000 80a1 	beq.w	82926 <__sfvwrite_r+0x2d6>
   827e4:	3001      	adds	r0, #1
   827e6:	eba0 0905 	sub.w	r9, r0, r5
   827ea:	e7c0      	b.n	8276e <__sfvwrite_r+0x11e>
   827ec:	6820      	ldr	r0, [r4, #0]
   827ee:	6923      	ldr	r3, [r4, #16]
   827f0:	4298      	cmp	r0, r3
   827f2:	d802      	bhi.n	827fa <__sfvwrite_r+0x1aa>
   827f4:	6963      	ldr	r3, [r4, #20]
   827f6:	429f      	cmp	r7, r3
   827f8:	d25d      	bcs.n	828b6 <__sfvwrite_r+0x266>
   827fa:	45b8      	cmp	r8, r7
   827fc:	bf28      	it	cs
   827fe:	46b8      	movcs	r8, r7
   82800:	4649      	mov	r1, r9
   82802:	4642      	mov	r2, r8
   82804:	f000 fc5a 	bl	830bc <memmove>
   82808:	68a3      	ldr	r3, [r4, #8]
   8280a:	6822      	ldr	r2, [r4, #0]
   8280c:	eba3 0308 	sub.w	r3, r3, r8
   82810:	4442      	add	r2, r8
   82812:	60a3      	str	r3, [r4, #8]
   82814:	6022      	str	r2, [r4, #0]
   82816:	b10b      	cbz	r3, 8281c <__sfvwrite_r+0x1cc>
   82818:	46c2      	mov	sl, r8
   8281a:	e777      	b.n	8270c <__sfvwrite_r+0xbc>
   8281c:	4621      	mov	r1, r4
   8281e:	9800      	ldr	r0, [sp, #0]
   82820:	f7ff fcb2 	bl	82188 <_fflush_r>
   82824:	2800      	cmp	r0, #0
   82826:	d18f      	bne.n	82748 <__sfvwrite_r+0xf8>
   82828:	46c2      	mov	sl, r8
   8282a:	e76f      	b.n	8270c <__sfvwrite_r+0xbc>
   8282c:	465a      	mov	r2, fp
   8282e:	4629      	mov	r1, r5
   82830:	f000 fc44 	bl	830bc <memmove>
   82834:	68a2      	ldr	r2, [r4, #8]
   82836:	6823      	ldr	r3, [r4, #0]
   82838:	eba2 020b 	sub.w	r2, r2, fp
   8283c:	445b      	add	r3, fp
   8283e:	60a2      	str	r2, [r4, #8]
   82840:	6023      	str	r3, [r4, #0]
   82842:	e7ad      	b.n	827a0 <__sfvwrite_r+0x150>
   82844:	46b8      	mov	r8, r7
   82846:	46ba      	mov	sl, r7
   82848:	46bb      	mov	fp, r7
   8284a:	6820      	ldr	r0, [r4, #0]
   8284c:	e753      	b.n	826f6 <__sfvwrite_r+0xa6>
   8284e:	6962      	ldr	r2, [r4, #20]
   82850:	6820      	ldr	r0, [r4, #0]
   82852:	6921      	ldr	r1, [r4, #16]
   82854:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82858:	eba0 0a01 	sub.w	sl, r0, r1
   8285c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82860:	f10a 0001 	add.w	r0, sl, #1
   82864:	ea4f 0868 	mov.w	r8, r8, asr #1
   82868:	4438      	add	r0, r7
   8286a:	4540      	cmp	r0, r8
   8286c:	4642      	mov	r2, r8
   8286e:	bf84      	itt	hi
   82870:	4680      	movhi	r8, r0
   82872:	4642      	movhi	r2, r8
   82874:	055b      	lsls	r3, r3, #21
   82876:	d544      	bpl.n	82902 <__sfvwrite_r+0x2b2>
   82878:	4611      	mov	r1, r2
   8287a:	9800      	ldr	r0, [sp, #0]
   8287c:	f000 f920 	bl	82ac0 <_malloc_r>
   82880:	4683      	mov	fp, r0
   82882:	2800      	cmp	r0, #0
   82884:	d055      	beq.n	82932 <__sfvwrite_r+0x2e2>
   82886:	4652      	mov	r2, sl
   82888:	6921      	ldr	r1, [r4, #16]
   8288a:	f7fe fae3 	bl	80e54 <memcpy>
   8288e:	89a3      	ldrh	r3, [r4, #12]
   82890:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82898:	81a3      	strh	r3, [r4, #12]
   8289a:	eb0b 000a 	add.w	r0, fp, sl
   8289e:	eba8 030a 	sub.w	r3, r8, sl
   828a2:	f8c4 b010 	str.w	fp, [r4, #16]
   828a6:	f8c4 8014 	str.w	r8, [r4, #20]
   828aa:	6020      	str	r0, [r4, #0]
   828ac:	60a3      	str	r3, [r4, #8]
   828ae:	46b8      	mov	r8, r7
   828b0:	46ba      	mov	sl, r7
   828b2:	46bb      	mov	fp, r7
   828b4:	e71f      	b.n	826f6 <__sfvwrite_r+0xa6>
   828b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   828ba:	42ba      	cmp	r2, r7
   828bc:	bf28      	it	cs
   828be:	463a      	movcs	r2, r7
   828c0:	fb92 f2f3 	sdiv	r2, r2, r3
   828c4:	69e1      	ldr	r1, [r4, #28]
   828c6:	fb03 f302 	mul.w	r3, r3, r2
   828ca:	9800      	ldr	r0, [sp, #0]
   828cc:	464a      	mov	r2, r9
   828ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
   828d0:	47b0      	blx	r6
   828d2:	f1b0 0a00 	subs.w	sl, r0, #0
   828d6:	f73f af19 	bgt.w	8270c <__sfvwrite_r+0xbc>
   828da:	e735      	b.n	82748 <__sfvwrite_r+0xf8>
   828dc:	461a      	mov	r2, r3
   828de:	4629      	mov	r1, r5
   828e0:	9301      	str	r3, [sp, #4]
   828e2:	f000 fbeb 	bl	830bc <memmove>
   828e6:	6822      	ldr	r2, [r4, #0]
   828e8:	9b01      	ldr	r3, [sp, #4]
   828ea:	4621      	mov	r1, r4
   828ec:	441a      	add	r2, r3
   828ee:	6022      	str	r2, [r4, #0]
   828f0:	9800      	ldr	r0, [sp, #0]
   828f2:	f7ff fc49 	bl	82188 <_fflush_r>
   828f6:	9b01      	ldr	r3, [sp, #4]
   828f8:	2800      	cmp	r0, #0
   828fa:	f47f af25 	bne.w	82748 <__sfvwrite_r+0xf8>
   828fe:	461f      	mov	r7, r3
   82900:	e74e      	b.n	827a0 <__sfvwrite_r+0x150>
   82902:	9800      	ldr	r0, [sp, #0]
   82904:	f000 fc4a 	bl	8319c <_realloc_r>
   82908:	4683      	mov	fp, r0
   8290a:	2800      	cmp	r0, #0
   8290c:	d1c5      	bne.n	8289a <__sfvwrite_r+0x24a>
   8290e:	9d00      	ldr	r5, [sp, #0]
   82910:	6921      	ldr	r1, [r4, #16]
   82912:	4628      	mov	r0, r5
   82914:	f7ff fdb6 	bl	82484 <_free_r>
   82918:	220c      	movs	r2, #12
   8291a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8291e:	602a      	str	r2, [r5, #0]
   82920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82924:	e712      	b.n	8274c <__sfvwrite_r+0xfc>
   82926:	f106 0901 	add.w	r9, r6, #1
   8292a:	e720      	b.n	8276e <__sfvwrite_r+0x11e>
   8292c:	f04f 30ff 	mov.w	r0, #4294967295
   82930:	e6bd      	b.n	826ae <__sfvwrite_r+0x5e>
   82932:	220c      	movs	r2, #12
   82934:	9900      	ldr	r1, [sp, #0]
   82936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8293a:	600a      	str	r2, [r1, #0]
   8293c:	e706      	b.n	8274c <__sfvwrite_r+0xfc>
   8293e:	bf00      	nop
   82940:	7ffffc00 	.word	0x7ffffc00

00082944 <_fwalk_reent>:
   82944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82948:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8294c:	d01e      	beq.n	8298c <_fwalk_reent+0x48>
   8294e:	4688      	mov	r8, r1
   82950:	4607      	mov	r7, r0
   82952:	f04f 0900 	mov.w	r9, #0
   82956:	6875      	ldr	r5, [r6, #4]
   82958:	68b4      	ldr	r4, [r6, #8]
   8295a:	3d01      	subs	r5, #1
   8295c:	d410      	bmi.n	82980 <_fwalk_reent+0x3c>
   8295e:	89a3      	ldrh	r3, [r4, #12]
   82960:	3d01      	subs	r5, #1
   82962:	2b01      	cmp	r3, #1
   82964:	d908      	bls.n	82978 <_fwalk_reent+0x34>
   82966:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8296a:	3301      	adds	r3, #1
   8296c:	d004      	beq.n	82978 <_fwalk_reent+0x34>
   8296e:	4621      	mov	r1, r4
   82970:	4638      	mov	r0, r7
   82972:	47c0      	blx	r8
   82974:	ea49 0900 	orr.w	r9, r9, r0
   82978:	1c6b      	adds	r3, r5, #1
   8297a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8297e:	d1ee      	bne.n	8295e <_fwalk_reent+0x1a>
   82980:	6836      	ldr	r6, [r6, #0]
   82982:	2e00      	cmp	r6, #0
   82984:	d1e7      	bne.n	82956 <_fwalk_reent+0x12>
   82986:	4648      	mov	r0, r9
   82988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8298c:	46b1      	mov	r9, r6
   8298e:	4648      	mov	r0, r9
   82990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082994 <__locale_mb_cur_max>:
   82994:	4b04      	ldr	r3, [pc, #16]	; (829a8 <__locale_mb_cur_max+0x14>)
   82996:	4a05      	ldr	r2, [pc, #20]	; (829ac <__locale_mb_cur_max+0x18>)
   82998:	681b      	ldr	r3, [r3, #0]
   8299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8299c:	2b00      	cmp	r3, #0
   8299e:	bf08      	it	eq
   829a0:	4613      	moveq	r3, r2
   829a2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   829a6:	4770      	bx	lr
   829a8:	20070134 	.word	0x20070134
   829ac:	20070564 	.word	0x20070564

000829b0 <__retarget_lock_init_recursive>:
   829b0:	4770      	bx	lr
   829b2:	bf00      	nop

000829b4 <__retarget_lock_close_recursive>:
   829b4:	4770      	bx	lr
   829b6:	bf00      	nop

000829b8 <__retarget_lock_acquire_recursive>:
   829b8:	4770      	bx	lr
   829ba:	bf00      	nop

000829bc <__retarget_lock_release_recursive>:
   829bc:	4770      	bx	lr
   829be:	bf00      	nop

000829c0 <__swhatbuf_r>:
   829c0:	b570      	push	{r4, r5, r6, lr}
   829c2:	460c      	mov	r4, r1
   829c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   829c8:	b090      	sub	sp, #64	; 0x40
   829ca:	2900      	cmp	r1, #0
   829cc:	4615      	mov	r5, r2
   829ce:	461e      	mov	r6, r3
   829d0:	db14      	blt.n	829fc <__swhatbuf_r+0x3c>
   829d2:	aa01      	add	r2, sp, #4
   829d4:	f000 ff68 	bl	838a8 <_fstat_r>
   829d8:	2800      	cmp	r0, #0
   829da:	db0f      	blt.n	829fc <__swhatbuf_r+0x3c>
   829dc:	9a02      	ldr	r2, [sp, #8]
   829de:	f44f 6380 	mov.w	r3, #1024	; 0x400
   829e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   829e6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   829ea:	fab2 f282 	clz	r2, r2
   829ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
   829f2:	0952      	lsrs	r2, r2, #5
   829f4:	6032      	str	r2, [r6, #0]
   829f6:	602b      	str	r3, [r5, #0]
   829f8:	b010      	add	sp, #64	; 0x40
   829fa:	bd70      	pop	{r4, r5, r6, pc}
   829fc:	2300      	movs	r3, #0
   829fe:	89a2      	ldrh	r2, [r4, #12]
   82a00:	6033      	str	r3, [r6, #0]
   82a02:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82a06:	d004      	beq.n	82a12 <__swhatbuf_r+0x52>
   82a08:	2240      	movs	r2, #64	; 0x40
   82a0a:	4618      	mov	r0, r3
   82a0c:	602a      	str	r2, [r5, #0]
   82a0e:	b010      	add	sp, #64	; 0x40
   82a10:	bd70      	pop	{r4, r5, r6, pc}
   82a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82a16:	602b      	str	r3, [r5, #0]
   82a18:	b010      	add	sp, #64	; 0x40
   82a1a:	bd70      	pop	{r4, r5, r6, pc}

00082a1c <__smakebuf_r>:
   82a1c:	898a      	ldrh	r2, [r1, #12]
   82a1e:	460b      	mov	r3, r1
   82a20:	0792      	lsls	r2, r2, #30
   82a22:	d506      	bpl.n	82a32 <__smakebuf_r+0x16>
   82a24:	2101      	movs	r1, #1
   82a26:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82a2a:	6159      	str	r1, [r3, #20]
   82a2c:	601a      	str	r2, [r3, #0]
   82a2e:	611a      	str	r2, [r3, #16]
   82a30:	4770      	bx	lr
   82a32:	b5f0      	push	{r4, r5, r6, r7, lr}
   82a34:	b083      	sub	sp, #12
   82a36:	ab01      	add	r3, sp, #4
   82a38:	466a      	mov	r2, sp
   82a3a:	460c      	mov	r4, r1
   82a3c:	4606      	mov	r6, r0
   82a3e:	f7ff ffbf 	bl	829c0 <__swhatbuf_r>
   82a42:	9900      	ldr	r1, [sp, #0]
   82a44:	4605      	mov	r5, r0
   82a46:	4630      	mov	r0, r6
   82a48:	f000 f83a 	bl	82ac0 <_malloc_r>
   82a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a50:	b1d8      	cbz	r0, 82a8a <__smakebuf_r+0x6e>
   82a52:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82a56:	4f15      	ldr	r7, [pc, #84]	; (82aac <__smakebuf_r+0x90>)
   82a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a5c:	63f7      	str	r7, [r6, #60]	; 0x3c
   82a5e:	81a3      	strh	r3, [r4, #12]
   82a60:	6020      	str	r0, [r4, #0]
   82a62:	6120      	str	r0, [r4, #16]
   82a64:	6161      	str	r1, [r4, #20]
   82a66:	b91a      	cbnz	r2, 82a70 <__smakebuf_r+0x54>
   82a68:	432b      	orrs	r3, r5
   82a6a:	81a3      	strh	r3, [r4, #12]
   82a6c:	b003      	add	sp, #12
   82a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a70:	4630      	mov	r0, r6
   82a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a76:	f000 ff2b 	bl	838d0 <_isatty_r>
   82a7a:	b1a0      	cbz	r0, 82aa6 <__smakebuf_r+0x8a>
   82a7c:	89a3      	ldrh	r3, [r4, #12]
   82a7e:	f023 0303 	bic.w	r3, r3, #3
   82a82:	f043 0301 	orr.w	r3, r3, #1
   82a86:	b21b      	sxth	r3, r3
   82a88:	e7ee      	b.n	82a68 <__smakebuf_r+0x4c>
   82a8a:	059a      	lsls	r2, r3, #22
   82a8c:	d4ee      	bmi.n	82a6c <__smakebuf_r+0x50>
   82a8e:	2101      	movs	r1, #1
   82a90:	f023 0303 	bic.w	r3, r3, #3
   82a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82a98:	f043 0302 	orr.w	r3, r3, #2
   82a9c:	81a3      	strh	r3, [r4, #12]
   82a9e:	6161      	str	r1, [r4, #20]
   82aa0:	6022      	str	r2, [r4, #0]
   82aa2:	6122      	str	r2, [r4, #16]
   82aa4:	e7e2      	b.n	82a6c <__smakebuf_r+0x50>
   82aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82aaa:	e7dd      	b.n	82a68 <__smakebuf_r+0x4c>
   82aac:	000821dd 	.word	0x000821dd

00082ab0 <malloc>:
   82ab0:	4b02      	ldr	r3, [pc, #8]	; (82abc <malloc+0xc>)
   82ab2:	4601      	mov	r1, r0
   82ab4:	6818      	ldr	r0, [r3, #0]
   82ab6:	f000 b803 	b.w	82ac0 <_malloc_r>
   82aba:	bf00      	nop
   82abc:	20070134 	.word	0x20070134

00082ac0 <_malloc_r>:
   82ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ac4:	f101 060b 	add.w	r6, r1, #11
   82ac8:	2e16      	cmp	r6, #22
   82aca:	b083      	sub	sp, #12
   82acc:	4605      	mov	r5, r0
   82ace:	f240 809e 	bls.w	82c0e <_malloc_r+0x14e>
   82ad2:	f036 0607 	bics.w	r6, r6, #7
   82ad6:	f100 80bd 	bmi.w	82c54 <_malloc_r+0x194>
   82ada:	42b1      	cmp	r1, r6
   82adc:	f200 80ba 	bhi.w	82c54 <_malloc_r+0x194>
   82ae0:	f000 fb50 	bl	83184 <__malloc_lock>
   82ae4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82ae8:	f0c0 8285 	bcc.w	82ff6 <_malloc_r+0x536>
   82aec:	0a73      	lsrs	r3, r6, #9
   82aee:	f000 80b8 	beq.w	82c62 <_malloc_r+0x1a2>
   82af2:	2b04      	cmp	r3, #4
   82af4:	f200 816c 	bhi.w	82dd0 <_malloc_r+0x310>
   82af8:	09b3      	lsrs	r3, r6, #6
   82afa:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82afe:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82b02:	00c1      	lsls	r1, r0, #3
   82b04:	4fb8      	ldr	r7, [pc, #736]	; (82de8 <_malloc_r+0x328>)
   82b06:	4439      	add	r1, r7
   82b08:	684c      	ldr	r4, [r1, #4]
   82b0a:	3908      	subs	r1, #8
   82b0c:	42a1      	cmp	r1, r4
   82b0e:	d106      	bne.n	82b1e <_malloc_r+0x5e>
   82b10:	e00c      	b.n	82b2c <_malloc_r+0x6c>
   82b12:	2a00      	cmp	r2, #0
   82b14:	f280 80ab 	bge.w	82c6e <_malloc_r+0x1ae>
   82b18:	68e4      	ldr	r4, [r4, #12]
   82b1a:	42a1      	cmp	r1, r4
   82b1c:	d006      	beq.n	82b2c <_malloc_r+0x6c>
   82b1e:	6863      	ldr	r3, [r4, #4]
   82b20:	f023 0303 	bic.w	r3, r3, #3
   82b24:	1b9a      	subs	r2, r3, r6
   82b26:	2a0f      	cmp	r2, #15
   82b28:	ddf3      	ble.n	82b12 <_malloc_r+0x52>
   82b2a:	4670      	mov	r0, lr
   82b2c:	693c      	ldr	r4, [r7, #16]
   82b2e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82dfc <_malloc_r+0x33c>
   82b32:	4574      	cmp	r4, lr
   82b34:	f000 819e 	beq.w	82e74 <_malloc_r+0x3b4>
   82b38:	6863      	ldr	r3, [r4, #4]
   82b3a:	f023 0303 	bic.w	r3, r3, #3
   82b3e:	1b9a      	subs	r2, r3, r6
   82b40:	2a0f      	cmp	r2, #15
   82b42:	f300 8183 	bgt.w	82e4c <_malloc_r+0x38c>
   82b46:	2a00      	cmp	r2, #0
   82b48:	f8c7 e014 	str.w	lr, [r7, #20]
   82b4c:	f8c7 e010 	str.w	lr, [r7, #16]
   82b50:	f280 8091 	bge.w	82c76 <_malloc_r+0x1b6>
   82b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82b58:	f080 8154 	bcs.w	82e04 <_malloc_r+0x344>
   82b5c:	2201      	movs	r2, #1
   82b5e:	08db      	lsrs	r3, r3, #3
   82b60:	6879      	ldr	r1, [r7, #4]
   82b62:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82b66:	4413      	add	r3, r2
   82b68:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82b6c:	fa02 f20c 	lsl.w	r2, r2, ip
   82b70:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82b74:	430a      	orrs	r2, r1
   82b76:	f1ac 0108 	sub.w	r1, ip, #8
   82b7a:	60e1      	str	r1, [r4, #12]
   82b7c:	f8c4 8008 	str.w	r8, [r4, #8]
   82b80:	607a      	str	r2, [r7, #4]
   82b82:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82b86:	f8c8 400c 	str.w	r4, [r8, #12]
   82b8a:	2401      	movs	r4, #1
   82b8c:	1083      	asrs	r3, r0, #2
   82b8e:	409c      	lsls	r4, r3
   82b90:	4294      	cmp	r4, r2
   82b92:	d87d      	bhi.n	82c90 <_malloc_r+0x1d0>
   82b94:	4214      	tst	r4, r2
   82b96:	d106      	bne.n	82ba6 <_malloc_r+0xe6>
   82b98:	f020 0003 	bic.w	r0, r0, #3
   82b9c:	0064      	lsls	r4, r4, #1
   82b9e:	4214      	tst	r4, r2
   82ba0:	f100 0004 	add.w	r0, r0, #4
   82ba4:	d0fa      	beq.n	82b9c <_malloc_r+0xdc>
   82ba6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82baa:	46cc      	mov	ip, r9
   82bac:	4680      	mov	r8, r0
   82bae:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82bb2:	459c      	cmp	ip, r3
   82bb4:	d107      	bne.n	82bc6 <_malloc_r+0x106>
   82bb6:	e15f      	b.n	82e78 <_malloc_r+0x3b8>
   82bb8:	2a00      	cmp	r2, #0
   82bba:	f280 816d 	bge.w	82e98 <_malloc_r+0x3d8>
   82bbe:	68db      	ldr	r3, [r3, #12]
   82bc0:	459c      	cmp	ip, r3
   82bc2:	f000 8159 	beq.w	82e78 <_malloc_r+0x3b8>
   82bc6:	6859      	ldr	r1, [r3, #4]
   82bc8:	f021 0103 	bic.w	r1, r1, #3
   82bcc:	1b8a      	subs	r2, r1, r6
   82bce:	2a0f      	cmp	r2, #15
   82bd0:	ddf2      	ble.n	82bb8 <_malloc_r+0xf8>
   82bd2:	68dc      	ldr	r4, [r3, #12]
   82bd4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82bd8:	f046 0801 	orr.w	r8, r6, #1
   82bdc:	4628      	mov	r0, r5
   82bde:	441e      	add	r6, r3
   82be0:	f042 0501 	orr.w	r5, r2, #1
   82be4:	f8c3 8004 	str.w	r8, [r3, #4]
   82be8:	f8cc 400c 	str.w	r4, [ip, #12]
   82bec:	f8c4 c008 	str.w	ip, [r4, #8]
   82bf0:	617e      	str	r6, [r7, #20]
   82bf2:	613e      	str	r6, [r7, #16]
   82bf4:	f8c6 e00c 	str.w	lr, [r6, #12]
   82bf8:	f8c6 e008 	str.w	lr, [r6, #8]
   82bfc:	6075      	str	r5, [r6, #4]
   82bfe:	505a      	str	r2, [r3, r1]
   82c00:	9300      	str	r3, [sp, #0]
   82c02:	f000 fac5 	bl	83190 <__malloc_unlock>
   82c06:	9b00      	ldr	r3, [sp, #0]
   82c08:	f103 0408 	add.w	r4, r3, #8
   82c0c:	e01e      	b.n	82c4c <_malloc_r+0x18c>
   82c0e:	2910      	cmp	r1, #16
   82c10:	d820      	bhi.n	82c54 <_malloc_r+0x194>
   82c12:	f000 fab7 	bl	83184 <__malloc_lock>
   82c16:	2610      	movs	r6, #16
   82c18:	2318      	movs	r3, #24
   82c1a:	2002      	movs	r0, #2
   82c1c:	4f72      	ldr	r7, [pc, #456]	; (82de8 <_malloc_r+0x328>)
   82c1e:	443b      	add	r3, r7
   82c20:	685c      	ldr	r4, [r3, #4]
   82c22:	f1a3 0208 	sub.w	r2, r3, #8
   82c26:	4294      	cmp	r4, r2
   82c28:	f000 812f 	beq.w	82e8a <_malloc_r+0x3ca>
   82c2c:	6863      	ldr	r3, [r4, #4]
   82c2e:	68e1      	ldr	r1, [r4, #12]
   82c30:	f023 0303 	bic.w	r3, r3, #3
   82c34:	4423      	add	r3, r4
   82c36:	685a      	ldr	r2, [r3, #4]
   82c38:	68a6      	ldr	r6, [r4, #8]
   82c3a:	f042 0201 	orr.w	r2, r2, #1
   82c3e:	60f1      	str	r1, [r6, #12]
   82c40:	4628      	mov	r0, r5
   82c42:	608e      	str	r6, [r1, #8]
   82c44:	605a      	str	r2, [r3, #4]
   82c46:	f000 faa3 	bl	83190 <__malloc_unlock>
   82c4a:	3408      	adds	r4, #8
   82c4c:	4620      	mov	r0, r4
   82c4e:	b003      	add	sp, #12
   82c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c54:	2400      	movs	r4, #0
   82c56:	230c      	movs	r3, #12
   82c58:	4620      	mov	r0, r4
   82c5a:	602b      	str	r3, [r5, #0]
   82c5c:	b003      	add	sp, #12
   82c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c62:	2040      	movs	r0, #64	; 0x40
   82c64:	f44f 7100 	mov.w	r1, #512	; 0x200
   82c68:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82c6c:	e74a      	b.n	82b04 <_malloc_r+0x44>
   82c6e:	4423      	add	r3, r4
   82c70:	685a      	ldr	r2, [r3, #4]
   82c72:	68e1      	ldr	r1, [r4, #12]
   82c74:	e7e0      	b.n	82c38 <_malloc_r+0x178>
   82c76:	4423      	add	r3, r4
   82c78:	685a      	ldr	r2, [r3, #4]
   82c7a:	4628      	mov	r0, r5
   82c7c:	f042 0201 	orr.w	r2, r2, #1
   82c80:	605a      	str	r2, [r3, #4]
   82c82:	3408      	adds	r4, #8
   82c84:	f000 fa84 	bl	83190 <__malloc_unlock>
   82c88:	4620      	mov	r0, r4
   82c8a:	b003      	add	sp, #12
   82c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c90:	68bc      	ldr	r4, [r7, #8]
   82c92:	6863      	ldr	r3, [r4, #4]
   82c94:	f023 0803 	bic.w	r8, r3, #3
   82c98:	45b0      	cmp	r8, r6
   82c9a:	d304      	bcc.n	82ca6 <_malloc_r+0x1e6>
   82c9c:	eba8 0306 	sub.w	r3, r8, r6
   82ca0:	2b0f      	cmp	r3, #15
   82ca2:	f300 8085 	bgt.w	82db0 <_malloc_r+0x2f0>
   82ca6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 82e00 <_malloc_r+0x340>
   82caa:	4b50      	ldr	r3, [pc, #320]	; (82dec <_malloc_r+0x32c>)
   82cac:	f8d9 2000 	ldr.w	r2, [r9]
   82cb0:	681b      	ldr	r3, [r3, #0]
   82cb2:	3201      	adds	r2, #1
   82cb4:	4433      	add	r3, r6
   82cb6:	eb04 0a08 	add.w	sl, r4, r8
   82cba:	f000 8154 	beq.w	82f66 <_malloc_r+0x4a6>
   82cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82cc2:	330f      	adds	r3, #15
   82cc4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82cc8:	f02b 0b0f 	bic.w	fp, fp, #15
   82ccc:	4659      	mov	r1, fp
   82cce:	4628      	mov	r0, r5
   82cd0:	f000 fc1a 	bl	83508 <_sbrk_r>
   82cd4:	1c41      	adds	r1, r0, #1
   82cd6:	4602      	mov	r2, r0
   82cd8:	f000 80fb 	beq.w	82ed2 <_malloc_r+0x412>
   82cdc:	4582      	cmp	sl, r0
   82cde:	f200 80f6 	bhi.w	82ece <_malloc_r+0x40e>
   82ce2:	4b43      	ldr	r3, [pc, #268]	; (82df0 <_malloc_r+0x330>)
   82ce4:	6819      	ldr	r1, [r3, #0]
   82ce6:	4459      	add	r1, fp
   82ce8:	6019      	str	r1, [r3, #0]
   82cea:	f000 814c 	beq.w	82f86 <_malloc_r+0x4c6>
   82cee:	f8d9 0000 	ldr.w	r0, [r9]
   82cf2:	3001      	adds	r0, #1
   82cf4:	bf1b      	ittet	ne
   82cf6:	eba2 0a0a 	subne.w	sl, r2, sl
   82cfa:	4451      	addne	r1, sl
   82cfc:	f8c9 2000 	streq.w	r2, [r9]
   82d00:	6019      	strne	r1, [r3, #0]
   82d02:	f012 0107 	ands.w	r1, r2, #7
   82d06:	f000 8114 	beq.w	82f32 <_malloc_r+0x472>
   82d0a:	f1c1 0008 	rsb	r0, r1, #8
   82d0e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82d12:	4402      	add	r2, r0
   82d14:	3108      	adds	r1, #8
   82d16:	eb02 090b 	add.w	r9, r2, fp
   82d1a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82d1e:	eba1 0909 	sub.w	r9, r1, r9
   82d22:	4649      	mov	r1, r9
   82d24:	4628      	mov	r0, r5
   82d26:	9301      	str	r3, [sp, #4]
   82d28:	9200      	str	r2, [sp, #0]
   82d2a:	f000 fbed 	bl	83508 <_sbrk_r>
   82d2e:	1c43      	adds	r3, r0, #1
   82d30:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82d34:	f000 8142 	beq.w	82fbc <_malloc_r+0x4fc>
   82d38:	1a80      	subs	r0, r0, r2
   82d3a:	4448      	add	r0, r9
   82d3c:	f040 0001 	orr.w	r0, r0, #1
   82d40:	6819      	ldr	r1, [r3, #0]
   82d42:	42bc      	cmp	r4, r7
   82d44:	4449      	add	r1, r9
   82d46:	60ba      	str	r2, [r7, #8]
   82d48:	6019      	str	r1, [r3, #0]
   82d4a:	6050      	str	r0, [r2, #4]
   82d4c:	d017      	beq.n	82d7e <_malloc_r+0x2be>
   82d4e:	f1b8 0f0f 	cmp.w	r8, #15
   82d52:	f240 80fa 	bls.w	82f4a <_malloc_r+0x48a>
   82d56:	f04f 0c05 	mov.w	ip, #5
   82d5a:	6862      	ldr	r2, [r4, #4]
   82d5c:	f1a8 000c 	sub.w	r0, r8, #12
   82d60:	f020 0007 	bic.w	r0, r0, #7
   82d64:	f002 0201 	and.w	r2, r2, #1
   82d68:	eb04 0e00 	add.w	lr, r4, r0
   82d6c:	4302      	orrs	r2, r0
   82d6e:	280f      	cmp	r0, #15
   82d70:	6062      	str	r2, [r4, #4]
   82d72:	f8ce c004 	str.w	ip, [lr, #4]
   82d76:	f8ce c008 	str.w	ip, [lr, #8]
   82d7a:	f200 8116 	bhi.w	82faa <_malloc_r+0x4ea>
   82d7e:	4b1d      	ldr	r3, [pc, #116]	; (82df4 <_malloc_r+0x334>)
   82d80:	68bc      	ldr	r4, [r7, #8]
   82d82:	681a      	ldr	r2, [r3, #0]
   82d84:	4291      	cmp	r1, r2
   82d86:	bf88      	it	hi
   82d88:	6019      	strhi	r1, [r3, #0]
   82d8a:	4b1b      	ldr	r3, [pc, #108]	; (82df8 <_malloc_r+0x338>)
   82d8c:	681a      	ldr	r2, [r3, #0]
   82d8e:	4291      	cmp	r1, r2
   82d90:	6862      	ldr	r2, [r4, #4]
   82d92:	bf88      	it	hi
   82d94:	6019      	strhi	r1, [r3, #0]
   82d96:	f022 0203 	bic.w	r2, r2, #3
   82d9a:	4296      	cmp	r6, r2
   82d9c:	eba2 0306 	sub.w	r3, r2, r6
   82da0:	d801      	bhi.n	82da6 <_malloc_r+0x2e6>
   82da2:	2b0f      	cmp	r3, #15
   82da4:	dc04      	bgt.n	82db0 <_malloc_r+0x2f0>
   82da6:	4628      	mov	r0, r5
   82da8:	f000 f9f2 	bl	83190 <__malloc_unlock>
   82dac:	2400      	movs	r4, #0
   82dae:	e74d      	b.n	82c4c <_malloc_r+0x18c>
   82db0:	f046 0201 	orr.w	r2, r6, #1
   82db4:	f043 0301 	orr.w	r3, r3, #1
   82db8:	4426      	add	r6, r4
   82dba:	6062      	str	r2, [r4, #4]
   82dbc:	4628      	mov	r0, r5
   82dbe:	60be      	str	r6, [r7, #8]
   82dc0:	3408      	adds	r4, #8
   82dc2:	6073      	str	r3, [r6, #4]
   82dc4:	f000 f9e4 	bl	83190 <__malloc_unlock>
   82dc8:	4620      	mov	r0, r4
   82dca:	b003      	add	sp, #12
   82dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82dd0:	2b14      	cmp	r3, #20
   82dd2:	d970      	bls.n	82eb6 <_malloc_r+0x3f6>
   82dd4:	2b54      	cmp	r3, #84	; 0x54
   82dd6:	f200 80a2 	bhi.w	82f1e <_malloc_r+0x45e>
   82dda:	0b33      	lsrs	r3, r6, #12
   82ddc:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   82de0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82de4:	00c1      	lsls	r1, r0, #3
   82de6:	e68d      	b.n	82b04 <_malloc_r+0x44>
   82de8:	200706d0 	.word	0x200706d0
   82dec:	20070c28 	.word	0x20070c28
   82df0:	20070bf8 	.word	0x20070bf8
   82df4:	20070c20 	.word	0x20070c20
   82df8:	20070c24 	.word	0x20070c24
   82dfc:	200706d8 	.word	0x200706d8
   82e00:	20070ad8 	.word	0x20070ad8
   82e04:	0a5a      	lsrs	r2, r3, #9
   82e06:	2a04      	cmp	r2, #4
   82e08:	d95b      	bls.n	82ec2 <_malloc_r+0x402>
   82e0a:	2a14      	cmp	r2, #20
   82e0c:	f200 80ae 	bhi.w	82f6c <_malloc_r+0x4ac>
   82e10:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82e14:	00c9      	lsls	r1, r1, #3
   82e16:	325b      	adds	r2, #91	; 0x5b
   82e18:	eb07 0c01 	add.w	ip, r7, r1
   82e1c:	5879      	ldr	r1, [r7, r1]
   82e1e:	f1ac 0c08 	sub.w	ip, ip, #8
   82e22:	458c      	cmp	ip, r1
   82e24:	f000 8088 	beq.w	82f38 <_malloc_r+0x478>
   82e28:	684a      	ldr	r2, [r1, #4]
   82e2a:	f022 0203 	bic.w	r2, r2, #3
   82e2e:	4293      	cmp	r3, r2
   82e30:	d273      	bcs.n	82f1a <_malloc_r+0x45a>
   82e32:	6889      	ldr	r1, [r1, #8]
   82e34:	458c      	cmp	ip, r1
   82e36:	d1f7      	bne.n	82e28 <_malloc_r+0x368>
   82e38:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82e3c:	687a      	ldr	r2, [r7, #4]
   82e3e:	60e3      	str	r3, [r4, #12]
   82e40:	f8c4 c008 	str.w	ip, [r4, #8]
   82e44:	609c      	str	r4, [r3, #8]
   82e46:	f8cc 400c 	str.w	r4, [ip, #12]
   82e4a:	e69e      	b.n	82b8a <_malloc_r+0xca>
   82e4c:	f046 0c01 	orr.w	ip, r6, #1
   82e50:	f042 0101 	orr.w	r1, r2, #1
   82e54:	4426      	add	r6, r4
   82e56:	f8c4 c004 	str.w	ip, [r4, #4]
   82e5a:	4628      	mov	r0, r5
   82e5c:	617e      	str	r6, [r7, #20]
   82e5e:	613e      	str	r6, [r7, #16]
   82e60:	f8c6 e00c 	str.w	lr, [r6, #12]
   82e64:	f8c6 e008 	str.w	lr, [r6, #8]
   82e68:	6071      	str	r1, [r6, #4]
   82e6a:	50e2      	str	r2, [r4, r3]
   82e6c:	f000 f990 	bl	83190 <__malloc_unlock>
   82e70:	3408      	adds	r4, #8
   82e72:	e6eb      	b.n	82c4c <_malloc_r+0x18c>
   82e74:	687a      	ldr	r2, [r7, #4]
   82e76:	e688      	b.n	82b8a <_malloc_r+0xca>
   82e78:	f108 0801 	add.w	r8, r8, #1
   82e7c:	f018 0f03 	tst.w	r8, #3
   82e80:	f10c 0c08 	add.w	ip, ip, #8
   82e84:	f47f ae93 	bne.w	82bae <_malloc_r+0xee>
   82e88:	e02d      	b.n	82ee6 <_malloc_r+0x426>
   82e8a:	68dc      	ldr	r4, [r3, #12]
   82e8c:	42a3      	cmp	r3, r4
   82e8e:	bf08      	it	eq
   82e90:	3002      	addeq	r0, #2
   82e92:	f43f ae4b 	beq.w	82b2c <_malloc_r+0x6c>
   82e96:	e6c9      	b.n	82c2c <_malloc_r+0x16c>
   82e98:	461c      	mov	r4, r3
   82e9a:	4419      	add	r1, r3
   82e9c:	684a      	ldr	r2, [r1, #4]
   82e9e:	68db      	ldr	r3, [r3, #12]
   82ea0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   82ea4:	f042 0201 	orr.w	r2, r2, #1
   82ea8:	604a      	str	r2, [r1, #4]
   82eaa:	4628      	mov	r0, r5
   82eac:	60f3      	str	r3, [r6, #12]
   82eae:	609e      	str	r6, [r3, #8]
   82eb0:	f000 f96e 	bl	83190 <__malloc_unlock>
   82eb4:	e6ca      	b.n	82c4c <_malloc_r+0x18c>
   82eb6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   82eba:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   82ebe:	00c1      	lsls	r1, r0, #3
   82ec0:	e620      	b.n	82b04 <_malloc_r+0x44>
   82ec2:	099a      	lsrs	r2, r3, #6
   82ec4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82ec8:	00c9      	lsls	r1, r1, #3
   82eca:	3238      	adds	r2, #56	; 0x38
   82ecc:	e7a4      	b.n	82e18 <_malloc_r+0x358>
   82ece:	42bc      	cmp	r4, r7
   82ed0:	d054      	beq.n	82f7c <_malloc_r+0x4bc>
   82ed2:	68bc      	ldr	r4, [r7, #8]
   82ed4:	6862      	ldr	r2, [r4, #4]
   82ed6:	f022 0203 	bic.w	r2, r2, #3
   82eda:	e75e      	b.n	82d9a <_malloc_r+0x2da>
   82edc:	f859 3908 	ldr.w	r3, [r9], #-8
   82ee0:	4599      	cmp	r9, r3
   82ee2:	f040 8086 	bne.w	82ff2 <_malloc_r+0x532>
   82ee6:	f010 0f03 	tst.w	r0, #3
   82eea:	f100 30ff 	add.w	r0, r0, #4294967295
   82eee:	d1f5      	bne.n	82edc <_malloc_r+0x41c>
   82ef0:	687b      	ldr	r3, [r7, #4]
   82ef2:	ea23 0304 	bic.w	r3, r3, r4
   82ef6:	607b      	str	r3, [r7, #4]
   82ef8:	0064      	lsls	r4, r4, #1
   82efa:	429c      	cmp	r4, r3
   82efc:	f63f aec8 	bhi.w	82c90 <_malloc_r+0x1d0>
   82f00:	2c00      	cmp	r4, #0
   82f02:	f43f aec5 	beq.w	82c90 <_malloc_r+0x1d0>
   82f06:	421c      	tst	r4, r3
   82f08:	4640      	mov	r0, r8
   82f0a:	f47f ae4c 	bne.w	82ba6 <_malloc_r+0xe6>
   82f0e:	0064      	lsls	r4, r4, #1
   82f10:	421c      	tst	r4, r3
   82f12:	f100 0004 	add.w	r0, r0, #4
   82f16:	d0fa      	beq.n	82f0e <_malloc_r+0x44e>
   82f18:	e645      	b.n	82ba6 <_malloc_r+0xe6>
   82f1a:	468c      	mov	ip, r1
   82f1c:	e78c      	b.n	82e38 <_malloc_r+0x378>
   82f1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f22:	d815      	bhi.n	82f50 <_malloc_r+0x490>
   82f24:	0bf3      	lsrs	r3, r6, #15
   82f26:	f103 0078 	add.w	r0, r3, #120	; 0x78
   82f2a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   82f2e:	00c1      	lsls	r1, r0, #3
   82f30:	e5e8      	b.n	82b04 <_malloc_r+0x44>
   82f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82f36:	e6ee      	b.n	82d16 <_malloc_r+0x256>
   82f38:	2101      	movs	r1, #1
   82f3a:	687b      	ldr	r3, [r7, #4]
   82f3c:	1092      	asrs	r2, r2, #2
   82f3e:	fa01 f202 	lsl.w	r2, r1, r2
   82f42:	431a      	orrs	r2, r3
   82f44:	607a      	str	r2, [r7, #4]
   82f46:	4663      	mov	r3, ip
   82f48:	e779      	b.n	82e3e <_malloc_r+0x37e>
   82f4a:	2301      	movs	r3, #1
   82f4c:	6053      	str	r3, [r2, #4]
   82f4e:	e72a      	b.n	82da6 <_malloc_r+0x2e6>
   82f50:	f240 5254 	movw	r2, #1364	; 0x554
   82f54:	4293      	cmp	r3, r2
   82f56:	d822      	bhi.n	82f9e <_malloc_r+0x4de>
   82f58:	0cb3      	lsrs	r3, r6, #18
   82f5a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   82f5e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   82f62:	00c1      	lsls	r1, r0, #3
   82f64:	e5ce      	b.n	82b04 <_malloc_r+0x44>
   82f66:	f103 0b10 	add.w	fp, r3, #16
   82f6a:	e6af      	b.n	82ccc <_malloc_r+0x20c>
   82f6c:	2a54      	cmp	r2, #84	; 0x54
   82f6e:	d829      	bhi.n	82fc4 <_malloc_r+0x504>
   82f70:	0b1a      	lsrs	r2, r3, #12
   82f72:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   82f76:	00c9      	lsls	r1, r1, #3
   82f78:	326e      	adds	r2, #110	; 0x6e
   82f7a:	e74d      	b.n	82e18 <_malloc_r+0x358>
   82f7c:	4b20      	ldr	r3, [pc, #128]	; (83000 <_malloc_r+0x540>)
   82f7e:	6819      	ldr	r1, [r3, #0]
   82f80:	4459      	add	r1, fp
   82f82:	6019      	str	r1, [r3, #0]
   82f84:	e6b3      	b.n	82cee <_malloc_r+0x22e>
   82f86:	f3ca 000b 	ubfx	r0, sl, #0, #12
   82f8a:	2800      	cmp	r0, #0
   82f8c:	f47f aeaf 	bne.w	82cee <_malloc_r+0x22e>
   82f90:	eb08 030b 	add.w	r3, r8, fp
   82f94:	68ba      	ldr	r2, [r7, #8]
   82f96:	f043 0301 	orr.w	r3, r3, #1
   82f9a:	6053      	str	r3, [r2, #4]
   82f9c:	e6ef      	b.n	82d7e <_malloc_r+0x2be>
   82f9e:	207f      	movs	r0, #127	; 0x7f
   82fa0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82fa4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   82fa8:	e5ac      	b.n	82b04 <_malloc_r+0x44>
   82faa:	f104 0108 	add.w	r1, r4, #8
   82fae:	4628      	mov	r0, r5
   82fb0:	9300      	str	r3, [sp, #0]
   82fb2:	f7ff fa67 	bl	82484 <_free_r>
   82fb6:	9b00      	ldr	r3, [sp, #0]
   82fb8:	6819      	ldr	r1, [r3, #0]
   82fba:	e6e0      	b.n	82d7e <_malloc_r+0x2be>
   82fbc:	2001      	movs	r0, #1
   82fbe:	f04f 0900 	mov.w	r9, #0
   82fc2:	e6bd      	b.n	82d40 <_malloc_r+0x280>
   82fc4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82fc8:	d805      	bhi.n	82fd6 <_malloc_r+0x516>
   82fca:	0bda      	lsrs	r2, r3, #15
   82fcc:	f102 0178 	add.w	r1, r2, #120	; 0x78
   82fd0:	00c9      	lsls	r1, r1, #3
   82fd2:	3277      	adds	r2, #119	; 0x77
   82fd4:	e720      	b.n	82e18 <_malloc_r+0x358>
   82fd6:	f240 5154 	movw	r1, #1364	; 0x554
   82fda:	428a      	cmp	r2, r1
   82fdc:	d805      	bhi.n	82fea <_malloc_r+0x52a>
   82fde:	0c9a      	lsrs	r2, r3, #18
   82fe0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   82fe4:	00c9      	lsls	r1, r1, #3
   82fe6:	327c      	adds	r2, #124	; 0x7c
   82fe8:	e716      	b.n	82e18 <_malloc_r+0x358>
   82fea:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82fee:	227e      	movs	r2, #126	; 0x7e
   82ff0:	e712      	b.n	82e18 <_malloc_r+0x358>
   82ff2:	687b      	ldr	r3, [r7, #4]
   82ff4:	e780      	b.n	82ef8 <_malloc_r+0x438>
   82ff6:	08f0      	lsrs	r0, r6, #3
   82ff8:	f106 0308 	add.w	r3, r6, #8
   82ffc:	e60e      	b.n	82c1c <_malloc_r+0x15c>
   82ffe:	bf00      	nop
   83000:	20070bf8 	.word	0x20070bf8

00083004 <__ascii_mbtowc>:
   83004:	b082      	sub	sp, #8
   83006:	b149      	cbz	r1, 8301c <__ascii_mbtowc+0x18>
   83008:	b15a      	cbz	r2, 83022 <__ascii_mbtowc+0x1e>
   8300a:	b16b      	cbz	r3, 83028 <__ascii_mbtowc+0x24>
   8300c:	7813      	ldrb	r3, [r2, #0]
   8300e:	600b      	str	r3, [r1, #0]
   83010:	7812      	ldrb	r2, [r2, #0]
   83012:	1c10      	adds	r0, r2, #0
   83014:	bf18      	it	ne
   83016:	2001      	movne	r0, #1
   83018:	b002      	add	sp, #8
   8301a:	4770      	bx	lr
   8301c:	a901      	add	r1, sp, #4
   8301e:	2a00      	cmp	r2, #0
   83020:	d1f3      	bne.n	8300a <__ascii_mbtowc+0x6>
   83022:	4610      	mov	r0, r2
   83024:	b002      	add	sp, #8
   83026:	4770      	bx	lr
   83028:	f06f 0001 	mvn.w	r0, #1
   8302c:	e7f4      	b.n	83018 <__ascii_mbtowc+0x14>
   8302e:	bf00      	nop

00083030 <memchr>:
   83030:	0783      	lsls	r3, r0, #30
   83032:	b470      	push	{r4, r5, r6}
   83034:	b2cd      	uxtb	r5, r1
   83036:	d03d      	beq.n	830b4 <memchr+0x84>
   83038:	1e54      	subs	r4, r2, #1
   8303a:	b30a      	cbz	r2, 83080 <memchr+0x50>
   8303c:	7803      	ldrb	r3, [r0, #0]
   8303e:	42ab      	cmp	r3, r5
   83040:	d01f      	beq.n	83082 <memchr+0x52>
   83042:	1c43      	adds	r3, r0, #1
   83044:	e005      	b.n	83052 <memchr+0x22>
   83046:	f114 34ff 	adds.w	r4, r4, #4294967295
   8304a:	d319      	bcc.n	83080 <memchr+0x50>
   8304c:	7802      	ldrb	r2, [r0, #0]
   8304e:	42aa      	cmp	r2, r5
   83050:	d017      	beq.n	83082 <memchr+0x52>
   83052:	f013 0f03 	tst.w	r3, #3
   83056:	4618      	mov	r0, r3
   83058:	f103 0301 	add.w	r3, r3, #1
   8305c:	d1f3      	bne.n	83046 <memchr+0x16>
   8305e:	2c03      	cmp	r4, #3
   83060:	d811      	bhi.n	83086 <memchr+0x56>
   83062:	b34c      	cbz	r4, 830b8 <memchr+0x88>
   83064:	7803      	ldrb	r3, [r0, #0]
   83066:	42ab      	cmp	r3, r5
   83068:	d00b      	beq.n	83082 <memchr+0x52>
   8306a:	4404      	add	r4, r0
   8306c:	1c43      	adds	r3, r0, #1
   8306e:	e002      	b.n	83076 <memchr+0x46>
   83070:	7802      	ldrb	r2, [r0, #0]
   83072:	42aa      	cmp	r2, r5
   83074:	d005      	beq.n	83082 <memchr+0x52>
   83076:	429c      	cmp	r4, r3
   83078:	4618      	mov	r0, r3
   8307a:	f103 0301 	add.w	r3, r3, #1
   8307e:	d1f7      	bne.n	83070 <memchr+0x40>
   83080:	2000      	movs	r0, #0
   83082:	bc70      	pop	{r4, r5, r6}
   83084:	4770      	bx	lr
   83086:	0209      	lsls	r1, r1, #8
   83088:	b289      	uxth	r1, r1
   8308a:	4329      	orrs	r1, r5
   8308c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83090:	6803      	ldr	r3, [r0, #0]
   83092:	4606      	mov	r6, r0
   83094:	404b      	eors	r3, r1
   83096:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8309a:	ea22 0303 	bic.w	r3, r2, r3
   8309e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   830a2:	f100 0004 	add.w	r0, r0, #4
   830a6:	d103      	bne.n	830b0 <memchr+0x80>
   830a8:	3c04      	subs	r4, #4
   830aa:	2c03      	cmp	r4, #3
   830ac:	d8f0      	bhi.n	83090 <memchr+0x60>
   830ae:	e7d8      	b.n	83062 <memchr+0x32>
   830b0:	4630      	mov	r0, r6
   830b2:	e7d7      	b.n	83064 <memchr+0x34>
   830b4:	4614      	mov	r4, r2
   830b6:	e7d2      	b.n	8305e <memchr+0x2e>
   830b8:	4620      	mov	r0, r4
   830ba:	e7e2      	b.n	83082 <memchr+0x52>

000830bc <memmove>:
   830bc:	4288      	cmp	r0, r1
   830be:	b5f0      	push	{r4, r5, r6, r7, lr}
   830c0:	d90d      	bls.n	830de <memmove+0x22>
   830c2:	188b      	adds	r3, r1, r2
   830c4:	4298      	cmp	r0, r3
   830c6:	d20a      	bcs.n	830de <memmove+0x22>
   830c8:	1884      	adds	r4, r0, r2
   830ca:	2a00      	cmp	r2, #0
   830cc:	d051      	beq.n	83172 <memmove+0xb6>
   830ce:	4622      	mov	r2, r4
   830d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   830d4:	4299      	cmp	r1, r3
   830d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   830da:	d1f9      	bne.n	830d0 <memmove+0x14>
   830dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   830de:	2a0f      	cmp	r2, #15
   830e0:	d948      	bls.n	83174 <memmove+0xb8>
   830e2:	ea41 0300 	orr.w	r3, r1, r0
   830e6:	079b      	lsls	r3, r3, #30
   830e8:	d146      	bne.n	83178 <memmove+0xbc>
   830ea:	4615      	mov	r5, r2
   830ec:	f100 0410 	add.w	r4, r0, #16
   830f0:	f101 0310 	add.w	r3, r1, #16
   830f4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   830f8:	3d10      	subs	r5, #16
   830fa:	f844 6c10 	str.w	r6, [r4, #-16]
   830fe:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83102:	2d0f      	cmp	r5, #15
   83104:	f844 6c0c 	str.w	r6, [r4, #-12]
   83108:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8310c:	f104 0410 	add.w	r4, r4, #16
   83110:	f844 6c18 	str.w	r6, [r4, #-24]
   83114:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83118:	f103 0310 	add.w	r3, r3, #16
   8311c:	f844 6c14 	str.w	r6, [r4, #-20]
   83120:	d8e8      	bhi.n	830f4 <memmove+0x38>
   83122:	f1a2 0310 	sub.w	r3, r2, #16
   83126:	f023 030f 	bic.w	r3, r3, #15
   8312a:	f002 0e0f 	and.w	lr, r2, #15
   8312e:	3310      	adds	r3, #16
   83130:	f1be 0f03 	cmp.w	lr, #3
   83134:	4419      	add	r1, r3
   83136:	4403      	add	r3, r0
   83138:	d921      	bls.n	8317e <memmove+0xc2>
   8313a:	460e      	mov	r6, r1
   8313c:	4674      	mov	r4, lr
   8313e:	1f1d      	subs	r5, r3, #4
   83140:	f856 7b04 	ldr.w	r7, [r6], #4
   83144:	3c04      	subs	r4, #4
   83146:	2c03      	cmp	r4, #3
   83148:	f845 7f04 	str.w	r7, [r5, #4]!
   8314c:	d8f8      	bhi.n	83140 <memmove+0x84>
   8314e:	f1ae 0404 	sub.w	r4, lr, #4
   83152:	f024 0403 	bic.w	r4, r4, #3
   83156:	3404      	adds	r4, #4
   83158:	4421      	add	r1, r4
   8315a:	4423      	add	r3, r4
   8315c:	f002 0203 	and.w	r2, r2, #3
   83160:	b162      	cbz	r2, 8317c <memmove+0xc0>
   83162:	3b01      	subs	r3, #1
   83164:	440a      	add	r2, r1
   83166:	f811 4b01 	ldrb.w	r4, [r1], #1
   8316a:	428a      	cmp	r2, r1
   8316c:	f803 4f01 	strb.w	r4, [r3, #1]!
   83170:	d1f9      	bne.n	83166 <memmove+0xaa>
   83172:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83174:	4603      	mov	r3, r0
   83176:	e7f3      	b.n	83160 <memmove+0xa4>
   83178:	4603      	mov	r3, r0
   8317a:	e7f2      	b.n	83162 <memmove+0xa6>
   8317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8317e:	4672      	mov	r2, lr
   83180:	e7ee      	b.n	83160 <memmove+0xa4>
   83182:	bf00      	nop

00083184 <__malloc_lock>:
   83184:	4801      	ldr	r0, [pc, #4]	; (8318c <__malloc_lock+0x8>)
   83186:	f7ff bc17 	b.w	829b8 <__retarget_lock_acquire_recursive>
   8318a:	bf00      	nop
   8318c:	20070c48 	.word	0x20070c48

00083190 <__malloc_unlock>:
   83190:	4801      	ldr	r0, [pc, #4]	; (83198 <__malloc_unlock+0x8>)
   83192:	f7ff bc13 	b.w	829bc <__retarget_lock_release_recursive>
   83196:	bf00      	nop
   83198:	20070c48 	.word	0x20070c48

0008319c <_realloc_r>:
   8319c:	2900      	cmp	r1, #0
   8319e:	f000 8094 	beq.w	832ca <_realloc_r+0x12e>
   831a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   831a6:	460c      	mov	r4, r1
   831a8:	4615      	mov	r5, r2
   831aa:	b083      	sub	sp, #12
   831ac:	4680      	mov	r8, r0
   831ae:	f105 060b 	add.w	r6, r5, #11
   831b2:	f7ff ffe7 	bl	83184 <__malloc_lock>
   831b6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   831ba:	2e16      	cmp	r6, #22
   831bc:	f02e 0703 	bic.w	r7, lr, #3
   831c0:	f1a4 0908 	sub.w	r9, r4, #8
   831c4:	d83c      	bhi.n	83240 <_realloc_r+0xa4>
   831c6:	2210      	movs	r2, #16
   831c8:	4616      	mov	r6, r2
   831ca:	42b5      	cmp	r5, r6
   831cc:	d83d      	bhi.n	8324a <_realloc_r+0xae>
   831ce:	4297      	cmp	r7, r2
   831d0:	da43      	bge.n	8325a <_realloc_r+0xbe>
   831d2:	4bc6      	ldr	r3, [pc, #792]	; (834ec <_realloc_r+0x350>)
   831d4:	eb09 0007 	add.w	r0, r9, r7
   831d8:	6899      	ldr	r1, [r3, #8]
   831da:	4288      	cmp	r0, r1
   831dc:	f000 80c3 	beq.w	83366 <_realloc_r+0x1ca>
   831e0:	6843      	ldr	r3, [r0, #4]
   831e2:	f023 0101 	bic.w	r1, r3, #1
   831e6:	4401      	add	r1, r0
   831e8:	6849      	ldr	r1, [r1, #4]
   831ea:	07c9      	lsls	r1, r1, #31
   831ec:	d54d      	bpl.n	8328a <_realloc_r+0xee>
   831ee:	f01e 0f01 	tst.w	lr, #1
   831f2:	f000 809b 	beq.w	8332c <_realloc_r+0x190>
   831f6:	4629      	mov	r1, r5
   831f8:	4640      	mov	r0, r8
   831fa:	f7ff fc61 	bl	82ac0 <_malloc_r>
   831fe:	4605      	mov	r5, r0
   83200:	2800      	cmp	r0, #0
   83202:	d03b      	beq.n	8327c <_realloc_r+0xe0>
   83204:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83208:	f1a0 0208 	sub.w	r2, r0, #8
   8320c:	f023 0301 	bic.w	r3, r3, #1
   83210:	444b      	add	r3, r9
   83212:	429a      	cmp	r2, r3
   83214:	f000 812b 	beq.w	8346e <_realloc_r+0x2d2>
   83218:	1f3a      	subs	r2, r7, #4
   8321a:	2a24      	cmp	r2, #36	; 0x24
   8321c:	f200 8118 	bhi.w	83450 <_realloc_r+0x2b4>
   83220:	2a13      	cmp	r2, #19
   83222:	f200 80eb 	bhi.w	833fc <_realloc_r+0x260>
   83226:	4603      	mov	r3, r0
   83228:	4622      	mov	r2, r4
   8322a:	6811      	ldr	r1, [r2, #0]
   8322c:	6019      	str	r1, [r3, #0]
   8322e:	6851      	ldr	r1, [r2, #4]
   83230:	6059      	str	r1, [r3, #4]
   83232:	6892      	ldr	r2, [r2, #8]
   83234:	609a      	str	r2, [r3, #8]
   83236:	4621      	mov	r1, r4
   83238:	4640      	mov	r0, r8
   8323a:	f7ff f923 	bl	82484 <_free_r>
   8323e:	e01d      	b.n	8327c <_realloc_r+0xe0>
   83240:	f026 0607 	bic.w	r6, r6, #7
   83244:	2e00      	cmp	r6, #0
   83246:	4632      	mov	r2, r6
   83248:	dabf      	bge.n	831ca <_realloc_r+0x2e>
   8324a:	2500      	movs	r5, #0
   8324c:	230c      	movs	r3, #12
   8324e:	4628      	mov	r0, r5
   83250:	f8c8 3000 	str.w	r3, [r8]
   83254:	b003      	add	sp, #12
   83256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8325a:	4625      	mov	r5, r4
   8325c:	1bbb      	subs	r3, r7, r6
   8325e:	2b0f      	cmp	r3, #15
   83260:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83264:	d81d      	bhi.n	832a2 <_realloc_r+0x106>
   83266:	f002 0201 	and.w	r2, r2, #1
   8326a:	433a      	orrs	r2, r7
   8326c:	eb09 0107 	add.w	r1, r9, r7
   83270:	f8c9 2004 	str.w	r2, [r9, #4]
   83274:	684b      	ldr	r3, [r1, #4]
   83276:	f043 0301 	orr.w	r3, r3, #1
   8327a:	604b      	str	r3, [r1, #4]
   8327c:	4640      	mov	r0, r8
   8327e:	f7ff ff87 	bl	83190 <__malloc_unlock>
   83282:	4628      	mov	r0, r5
   83284:	b003      	add	sp, #12
   83286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8328a:	f023 0303 	bic.w	r3, r3, #3
   8328e:	18f9      	adds	r1, r7, r3
   83290:	4291      	cmp	r1, r2
   83292:	db1d      	blt.n	832d0 <_realloc_r+0x134>
   83294:	68c3      	ldr	r3, [r0, #12]
   83296:	6882      	ldr	r2, [r0, #8]
   83298:	4625      	mov	r5, r4
   8329a:	60d3      	str	r3, [r2, #12]
   8329c:	460f      	mov	r7, r1
   8329e:	609a      	str	r2, [r3, #8]
   832a0:	e7dc      	b.n	8325c <_realloc_r+0xc0>
   832a2:	f002 0201 	and.w	r2, r2, #1
   832a6:	eb09 0106 	add.w	r1, r9, r6
   832aa:	f043 0301 	orr.w	r3, r3, #1
   832ae:	4332      	orrs	r2, r6
   832b0:	f8c9 2004 	str.w	r2, [r9, #4]
   832b4:	444f      	add	r7, r9
   832b6:	604b      	str	r3, [r1, #4]
   832b8:	687b      	ldr	r3, [r7, #4]
   832ba:	3108      	adds	r1, #8
   832bc:	f043 0301 	orr.w	r3, r3, #1
   832c0:	607b      	str	r3, [r7, #4]
   832c2:	4640      	mov	r0, r8
   832c4:	f7ff f8de 	bl	82484 <_free_r>
   832c8:	e7d8      	b.n	8327c <_realloc_r+0xe0>
   832ca:	4611      	mov	r1, r2
   832cc:	f7ff bbf8 	b.w	82ac0 <_malloc_r>
   832d0:	f01e 0f01 	tst.w	lr, #1
   832d4:	d18f      	bne.n	831f6 <_realloc_r+0x5a>
   832d6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   832da:	eba9 0a01 	sub.w	sl, r9, r1
   832de:	f8da 1004 	ldr.w	r1, [sl, #4]
   832e2:	f021 0103 	bic.w	r1, r1, #3
   832e6:	440b      	add	r3, r1
   832e8:	443b      	add	r3, r7
   832ea:	4293      	cmp	r3, r2
   832ec:	db26      	blt.n	8333c <_realloc_r+0x1a0>
   832ee:	4655      	mov	r5, sl
   832f0:	68c1      	ldr	r1, [r0, #12]
   832f2:	6880      	ldr	r0, [r0, #8]
   832f4:	1f3a      	subs	r2, r7, #4
   832f6:	60c1      	str	r1, [r0, #12]
   832f8:	6088      	str	r0, [r1, #8]
   832fa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   832fe:	f8da 100c 	ldr.w	r1, [sl, #12]
   83302:	2a24      	cmp	r2, #36	; 0x24
   83304:	60c1      	str	r1, [r0, #12]
   83306:	6088      	str	r0, [r1, #8]
   83308:	d826      	bhi.n	83358 <_realloc_r+0x1bc>
   8330a:	2a13      	cmp	r2, #19
   8330c:	f240 8081 	bls.w	83412 <_realloc_r+0x276>
   83310:	6821      	ldr	r1, [r4, #0]
   83312:	2a1b      	cmp	r2, #27
   83314:	f8ca 1008 	str.w	r1, [sl, #8]
   83318:	6861      	ldr	r1, [r4, #4]
   8331a:	f8ca 100c 	str.w	r1, [sl, #12]
   8331e:	f200 80ad 	bhi.w	8347c <_realloc_r+0x2e0>
   83322:	f104 0008 	add.w	r0, r4, #8
   83326:	f10a 0210 	add.w	r2, sl, #16
   8332a:	e074      	b.n	83416 <_realloc_r+0x27a>
   8332c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83330:	eba9 0a03 	sub.w	sl, r9, r3
   83334:	f8da 1004 	ldr.w	r1, [sl, #4]
   83338:	f021 0103 	bic.w	r1, r1, #3
   8333c:	187b      	adds	r3, r7, r1
   8333e:	4293      	cmp	r3, r2
   83340:	f6ff af59 	blt.w	831f6 <_realloc_r+0x5a>
   83344:	4655      	mov	r5, sl
   83346:	f8da 100c 	ldr.w	r1, [sl, #12]
   8334a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8334e:	1f3a      	subs	r2, r7, #4
   83350:	2a24      	cmp	r2, #36	; 0x24
   83352:	60c1      	str	r1, [r0, #12]
   83354:	6088      	str	r0, [r1, #8]
   83356:	d9d8      	bls.n	8330a <_realloc_r+0x16e>
   83358:	4621      	mov	r1, r4
   8335a:	4628      	mov	r0, r5
   8335c:	461f      	mov	r7, r3
   8335e:	46d1      	mov	r9, sl
   83360:	f7ff feac 	bl	830bc <memmove>
   83364:	e77a      	b.n	8325c <_realloc_r+0xc0>
   83366:	6841      	ldr	r1, [r0, #4]
   83368:	f106 0010 	add.w	r0, r6, #16
   8336c:	f021 0b03 	bic.w	fp, r1, #3
   83370:	44bb      	add	fp, r7
   83372:	4583      	cmp	fp, r0
   83374:	da58      	bge.n	83428 <_realloc_r+0x28c>
   83376:	f01e 0f01 	tst.w	lr, #1
   8337a:	f47f af3c 	bne.w	831f6 <_realloc_r+0x5a>
   8337e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83382:	eba9 0a01 	sub.w	sl, r9, r1
   83386:	f8da 1004 	ldr.w	r1, [sl, #4]
   8338a:	f021 0103 	bic.w	r1, r1, #3
   8338e:	448b      	add	fp, r1
   83390:	4558      	cmp	r0, fp
   83392:	dcd3      	bgt.n	8333c <_realloc_r+0x1a0>
   83394:	4655      	mov	r5, sl
   83396:	f8da 100c 	ldr.w	r1, [sl, #12]
   8339a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8339e:	1f3a      	subs	r2, r7, #4
   833a0:	2a24      	cmp	r2, #36	; 0x24
   833a2:	60c1      	str	r1, [r0, #12]
   833a4:	6088      	str	r0, [r1, #8]
   833a6:	f200 808d 	bhi.w	834c4 <_realloc_r+0x328>
   833aa:	2a13      	cmp	r2, #19
   833ac:	f240 8087 	bls.w	834be <_realloc_r+0x322>
   833b0:	6821      	ldr	r1, [r4, #0]
   833b2:	2a1b      	cmp	r2, #27
   833b4:	f8ca 1008 	str.w	r1, [sl, #8]
   833b8:	6861      	ldr	r1, [r4, #4]
   833ba:	f8ca 100c 	str.w	r1, [sl, #12]
   833be:	f200 8088 	bhi.w	834d2 <_realloc_r+0x336>
   833c2:	f104 0108 	add.w	r1, r4, #8
   833c6:	f10a 0210 	add.w	r2, sl, #16
   833ca:	6808      	ldr	r0, [r1, #0]
   833cc:	6010      	str	r0, [r2, #0]
   833ce:	6848      	ldr	r0, [r1, #4]
   833d0:	6050      	str	r0, [r2, #4]
   833d2:	6889      	ldr	r1, [r1, #8]
   833d4:	6091      	str	r1, [r2, #8]
   833d6:	ebab 0206 	sub.w	r2, fp, r6
   833da:	eb0a 0106 	add.w	r1, sl, r6
   833de:	f042 0201 	orr.w	r2, r2, #1
   833e2:	6099      	str	r1, [r3, #8]
   833e4:	604a      	str	r2, [r1, #4]
   833e6:	f8da 3004 	ldr.w	r3, [sl, #4]
   833ea:	4640      	mov	r0, r8
   833ec:	f003 0301 	and.w	r3, r3, #1
   833f0:	431e      	orrs	r6, r3
   833f2:	f8ca 6004 	str.w	r6, [sl, #4]
   833f6:	f7ff fecb 	bl	83190 <__malloc_unlock>
   833fa:	e742      	b.n	83282 <_realloc_r+0xe6>
   833fc:	6823      	ldr	r3, [r4, #0]
   833fe:	2a1b      	cmp	r2, #27
   83400:	6003      	str	r3, [r0, #0]
   83402:	6863      	ldr	r3, [r4, #4]
   83404:	6043      	str	r3, [r0, #4]
   83406:	d827      	bhi.n	83458 <_realloc_r+0x2bc>
   83408:	f100 0308 	add.w	r3, r0, #8
   8340c:	f104 0208 	add.w	r2, r4, #8
   83410:	e70b      	b.n	8322a <_realloc_r+0x8e>
   83412:	4620      	mov	r0, r4
   83414:	462a      	mov	r2, r5
   83416:	6801      	ldr	r1, [r0, #0]
   83418:	461f      	mov	r7, r3
   8341a:	6011      	str	r1, [r2, #0]
   8341c:	6841      	ldr	r1, [r0, #4]
   8341e:	46d1      	mov	r9, sl
   83420:	6051      	str	r1, [r2, #4]
   83422:	6883      	ldr	r3, [r0, #8]
   83424:	6093      	str	r3, [r2, #8]
   83426:	e719      	b.n	8325c <_realloc_r+0xc0>
   83428:	ebab 0b06 	sub.w	fp, fp, r6
   8342c:	eb09 0106 	add.w	r1, r9, r6
   83430:	f04b 0201 	orr.w	r2, fp, #1
   83434:	6099      	str	r1, [r3, #8]
   83436:	604a      	str	r2, [r1, #4]
   83438:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8343c:	4640      	mov	r0, r8
   8343e:	f003 0301 	and.w	r3, r3, #1
   83442:	431e      	orrs	r6, r3
   83444:	f844 6c04 	str.w	r6, [r4, #-4]
   83448:	f7ff fea2 	bl	83190 <__malloc_unlock>
   8344c:	4625      	mov	r5, r4
   8344e:	e718      	b.n	83282 <_realloc_r+0xe6>
   83450:	4621      	mov	r1, r4
   83452:	f7ff fe33 	bl	830bc <memmove>
   83456:	e6ee      	b.n	83236 <_realloc_r+0x9a>
   83458:	68a3      	ldr	r3, [r4, #8]
   8345a:	2a24      	cmp	r2, #36	; 0x24
   8345c:	6083      	str	r3, [r0, #8]
   8345e:	68e3      	ldr	r3, [r4, #12]
   83460:	60c3      	str	r3, [r0, #12]
   83462:	d018      	beq.n	83496 <_realloc_r+0x2fa>
   83464:	f100 0310 	add.w	r3, r0, #16
   83468:	f104 0210 	add.w	r2, r4, #16
   8346c:	e6dd      	b.n	8322a <_realloc_r+0x8e>
   8346e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83472:	4625      	mov	r5, r4
   83474:	f023 0303 	bic.w	r3, r3, #3
   83478:	441f      	add	r7, r3
   8347a:	e6ef      	b.n	8325c <_realloc_r+0xc0>
   8347c:	68a1      	ldr	r1, [r4, #8]
   8347e:	2a24      	cmp	r2, #36	; 0x24
   83480:	f8ca 1010 	str.w	r1, [sl, #16]
   83484:	68e1      	ldr	r1, [r4, #12]
   83486:	f8ca 1014 	str.w	r1, [sl, #20]
   8348a:	d00d      	beq.n	834a8 <_realloc_r+0x30c>
   8348c:	f104 0010 	add.w	r0, r4, #16
   83490:	f10a 0218 	add.w	r2, sl, #24
   83494:	e7bf      	b.n	83416 <_realloc_r+0x27a>
   83496:	6922      	ldr	r2, [r4, #16]
   83498:	f100 0318 	add.w	r3, r0, #24
   8349c:	6102      	str	r2, [r0, #16]
   8349e:	6961      	ldr	r1, [r4, #20]
   834a0:	f104 0218 	add.w	r2, r4, #24
   834a4:	6141      	str	r1, [r0, #20]
   834a6:	e6c0      	b.n	8322a <_realloc_r+0x8e>
   834a8:	6922      	ldr	r2, [r4, #16]
   834aa:	f104 0018 	add.w	r0, r4, #24
   834ae:	f8ca 2018 	str.w	r2, [sl, #24]
   834b2:	6961      	ldr	r1, [r4, #20]
   834b4:	f10a 0220 	add.w	r2, sl, #32
   834b8:	f8ca 101c 	str.w	r1, [sl, #28]
   834bc:	e7ab      	b.n	83416 <_realloc_r+0x27a>
   834be:	4621      	mov	r1, r4
   834c0:	462a      	mov	r2, r5
   834c2:	e782      	b.n	833ca <_realloc_r+0x22e>
   834c4:	4621      	mov	r1, r4
   834c6:	4628      	mov	r0, r5
   834c8:	9301      	str	r3, [sp, #4]
   834ca:	f7ff fdf7 	bl	830bc <memmove>
   834ce:	9b01      	ldr	r3, [sp, #4]
   834d0:	e781      	b.n	833d6 <_realloc_r+0x23a>
   834d2:	68a1      	ldr	r1, [r4, #8]
   834d4:	2a24      	cmp	r2, #36	; 0x24
   834d6:	f8ca 1010 	str.w	r1, [sl, #16]
   834da:	68e1      	ldr	r1, [r4, #12]
   834dc:	f8ca 1014 	str.w	r1, [sl, #20]
   834e0:	d006      	beq.n	834f0 <_realloc_r+0x354>
   834e2:	f104 0110 	add.w	r1, r4, #16
   834e6:	f10a 0218 	add.w	r2, sl, #24
   834ea:	e76e      	b.n	833ca <_realloc_r+0x22e>
   834ec:	200706d0 	.word	0x200706d0
   834f0:	6922      	ldr	r2, [r4, #16]
   834f2:	f104 0118 	add.w	r1, r4, #24
   834f6:	f8ca 2018 	str.w	r2, [sl, #24]
   834fa:	6960      	ldr	r0, [r4, #20]
   834fc:	f10a 0220 	add.w	r2, sl, #32
   83500:	f8ca 001c 	str.w	r0, [sl, #28]
   83504:	e761      	b.n	833ca <_realloc_r+0x22e>
   83506:	bf00      	nop

00083508 <_sbrk_r>:
   83508:	b538      	push	{r3, r4, r5, lr}
   8350a:	2300      	movs	r3, #0
   8350c:	4c06      	ldr	r4, [pc, #24]	; (83528 <_sbrk_r+0x20>)
   8350e:	4605      	mov	r5, r0
   83510:	4608      	mov	r0, r1
   83512:	6023      	str	r3, [r4, #0]
   83514:	f7fd fb42 	bl	80b9c <_sbrk>
   83518:	1c43      	adds	r3, r0, #1
   8351a:	d000      	beq.n	8351e <_sbrk_r+0x16>
   8351c:	bd38      	pop	{r3, r4, r5, pc}
   8351e:	6823      	ldr	r3, [r4, #0]
   83520:	2b00      	cmp	r3, #0
   83522:	d0fb      	beq.n	8351c <_sbrk_r+0x14>
   83524:	602b      	str	r3, [r5, #0]
   83526:	bd38      	pop	{r3, r4, r5, pc}
   83528:	20070c5c 	.word	0x20070c5c

0008352c <__sread>:
   8352c:	b510      	push	{r4, lr}
   8352e:	460c      	mov	r4, r1
   83530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83534:	f000 f9f4 	bl	83920 <_read_r>
   83538:	2800      	cmp	r0, #0
   8353a:	db03      	blt.n	83544 <__sread+0x18>
   8353c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8353e:	4403      	add	r3, r0
   83540:	6523      	str	r3, [r4, #80]	; 0x50
   83542:	bd10      	pop	{r4, pc}
   83544:	89a3      	ldrh	r3, [r4, #12]
   83546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8354a:	81a3      	strh	r3, [r4, #12]
   8354c:	bd10      	pop	{r4, pc}
   8354e:	bf00      	nop

00083550 <__swrite>:
   83550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83554:	460c      	mov	r4, r1
   83556:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8355a:	461f      	mov	r7, r3
   8355c:	05cb      	lsls	r3, r1, #23
   8355e:	4616      	mov	r6, r2
   83560:	4605      	mov	r5, r0
   83562:	d507      	bpl.n	83574 <__swrite+0x24>
   83564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83568:	2302      	movs	r3, #2
   8356a:	2200      	movs	r2, #0
   8356c:	f000 f9c2 	bl	838f4 <_lseek_r>
   83570:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83574:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83578:	81a1      	strh	r1, [r4, #12]
   8357a:	463b      	mov	r3, r7
   8357c:	4632      	mov	r2, r6
   8357e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83582:	4628      	mov	r0, r5
   83584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83588:	f000 b8a2 	b.w	836d0 <_write_r>

0008358c <__sseek>:
   8358c:	b510      	push	{r4, lr}
   8358e:	460c      	mov	r4, r1
   83590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83594:	f000 f9ae 	bl	838f4 <_lseek_r>
   83598:	89a3      	ldrh	r3, [r4, #12]
   8359a:	1c42      	adds	r2, r0, #1
   8359c:	bf0e      	itee	eq
   8359e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   835a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   835a6:	6520      	strne	r0, [r4, #80]	; 0x50
   835a8:	81a3      	strh	r3, [r4, #12]
   835aa:	bd10      	pop	{r4, pc}

000835ac <__sclose>:
   835ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835b0:	f000 b906 	b.w	837c0 <_close_r>

000835b4 <__swbuf_r>:
   835b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835b6:	460d      	mov	r5, r1
   835b8:	4614      	mov	r4, r2
   835ba:	4606      	mov	r6, r0
   835bc:	b110      	cbz	r0, 835c4 <__swbuf_r+0x10>
   835be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   835c0:	2b00      	cmp	r3, #0
   835c2:	d04b      	beq.n	8365c <__swbuf_r+0xa8>
   835c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   835c8:	69a3      	ldr	r3, [r4, #24]
   835ca:	b291      	uxth	r1, r2
   835cc:	0708      	lsls	r0, r1, #28
   835ce:	60a3      	str	r3, [r4, #8]
   835d0:	d539      	bpl.n	83646 <__swbuf_r+0x92>
   835d2:	6923      	ldr	r3, [r4, #16]
   835d4:	2b00      	cmp	r3, #0
   835d6:	d036      	beq.n	83646 <__swbuf_r+0x92>
   835d8:	b2ed      	uxtb	r5, r5
   835da:	0489      	lsls	r1, r1, #18
   835dc:	462f      	mov	r7, r5
   835de:	d515      	bpl.n	8360c <__swbuf_r+0x58>
   835e0:	6822      	ldr	r2, [r4, #0]
   835e2:	6961      	ldr	r1, [r4, #20]
   835e4:	1ad3      	subs	r3, r2, r3
   835e6:	428b      	cmp	r3, r1
   835e8:	da1c      	bge.n	83624 <__swbuf_r+0x70>
   835ea:	3301      	adds	r3, #1
   835ec:	68a1      	ldr	r1, [r4, #8]
   835ee:	1c50      	adds	r0, r2, #1
   835f0:	3901      	subs	r1, #1
   835f2:	60a1      	str	r1, [r4, #8]
   835f4:	6020      	str	r0, [r4, #0]
   835f6:	7015      	strb	r5, [r2, #0]
   835f8:	6962      	ldr	r2, [r4, #20]
   835fa:	429a      	cmp	r2, r3
   835fc:	d01a      	beq.n	83634 <__swbuf_r+0x80>
   835fe:	89a3      	ldrh	r3, [r4, #12]
   83600:	07db      	lsls	r3, r3, #31
   83602:	d501      	bpl.n	83608 <__swbuf_r+0x54>
   83604:	2d0a      	cmp	r5, #10
   83606:	d015      	beq.n	83634 <__swbuf_r+0x80>
   83608:	4638      	mov	r0, r7
   8360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8360c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8360e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83612:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83616:	81a2      	strh	r2, [r4, #12]
   83618:	6822      	ldr	r2, [r4, #0]
   8361a:	6661      	str	r1, [r4, #100]	; 0x64
   8361c:	6961      	ldr	r1, [r4, #20]
   8361e:	1ad3      	subs	r3, r2, r3
   83620:	428b      	cmp	r3, r1
   83622:	dbe2      	blt.n	835ea <__swbuf_r+0x36>
   83624:	4621      	mov	r1, r4
   83626:	4630      	mov	r0, r6
   83628:	f7fe fdae 	bl	82188 <_fflush_r>
   8362c:	b940      	cbnz	r0, 83640 <__swbuf_r+0x8c>
   8362e:	2301      	movs	r3, #1
   83630:	6822      	ldr	r2, [r4, #0]
   83632:	e7db      	b.n	835ec <__swbuf_r+0x38>
   83634:	4621      	mov	r1, r4
   83636:	4630      	mov	r0, r6
   83638:	f7fe fda6 	bl	82188 <_fflush_r>
   8363c:	2800      	cmp	r0, #0
   8363e:	d0e3      	beq.n	83608 <__swbuf_r+0x54>
   83640:	f04f 37ff 	mov.w	r7, #4294967295
   83644:	e7e0      	b.n	83608 <__swbuf_r+0x54>
   83646:	4621      	mov	r1, r4
   83648:	4630      	mov	r0, r6
   8364a:	f7fe fc8d 	bl	81f68 <__swsetup_r>
   8364e:	2800      	cmp	r0, #0
   83650:	d1f6      	bne.n	83640 <__swbuf_r+0x8c>
   83652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83656:	6923      	ldr	r3, [r4, #16]
   83658:	b291      	uxth	r1, r2
   8365a:	e7bd      	b.n	835d8 <__swbuf_r+0x24>
   8365c:	f7fe fdec 	bl	82238 <__sinit>
   83660:	e7b0      	b.n	835c4 <__swbuf_r+0x10>
   83662:	bf00      	nop

00083664 <_wcrtomb_r>:
   83664:	b5f0      	push	{r4, r5, r6, r7, lr}
   83666:	4606      	mov	r6, r0
   83668:	b085      	sub	sp, #20
   8366a:	461f      	mov	r7, r3
   8366c:	b189      	cbz	r1, 83692 <_wcrtomb_r+0x2e>
   8366e:	4c10      	ldr	r4, [pc, #64]	; (836b0 <_wcrtomb_r+0x4c>)
   83670:	4d10      	ldr	r5, [pc, #64]	; (836b4 <_wcrtomb_r+0x50>)
   83672:	6824      	ldr	r4, [r4, #0]
   83674:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83676:	2c00      	cmp	r4, #0
   83678:	bf08      	it	eq
   8367a:	462c      	moveq	r4, r5
   8367c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83680:	47a0      	blx	r4
   83682:	1c43      	adds	r3, r0, #1
   83684:	d103      	bne.n	8368e <_wcrtomb_r+0x2a>
   83686:	2200      	movs	r2, #0
   83688:	238a      	movs	r3, #138	; 0x8a
   8368a:	603a      	str	r2, [r7, #0]
   8368c:	6033      	str	r3, [r6, #0]
   8368e:	b005      	add	sp, #20
   83690:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83692:	460c      	mov	r4, r1
   83694:	4a06      	ldr	r2, [pc, #24]	; (836b0 <_wcrtomb_r+0x4c>)
   83696:	4d07      	ldr	r5, [pc, #28]	; (836b4 <_wcrtomb_r+0x50>)
   83698:	6811      	ldr	r1, [r2, #0]
   8369a:	4622      	mov	r2, r4
   8369c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8369e:	a901      	add	r1, sp, #4
   836a0:	2c00      	cmp	r4, #0
   836a2:	bf08      	it	eq
   836a4:	462c      	moveq	r4, r5
   836a6:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   836aa:	47a0      	blx	r4
   836ac:	e7e9      	b.n	83682 <_wcrtomb_r+0x1e>
   836ae:	bf00      	nop
   836b0:	20070134 	.word	0x20070134
   836b4:	20070564 	.word	0x20070564

000836b8 <__ascii_wctomb>:
   836b8:	b119      	cbz	r1, 836c2 <__ascii_wctomb+0xa>
   836ba:	2aff      	cmp	r2, #255	; 0xff
   836bc:	d803      	bhi.n	836c6 <__ascii_wctomb+0xe>
   836be:	700a      	strb	r2, [r1, #0]
   836c0:	2101      	movs	r1, #1
   836c2:	4608      	mov	r0, r1
   836c4:	4770      	bx	lr
   836c6:	238a      	movs	r3, #138	; 0x8a
   836c8:	f04f 31ff 	mov.w	r1, #4294967295
   836cc:	6003      	str	r3, [r0, #0]
   836ce:	e7f8      	b.n	836c2 <__ascii_wctomb+0xa>

000836d0 <_write_r>:
   836d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   836d2:	460e      	mov	r6, r1
   836d4:	2500      	movs	r5, #0
   836d6:	4c08      	ldr	r4, [pc, #32]	; (836f8 <_write_r+0x28>)
   836d8:	4611      	mov	r1, r2
   836da:	4607      	mov	r7, r0
   836dc:	461a      	mov	r2, r3
   836de:	4630      	mov	r0, r6
   836e0:	6025      	str	r5, [r4, #0]
   836e2:	f7fc fd5b 	bl	8019c <_write>
   836e6:	1c43      	adds	r3, r0, #1
   836e8:	d000      	beq.n	836ec <_write_r+0x1c>
   836ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836ec:	6823      	ldr	r3, [r4, #0]
   836ee:	2b00      	cmp	r3, #0
   836f0:	d0fb      	beq.n	836ea <_write_r+0x1a>
   836f2:	603b      	str	r3, [r7, #0]
   836f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   836f6:	bf00      	nop
   836f8:	20070c5c 	.word	0x20070c5c

000836fc <__register_exitproc>:
   836fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83700:	4d2c      	ldr	r5, [pc, #176]	; (837b4 <__register_exitproc+0xb8>)
   83702:	4606      	mov	r6, r0
   83704:	6828      	ldr	r0, [r5, #0]
   83706:	4698      	mov	r8, r3
   83708:	460f      	mov	r7, r1
   8370a:	4691      	mov	r9, r2
   8370c:	f7ff f954 	bl	829b8 <__retarget_lock_acquire_recursive>
   83710:	4b29      	ldr	r3, [pc, #164]	; (837b8 <__register_exitproc+0xbc>)
   83712:	681c      	ldr	r4, [r3, #0]
   83714:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83718:	2b00      	cmp	r3, #0
   8371a:	d03e      	beq.n	8379a <__register_exitproc+0x9e>
   8371c:	685a      	ldr	r2, [r3, #4]
   8371e:	2a1f      	cmp	r2, #31
   83720:	dc1c      	bgt.n	8375c <__register_exitproc+0x60>
   83722:	f102 0e01 	add.w	lr, r2, #1
   83726:	b176      	cbz	r6, 83746 <__register_exitproc+0x4a>
   83728:	2101      	movs	r1, #1
   8372a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8372e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83732:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83736:	4091      	lsls	r1, r2
   83738:	4308      	orrs	r0, r1
   8373a:	2e02      	cmp	r6, #2
   8373c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83740:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83744:	d023      	beq.n	8378e <__register_exitproc+0x92>
   83746:	3202      	adds	r2, #2
   83748:	f8c3 e004 	str.w	lr, [r3, #4]
   8374c:	6828      	ldr	r0, [r5, #0]
   8374e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83752:	f7ff f933 	bl	829bc <__retarget_lock_release_recursive>
   83756:	2000      	movs	r0, #0
   83758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8375c:	4b17      	ldr	r3, [pc, #92]	; (837bc <__register_exitproc+0xc0>)
   8375e:	b30b      	cbz	r3, 837a4 <__register_exitproc+0xa8>
   83760:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83764:	f7ff f9a4 	bl	82ab0 <malloc>
   83768:	4603      	mov	r3, r0
   8376a:	b1d8      	cbz	r0, 837a4 <__register_exitproc+0xa8>
   8376c:	2000      	movs	r0, #0
   8376e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83772:	f04f 0e01 	mov.w	lr, #1
   83776:	6058      	str	r0, [r3, #4]
   83778:	6019      	str	r1, [r3, #0]
   8377a:	4602      	mov	r2, r0
   8377c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83780:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83784:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83788:	2e00      	cmp	r6, #0
   8378a:	d0dc      	beq.n	83746 <__register_exitproc+0x4a>
   8378c:	e7cc      	b.n	83728 <__register_exitproc+0x2c>
   8378e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83792:	4301      	orrs	r1, r0
   83794:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83798:	e7d5      	b.n	83746 <__register_exitproc+0x4a>
   8379a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8379e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   837a2:	e7bb      	b.n	8371c <__register_exitproc+0x20>
   837a4:	6828      	ldr	r0, [r5, #0]
   837a6:	f7ff f909 	bl	829bc <__retarget_lock_release_recursive>
   837aa:	f04f 30ff 	mov.w	r0, #4294967295
   837ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   837b2:	bf00      	nop
   837b4:	20070560 	.word	0x20070560
   837b8:	00083c88 	.word	0x00083c88
   837bc:	00082ab1 	.word	0x00082ab1

000837c0 <_close_r>:
   837c0:	b538      	push	{r3, r4, r5, lr}
   837c2:	2300      	movs	r3, #0
   837c4:	4c06      	ldr	r4, [pc, #24]	; (837e0 <_close_r+0x20>)
   837c6:	4605      	mov	r5, r0
   837c8:	4608      	mov	r0, r1
   837ca:	6023      	str	r3, [r4, #0]
   837cc:	f7fd fa02 	bl	80bd4 <_close>
   837d0:	1c43      	adds	r3, r0, #1
   837d2:	d000      	beq.n	837d6 <_close_r+0x16>
   837d4:	bd38      	pop	{r3, r4, r5, pc}
   837d6:	6823      	ldr	r3, [r4, #0]
   837d8:	2b00      	cmp	r3, #0
   837da:	d0fb      	beq.n	837d4 <_close_r+0x14>
   837dc:	602b      	str	r3, [r5, #0]
   837de:	bd38      	pop	{r3, r4, r5, pc}
   837e0:	20070c5c 	.word	0x20070c5c

000837e4 <_fclose_r>:
   837e4:	b570      	push	{r4, r5, r6, lr}
   837e6:	b159      	cbz	r1, 83800 <_fclose_r+0x1c>
   837e8:	4605      	mov	r5, r0
   837ea:	460c      	mov	r4, r1
   837ec:	b110      	cbz	r0, 837f4 <_fclose_r+0x10>
   837ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837f0:	2b00      	cmp	r3, #0
   837f2:	d03c      	beq.n	8386e <_fclose_r+0x8a>
   837f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   837f6:	07d8      	lsls	r0, r3, #31
   837f8:	d505      	bpl.n	83806 <_fclose_r+0x22>
   837fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   837fe:	b92b      	cbnz	r3, 8380c <_fclose_r+0x28>
   83800:	2600      	movs	r6, #0
   83802:	4630      	mov	r0, r6
   83804:	bd70      	pop	{r4, r5, r6, pc}
   83806:	89a3      	ldrh	r3, [r4, #12]
   83808:	0599      	lsls	r1, r3, #22
   8380a:	d53c      	bpl.n	83886 <_fclose_r+0xa2>
   8380c:	4621      	mov	r1, r4
   8380e:	4628      	mov	r0, r5
   83810:	f7fe fc1e 	bl	82050 <__sflush_r>
   83814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83816:	4606      	mov	r6, r0
   83818:	b133      	cbz	r3, 83828 <_fclose_r+0x44>
   8381a:	69e1      	ldr	r1, [r4, #28]
   8381c:	4628      	mov	r0, r5
   8381e:	4798      	blx	r3
   83820:	2800      	cmp	r0, #0
   83822:	bfb8      	it	lt
   83824:	f04f 36ff 	movlt.w	r6, #4294967295
   83828:	89a3      	ldrh	r3, [r4, #12]
   8382a:	061a      	lsls	r2, r3, #24
   8382c:	d422      	bmi.n	83874 <_fclose_r+0x90>
   8382e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83830:	b141      	cbz	r1, 83844 <_fclose_r+0x60>
   83832:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83836:	4299      	cmp	r1, r3
   83838:	d002      	beq.n	83840 <_fclose_r+0x5c>
   8383a:	4628      	mov	r0, r5
   8383c:	f7fe fe22 	bl	82484 <_free_r>
   83840:	2300      	movs	r3, #0
   83842:	6323      	str	r3, [r4, #48]	; 0x30
   83844:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83846:	b121      	cbz	r1, 83852 <_fclose_r+0x6e>
   83848:	4628      	mov	r0, r5
   8384a:	f7fe fe1b 	bl	82484 <_free_r>
   8384e:	2300      	movs	r3, #0
   83850:	6463      	str	r3, [r4, #68]	; 0x44
   83852:	f7fe fd21 	bl	82298 <__sfp_lock_acquire>
   83856:	2200      	movs	r2, #0
   83858:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8385a:	81a2      	strh	r2, [r4, #12]
   8385c:	07db      	lsls	r3, r3, #31
   8385e:	d50e      	bpl.n	8387e <_fclose_r+0x9a>
   83860:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83862:	f7ff f8a7 	bl	829b4 <__retarget_lock_close_recursive>
   83866:	f7fe fd1d 	bl	822a4 <__sfp_lock_release>
   8386a:	4630      	mov	r0, r6
   8386c:	bd70      	pop	{r4, r5, r6, pc}
   8386e:	f7fe fce3 	bl	82238 <__sinit>
   83872:	e7bf      	b.n	837f4 <_fclose_r+0x10>
   83874:	6921      	ldr	r1, [r4, #16]
   83876:	4628      	mov	r0, r5
   83878:	f7fe fe04 	bl	82484 <_free_r>
   8387c:	e7d7      	b.n	8382e <_fclose_r+0x4a>
   8387e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83880:	f7ff f89c 	bl	829bc <__retarget_lock_release_recursive>
   83884:	e7ec      	b.n	83860 <_fclose_r+0x7c>
   83886:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83888:	f7ff f896 	bl	829b8 <__retarget_lock_acquire_recursive>
   8388c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83890:	2b00      	cmp	r3, #0
   83892:	d1bb      	bne.n	8380c <_fclose_r+0x28>
   83894:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83896:	f016 0601 	ands.w	r6, r6, #1
   8389a:	d1b1      	bne.n	83800 <_fclose_r+0x1c>
   8389c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8389e:	f7ff f88d 	bl	829bc <__retarget_lock_release_recursive>
   838a2:	4630      	mov	r0, r6
   838a4:	bd70      	pop	{r4, r5, r6, pc}
   838a6:	bf00      	nop

000838a8 <_fstat_r>:
   838a8:	b570      	push	{r4, r5, r6, lr}
   838aa:	460d      	mov	r5, r1
   838ac:	2300      	movs	r3, #0
   838ae:	4c07      	ldr	r4, [pc, #28]	; (838cc <_fstat_r+0x24>)
   838b0:	4606      	mov	r6, r0
   838b2:	4611      	mov	r1, r2
   838b4:	4628      	mov	r0, r5
   838b6:	6023      	str	r3, [r4, #0]
   838b8:	f7fd f98f 	bl	80bda <_fstat>
   838bc:	1c43      	adds	r3, r0, #1
   838be:	d000      	beq.n	838c2 <_fstat_r+0x1a>
   838c0:	bd70      	pop	{r4, r5, r6, pc}
   838c2:	6823      	ldr	r3, [r4, #0]
   838c4:	2b00      	cmp	r3, #0
   838c6:	d0fb      	beq.n	838c0 <_fstat_r+0x18>
   838c8:	6033      	str	r3, [r6, #0]
   838ca:	bd70      	pop	{r4, r5, r6, pc}
   838cc:	20070c5c 	.word	0x20070c5c

000838d0 <_isatty_r>:
   838d0:	b538      	push	{r3, r4, r5, lr}
   838d2:	2300      	movs	r3, #0
   838d4:	4c06      	ldr	r4, [pc, #24]	; (838f0 <_isatty_r+0x20>)
   838d6:	4605      	mov	r5, r0
   838d8:	4608      	mov	r0, r1
   838da:	6023      	str	r3, [r4, #0]
   838dc:	f7fd f982 	bl	80be4 <_isatty>
   838e0:	1c43      	adds	r3, r0, #1
   838e2:	d000      	beq.n	838e6 <_isatty_r+0x16>
   838e4:	bd38      	pop	{r3, r4, r5, pc}
   838e6:	6823      	ldr	r3, [r4, #0]
   838e8:	2b00      	cmp	r3, #0
   838ea:	d0fb      	beq.n	838e4 <_isatty_r+0x14>
   838ec:	602b      	str	r3, [r5, #0]
   838ee:	bd38      	pop	{r3, r4, r5, pc}
   838f0:	20070c5c 	.word	0x20070c5c

000838f4 <_lseek_r>:
   838f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   838f6:	460e      	mov	r6, r1
   838f8:	2500      	movs	r5, #0
   838fa:	4c08      	ldr	r4, [pc, #32]	; (8391c <_lseek_r+0x28>)
   838fc:	4611      	mov	r1, r2
   838fe:	4607      	mov	r7, r0
   83900:	461a      	mov	r2, r3
   83902:	4630      	mov	r0, r6
   83904:	6025      	str	r5, [r4, #0]
   83906:	f7fd f96f 	bl	80be8 <_lseek>
   8390a:	1c43      	adds	r3, r0, #1
   8390c:	d000      	beq.n	83910 <_lseek_r+0x1c>
   8390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83910:	6823      	ldr	r3, [r4, #0]
   83912:	2b00      	cmp	r3, #0
   83914:	d0fb      	beq.n	8390e <_lseek_r+0x1a>
   83916:	603b      	str	r3, [r7, #0]
   83918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8391a:	bf00      	nop
   8391c:	20070c5c 	.word	0x20070c5c

00083920 <_read_r>:
   83920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83922:	460e      	mov	r6, r1
   83924:	2500      	movs	r5, #0
   83926:	4c08      	ldr	r4, [pc, #32]	; (83948 <_read_r+0x28>)
   83928:	4611      	mov	r1, r2
   8392a:	4607      	mov	r7, r0
   8392c:	461a      	mov	r2, r3
   8392e:	4630      	mov	r0, r6
   83930:	6025      	str	r5, [r4, #0]
   83932:	f7fc fc15 	bl	80160 <_read>
   83936:	1c43      	adds	r3, r0, #1
   83938:	d000      	beq.n	8393c <_read_r+0x1c>
   8393a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8393c:	6823      	ldr	r3, [r4, #0]
   8393e:	2b00      	cmp	r3, #0
   83940:	d0fb      	beq.n	8393a <_read_r+0x1a>
   83942:	603b      	str	r3, [r7, #0]
   83944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83946:	bf00      	nop
   83948:	20070c5c 	.word	0x20070c5c

0008394c <__aeabi_uldivmod>:
   8394c:	b953      	cbnz	r3, 83964 <__aeabi_uldivmod+0x18>
   8394e:	b94a      	cbnz	r2, 83964 <__aeabi_uldivmod+0x18>
   83950:	2900      	cmp	r1, #0
   83952:	bf08      	it	eq
   83954:	2800      	cmpeq	r0, #0
   83956:	bf1c      	itt	ne
   83958:	f04f 31ff 	movne.w	r1, #4294967295
   8395c:	f04f 30ff 	movne.w	r0, #4294967295
   83960:	f000 b97a 	b.w	83c58 <__aeabi_idiv0>
   83964:	f1ad 0c08 	sub.w	ip, sp, #8
   83968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8396c:	f000 f806 	bl	8397c <__udivmoddi4>
   83970:	f8dd e004 	ldr.w	lr, [sp, #4]
   83974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83978:	b004      	add	sp, #16
   8397a:	4770      	bx	lr

0008397c <__udivmoddi4>:
   8397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83980:	468c      	mov	ip, r1
   83982:	460e      	mov	r6, r1
   83984:	4604      	mov	r4, r0
   83986:	9d08      	ldr	r5, [sp, #32]
   83988:	2b00      	cmp	r3, #0
   8398a:	d150      	bne.n	83a2e <__udivmoddi4+0xb2>
   8398c:	428a      	cmp	r2, r1
   8398e:	4617      	mov	r7, r2
   83990:	d96c      	bls.n	83a6c <__udivmoddi4+0xf0>
   83992:	fab2 fe82 	clz	lr, r2
   83996:	f1be 0f00 	cmp.w	lr, #0
   8399a:	d00b      	beq.n	839b4 <__udivmoddi4+0x38>
   8399c:	f1ce 0c20 	rsb	ip, lr, #32
   839a0:	fa01 f60e 	lsl.w	r6, r1, lr
   839a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   839a8:	fa02 f70e 	lsl.w	r7, r2, lr
   839ac:	ea4c 0c06 	orr.w	ip, ip, r6
   839b0:	fa00 f40e 	lsl.w	r4, r0, lr
   839b4:	0c3a      	lsrs	r2, r7, #16
   839b6:	fbbc f9f2 	udiv	r9, ip, r2
   839ba:	b2bb      	uxth	r3, r7
   839bc:	fb02 cc19 	mls	ip, r2, r9, ip
   839c0:	fb09 fa03 	mul.w	sl, r9, r3
   839c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   839c8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   839cc:	45b2      	cmp	sl, r6
   839ce:	d90a      	bls.n	839e6 <__udivmoddi4+0x6a>
   839d0:	19f6      	adds	r6, r6, r7
   839d2:	f109 31ff 	add.w	r1, r9, #4294967295
   839d6:	f080 8125 	bcs.w	83c24 <__udivmoddi4+0x2a8>
   839da:	45b2      	cmp	sl, r6
   839dc:	f240 8122 	bls.w	83c24 <__udivmoddi4+0x2a8>
   839e0:	f1a9 0902 	sub.w	r9, r9, #2
   839e4:	443e      	add	r6, r7
   839e6:	eba6 060a 	sub.w	r6, r6, sl
   839ea:	fbb6 f0f2 	udiv	r0, r6, r2
   839ee:	fb02 6610 	mls	r6, r2, r0, r6
   839f2:	fb00 f303 	mul.w	r3, r0, r3
   839f6:	b2a4      	uxth	r4, r4
   839f8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   839fc:	42a3      	cmp	r3, r4
   839fe:	d909      	bls.n	83a14 <__udivmoddi4+0x98>
   83a00:	19e4      	adds	r4, r4, r7
   83a02:	f100 32ff 	add.w	r2, r0, #4294967295
   83a06:	f080 810b 	bcs.w	83c20 <__udivmoddi4+0x2a4>
   83a0a:	42a3      	cmp	r3, r4
   83a0c:	f240 8108 	bls.w	83c20 <__udivmoddi4+0x2a4>
   83a10:	3802      	subs	r0, #2
   83a12:	443c      	add	r4, r7
   83a14:	2100      	movs	r1, #0
   83a16:	1ae4      	subs	r4, r4, r3
   83a18:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83a1c:	2d00      	cmp	r5, #0
   83a1e:	d062      	beq.n	83ae6 <__udivmoddi4+0x16a>
   83a20:	2300      	movs	r3, #0
   83a22:	fa24 f40e 	lsr.w	r4, r4, lr
   83a26:	602c      	str	r4, [r5, #0]
   83a28:	606b      	str	r3, [r5, #4]
   83a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a2e:	428b      	cmp	r3, r1
   83a30:	d907      	bls.n	83a42 <__udivmoddi4+0xc6>
   83a32:	2d00      	cmp	r5, #0
   83a34:	d055      	beq.n	83ae2 <__udivmoddi4+0x166>
   83a36:	2100      	movs	r1, #0
   83a38:	e885 0041 	stmia.w	r5, {r0, r6}
   83a3c:	4608      	mov	r0, r1
   83a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a42:	fab3 f183 	clz	r1, r3
   83a46:	2900      	cmp	r1, #0
   83a48:	f040 808f 	bne.w	83b6a <__udivmoddi4+0x1ee>
   83a4c:	42b3      	cmp	r3, r6
   83a4e:	d302      	bcc.n	83a56 <__udivmoddi4+0xda>
   83a50:	4282      	cmp	r2, r0
   83a52:	f200 80fc 	bhi.w	83c4e <__udivmoddi4+0x2d2>
   83a56:	1a84      	subs	r4, r0, r2
   83a58:	eb66 0603 	sbc.w	r6, r6, r3
   83a5c:	2001      	movs	r0, #1
   83a5e:	46b4      	mov	ip, r6
   83a60:	2d00      	cmp	r5, #0
   83a62:	d040      	beq.n	83ae6 <__udivmoddi4+0x16a>
   83a64:	e885 1010 	stmia.w	r5, {r4, ip}
   83a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a6c:	b912      	cbnz	r2, 83a74 <__udivmoddi4+0xf8>
   83a6e:	2701      	movs	r7, #1
   83a70:	fbb7 f7f2 	udiv	r7, r7, r2
   83a74:	fab7 fe87 	clz	lr, r7
   83a78:	f1be 0f00 	cmp.w	lr, #0
   83a7c:	d135      	bne.n	83aea <__udivmoddi4+0x16e>
   83a7e:	2101      	movs	r1, #1
   83a80:	1bf6      	subs	r6, r6, r7
   83a82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83a86:	fa1f f887 	uxth.w	r8, r7
   83a8a:	fbb6 f2fc 	udiv	r2, r6, ip
   83a8e:	fb0c 6612 	mls	r6, ip, r2, r6
   83a92:	fb08 f002 	mul.w	r0, r8, r2
   83a96:	0c23      	lsrs	r3, r4, #16
   83a98:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83a9c:	42b0      	cmp	r0, r6
   83a9e:	d907      	bls.n	83ab0 <__udivmoddi4+0x134>
   83aa0:	19f6      	adds	r6, r6, r7
   83aa2:	f102 33ff 	add.w	r3, r2, #4294967295
   83aa6:	d202      	bcs.n	83aae <__udivmoddi4+0x132>
   83aa8:	42b0      	cmp	r0, r6
   83aaa:	f200 80d2 	bhi.w	83c52 <__udivmoddi4+0x2d6>
   83aae:	461a      	mov	r2, r3
   83ab0:	1a36      	subs	r6, r6, r0
   83ab2:	fbb6 f0fc 	udiv	r0, r6, ip
   83ab6:	fb0c 6610 	mls	r6, ip, r0, r6
   83aba:	fb08 f800 	mul.w	r8, r8, r0
   83abe:	b2a3      	uxth	r3, r4
   83ac0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83ac4:	45a0      	cmp	r8, r4
   83ac6:	d907      	bls.n	83ad8 <__udivmoddi4+0x15c>
   83ac8:	19e4      	adds	r4, r4, r7
   83aca:	f100 33ff 	add.w	r3, r0, #4294967295
   83ace:	d202      	bcs.n	83ad6 <__udivmoddi4+0x15a>
   83ad0:	45a0      	cmp	r8, r4
   83ad2:	f200 80b9 	bhi.w	83c48 <__udivmoddi4+0x2cc>
   83ad6:	4618      	mov	r0, r3
   83ad8:	eba4 0408 	sub.w	r4, r4, r8
   83adc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83ae0:	e79c      	b.n	83a1c <__udivmoddi4+0xa0>
   83ae2:	4629      	mov	r1, r5
   83ae4:	4628      	mov	r0, r5
   83ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83aea:	fa07 f70e 	lsl.w	r7, r7, lr
   83aee:	f1ce 0320 	rsb	r3, lr, #32
   83af2:	fa26 f203 	lsr.w	r2, r6, r3
   83af6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83afa:	fbb2 f1fc 	udiv	r1, r2, ip
   83afe:	fa1f f887 	uxth.w	r8, r7
   83b02:	fb0c 2211 	mls	r2, ip, r1, r2
   83b06:	fa06 f60e 	lsl.w	r6, r6, lr
   83b0a:	fa20 f303 	lsr.w	r3, r0, r3
   83b0e:	fb01 f908 	mul.w	r9, r1, r8
   83b12:	4333      	orrs	r3, r6
   83b14:	0c1e      	lsrs	r6, r3, #16
   83b16:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83b1a:	45b1      	cmp	r9, r6
   83b1c:	fa00 f40e 	lsl.w	r4, r0, lr
   83b20:	d909      	bls.n	83b36 <__udivmoddi4+0x1ba>
   83b22:	19f6      	adds	r6, r6, r7
   83b24:	f101 32ff 	add.w	r2, r1, #4294967295
   83b28:	f080 808c 	bcs.w	83c44 <__udivmoddi4+0x2c8>
   83b2c:	45b1      	cmp	r9, r6
   83b2e:	f240 8089 	bls.w	83c44 <__udivmoddi4+0x2c8>
   83b32:	3902      	subs	r1, #2
   83b34:	443e      	add	r6, r7
   83b36:	eba6 0609 	sub.w	r6, r6, r9
   83b3a:	fbb6 f0fc 	udiv	r0, r6, ip
   83b3e:	fb0c 6210 	mls	r2, ip, r0, r6
   83b42:	fb00 f908 	mul.w	r9, r0, r8
   83b46:	b29e      	uxth	r6, r3
   83b48:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83b4c:	45b1      	cmp	r9, r6
   83b4e:	d907      	bls.n	83b60 <__udivmoddi4+0x1e4>
   83b50:	19f6      	adds	r6, r6, r7
   83b52:	f100 33ff 	add.w	r3, r0, #4294967295
   83b56:	d271      	bcs.n	83c3c <__udivmoddi4+0x2c0>
   83b58:	45b1      	cmp	r9, r6
   83b5a:	d96f      	bls.n	83c3c <__udivmoddi4+0x2c0>
   83b5c:	3802      	subs	r0, #2
   83b5e:	443e      	add	r6, r7
   83b60:	eba6 0609 	sub.w	r6, r6, r9
   83b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83b68:	e78f      	b.n	83a8a <__udivmoddi4+0x10e>
   83b6a:	f1c1 0720 	rsb	r7, r1, #32
   83b6e:	fa22 f807 	lsr.w	r8, r2, r7
   83b72:	408b      	lsls	r3, r1
   83b74:	ea48 0303 	orr.w	r3, r8, r3
   83b78:	fa26 f407 	lsr.w	r4, r6, r7
   83b7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83b80:	fbb4 f9fe 	udiv	r9, r4, lr
   83b84:	fa1f fc83 	uxth.w	ip, r3
   83b88:	fb0e 4419 	mls	r4, lr, r9, r4
   83b8c:	408e      	lsls	r6, r1
   83b8e:	fa20 f807 	lsr.w	r8, r0, r7
   83b92:	fb09 fa0c 	mul.w	sl, r9, ip
   83b96:	ea48 0806 	orr.w	r8, r8, r6
   83b9a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83b9e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83ba2:	45a2      	cmp	sl, r4
   83ba4:	fa02 f201 	lsl.w	r2, r2, r1
   83ba8:	fa00 f601 	lsl.w	r6, r0, r1
   83bac:	d908      	bls.n	83bc0 <__udivmoddi4+0x244>
   83bae:	18e4      	adds	r4, r4, r3
   83bb0:	f109 30ff 	add.w	r0, r9, #4294967295
   83bb4:	d244      	bcs.n	83c40 <__udivmoddi4+0x2c4>
   83bb6:	45a2      	cmp	sl, r4
   83bb8:	d942      	bls.n	83c40 <__udivmoddi4+0x2c4>
   83bba:	f1a9 0902 	sub.w	r9, r9, #2
   83bbe:	441c      	add	r4, r3
   83bc0:	eba4 040a 	sub.w	r4, r4, sl
   83bc4:	fbb4 f0fe 	udiv	r0, r4, lr
   83bc8:	fb0e 4410 	mls	r4, lr, r0, r4
   83bcc:	fb00 fc0c 	mul.w	ip, r0, ip
   83bd0:	fa1f f888 	uxth.w	r8, r8
   83bd4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83bd8:	45a4      	cmp	ip, r4
   83bda:	d907      	bls.n	83bec <__udivmoddi4+0x270>
   83bdc:	18e4      	adds	r4, r4, r3
   83bde:	f100 3eff 	add.w	lr, r0, #4294967295
   83be2:	d229      	bcs.n	83c38 <__udivmoddi4+0x2bc>
   83be4:	45a4      	cmp	ip, r4
   83be6:	d927      	bls.n	83c38 <__udivmoddi4+0x2bc>
   83be8:	3802      	subs	r0, #2
   83bea:	441c      	add	r4, r3
   83bec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83bf0:	fba0 8902 	umull	r8, r9, r0, r2
   83bf4:	eba4 0c0c 	sub.w	ip, r4, ip
   83bf8:	45cc      	cmp	ip, r9
   83bfa:	46c2      	mov	sl, r8
   83bfc:	46ce      	mov	lr, r9
   83bfe:	d315      	bcc.n	83c2c <__udivmoddi4+0x2b0>
   83c00:	d012      	beq.n	83c28 <__udivmoddi4+0x2ac>
   83c02:	b155      	cbz	r5, 83c1a <__udivmoddi4+0x29e>
   83c04:	ebb6 030a 	subs.w	r3, r6, sl
   83c08:	eb6c 060e 	sbc.w	r6, ip, lr
   83c0c:	fa06 f707 	lsl.w	r7, r6, r7
   83c10:	40cb      	lsrs	r3, r1
   83c12:	431f      	orrs	r7, r3
   83c14:	40ce      	lsrs	r6, r1
   83c16:	602f      	str	r7, [r5, #0]
   83c18:	606e      	str	r6, [r5, #4]
   83c1a:	2100      	movs	r1, #0
   83c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83c20:	4610      	mov	r0, r2
   83c22:	e6f7      	b.n	83a14 <__udivmoddi4+0x98>
   83c24:	4689      	mov	r9, r1
   83c26:	e6de      	b.n	839e6 <__udivmoddi4+0x6a>
   83c28:	4546      	cmp	r6, r8
   83c2a:	d2ea      	bcs.n	83c02 <__udivmoddi4+0x286>
   83c2c:	ebb8 0a02 	subs.w	sl, r8, r2
   83c30:	eb69 0e03 	sbc.w	lr, r9, r3
   83c34:	3801      	subs	r0, #1
   83c36:	e7e4      	b.n	83c02 <__udivmoddi4+0x286>
   83c38:	4670      	mov	r0, lr
   83c3a:	e7d7      	b.n	83bec <__udivmoddi4+0x270>
   83c3c:	4618      	mov	r0, r3
   83c3e:	e78f      	b.n	83b60 <__udivmoddi4+0x1e4>
   83c40:	4681      	mov	r9, r0
   83c42:	e7bd      	b.n	83bc0 <__udivmoddi4+0x244>
   83c44:	4611      	mov	r1, r2
   83c46:	e776      	b.n	83b36 <__udivmoddi4+0x1ba>
   83c48:	3802      	subs	r0, #2
   83c4a:	443c      	add	r4, r7
   83c4c:	e744      	b.n	83ad8 <__udivmoddi4+0x15c>
   83c4e:	4608      	mov	r0, r1
   83c50:	e706      	b.n	83a60 <__udivmoddi4+0xe4>
   83c52:	3a02      	subs	r2, #2
   83c54:	443e      	add	r6, r7
   83c56:	e72b      	b.n	83ab0 <__udivmoddi4+0x134>

00083c58 <__aeabi_idiv0>:
   83c58:	4770      	bx	lr
   83c5a:	bf00      	nop
   83c5c:	73696854 	.word	0x73696854
   83c60:	20736920 	.word	0x20736920
   83c64:	75647241 	.word	0x75647241
   83c68:	206f6e69 	.word	0x206f6e69
   83c6c:	736e6f43 	.word	0x736e6f43
   83c70:	20656c6f 	.word	0x20656c6f
   83c74:	54524155 	.word	0x54524155
   83c78:	70704120 	.word	0x70704120
   83c7c:	6163696c 	.word	0x6163696c
   83c80:	6e6f6974 	.word	0x6e6f6974
   83c84:	00000a2e 	.word	0x00000a2e

00083c88 <_global_impure_ptr>:
   83c88:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83c98:	46454443 00000000 33323130 37363534     CDEF....01234567
   83ca8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83cb8:	0000296c                                l)..

00083cbc <blanks.7217>:
   83cbc:	20202020 20202020 20202020 20202020                     

00083ccc <zeroes.7218>:
   83ccc:	30303030 30303030 30303030 30303030     0000000000000000
   83cdc:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083cec <_ctype_>:
   83cec:	20202000 20202020 28282020 20282828     .         ((((( 
   83cfc:	20202020 20202020 20202020 20202020                     
   83d0c:	10108820 10101010 10101010 10101010      ...............
   83d1c:	04040410 04040404 10040404 10101010     ................
   83d2c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83d3c:	01010101 01010101 01010101 10101010     ................
   83d4c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83d5c:	02020202 02020202 02020202 10101010     ................
   83d6c:	00000020 00000000 00000000 00000000      ...............
	...

00083df0 <_init>:
   83df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83df2:	bf00      	nop
   83df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83df6:	bc08      	pop	{r3}
   83df8:	469e      	mov	lr, r3
   83dfa:	4770      	bx	lr

00083dfc <__init_array_start>:
   83dfc:	00082031 	.word	0x00082031

00083e00 <__frame_dummy_init_array_entry>:
   83e00:	00080119                                ....

00083e04 <_fini>:
   83e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e06:	bf00      	nop
   83e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83e0a:	bc08      	pop	{r3}
   83e0c:	469e      	mov	lr, r3
   83e0e:	4770      	bx	lr

00083e10 <__fini_array_start>:
   83e10:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <xNextTaskUnblockTime>:
2007012c:	ffffffff                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20070c38                                8.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	000836b9 00083005 00000000 00083cec     .6...0.......<..
20070654:	00083ce8 00083c9c 00083c9c 00083c9c     .<...<...<...<..
20070664:	00083c9c 00083c9c 00083c9c 00083c9c     .<...<...<...<..
20070674:	00083c9c 00083c9c ffffffff ffffffff     .<...<..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
