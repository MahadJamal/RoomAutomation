
RoomAutomation-MainControlUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006494  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086494  00086494  00016494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b70  20070000  0008649c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000900  20070b70  0008700c  00020b70  2**2
                  ALLOC
  4 .stack        00002000  20071470  0008790c  00020b70  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b70  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b99  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002471a  00000000  00000000  00020bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000504a  00000000  00000000  0004530c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ac78  00000000  00000000  0004a356  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f48  00000000  00000000  00054fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010b0  00000000  00000000  00055f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c954  00000000  00000000  00056fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017067  00000000  00000000  0007391a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00071fab  00000000  00000000  0008a981  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000031f0  00000000  00000000  000fc92c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	70 34 07 20 99 1e 08 00 95 1e 08 00 95 1e 08 00     p4. ............
   80010:	95 1e 08 00 95 1e 08 00 95 1e 08 00 00 00 00 00     ................
	...
   8002c:	01 16 08 00 95 1e 08 00 00 00 00 00 39 16 08 00     ............9...
   8003c:	75 16 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     u...............
   8004c:	95 1e 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................
   8005c:	95 1e 08 00 95 1e 08 00 95 1e 08 00 00 00 00 00     ................
   8006c:	09 1d 08 00 1d 1d 08 00 31 1d 08 00 45 1d 08 00     ........1...E...
	...
   80084:	95 1e 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................
   80094:	95 1e 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................
   800a4:	00 00 00 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................
   800b4:	95 1e 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................
   800c4:	95 1e 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................
   800d4:	95 1e 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................
   800e4:	95 1e 08 00 95 1e 08 00 95 1e 08 00 95 1e 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b70 	.word	0x20070b70
   80110:	00000000 	.word	0x00000000
   80114:	0008649c 	.word	0x0008649c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008649c 	.word	0x0008649c
   80154:	20070b74 	.word	0x20070b74
   80158:	0008649c 	.word	0x0008649c
   8015c:	00000000 	.word	0x00000000

00080160 <ads7843_send_cmd>:
 * \param uc_cmd command to send.
 *
 * \return Command result.
 */
static uint32_t ads7843_send_cmd(uint8_t uc_cmd)
{
   80160:	b084      	sub	sp, #16

	/** (volatile declaration needed for code optimisation by compiler) */
	volatile uint8_t bufferRX[ADS7843_BUFSIZE];
	volatile uint8_t bufferTX[ADS7843_BUFSIZE];

	bufferRX[0] = 0;
   80162:	2300      	movs	r3, #0
   80164:	f88d 3008 	strb.w	r3, [sp, #8]
	bufferRX[1] = 0;
   80168:	f88d 3009 	strb.w	r3, [sp, #9]
	bufferRX[2] = 0;
   8016c:	f88d 300a 	strb.w	r3, [sp, #10]

	bufferTX[0] = uc_cmd;
   80170:	f88d 0004 	strb.w	r0, [sp, #4]
	bufferTX[1] = 0;
   80174:	f88d 3005 	strb.w	r3, [sp, #5]
	bufferTX[2] = 0;
   80178:	f88d 3006 	strb.w	r3, [sp, #6]

	for(i = 0; i < ADS7843_BUFSIZE; i++){
   8017c:	9303      	str	r3, [sp, #12]
   8017e:	9b03      	ldr	r3, [sp, #12]
   80180:	2b02      	cmp	r3, #2
   80182:	d819      	bhi.n	801b8 <ads7843_send_cmd+0x58>
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
   80184:	491f      	ldr	r1, [pc, #124]	; (80204 <ads7843_send_cmd+0xa4>)
   80186:	e00c      	b.n	801a2 <ads7843_send_cmd+0x42>
		while (!spi_is_tx_ready(BOARD_ADS7843_SPI_BASE)) {
			if (!timeout--) {
				return SPI_ERROR_TIMEOUT;
			}
		}
		spi_write_single(BOARD_ADS7843_SPI_BASE, bufferTX[i]);
   80188:	9b03      	ldr	r3, [sp, #12]
   8018a:	aa04      	add	r2, sp, #16
   8018c:	4413      	add	r3, r2
   8018e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
   80192:	b2db      	uxtb	r3, r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80194:	60cb      	str	r3, [r1, #12]
	for(i = 0; i < ADS7843_BUFSIZE; i++){
   80196:	9b03      	ldr	r3, [sp, #12]
   80198:	3301      	adds	r3, #1
   8019a:	9303      	str	r3, [sp, #12]
   8019c:	9b03      	ldr	r3, [sp, #12]
   8019e:	2b02      	cmp	r3, #2
   801a0:	d80a      	bhi.n	801b8 <ads7843_send_cmd+0x58>
{
   801a2:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
   801a6:	690a      	ldr	r2, [r1, #16]
		while (!spi_is_tx_ready(BOARD_ADS7843_SPI_BASE)) {
   801a8:	f012 0f02 	tst.w	r2, #2
   801ac:	d1ec      	bne.n	80188 <ads7843_send_cmd+0x28>
			if (!timeout--) {
   801ae:	3b01      	subs	r3, #1
   801b0:	d1f9      	bne.n	801a6 <ads7843_send_cmd+0x46>
				return SPI_ERROR_TIMEOUT;
   801b2:	2001      	movs	r0, #1
	uResult = (uint32_t)bufferRX[1] << 8;
	uResult |= (uint32_t)bufferRX[2];
	uResult = uResult >> 4;

	return uResult;
}
   801b4:	b004      	add	sp, #16
   801b6:	4770      	bx	lr
	for(i = 0; i < ADS7843_BUFSIZE; i++){
   801b8:	2300      	movs	r3, #0
   801ba:	9303      	str	r3, [sp, #12]
   801bc:	9b03      	ldr	r3, [sp, #12]
   801be:	2b02      	cmp	r3, #2
   801c0:	d818      	bhi.n	801f4 <ads7843_send_cmd+0x94>
 *
 * \return 1 if the SPI Receive Holding Register is full, otherwise 0.
 */
static inline uint32_t spi_is_rx_full(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_RDRF) {
   801c2:	4910      	ldr	r1, [pc, #64]	; (80204 <ads7843_send_cmd+0xa4>)
   801c4:	e00c      	b.n	801e0 <ads7843_send_cmd+0x80>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   801c6:	688a      	ldr	r2, [r1, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
   801c8:	b2d2      	uxtb	r2, r2
		bufferRX[i] = data;
   801ca:	9b03      	ldr	r3, [sp, #12]
   801cc:	a804      	add	r0, sp, #16
   801ce:	4403      	add	r3, r0
   801d0:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i = 0; i < ADS7843_BUFSIZE; i++){
   801d4:	9b03      	ldr	r3, [sp, #12]
   801d6:	3301      	adds	r3, #1
   801d8:	9303      	str	r3, [sp, #12]
   801da:	9b03      	ldr	r3, [sp, #12]
   801dc:	2b02      	cmp	r3, #2
   801de:	d809      	bhi.n	801f4 <ads7843_send_cmd+0x94>
{
   801e0:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_RDRF) {
   801e4:	690a      	ldr	r2, [r1, #16]
		while (!spi_is_rx_full(BOARD_ADS7843_SPI_BASE)) {
   801e6:	f012 0f01 	tst.w	r2, #1
   801ea:	d1ec      	bne.n	801c6 <ads7843_send_cmd+0x66>
			if (!timeout--) {
   801ec:	3b01      	subs	r3, #1
   801ee:	d1f9      	bne.n	801e4 <ads7843_send_cmd+0x84>
				return SPI_ERROR_TIMEOUT;
   801f0:	2001      	movs	r0, #1
   801f2:	e7df      	b.n	801b4 <ads7843_send_cmd+0x54>
	uResult = (uint32_t)bufferRX[1] << 8;
   801f4:	f89d 3009 	ldrb.w	r3, [sp, #9]
	uResult |= (uint32_t)bufferRX[2];
   801f8:	f89d 000a 	ldrb.w	r0, [sp, #10]
   801fc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	uResult = uResult >> 4;
   80200:	0900      	lsrs	r0, r0, #4
	return uResult;
   80202:	e7d7      	b.n	801b4 <ads7843_send_cmd+0x54>
   80204:	40008000 	.word	0x40008000

00080208 <ads7843_is_pressed>:
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80208:	4b03      	ldr	r3, [pc, #12]	; (80218 <ads7843_is_pressed+0x10>)
   8020a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c

uint32_t ads7843_is_pressed(void)
{
	return (ioport_get_pin_level(BOARD_ADS7843_IRQ_GPIO) ==
   8020c:	f080 5080 	eor.w	r0, r0, #268435456	; 0x10000000
			IOPORT_PIN_LEVEL_LOW);
}
   80210:	f3c0 7000 	ubfx	r0, r0, #28, #1
   80214:	4770      	bx	lr
   80216:	bf00      	nop
   80218:	400e1200 	.word	0x400e1200

0008021c <ads7843_set_handler>:

void ads7843_set_handler(void (*p_handler) (uint32_t, uint32_t))
{
   8021c:	b508      	push	{r3, lr}
	/** Initialize interrupts */
	pio_handler_set_pin(BOARD_ADS7843_IRQ_GPIO,
   8021e:	4602      	mov	r2, r0
   80220:	4903      	ldr	r1, [pc, #12]	; (80230 <ads7843_set_handler+0x14>)
   80222:	205c      	movs	r0, #92	; 0x5c
   80224:	4b03      	ldr	r3, [pc, #12]	; (80234 <ads7843_set_handler+0x18>)
   80226:	4798      	blx	r3
			BOARD_ADS7843_IRQ_FLAGS,
			(void (*)(uint32_t, uint32_t)) p_handler
			);

	/** Enable the interrupt */
	pio_enable_pin_interrupt(BOARD_ADS7843_IRQ_GPIO);
   80228:	205c      	movs	r0, #92	; 0x5c
   8022a:	4b03      	ldr	r3, [pc, #12]	; (80238 <ads7843_set_handler+0x1c>)
   8022c:	4798      	blx	r3
   8022e:	bd08      	pop	{r3, pc}
   80230:	28000001 	.word	0x28000001
   80234:	00081cc1 	.word	0x00081cc1
   80238:	00081bad 	.word	0x00081bad

0008023c <ads7843_enable_interrupt>:
}

void ads7843_enable_interrupt(void)
{
   8023c:	b508      	push	{r3, lr}
	/** Enable the interrupt */
	pio_enable_pin_interrupt(BOARD_ADS7843_IRQ_GPIO);
   8023e:	205c      	movs	r0, #92	; 0x5c
   80240:	4b01      	ldr	r3, [pc, #4]	; (80248 <ads7843_enable_interrupt+0xc>)
   80242:	4798      	blx	r3
   80244:	bd08      	pop	{r3, pc}
   80246:	bf00      	nop
   80248:	00081bad 	.word	0x00081bad

0008024c <ads7843_get_raw_point>:
	/** Disable the interrupt */
	pio_disable_pin_interrupt(BOARD_ADS7843_IRQ_GPIO);
}

void ads7843_get_raw_point(uint32_t *p_x, uint32_t *p_y)
{
   8024c:	b570      	push	{r4, r5, r6, lr}
   8024e:	4606      	mov	r6, r0
   80250:	460d      	mov	r5, r1
	/** Disable interrupt to quickly evaluate the coordinates */
	pio_disable_pin_interrupt(BOARD_ADS7843_IRQ_GPIO);
   80252:	205c      	movs	r0, #92	; 0x5c
   80254:	4b07      	ldr	r3, [pc, #28]	; (80274 <ads7843_get_raw_point+0x28>)
   80256:	4798      	blx	r3

	/** Get X position */
	*p_x = ads7843_send_cmd(CMD_X_POSITION);
   80258:	20d3      	movs	r0, #211	; 0xd3
   8025a:	4c07      	ldr	r4, [pc, #28]	; (80278 <ads7843_get_raw_point+0x2c>)
   8025c:	47a0      	blx	r4
   8025e:	6030      	str	r0, [r6, #0]

	/** Get Y position */
	*p_y = ads7843_send_cmd(CMD_Y_POSITION);
   80260:	2093      	movs	r0, #147	; 0x93
   80262:	47a0      	blx	r4
   80264:	6028      	str	r0, [r5, #0]

	/** Switch to full power mode */
	ads7843_send_cmd(CMD_ENABLE_PENIRQ);
   80266:	2090      	movs	r0, #144	; 0x90
   80268:	47a0      	blx	r4

	/** Re-enable interrupt */
	pio_enable_pin_interrupt(BOARD_ADS7843_IRQ_GPIO);
   8026a:	205c      	movs	r0, #92	; 0x5c
   8026c:	4b03      	ldr	r3, [pc, #12]	; (8027c <ads7843_get_raw_point+0x30>)
   8026e:	4798      	blx	r3
   80270:	bd70      	pop	{r4, r5, r6, pc}
   80272:	bf00      	nop
   80274:	00081bc7 	.word	0x00081bc7
   80278:	00080161 	.word	0x00080161
   8027c:	00081bad 	.word	0x00081bad

00080280 <ads7843_init>:
}

uint32_t ads7843_init(void)
{
   80280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80284:	b084      	sub	sp, #16
	volatile uint32_t uDummy;
	struct spi_device ADS7843_SPI_DEVICE_CFG = {
   80286:	2701      	movs	r7, #1
   80288:	ad04      	add	r5, sp, #16
   8028a:	f845 7d08 	str.w	r7, [r5, #-8]!
#warning The board TouchScreen chip select definition is missing. Default configuration is used.
		.id = 0
#endif
	};

	spi_master_init(BOARD_ADS7843_SPI_BASE);
   8028e:	4c12      	ldr	r4, [pc, #72]	; (802d8 <ads7843_init+0x58>)
   80290:	4620      	mov	r0, r4
   80292:	4b12      	ldr	r3, [pc, #72]	; (802dc <ads7843_init+0x5c>)
   80294:	4798      	blx	r3
	spi_master_setup_device(BOARD_ADS7843_SPI_BASE, &ADS7843_SPI_DEVICE_CFG,
   80296:	2600      	movs	r6, #0
   80298:	9600      	str	r6, [sp, #0]
   8029a:	4b11      	ldr	r3, [pc, #68]	; (802e0 <ads7843_init+0x60>)
   8029c:	4632      	mov	r2, r6
   8029e:	4629      	mov	r1, r5
   802a0:	4620      	mov	r0, r4
   802a2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 802f0 <ads7843_init+0x70>
   802a6:	47c0      	blx	r8
			SPI_MODE_0, ADS7843_SPI_BAUDRATE, 0);
	spi_select_device(BOARD_ADS7843_SPI_BASE, &ADS7843_SPI_DEVICE_CFG);
   802a8:	4629      	mov	r1, r5
   802aa:	4620      	mov	r0, r4
   802ac:	4b0d      	ldr	r3, [pc, #52]	; (802e4 <ads7843_init+0x64>)
   802ae:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   802b0:	6027      	str	r7, [r4, #0]
	spi_enable(BOARD_ADS7843_SPI_BASE);

	for (uDummy = 0; uDummy < 100000; uDummy++) {
   802b2:	9603      	str	r6, [sp, #12]
   802b4:	9a03      	ldr	r2, [sp, #12]
   802b6:	4b0c      	ldr	r3, [pc, #48]	; (802e8 <ads7843_init+0x68>)
   802b8:	429a      	cmp	r2, r3
   802ba:	d806      	bhi.n	802ca <ads7843_init+0x4a>
   802bc:	461a      	mov	r2, r3
   802be:	9b03      	ldr	r3, [sp, #12]
   802c0:	3301      	adds	r3, #1
   802c2:	9303      	str	r3, [sp, #12]
   802c4:	9b03      	ldr	r3, [sp, #12]
   802c6:	4293      	cmp	r3, r2
   802c8:	d9f9      	bls.n	802be <ads7843_init+0x3e>
	}

	ads7843_send_cmd(CMD_ENABLE_PENIRQ);
   802ca:	2090      	movs	r0, #144	; 0x90
   802cc:	4b07      	ldr	r3, [pc, #28]	; (802ec <ads7843_init+0x6c>)
   802ce:	4798      	blx	r3

	return 0;
}
   802d0:	2000      	movs	r0, #0
   802d2:	b004      	add	sp, #16
   802d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802d8:	40008000 	.word	0x40008000
   802dc:	00080c65 	.word	0x00080c65
   802e0:	007a1200 	.word	0x007a1200
   802e4:	00080d39 	.word	0x00080d39
   802e8:	0001869f 	.word	0x0001869f
   802ec:	00080161 	.word	0x00080161
   802f0:	00080cb9 	.word	0x00080cb9

000802f4 <ili9341_send_command>:
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   802f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   802f8:	4b0b      	ldr	r3, [pc, #44]	; (80328 <ili9341_send_command+0x34>)
   802fa:	635a      	str	r2, [r3, #52]	; 0x34
   802fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80300:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80304:	635a      	str	r2, [r3, #52]	; 0x34
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80306:	4a09      	ldr	r2, [pc, #36]	; (8032c <ili9341_send_command+0x38>)
   80308:	6913      	ldr	r3, [r2, #16]
		/* Do nothing */
	}
#  endif
#elif defined(CONF_ILI9341_SPI)
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8030a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8030e:	d0fb      	beq.n	80308 <ili9341_send_command+0x14>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80310:	4b06      	ldr	r3, [pc, #24]	; (8032c <ili9341_send_command+0x38>)
   80312:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80314:	461a      	mov	r2, r3
   80316:	6913      	ldr	r3, [r2, #16]
   80318:	f413 7f00 	tst.w	r3, #512	; 0x200
   8031c:	d0fb      	beq.n	80316 <ili9341_send_command+0x22>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8031e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80322:	4b01      	ldr	r3, [pc, #4]	; (80328 <ili9341_send_command+0x34>)
   80324:	631a      	str	r2, [r3, #48]	; 0x30
   80326:	4770      	bx	lr
   80328:	400e1200 	.word	0x400e1200
   8032c:	40008000 	.word	0x40008000

00080330 <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
   80330:	b510      	push	{r4, lr}
   80332:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
   80334:	202a      	movs	r0, #42	; 0x2a
   80336:	4b35      	ldr	r3, [pc, #212]	; (8040c <ili9341_send_draw_limits+0xdc>)
   80338:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
   8033a:	4b35      	ldr	r3, [pc, #212]	; (80410 <ili9341_send_draw_limits+0xe0>)
   8033c:	f9b3 1000 	ldrsh.w	r1, [r3]
   80340:	f3c1 2007 	ubfx	r0, r1, #8, #8
   80344:	4a33      	ldr	r2, [pc, #204]	; (80414 <ili9341_send_draw_limits+0xe4>)
   80346:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80348:	f413 7f00 	tst.w	r3, #512	; 0x200
   8034c:	d0fb      	beq.n	80346 <ili9341_send_draw_limits+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8034e:	4b31      	ldr	r3, [pc, #196]	; (80414 <ili9341_send_draw_limits+0xe4>)
   80350:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
   80352:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80354:	461a      	mov	r2, r3
   80356:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80358:	f413 7f00 	tst.w	r3, #512	; 0x200
   8035c:	d0fb      	beq.n	80356 <ili9341_send_draw_limits+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8035e:	4b2d      	ldr	r3, [pc, #180]	; (80414 <ili9341_send_draw_limits+0xe4>)
   80360:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   80362:	b19c      	cbz	r4, 8038c <ili9341_send_draw_limits+0x5c>
		ili9341_send_byte(limit_end_x >> 8);
   80364:	4b2c      	ldr	r3, [pc, #176]	; (80418 <ili9341_send_draw_limits+0xe8>)
   80366:	f9b3 1000 	ldrsh.w	r1, [r3]
   8036a:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8036e:	4a29      	ldr	r2, [pc, #164]	; (80414 <ili9341_send_draw_limits+0xe4>)
   80370:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80372:	f413 7f00 	tst.w	r3, #512	; 0x200
   80376:	d0fb      	beq.n	80370 <ili9341_send_draw_limits+0x40>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80378:	4b26      	ldr	r3, [pc, #152]	; (80414 <ili9341_send_draw_limits+0xe4>)
   8037a:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
   8037c:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8037e:	461a      	mov	r2, r3
   80380:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80382:	f413 7f00 	tst.w	r3, #512	; 0x200
   80386:	d0fb      	beq.n	80380 <ili9341_send_draw_limits+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80388:	4b22      	ldr	r3, [pc, #136]	; (80414 <ili9341_send_draw_limits+0xe4>)
   8038a:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8038c:	4a21      	ldr	r2, [pc, #132]	; (80414 <ili9341_send_draw_limits+0xe4>)
   8038e:	6913      	ldr	r3, [r2, #16]
   80390:	f413 7f00 	tst.w	r3, #512	; 0x200
   80394:	d0fb      	beq.n	8038e <ili9341_send_draw_limits+0x5e>
   80396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8039a:	4b20      	ldr	r3, [pc, #128]	; (8041c <ili9341_send_draw_limits+0xec>)
   8039c:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
   8039e:	202b      	movs	r0, #43	; 0x2b
   803a0:	4b1a      	ldr	r3, [pc, #104]	; (8040c <ili9341_send_draw_limits+0xdc>)
   803a2:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
   803a4:	4b1e      	ldr	r3, [pc, #120]	; (80420 <ili9341_send_draw_limits+0xf0>)
   803a6:	f9b3 1000 	ldrsh.w	r1, [r3]
   803aa:	f3c1 2007 	ubfx	r0, r1, #8, #8
   803ae:	4a19      	ldr	r2, [pc, #100]	; (80414 <ili9341_send_draw_limits+0xe4>)
   803b0:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   803b2:	f413 7f00 	tst.w	r3, #512	; 0x200
   803b6:	d0fb      	beq.n	803b0 <ili9341_send_draw_limits+0x80>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803b8:	4b16      	ldr	r3, [pc, #88]	; (80414 <ili9341_send_draw_limits+0xe4>)
   803ba:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
   803bc:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   803be:	461a      	mov	r2, r3
   803c0:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   803c2:	f413 7f00 	tst.w	r3, #512	; 0x200
   803c6:	d0fb      	beq.n	803c0 <ili9341_send_draw_limits+0x90>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803c8:	4b12      	ldr	r3, [pc, #72]	; (80414 <ili9341_send_draw_limits+0xe4>)
   803ca:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   803cc:	b19c      	cbz	r4, 803f6 <ili9341_send_draw_limits+0xc6>
		ili9341_send_byte(limit_end_y >> 8);
   803ce:	4b15      	ldr	r3, [pc, #84]	; (80424 <ili9341_send_draw_limits+0xf4>)
   803d0:	f9b3 1000 	ldrsh.w	r1, [r3]
   803d4:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   803d8:	4a0e      	ldr	r2, [pc, #56]	; (80414 <ili9341_send_draw_limits+0xe4>)
   803da:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   803dc:	f413 7f00 	tst.w	r3, #512	; 0x200
   803e0:	d0fb      	beq.n	803da <ili9341_send_draw_limits+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803e2:	4b0c      	ldr	r3, [pc, #48]	; (80414 <ili9341_send_draw_limits+0xe4>)
   803e4:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
   803e6:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   803e8:	461a      	mov	r2, r3
   803ea:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   803ec:	f413 7f00 	tst.w	r3, #512	; 0x200
   803f0:	d0fb      	beq.n	803ea <ili9341_send_draw_limits+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803f2:	4b08      	ldr	r3, [pc, #32]	; (80414 <ili9341_send_draw_limits+0xe4>)
   803f4:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   803f6:	4a07      	ldr	r2, [pc, #28]	; (80414 <ili9341_send_draw_limits+0xe4>)
   803f8:	6913      	ldr	r3, [r2, #16]
   803fa:	f413 7f00 	tst.w	r3, #512	; 0x200
   803fe:	d0fb      	beq.n	803f8 <ili9341_send_draw_limits+0xc8>
   80400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80404:	4b05      	ldr	r3, [pc, #20]	; (8041c <ili9341_send_draw_limits+0xec>)
   80406:	631a      	str	r2, [r3, #48]	; 0x30
   80408:	bd10      	pop	{r4, pc}
   8040a:	bf00      	nop
   8040c:	000802f5 	.word	0x000802f5
   80410:	20070b90 	.word	0x20070b90
   80414:	40008000 	.word	0x40008000
   80418:	20070b8c 	.word	0x20070b8c
   8041c:	400e0e00 	.word	0x400e0e00
   80420:	20070b92 	.word	0x20070b92
   80424:	20070b8e 	.word	0x20070b8e

00080428 <ili9341_set_top_left_limit>:
 *
 * \param x The x coordinate of the top left corner
 * \param y The y coordinate of the top left corner
 */
void ili9341_set_top_left_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   80428:	b508      	push	{r3, lr}
	limit_start_x = x;
   8042a:	4b04      	ldr	r3, [pc, #16]	; (8043c <ili9341_set_top_left_limit+0x14>)
   8042c:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
   8042e:	4b04      	ldr	r3, [pc, #16]	; (80440 <ili9341_set_top_left_limit+0x18>)
   80430:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(false);
   80432:	2000      	movs	r0, #0
   80434:	4b03      	ldr	r3, [pc, #12]	; (80444 <ili9341_set_top_left_limit+0x1c>)
   80436:	4798      	blx	r3
   80438:	bd08      	pop	{r3, pc}
   8043a:	bf00      	nop
   8043c:	20070b90 	.word	0x20070b90
   80440:	20070b92 	.word	0x20070b92
   80444:	00080331 	.word	0x00080331

00080448 <ili9341_set_bottom_right_limit>:
 *
 * \param x The x coordinate of the bottom right corner
 * \param y The y coordinate of the bottom right corner
 */
void ili9341_set_bottom_right_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   80448:	b508      	push	{r3, lr}
	limit_end_x = x;
   8044a:	4b04      	ldr	r3, [pc, #16]	; (8045c <ili9341_set_bottom_right_limit+0x14>)
   8044c:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
   8044e:	4b04      	ldr	r3, [pc, #16]	; (80460 <ili9341_set_bottom_right_limit+0x18>)
   80450:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(true);
   80452:	2001      	movs	r0, #1
   80454:	4b03      	ldr	r3, [pc, #12]	; (80464 <ili9341_set_bottom_right_limit+0x1c>)
   80456:	4798      	blx	r3
   80458:	bd08      	pop	{r3, pc}
   8045a:	bf00      	nop
   8045c:	20070b8c 	.word	0x20070b8c
   80460:	20070b8e 	.word	0x20070b8e
   80464:	00080331 	.word	0x00080331

00080468 <ili9341_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
   80468:	b510      	push	{r4, lr}
	limit_start_x = start_x;
   8046a:	4c06      	ldr	r4, [pc, #24]	; (80484 <ili9341_set_limits+0x1c>)
   8046c:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
   8046e:	4806      	ldr	r0, [pc, #24]	; (80488 <ili9341_set_limits+0x20>)
   80470:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
   80472:	4906      	ldr	r1, [pc, #24]	; (8048c <ili9341_set_limits+0x24>)
   80474:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
   80476:	4a06      	ldr	r2, [pc, #24]	; (80490 <ili9341_set_limits+0x28>)
   80478:	8013      	strh	r3, [r2, #0]

	ili9341_send_draw_limits(true);
   8047a:	2001      	movs	r0, #1
   8047c:	4b05      	ldr	r3, [pc, #20]	; (80494 <ili9341_set_limits+0x2c>)
   8047e:	4798      	blx	r3
   80480:	bd10      	pop	{r4, pc}
   80482:	bf00      	nop
   80484:	20070b90 	.word	0x20070b90
   80488:	20070b92 	.word	0x20070b92
   8048c:	20070b8c 	.word	0x20070b8c
   80490:	20070b8e 	.word	0x20070b8e
   80494:	00080331 	.word	0x00080331

00080498 <ili9341_copy_pixels_to_screen>:
 *
 * \param pixels Pointer to the pixel data
 * \param count Number of pixels to copy to the screen
 */
void ili9341_copy_pixels_to_screen(const ili9341_color_t *pixels, uint32_t count)
{
   80498:	b570      	push	{r4, r5, r6, lr}
   8049a:	4604      	mov	r4, r0
   8049c:	460e      	mov	r6, r1
	const ili9341_color_t *pixel = pixels;

	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   8049e:	202c      	movs	r0, #44	; 0x2c
   804a0:	4b10      	ldr	r3, [pc, #64]	; (804e4 <ili9341_copy_pixels_to_screen+0x4c>)
   804a2:	4798      	blx	r3
	pdc_disable_transfer(SPI_DMA, PERIPH_PTCR_TXTEN);
#  elif UC3
	pdca_disable(CONF_ILI9341_PDCA_CHANNEL);
#  endif
#else
	while (count--) {
   804a4:	b1a6      	cbz	r6, 804d0 <ili9341_copy_pixels_to_screen+0x38>
   804a6:	1e75      	subs	r5, r6, #1
   804a8:	1ea0      	subs	r0, r4, #2
   804aa:	4b0f      	ldr	r3, [pc, #60]	; (804e8 <ili9341_copy_pixels_to_screen+0x50>)
		ili9341_send_byte(*pixel);
   804ac:	7881      	ldrb	r1, [r0, #2]
   804ae:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804b0:	f412 7f00 	tst.w	r2, #512	; 0x200
   804b4:	d0fb      	beq.n	804ae <ili9341_copy_pixels_to_screen+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804b6:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
   804b8:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   804bc:	0a09      	lsrs	r1, r1, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804be:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804c0:	f412 7f00 	tst.w	r2, #512	; 0x200
   804c4:	d0fb      	beq.n	804be <ili9341_copy_pixels_to_screen+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804c6:	60d9      	str	r1, [r3, #12]
	while (count--) {
   804c8:	3d01      	subs	r5, #1
   804ca:	f1b5 3fff 	cmp.w	r5, #4294967295
   804ce:	d1ed      	bne.n	804ac <ili9341_copy_pixels_to_screen+0x14>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804d0:	4a05      	ldr	r2, [pc, #20]	; (804e8 <ili9341_copy_pixels_to_screen+0x50>)
   804d2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   804d8:	d0fb      	beq.n	804d2 <ili9341_copy_pixels_to_screen+0x3a>
   804da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   804de:	4b03      	ldr	r3, [pc, #12]	; (804ec <ili9341_copy_pixels_to_screen+0x54>)
   804e0:	631a      	str	r2, [r3, #48]	; 0x30
   804e2:	bd70      	pop	{r4, r5, r6, pc}
   804e4:	000802f5 	.word	0x000802f5
   804e8:	40008000 	.word	0x40008000
   804ec:	400e0e00 	.word	0x400e0e00

000804f0 <ili9341_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9341_duplicate_pixel(const ili9341_color_t color, uint32_t count)
{
   804f0:	b538      	push	{r3, r4, r5, lr}
   804f2:	4604      	mov	r4, r0
   804f4:	460d      	mov	r5, r1
	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   804f6:	202c      	movs	r0, #44	; 0x2c
   804f8:	4b0f      	ldr	r3, [pc, #60]	; (80538 <ili9341_duplicate_pixel+0x48>)
   804fa:	4798      	blx	r3
	pdc_disable_transfer(SPI_DMA, PERIPH_PTCR_TXTEN);
#  elif UC3
	pdca_disable(CONF_ILI9341_PDCA_CHANNEL);
#  endif
#else
	while (count--) {
   804fc:	b18d      	cbz	r5, 80522 <ili9341_duplicate_pixel+0x32>
   804fe:	1e69      	subs	r1, r5, #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80500:	0a25      	lsrs	r5, r4, #8
		ili9341_send_byte(color);
   80502:	b2e4      	uxtb	r4, r4
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80504:	4b0d      	ldr	r3, [pc, #52]	; (8053c <ili9341_duplicate_pixel+0x4c>)
   80506:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80508:	f412 7f00 	tst.w	r2, #512	; 0x200
   8050c:	d0fb      	beq.n	80506 <ili9341_duplicate_pixel+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8050e:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80510:	691a      	ldr	r2, [r3, #16]
   80512:	f412 7f00 	tst.w	r2, #512	; 0x200
   80516:	d0fb      	beq.n	80510 <ili9341_duplicate_pixel+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80518:	60dd      	str	r5, [r3, #12]
	while (count--) {
   8051a:	3901      	subs	r1, #1
   8051c:	f1b1 3fff 	cmp.w	r1, #4294967295
   80520:	d1f1      	bne.n	80506 <ili9341_duplicate_pixel+0x16>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80522:	4a06      	ldr	r2, [pc, #24]	; (8053c <ili9341_duplicate_pixel+0x4c>)
   80524:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80526:	f413 7f00 	tst.w	r3, #512	; 0x200
   8052a:	d0fb      	beq.n	80524 <ili9341_duplicate_pixel+0x34>
   8052c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80530:	4b03      	ldr	r3, [pc, #12]	; (80540 <ili9341_duplicate_pixel+0x50>)
   80532:	631a      	str	r2, [r3, #48]	; 0x30
   80534:	bd38      	pop	{r3, r4, r5, pc}
   80536:	bf00      	nop
   80538:	000802f5 	.word	0x000802f5
   8053c:	40008000 	.word	0x40008000
   80540:	400e0e00 	.word	0x400e0e00

00080544 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
   80544:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
   80546:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
   8054a:	f000 0301 	and.w	r3, r0, #1
		madctl &= ~(1 << 6);
   8054e:	2b00      	cmp	r3, #0
   80550:	bf0c      	ite	eq
   80552:	2448      	moveq	r4, #72	; 0x48
   80554:	2408      	movne	r4, #8
	}

	if (flags & ILI9341_FLIP_Y) {
   80556:	f010 0f02 	tst.w	r0, #2
		madctl |= 1 << 7;
   8055a:	bf18      	it	ne
   8055c:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
   80560:	f010 0f04 	tst.w	r0, #4
		madctl |= 1 << 5;
   80564:	bf18      	it	ne
   80566:	f044 0420 	orrne.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
   8056a:	2036      	movs	r0, #54	; 0x36
   8056c:	4b09      	ldr	r3, [pc, #36]	; (80594 <ili9341_set_orientation+0x50>)
   8056e:	4798      	blx	r3
   80570:	4a09      	ldr	r2, [pc, #36]	; (80598 <ili9341_set_orientation+0x54>)
   80572:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80574:	f413 7f00 	tst.w	r3, #512	; 0x200
   80578:	d0fb      	beq.n	80572 <ili9341_set_orientation+0x2e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8057a:	4b07      	ldr	r3, [pc, #28]	; (80598 <ili9341_set_orientation+0x54>)
   8057c:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8057e:	461a      	mov	r2, r3
   80580:	6913      	ldr	r3, [r2, #16]
   80582:	f413 7f00 	tst.w	r3, #512	; 0x200
   80586:	d0fb      	beq.n	80580 <ili9341_set_orientation+0x3c>
   80588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8058c:	4b03      	ldr	r3, [pc, #12]	; (8059c <ili9341_set_orientation+0x58>)
   8058e:	631a      	str	r2, [r3, #48]	; 0x30
   80590:	bd10      	pop	{r4, pc}
   80592:	bf00      	nop
   80594:	000802f5 	.word	0x000802f5
   80598:	40008000 	.word	0x40008000
   8059c:	400e0e00 	.word	0x400e0e00

000805a0 <ili9341_init>:
{
   805a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   805a4:	b084      	sub	sp, #16
	struct spi_device device = {
   805a6:	2500      	movs	r5, #0
   805a8:	ae04      	add	r6, sp, #16
   805aa:	f846 5d04 	str.w	r5, [r6, #-4]!
	spi_master_init(CONF_ILI9341_SPI);
   805ae:	4ca5      	ldr	r4, [pc, #660]	; (80844 <ili9341_init+0x2a4>)
   805b0:	4620      	mov	r0, r4
   805b2:	4ba5      	ldr	r3, [pc, #660]	; (80848 <ili9341_init+0x2a8>)
   805b4:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags,
   805b6:	9500      	str	r5, [sp, #0]
   805b8:	4ba4      	ldr	r3, [pc, #656]	; (8084c <ili9341_init+0x2ac>)
   805ba:	462a      	mov	r2, r5
   805bc:	4631      	mov	r1, r6
   805be:	4620      	mov	r0, r4
   805c0:	4ea3      	ldr	r6, [pc, #652]	; (80850 <ili9341_init+0x2b0>)
   805c2:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
   805c4:	2301      	movs	r3, #1
   805c6:	6023      	str	r3, [r4, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805c8:	60e5      	str	r5, [r4, #12]
   805ca:	4da2      	ldr	r5, [pc, #648]	; (80854 <ili9341_init+0x2b4>)
   805cc:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   805d0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(10);
   805d2:	f64e 2060 	movw	r0, #60000	; 0xea60
   805d6:	4ca0      	ldr	r4, [pc, #640]	; (80858 <ili9341_init+0x2b8>)
   805d8:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   805da:	636e      	str	r6, [r5, #52]	; 0x34
	delay_ms(10);
   805dc:	f64e 2060 	movw	r0, #60000	; 0xea60
   805e0:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   805e2:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(150);
   805e4:	f8df 8280 	ldr.w	r8, [pc, #640]	; 80868 <ili9341_init+0x2c8>
   805e8:	4640      	mov	r0, r8
   805ea:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
   805ec:	2011      	movs	r0, #17
   805ee:	4d9b      	ldr	r5, [pc, #620]	; (8085c <ili9341_init+0x2bc>)
   805f0:	47a8      	blx	r5
   805f2:	4e9b      	ldr	r6, [pc, #620]	; (80860 <ili9341_init+0x2c0>)
   805f4:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
   805f8:	6337      	str	r7, [r6, #48]	; 0x30
	delay_ms(150);
   805fa:	4640      	mov	r0, r8
   805fc:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
   805fe:	2029      	movs	r0, #41	; 0x29
   80600:	47a8      	blx	r5
   80602:	6337      	str	r7, [r6, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
   80604:	20cd      	movs	r0, #205	; 0xcd
   80606:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80608:	4a8e      	ldr	r2, [pc, #568]	; (80844 <ili9341_init+0x2a4>)
   8060a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8060c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80610:	d0fb      	beq.n	8060a <ili9341_init+0x6a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80612:	2239      	movs	r2, #57	; 0x39
   80614:	4b8b      	ldr	r3, [pc, #556]	; (80844 <ili9341_init+0x2a4>)
   80616:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80618:	461a      	mov	r2, r3
   8061a:	6913      	ldr	r3, [r2, #16]
   8061c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80620:	d0fb      	beq.n	8061a <ili9341_init+0x7a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80622:	222c      	movs	r2, #44	; 0x2c
   80624:	4b87      	ldr	r3, [pc, #540]	; (80844 <ili9341_init+0x2a4>)
   80626:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80628:	461a      	mov	r2, r3
   8062a:	6913      	ldr	r3, [r2, #16]
   8062c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80630:	d0fb      	beq.n	8062a <ili9341_init+0x8a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80632:	2200      	movs	r2, #0
   80634:	4b83      	ldr	r3, [pc, #524]	; (80844 <ili9341_init+0x2a4>)
   80636:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80638:	461a      	mov	r2, r3
   8063a:	6913      	ldr	r3, [r2, #16]
   8063c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80640:	d0fb      	beq.n	8063a <ili9341_init+0x9a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80642:	2234      	movs	r2, #52	; 0x34
   80644:	4b7f      	ldr	r3, [pc, #508]	; (80844 <ili9341_init+0x2a4>)
   80646:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80648:	461a      	mov	r2, r3
   8064a:	6913      	ldr	r3, [r2, #16]
   8064c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80650:	d0fb      	beq.n	8064a <ili9341_init+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80652:	2202      	movs	r2, #2
   80654:	4b7b      	ldr	r3, [pc, #492]	; (80844 <ili9341_init+0x2a4>)
   80656:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80658:	461a      	mov	r2, r3
   8065a:	6913      	ldr	r3, [r2, #16]
   8065c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80660:	d0fb      	beq.n	8065a <ili9341_init+0xba>
   80662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80666:	4b7e      	ldr	r3, [pc, #504]	; (80860 <ili9341_init+0x2c0>)
   80668:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
   8066a:	20cf      	movs	r0, #207	; 0xcf
   8066c:	4b7b      	ldr	r3, [pc, #492]	; (8085c <ili9341_init+0x2bc>)
   8066e:	4798      	blx	r3
   80670:	4a74      	ldr	r2, [pc, #464]	; (80844 <ili9341_init+0x2a4>)
   80672:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80674:	f413 7f00 	tst.w	r3, #512	; 0x200
   80678:	d0fb      	beq.n	80672 <ili9341_init+0xd2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8067a:	2200      	movs	r2, #0
   8067c:	4b71      	ldr	r3, [pc, #452]	; (80844 <ili9341_init+0x2a4>)
   8067e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80680:	461a      	mov	r2, r3
   80682:	6913      	ldr	r3, [r2, #16]
   80684:	f413 7f00 	tst.w	r3, #512	; 0x200
   80688:	d0fb      	beq.n	80682 <ili9341_init+0xe2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8068a:	22aa      	movs	r2, #170	; 0xaa
   8068c:	4b6d      	ldr	r3, [pc, #436]	; (80844 <ili9341_init+0x2a4>)
   8068e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80690:	461a      	mov	r2, r3
   80692:	6913      	ldr	r3, [r2, #16]
   80694:	f413 7f00 	tst.w	r3, #512	; 0x200
   80698:	d0fb      	beq.n	80692 <ili9341_init+0xf2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8069a:	22b0      	movs	r2, #176	; 0xb0
   8069c:	4b69      	ldr	r3, [pc, #420]	; (80844 <ili9341_init+0x2a4>)
   8069e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   806a0:	461a      	mov	r2, r3
   806a2:	6913      	ldr	r3, [r2, #16]
   806a4:	f413 7f00 	tst.w	r3, #512	; 0x200
   806a8:	d0fb      	beq.n	806a2 <ili9341_init+0x102>
   806aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806ae:	4b6c      	ldr	r3, [pc, #432]	; (80860 <ili9341_init+0x2c0>)
   806b0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
   806b2:	20f7      	movs	r0, #247	; 0xf7
   806b4:	4b69      	ldr	r3, [pc, #420]	; (8085c <ili9341_init+0x2bc>)
   806b6:	4798      	blx	r3
   806b8:	4a62      	ldr	r2, [pc, #392]	; (80844 <ili9341_init+0x2a4>)
   806ba:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   806bc:	f413 7f00 	tst.w	r3, #512	; 0x200
   806c0:	d0fb      	beq.n	806ba <ili9341_init+0x11a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   806c2:	2230      	movs	r2, #48	; 0x30
   806c4:	4b5f      	ldr	r3, [pc, #380]	; (80844 <ili9341_init+0x2a4>)
   806c6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   806c8:	461a      	mov	r2, r3
   806ca:	6913      	ldr	r3, [r2, #16]
   806cc:	f413 7f00 	tst.w	r3, #512	; 0x200
   806d0:	d0fb      	beq.n	806ca <ili9341_init+0x12a>
   806d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806d6:	4b62      	ldr	r3, [pc, #392]	; (80860 <ili9341_init+0x2c0>)
   806d8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
   806da:	20c0      	movs	r0, #192	; 0xc0
   806dc:	4b5f      	ldr	r3, [pc, #380]	; (8085c <ili9341_init+0x2bc>)
   806de:	4798      	blx	r3
   806e0:	4a58      	ldr	r2, [pc, #352]	; (80844 <ili9341_init+0x2a4>)
   806e2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   806e4:	f413 7f00 	tst.w	r3, #512	; 0x200
   806e8:	d0fb      	beq.n	806e2 <ili9341_init+0x142>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   806ea:	2225      	movs	r2, #37	; 0x25
   806ec:	4b55      	ldr	r3, [pc, #340]	; (80844 <ili9341_init+0x2a4>)
   806ee:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   806f0:	461a      	mov	r2, r3
   806f2:	6913      	ldr	r3, [r2, #16]
   806f4:	f413 7f00 	tst.w	r3, #512	; 0x200
   806f8:	d0fb      	beq.n	806f2 <ili9341_init+0x152>
   806fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806fe:	4b58      	ldr	r3, [pc, #352]	; (80860 <ili9341_init+0x2c0>)
   80700:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
   80702:	20c1      	movs	r0, #193	; 0xc1
   80704:	4b55      	ldr	r3, [pc, #340]	; (8085c <ili9341_init+0x2bc>)
   80706:	4798      	blx	r3
   80708:	4a4e      	ldr	r2, [pc, #312]	; (80844 <ili9341_init+0x2a4>)
   8070a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8070c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80710:	d0fb      	beq.n	8070a <ili9341_init+0x16a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80712:	2211      	movs	r2, #17
   80714:	4b4b      	ldr	r3, [pc, #300]	; (80844 <ili9341_init+0x2a4>)
   80716:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80718:	461a      	mov	r2, r3
   8071a:	6913      	ldr	r3, [r2, #16]
   8071c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80720:	d0fb      	beq.n	8071a <ili9341_init+0x17a>
   80722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80726:	4b4e      	ldr	r3, [pc, #312]	; (80860 <ili9341_init+0x2c0>)
   80728:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
   8072a:	20c5      	movs	r0, #197	; 0xc5
   8072c:	4b4b      	ldr	r3, [pc, #300]	; (8085c <ili9341_init+0x2bc>)
   8072e:	4798      	blx	r3
   80730:	4a44      	ldr	r2, [pc, #272]	; (80844 <ili9341_init+0x2a4>)
   80732:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80734:	f413 7f00 	tst.w	r3, #512	; 0x200
   80738:	d0fb      	beq.n	80732 <ili9341_init+0x192>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8073a:	225c      	movs	r2, #92	; 0x5c
   8073c:	4b41      	ldr	r3, [pc, #260]	; (80844 <ili9341_init+0x2a4>)
   8073e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80740:	461a      	mov	r2, r3
   80742:	6913      	ldr	r3, [r2, #16]
   80744:	f413 7f00 	tst.w	r3, #512	; 0x200
   80748:	d0fb      	beq.n	80742 <ili9341_init+0x1a2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8074a:	224c      	movs	r2, #76	; 0x4c
   8074c:	4b3d      	ldr	r3, [pc, #244]	; (80844 <ili9341_init+0x2a4>)
   8074e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80750:	461a      	mov	r2, r3
   80752:	6913      	ldr	r3, [r2, #16]
   80754:	f413 7f00 	tst.w	r3, #512	; 0x200
   80758:	d0fb      	beq.n	80752 <ili9341_init+0x1b2>
   8075a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8075e:	4b40      	ldr	r3, [pc, #256]	; (80860 <ili9341_init+0x2c0>)
   80760:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
   80762:	20c7      	movs	r0, #199	; 0xc7
   80764:	4b3d      	ldr	r3, [pc, #244]	; (8085c <ili9341_init+0x2bc>)
   80766:	4798      	blx	r3
   80768:	4a36      	ldr	r2, [pc, #216]	; (80844 <ili9341_init+0x2a4>)
   8076a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8076c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80770:	d0fb      	beq.n	8076a <ili9341_init+0x1ca>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80772:	2294      	movs	r2, #148	; 0x94
   80774:	4b33      	ldr	r3, [pc, #204]	; (80844 <ili9341_init+0x2a4>)
   80776:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80778:	461a      	mov	r2, r3
   8077a:	6913      	ldr	r3, [r2, #16]
   8077c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80780:	d0fb      	beq.n	8077a <ili9341_init+0x1da>
   80782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80786:	4b36      	ldr	r3, [pc, #216]	; (80860 <ili9341_init+0x2c0>)
   80788:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
   8078a:	20e8      	movs	r0, #232	; 0xe8
   8078c:	4b33      	ldr	r3, [pc, #204]	; (8085c <ili9341_init+0x2bc>)
   8078e:	4798      	blx	r3
   80790:	4a2c      	ldr	r2, [pc, #176]	; (80844 <ili9341_init+0x2a4>)
   80792:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80794:	f413 7f00 	tst.w	r3, #512	; 0x200
   80798:	d0fb      	beq.n	80792 <ili9341_init+0x1f2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8079a:	2285      	movs	r2, #133	; 0x85
   8079c:	4b29      	ldr	r3, [pc, #164]	; (80844 <ili9341_init+0x2a4>)
   8079e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807a0:	461a      	mov	r2, r3
   807a2:	6913      	ldr	r3, [r2, #16]
   807a4:	f413 7f00 	tst.w	r3, #512	; 0x200
   807a8:	d0fb      	beq.n	807a2 <ili9341_init+0x202>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   807aa:	2201      	movs	r2, #1
   807ac:	4b25      	ldr	r3, [pc, #148]	; (80844 <ili9341_init+0x2a4>)
   807ae:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807b0:	461a      	mov	r2, r3
   807b2:	6913      	ldr	r3, [r2, #16]
   807b4:	f413 7f00 	tst.w	r3, #512	; 0x200
   807b8:	d0fb      	beq.n	807b2 <ili9341_init+0x212>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   807ba:	2278      	movs	r2, #120	; 0x78
   807bc:	4b21      	ldr	r3, [pc, #132]	; (80844 <ili9341_init+0x2a4>)
   807be:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807c0:	461a      	mov	r2, r3
   807c2:	6913      	ldr	r3, [r2, #16]
   807c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   807c8:	d0fb      	beq.n	807c2 <ili9341_init+0x222>
   807ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   807ce:	4b24      	ldr	r3, [pc, #144]	; (80860 <ili9341_init+0x2c0>)
   807d0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
   807d2:	20ea      	movs	r0, #234	; 0xea
   807d4:	4b21      	ldr	r3, [pc, #132]	; (8085c <ili9341_init+0x2bc>)
   807d6:	4798      	blx	r3
   807d8:	4a1a      	ldr	r2, [pc, #104]	; (80844 <ili9341_init+0x2a4>)
   807da:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   807dc:	f413 7f00 	tst.w	r3, #512	; 0x200
   807e0:	d0fb      	beq.n	807da <ili9341_init+0x23a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   807e2:	2200      	movs	r2, #0
   807e4:	4b17      	ldr	r3, [pc, #92]	; (80844 <ili9341_init+0x2a4>)
   807e6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807e8:	461a      	mov	r2, r3
   807ea:	6913      	ldr	r3, [r2, #16]
   807ec:	f413 7f00 	tst.w	r3, #512	; 0x200
   807f0:	d0fb      	beq.n	807ea <ili9341_init+0x24a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   807f2:	2200      	movs	r2, #0
   807f4:	4b13      	ldr	r3, [pc, #76]	; (80844 <ili9341_init+0x2a4>)
   807f6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807f8:	461a      	mov	r2, r3
   807fa:	6913      	ldr	r3, [r2, #16]
   807fc:	f413 7f00 	tst.w	r3, #512	; 0x200
   80800:	d0fb      	beq.n	807fa <ili9341_init+0x25a>
   80802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80806:	4b16      	ldr	r3, [pc, #88]	; (80860 <ili9341_init+0x2c0>)
   80808:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
   8080a:	203a      	movs	r0, #58	; 0x3a
   8080c:	4b13      	ldr	r3, [pc, #76]	; (8085c <ili9341_init+0x2bc>)
   8080e:	4798      	blx	r3
   80810:	4a0c      	ldr	r2, [pc, #48]	; (80844 <ili9341_init+0x2a4>)
   80812:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80814:	f413 7f00 	tst.w	r3, #512	; 0x200
   80818:	d0fb      	beq.n	80812 <ili9341_init+0x272>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8081a:	2205      	movs	r2, #5
   8081c:	4b09      	ldr	r3, [pc, #36]	; (80844 <ili9341_init+0x2a4>)
   8081e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80820:	461a      	mov	r2, r3
   80822:	6913      	ldr	r3, [r2, #16]
   80824:	f413 7f00 	tst.w	r3, #512	; 0x200
   80828:	d0fb      	beq.n	80822 <ili9341_init+0x282>
   8082a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8082e:	4b0c      	ldr	r3, [pc, #48]	; (80860 <ili9341_init+0x2c0>)
   80830:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
   80832:	2000      	movs	r0, #0
   80834:	4b0b      	ldr	r3, [pc, #44]	; (80864 <ili9341_init+0x2c4>)
   80836:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
   80838:	23f0      	movs	r3, #240	; 0xf0
   8083a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   8083e:	2100      	movs	r1, #0
   80840:	4608      	mov	r0, r1
   80842:	e013      	b.n	8086c <ili9341_init+0x2cc>
   80844:	40008000 	.word	0x40008000
   80848:	00080c65 	.word	0x00080c65
   8084c:	007a1200 	.word	0x007a1200
   80850:	00080cb9 	.word	0x00080cb9
   80854:	400e1200 	.word	0x400e1200
   80858:	20070001 	.word	0x20070001
   8085c:	000802f5 	.word	0x000802f5
   80860:	400e0e00 	.word	0x400e0e00
   80864:	00080545 	.word	0x00080545
   80868:	000dbba0 	.word	0x000dbba0
   8086c:	4c02      	ldr	r4, [pc, #8]	; (80878 <ili9341_init+0x2d8>)
   8086e:	47a0      	blx	r4
}
   80870:	b004      	add	sp, #16
   80872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80876:	bf00      	nop
   80878:	00080469 	.word	0x00080469

0008087c <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
   8087c:	b410      	push	{r4}
   8087e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   80882:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
   80886:	4c0d      	ldr	r4, [pc, #52]	; (808bc <gfx_set_clipping+0x40>)
   80888:	f9b4 4000 	ldrsh.w	r4, [r4]
   8088c:	4294      	cmp	r4, r2
		max_x = gfx_width - 1;
   8088e:	bfdc      	itt	le
   80890:	f104 32ff 	addle.w	r2, r4, #4294967295
   80894:	b212      	sxthle	r2, r2
	}

	if (max_y >= gfx_height) {
   80896:	4c0a      	ldr	r4, [pc, #40]	; (808c0 <gfx_set_clipping+0x44>)
   80898:	f9b4 4000 	ldrsh.w	r4, [r4]
   8089c:	429c      	cmp	r4, r3
		max_y = gfx_height - 1;
   8089e:	bfdc      	itt	le
   808a0:	f104 34ff 	addle.w	r4, r4, #4294967295
   808a4:	b223      	sxthle	r3, r4
	}

	gfx_min_x = min_x;
   808a6:	4c07      	ldr	r4, [pc, #28]	; (808c4 <gfx_set_clipping+0x48>)
   808a8:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
   808aa:	4807      	ldr	r0, [pc, #28]	; (808c8 <gfx_set_clipping+0x4c>)
   808ac:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
   808ae:	4907      	ldr	r1, [pc, #28]	; (808cc <gfx_set_clipping+0x50>)
   808b0:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
   808b2:	4a07      	ldr	r2, [pc, #28]	; (808d0 <gfx_set_clipping+0x54>)
   808b4:	8013      	strh	r3, [r2, #0]
#endif
}
   808b6:	bc10      	pop	{r4}
   808b8:	4770      	bx	lr
   808ba:	bf00      	nop
   808bc:	20071430 	.word	0x20071430
   808c0:	2007143a 	.word	0x2007143a
   808c4:	20071434 	.word	0x20071434
   808c8:	20071438 	.word	0x20071438
   808cc:	20071432 	.word	0x20071432
   808d0:	20071436 	.word	0x20071436

000808d4 <gfx_get_width>:

gfx_coord_t gfx_get_width(void)
{
	return gfx_width;
}
   808d4:	4b01      	ldr	r3, [pc, #4]	; (808dc <gfx_get_width+0x8>)
   808d6:	f9b3 0000 	ldrsh.w	r0, [r3]
   808da:	4770      	bx	lr
   808dc:	20071430 	.word	0x20071430

000808e0 <gfx_get_height>:

gfx_coord_t gfx_get_height(void)
{
	return gfx_height;
}
   808e0:	4b01      	ldr	r3, [pc, #4]	; (808e8 <gfx_get_height+0x8>)
   808e2:	f9b3 0000 	ldrsh.w	r0, [r3]
   808e6:	4770      	bx	lr
   808e8:	2007143a 	.word	0x2007143a

000808ec <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
   808ec:	2a00      	cmp	r2, #0
   808ee:	d05c      	beq.n	809aa <gfx_generic_draw_filled_rect+0xbe>
{
   808f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   808f2:	461c      	mov	r4, r3
   808f4:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
   808f6:	2b00      	cmp	r3, #0
   808f8:	d048      	beq.n	8098c <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
   808fa:	2a00      	cmp	r2, #0
   808fc:	db47      	blt.n	8098e <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
   808fe:	2c00      	cmp	r4, #0
   80900:	db4c      	blt.n	8099c <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   80902:	4b2a      	ldr	r3, [pc, #168]	; (809ac <gfx_generic_draw_filled_rect+0xc0>)
   80904:	f9b3 6000 	ldrsh.w	r6, [r3]
   80908:	42b0      	cmp	r0, r6
   8090a:	dc3f      	bgt.n	8098c <gfx_generic_draw_filled_rect+0xa0>
   8090c:	4b28      	ldr	r3, [pc, #160]	; (809b0 <gfx_generic_draw_filled_rect+0xc4>)
   8090e:	f9b3 7000 	ldrsh.w	r7, [r3]
   80912:	42b9      	cmp	r1, r7
   80914:	dc3a      	bgt.n	8098c <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
   80916:	4b27      	ldr	r3, [pc, #156]	; (809b4 <gfx_generic_draw_filled_rect+0xc8>)
   80918:	f9b3 3000 	ldrsh.w	r3, [r3]
   8091c:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   8091e:	429a      	cmp	r2, r3
   80920:	dd34      	ble.n	8098c <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
   80922:	4a25      	ldr	r2, [pc, #148]	; (809b8 <gfx_generic_draw_filled_rect+0xcc>)
   80924:	f9b2 2000 	ldrsh.w	r2, [r2]
   80928:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
   8092c:	4596      	cmp	lr, r2
   8092e:	dd2d      	ble.n	8098c <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
   80930:	4298      	cmp	r0, r3
   80932:	da03      	bge.n	8093c <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
   80934:	4405      	add	r5, r0
   80936:	1aed      	subs	r5, r5, r3
   80938:	b22d      	sxth	r5, r5
		x = gfx_min_x;
   8093a:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
   8093c:	4291      	cmp	r1, r2
   8093e:	da03      	bge.n	80948 <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
   80940:	440c      	add	r4, r1
   80942:	1aa4      	subs	r4, r4, r2
   80944:	b224      	sxth	r4, r4
		y = gfx_min_y;
   80946:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
   80948:	fa1f fc80 	uxth.w	ip, r0
   8094c:	eb0c 0205 	add.w	r2, ip, r5
   80950:	3a01      	subs	r2, #1
   80952:	b212      	sxth	r2, r2
	y2 = y + height - 1;
   80954:	fa1f fe81 	uxth.w	lr, r1
   80958:	eb0e 0304 	add.w	r3, lr, r4
   8095c:	3b01      	subs	r3, #1
   8095e:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
   80960:	4296      	cmp	r6, r2
   80962:	da04      	bge.n	8096e <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
   80964:	1c75      	adds	r5, r6, #1
   80966:	eba5 050c 	sub.w	r5, r5, ip
   8096a:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
   8096c:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
   8096e:	429f      	cmp	r7, r3
   80970:	da04      	bge.n	8097c <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
   80972:	1c7c      	adds	r4, r7, #1
   80974:	eba4 040e 	sub.w	r4, r4, lr
   80978:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
   8097a:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
   8097c:	4e0f      	ldr	r6, [pc, #60]	; (809bc <gfx_generic_draw_filled_rect+0xd0>)
   8097e:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
   80980:	fb04 f105 	mul.w	r1, r4, r5
   80984:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   80988:	4b0d      	ldr	r3, [pc, #52]	; (809c0 <gfx_generic_draw_filled_rect+0xd4>)
   8098a:	4798      	blx	r3
   8098c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
   8098e:	b293      	uxth	r3, r2
   80990:	425d      	negs	r5, r3
   80992:	b22d      	sxth	r5, r5
		x -= width - 1;
   80994:	3001      	adds	r0, #1
   80996:	4418      	add	r0, r3
   80998:	b200      	sxth	r0, r0
   8099a:	e7b0      	b.n	808fe <gfx_generic_draw_filled_rect+0x12>
		height = -height;
   8099c:	b2a3      	uxth	r3, r4
   8099e:	425c      	negs	r4, r3
   809a0:	b224      	sxth	r4, r4
		y -= height - 1;
   809a2:	3101      	adds	r1, #1
   809a4:	4419      	add	r1, r3
   809a6:	b209      	sxth	r1, r1
   809a8:	e7ab      	b.n	80902 <gfx_generic_draw_filled_rect+0x16>
   809aa:	4770      	bx	lr
   809ac:	20071432 	.word	0x20071432
   809b0:	20071436 	.word	0x20071436
   809b4:	20071434 	.word	0x20071434
   809b8:	20071438 	.word	0x20071438
   809bc:	00080469 	.word	0x00080469
   809c0:	000804f1 	.word	0x000804f1

000809c4 <gfx_generic_put_bitmap>:

void gfx_generic_put_bitmap(const struct gfx_bitmap *bmp,
		gfx_coord_t map_x, gfx_coord_t map_y,
		gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height)
{
   809c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809c8:	b083      	sub	sp, #12
   809ca:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
   809ce:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
   809d2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
#if XMEGA
	gfx_color_t PROGMEM_PTR_T progmem_pixmap;
#endif

	/* Nothing to do if width or height is zero. */
	if ((width == 0) || (height == 0)) {
   809d6:	2c00      	cmp	r4, #0
   809d8:	d068      	beq.n	80aac <gfx_generic_put_bitmap+0xe8>
   809da:	4688      	mov	r8, r1
   809dc:	461f      	mov	r7, r3
   809de:	2e00      	cmp	r6, #0
   809e0:	d064      	beq.n	80aac <gfx_generic_put_bitmap+0xe8>
	Assert(width > 0);
	Assert(height > 0);

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   809e2:	4b55      	ldr	r3, [pc, #340]	; (80b38 <gfx_generic_put_bitmap+0x174>)
   809e4:	f9b3 3000 	ldrsh.w	r3, [r3]
   809e8:	42bb      	cmp	r3, r7
   809ea:	db5f      	blt.n	80aac <gfx_generic_put_bitmap+0xe8>
   809ec:	4953      	ldr	r1, [pc, #332]	; (80b3c <gfx_generic_put_bitmap+0x178>)
   809ee:	f9b1 e000 	ldrsh.w	lr, [r1]
   809f2:	45ae      	cmp	lr, r5
   809f4:	db5a      	blt.n	80aac <gfx_generic_put_bitmap+0xe8>
			((x + width) <= gfx_min_x) ||
   809f6:	4952      	ldr	r1, [pc, #328]	; (80b40 <gfx_generic_put_bitmap+0x17c>)
   809f8:	f9b1 1000 	ldrsh.w	r1, [r1]
   809fc:	eb07 0c04 	add.w	ip, r7, r4
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   80a00:	458c      	cmp	ip, r1
   80a02:	dd53      	ble.n	80aac <gfx_generic_put_bitmap+0xe8>
			((y + height) <= gfx_min_y)) {
   80a04:	f8df c150 	ldr.w	ip, [pc, #336]	; 80b58 <gfx_generic_put_bitmap+0x194>
   80a08:	f9bc c000 	ldrsh.w	ip, [ip]
   80a0c:	eb05 0906 	add.w	r9, r5, r6
			((x + width) <= gfx_min_x) ||
   80a10:	45e1      	cmp	r9, ip
   80a12:	dd4b      	ble.n	80aac <gfx_generic_put_bitmap+0xe8>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
   80a14:	428f      	cmp	r7, r1
   80a16:	da0c      	bge.n	80a32 <gfx_generic_put_bitmap+0x6e>
		width -= gfx_min_x - x;
   80a18:	b2bf      	uxth	r7, r7
   80a1a:	fa1f f981 	uxth.w	r9, r1
   80a1e:	eba7 0a09 	sub.w	sl, r7, r9
   80a22:	4454      	add	r4, sl
   80a24:	b224      	sxth	r4, r4
		map_x += gfx_min_x - x;
   80a26:	44c8      	add	r8, r9
   80a28:	eba8 0807 	sub.w	r8, r8, r7
   80a2c:	fa0f f888 	sxth.w	r8, r8
		x = gfx_min_x;
   80a30:	460f      	mov	r7, r1
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
   80a32:	4565      	cmp	r5, ip
   80a34:	da0a      	bge.n	80a4c <gfx_generic_put_bitmap+0x88>
		height -= gfx_min_y - y;
   80a36:	b2ad      	uxth	r5, r5
   80a38:	fa1f f18c 	uxth.w	r1, ip
   80a3c:	eba5 0901 	sub.w	r9, r5, r1
   80a40:	444e      	add	r6, r9
   80a42:	b236      	sxth	r6, r6
		map_y += gfx_min_y - y;
   80a44:	440a      	add	r2, r1
   80a46:	1b52      	subs	r2, r2, r5
   80a48:	b212      	sxth	r2, r2
		y = gfx_min_y;
   80a4a:	4665      	mov	r5, ip
	}

#endif

	/* Compute bottom right point. */
	x2 = x + width - 1;
   80a4c:	fa1f fa87 	uxth.w	sl, r7
   80a50:	eb0a 0c04 	add.w	ip, sl, r4
   80a54:	f10c 3cff 	add.w	ip, ip, #4294967295
   80a58:	fa0f fc8c 	sxth.w	ip, ip
	y2 = y + height - 1;
   80a5c:	fa1f f985 	uxth.w	r9, r5
   80a60:	eb09 0106 	add.w	r1, r9, r6
   80a64:	3901      	subs	r1, #1
   80a66:	b209      	sxth	r1, r1

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
   80a68:	4563      	cmp	r3, ip
   80a6a:	da04      	bge.n	80a76 <gfx_generic_put_bitmap+0xb2>
		x2 = gfx_max_x;
		width = x2 - x + 1;
   80a6c:	1c5c      	adds	r4, r3, #1
   80a6e:	eba4 040a 	sub.w	r4, r4, sl
   80a72:	b224      	sxth	r4, r4
		x2 = gfx_max_x;
   80a74:	469c      	mov	ip, r3
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
   80a76:	458e      	cmp	lr, r1
   80a78:	da05      	bge.n	80a86 <gfx_generic_put_bitmap+0xc2>
		y2 = gfx_max_y;
		height = y2 - y + 1;
   80a7a:	f10e 0601 	add.w	r6, lr, #1
   80a7e:	eba6 0609 	sub.w	r6, r6, r9
   80a82:	b236      	sxth	r6, r6
		y2 = gfx_max_y;
   80a84:	4671      	mov	r1, lr
	}
#endif

	switch (bmp->type) {
   80a86:	7903      	ldrb	r3, [r0, #4]
   80a88:	2b03      	cmp	r3, #3
   80a8a:	d80f      	bhi.n	80aac <gfx_generic_put_bitmap+0xe8>
   80a8c:	e8df f003 	tbb	[pc, r3]
   80a90:	11202002 	.word	0x11202002
	case GFX_BITMAP_SOLID:
		gfx_draw_filled_rect(x, y, x2 - x, y2 - y, bmp->data.color);
   80a94:	eba1 0309 	sub.w	r3, r1, r9
   80a98:	ebac 020a 	sub.w	r2, ip, sl
   80a9c:	8901      	ldrh	r1, [r0, #8]
   80a9e:	9100      	str	r1, [sp, #0]
   80aa0:	b21b      	sxth	r3, r3
   80aa2:	b212      	sxth	r2, r2
   80aa4:	4629      	mov	r1, r5
   80aa6:	4638      	mov	r0, r7
   80aa8:	4c26      	ldr	r4, [pc, #152]	; (80b44 <gfx_generic_put_bitmap+0x180>)
   80aaa:	47a0      	blx	r4
		}

		break;
#endif
	}
}
   80aac:	b003      	add	sp, #12
   80aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (gfx_ext_draw_func != NULL) {
   80ab2:	4b25      	ldr	r3, [pc, #148]	; (80b48 <gfx_generic_put_bitmap+0x184>)
   80ab4:	681c      	ldr	r4, [r3, #0]
   80ab6:	2c00      	cmp	r4, #0
   80ab8:	d0f8      	beq.n	80aac <gfx_generic_put_bitmap+0xe8>
			gfx_ext_draw_func(bmp, x, y, x2 - x, y2 - y);
   80aba:	ebac 030a 	sub.w	r3, ip, sl
   80abe:	eba1 0209 	sub.w	r2, r1, r9
   80ac2:	b212      	sxth	r2, r2
   80ac4:	9200      	str	r2, [sp, #0]
   80ac6:	b21b      	sxth	r3, r3
   80ac8:	462a      	mov	r2, r5
   80aca:	4639      	mov	r1, r7
   80acc:	47a0      	blx	r4
   80ace:	e7ed      	b.n	80aac <gfx_generic_put_bitmap+0xe8>
	gfx_coord_t map_width = bmp->width;
   80ad0:	f9b0 a000 	ldrsh.w	sl, [r0]
		pixmap = bmp->data.pixmap;
   80ad4:	6883      	ldr	r3, [r0, #8]
		pixmap += map_x;
   80ad6:	eb03 0b48 	add.w	fp, r3, r8, lsl #1
		if (map_y > 0) {
   80ada:	2a00      	cmp	r2, #0
			pixmap += (uint32_t)map_y * map_width;
   80adc:	bfc4      	itt	gt
   80ade:	ea4f 034a 	movgt.w	r3, sl, lsl #1
   80ae2:	fb02 bb03 	mlagt	fp, r2, r3, fp
		gfx_set_bottom_right_limit(x2, y2);
   80ae6:	4660      	mov	r0, ip
   80ae8:	4b18      	ldr	r3, [pc, #96]	; (80b4c <gfx_generic_put_bitmap+0x188>)
   80aea:	4798      	blx	r3
		if ((map_width == width) && (map_x == 0)) {
   80aec:	4554      	cmp	r4, sl
   80aee:	d015      	beq.n	80b1c <gfx_generic_put_bitmap+0x158>
			while (lines_left > 0) {
   80af0:	2e00      	cmp	r6, #0
   80af2:	dddb      	ble.n	80aac <gfx_generic_put_bitmap+0xe8>
				pixmap += map_width;
   80af4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   80af8:	444e      	add	r6, r9
   80afa:	b236      	sxth	r6, r6
				gfx_set_top_left_limit(x, y);
   80afc:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80b50 <gfx_generic_put_bitmap+0x18c>
				gfx_copy_pixels_to_screen(pixmap, width);
   80b00:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80b54 <gfx_generic_put_bitmap+0x190>
				gfx_set_top_left_limit(x, y);
   80b04:	4629      	mov	r1, r5
   80b06:	4638      	mov	r0, r7
   80b08:	47c8      	blx	r9
   80b0a:	3501      	adds	r5, #1
   80b0c:	b22d      	sxth	r5, r5
				gfx_copy_pixels_to_screen(pixmap, width);
   80b0e:	4621      	mov	r1, r4
   80b10:	4658      	mov	r0, fp
   80b12:	47c0      	blx	r8
				pixmap += map_width;
   80b14:	44d3      	add	fp, sl
			while (lines_left > 0) {
   80b16:	42b5      	cmp	r5, r6
   80b18:	d1f4      	bne.n	80b04 <gfx_generic_put_bitmap+0x140>
   80b1a:	e7c7      	b.n	80aac <gfx_generic_put_bitmap+0xe8>
		if ((map_width == width) && (map_x == 0)) {
   80b1c:	f1b8 0f00 	cmp.w	r8, #0
   80b20:	d1e6      	bne.n	80af0 <gfx_generic_put_bitmap+0x12c>
			gfx_set_top_left_limit(x, y);
   80b22:	4629      	mov	r1, r5
   80b24:	4638      	mov	r0, r7
   80b26:	4b0a      	ldr	r3, [pc, #40]	; (80b50 <gfx_generic_put_bitmap+0x18c>)
   80b28:	4798      	blx	r3
			gfx_copy_pixels_to_screen(pixmap,
   80b2a:	fb06 f104 	mul.w	r1, r6, r4
   80b2e:	4658      	mov	r0, fp
   80b30:	4b08      	ldr	r3, [pc, #32]	; (80b54 <gfx_generic_put_bitmap+0x190>)
   80b32:	4798      	blx	r3
   80b34:	e7ba      	b.n	80aac <gfx_generic_put_bitmap+0xe8>
   80b36:	bf00      	nop
   80b38:	20071432 	.word	0x20071432
   80b3c:	20071436 	.word	0x20071436
   80b40:	20071434 	.word	0x20071434
   80b44:	000808ed 	.word	0x000808ed
   80b48:	20070b94 	.word	0x20070b94
   80b4c:	00080449 	.word	0x00080449
   80b50:	00080429 	.word	0x00080429
   80b54:	00080499 	.word	0x00080499
   80b58:	20071438 	.word	0x20071438

00080b5c <gfx_generic_draw_bitmap_tiled>:
{
   80b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b60:	b087      	sub	sp, #28
   80b62:	4681      	mov	r9, r0
   80b64:	4608      	mov	r0, r1
   80b66:	4611      	mov	r1, r2
   80b68:	4698      	mov	r8, r3
   80b6a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   80b6e:	9304      	str	r3, [sp, #16]
   80b70:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
   80b74:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
	if (bmp->type == GFX_BITMAP_SOLID) {
   80b78:	f899 3004 	ldrb.w	r3, [r9, #4]
   80b7c:	b1d3      	cbz	r3, 80bb4 <gfx_generic_draw_bitmap_tiled+0x58>
	map_width = bmp->width;
   80b7e:	f9b9 5000 	ldrsh.w	r5, [r9]
	map_height = bmp->height;
   80b82:	f9b9 7002 	ldrsh.w	r7, [r9, #2]
	while (start_x <= (x1 - map_width)) {
   80b86:	1b43      	subs	r3, r0, r5
   80b88:	459b      	cmp	fp, r3
   80b8a:	dc04      	bgt.n	80b96 <gfx_generic_draw_bitmap_tiled+0x3a>
   80b8c:	44ab      	add	fp, r5
   80b8e:	fa0f fb8b 	sxth.w	fp, fp
   80b92:	459b      	cmp	fp, r3
   80b94:	ddfa      	ble.n	80b8c <gfx_generic_draw_bitmap_tiled+0x30>
	while (start_y <= (y1 - map_height)) {
   80b96:	1bcb      	subs	r3, r1, r7
   80b98:	429e      	cmp	r6, r3
   80b9a:	dc03      	bgt.n	80ba4 <gfx_generic_draw_bitmap_tiled+0x48>
   80b9c:	443e      	add	r6, r7
   80b9e:	b236      	sxth	r6, r6
   80ba0:	429e      	cmp	r6, r3
   80ba2:	ddfb      	ble.n	80b9c <gfx_generic_draw_bitmap_tiled+0x40>
	for (index_y = start_y; index_y <= y2; index_y += map_height) {
   80ba4:	9b04      	ldr	r3, [sp, #16]
   80ba6:	42b3      	cmp	r3, r6
   80ba8:	db11      	blt.n	80bce <gfx_generic_draw_bitmap_tiled+0x72>
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80baa:	f8cd b014 	str.w	fp, [sp, #20]
			gfx_put_bitmap(bmp, 0, 0, index_x, index_y, map_width,
   80bae:	f8df a054 	ldr.w	sl, [pc, #84]	; 80c04 <gfx_generic_draw_bitmap_tiled+0xa8>
   80bb2:	e021      	b.n	80bf8 <gfx_generic_draw_bitmap_tiled+0x9c>
		gfx_draw_filled_rect(x1, y1, x2 - x1 + 1, y2 - y1 + 1,
   80bb4:	9b04      	ldr	r3, [sp, #16]
   80bb6:	1a9b      	subs	r3, r3, r2
   80bb8:	3301      	adds	r3, #1
   80bba:	eba8 0200 	sub.w	r2, r8, r0
   80bbe:	3201      	adds	r2, #1
   80bc0:	f8b9 4008 	ldrh.w	r4, [r9, #8]
   80bc4:	9400      	str	r4, [sp, #0]
   80bc6:	b21b      	sxth	r3, r3
   80bc8:	b212      	sxth	r2, r2
   80bca:	4c0d      	ldr	r4, [pc, #52]	; (80c00 <gfx_generic_draw_bitmap_tiled+0xa4>)
   80bcc:	47a0      	blx	r4
}
   80bce:	b007      	add	sp, #28
   80bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80bd4:	9c05      	ldr	r4, [sp, #20]
			gfx_put_bitmap(bmp, 0, 0, index_x, index_y, map_width,
   80bd6:	9702      	str	r7, [sp, #8]
   80bd8:	9501      	str	r5, [sp, #4]
   80bda:	9600      	str	r6, [sp, #0]
   80bdc:	4623      	mov	r3, r4
   80bde:	2200      	movs	r2, #0
   80be0:	4611      	mov	r1, r2
   80be2:	4648      	mov	r0, r9
   80be4:	47d0      	blx	sl
   80be6:	442c      	add	r4, r5
   80be8:	b224      	sxth	r4, r4
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80bea:	45a0      	cmp	r8, r4
   80bec:	daf3      	bge.n	80bd6 <gfx_generic_draw_bitmap_tiled+0x7a>
   80bee:	443e      	add	r6, r7
   80bf0:	b236      	sxth	r6, r6
	for (index_y = start_y; index_y <= y2; index_y += map_height) {
   80bf2:	9b04      	ldr	r3, [sp, #16]
   80bf4:	429e      	cmp	r6, r3
   80bf6:	dcea      	bgt.n	80bce <gfx_generic_draw_bitmap_tiled+0x72>
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80bf8:	45d8      	cmp	r8, fp
   80bfa:	daeb      	bge.n	80bd4 <gfx_generic_draw_bitmap_tiled+0x78>
   80bfc:	e7f7      	b.n	80bee <gfx_generic_draw_bitmap_tiled+0x92>
   80bfe:	bf00      	nop
   80c00:	000808ed 	.word	0x000808ed
   80c04:	000809c5 	.word	0x000809c5

00080c08 <gfx_ili9341_init>:
	gfx_set_top_left_limit(x, y);
	ili9341_write_gram(color);
}

void gfx_ili9341_init(void)
{
   80c08:	b570      	push	{r4, r5, r6, lr}
   80c0a:	b082      	sub	sp, #8
	/* initialize globals */
	gfx_width = ILI9341_DEFAULT_WIDTH;
   80c0c:	4c0f      	ldr	r4, [pc, #60]	; (80c4c <gfx_ili9341_init+0x44>)
   80c0e:	f44f 73a0 	mov.w	r3, #320	; 0x140
   80c12:	8023      	strh	r3, [r4, #0]
	gfx_height = ILI9341_DEFAULT_HEIGHT;
   80c14:	4d0e      	ldr	r5, [pc, #56]	; (80c50 <gfx_ili9341_init+0x48>)
   80c16:	23f0      	movs	r3, #240	; 0xf0
   80c18:	802b      	strh	r3, [r5, #0]

	ili9341_init();
   80c1a:	4b0e      	ldr	r3, [pc, #56]	; (80c54 <gfx_ili9341_init+0x4c>)
   80c1c:	4798      	blx	r3
   80c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80c22:	4b0d      	ldr	r3, [pc, #52]	; (80c58 <gfx_ili9341_init+0x50>)
   80c24:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
   80c26:	f9b5 3000 	ldrsh.w	r3, [r5]
   80c2a:	f9b4 2000 	ldrsh.w	r2, [r4]
   80c2e:	2100      	movs	r1, #0
   80c30:	4608      	mov	r0, r1
   80c32:	4e0a      	ldr	r6, [pc, #40]	; (80c5c <gfx_ili9341_init+0x54>)
   80c34:	47b0      	blx	r6

	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height,
   80c36:	f9b5 3000 	ldrsh.w	r3, [r5]
   80c3a:	f9b4 2000 	ldrsh.w	r2, [r4]
   80c3e:	2000      	movs	r0, #0
   80c40:	9000      	str	r0, [sp, #0]
   80c42:	4601      	mov	r1, r0
   80c44:	4c06      	ldr	r4, [pc, #24]	; (80c60 <gfx_ili9341_init+0x58>)
   80c46:	47a0      	blx	r4
			GFX_COLOR_BLACK);
}
   80c48:	b002      	add	sp, #8
   80c4a:	bd70      	pop	{r4, r5, r6, pc}
   80c4c:	20071430 	.word	0x20071430
   80c50:	2007143a 	.word	0x2007143a
   80c54:	000805a1 	.word	0x000805a1
   80c58:	400e1200 	.word	0x400e1200
   80c5c:	0008087d 	.word	0x0008087d
   80c60:	000808ed 	.word	0x000808ed

00080c64 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
   80c64:	b510      	push	{r4, lr}
   80c66:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
   80c68:	4b10      	ldr	r3, [pc, #64]	; (80cac <spi_master_init+0x48>)
   80c6a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80c6c:	2380      	movs	r3, #128	; 0x80
   80c6e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80c70:	6863      	ldr	r3, [r4, #4]
   80c72:	f043 0301 	orr.w	r3, r3, #1
   80c76:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80c78:	6863      	ldr	r3, [r4, #4]
   80c7a:	f043 0310 	orr.w	r3, r3, #16
   80c7e:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80c80:	6863      	ldr	r3, [r4, #4]
   80c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80c86:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
   80c88:	2100      	movs	r1, #0
   80c8a:	4620      	mov	r0, r4
   80c8c:	4b08      	ldr	r3, [pc, #32]	; (80cb0 <spi_master_init+0x4c>)
   80c8e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
   80c90:	6863      	ldr	r3, [r4, #4]
   80c92:	f023 0302 	bic.w	r3, r3, #2
   80c96:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80c98:	6863      	ldr	r3, [r4, #4]
   80c9a:	f023 0304 	bic.w	r3, r3, #4
   80c9e:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
   80ca0:	2100      	movs	r1, #0
   80ca2:	4620      	mov	r0, r4
   80ca4:	4b03      	ldr	r3, [pc, #12]	; (80cb4 <spi_master_init+0x50>)
   80ca6:	4798      	blx	r3
   80ca8:	bd10      	pop	{r4, pc}
   80caa:	bf00      	nop
   80cac:	00081409 	.word	0x00081409
   80cb0:	00081425 	.word	0x00081425
   80cb4:	0008143b 	.word	0x0008143b

00080cb8 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
   80cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80cbc:	4604      	mov	r4, r0
   80cbe:	460d      	mov	r5, r1
   80cc0:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
   80cc2:	4915      	ldr	r1, [pc, #84]	; (80d18 <spi_master_setup_device+0x60>)
   80cc4:	4618      	mov	r0, r3
   80cc6:	4b15      	ldr	r3, [pc, #84]	; (80d1c <spi_master_setup_device+0x64>)
   80cc8:	4798      	blx	r3
   80cca:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
   80ccc:	2300      	movs	r3, #0
   80cce:	461a      	mov	r2, r3
   80cd0:	6829      	ldr	r1, [r5, #0]
   80cd2:	4620      	mov	r0, r4
   80cd4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80d34 <spi_master_setup_device+0x7c>
   80cd8:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
   80cda:	2208      	movs	r2, #8
   80cdc:	6829      	ldr	r1, [r5, #0]
   80cde:	4620      	mov	r0, r4
   80ce0:	4b0f      	ldr	r3, [pc, #60]	; (80d20 <spi_master_setup_device+0x68>)
   80ce2:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
   80ce4:	b2fa      	uxtb	r2, r7
   80ce6:	6829      	ldr	r1, [r5, #0]
   80ce8:	4620      	mov	r0, r4
   80cea:	4b0e      	ldr	r3, [pc, #56]	; (80d24 <spi_master_setup_device+0x6c>)
   80cec:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
   80cee:	2208      	movs	r2, #8
   80cf0:	6829      	ldr	r1, [r5, #0]
   80cf2:	4620      	mov	r0, r4
   80cf4:	4b0c      	ldr	r3, [pc, #48]	; (80d28 <spi_master_setup_device+0x70>)
   80cf6:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
   80cf8:	0872      	lsrs	r2, r6, #1
   80cfa:	6829      	ldr	r1, [r5, #0]
   80cfc:	4620      	mov	r0, r4
   80cfe:	4b0b      	ldr	r3, [pc, #44]	; (80d2c <spi_master_setup_device+0x74>)
   80d00:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
   80d02:	f086 0201 	eor.w	r2, r6, #1
   80d06:	f002 0201 	and.w	r2, r2, #1
   80d0a:	6829      	ldr	r1, [r5, #0]
   80d0c:	4620      	mov	r0, r4
   80d0e:	4b08      	ldr	r3, [pc, #32]	; (80d30 <spi_master_setup_device+0x78>)
   80d10:	4798      	blx	r3
   80d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d16:	bf00      	nop
   80d18:	0501bd00 	.word	0x0501bd00
   80d1c:	000814e3 	.word	0x000814e3
   80d20:	000814cf 	.word	0x000814cf
   80d24:	000814f9 	.word	0x000814f9
   80d28:	00081489 	.word	0x00081489
   80d2c:	0008144d 	.word	0x0008144d
   80d30:	0008146b 	.word	0x0008146b
   80d34:	0008151f 	.word	0x0008151f

00080d38 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
   80d38:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
   80d3a:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
   80d3c:	f013 0f04 	tst.w	r3, #4
   80d40:	d006      	beq.n	80d50 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
   80d42:	6809      	ldr	r1, [r1, #0]
   80d44:	290f      	cmp	r1, #15
   80d46:	d900      	bls.n	80d4a <spi_select_device+0x12>
   80d48:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
   80d4a:	4b06      	ldr	r3, [pc, #24]	; (80d64 <spi_select_device+0x2c>)
   80d4c:	4798      	blx	r3
   80d4e:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
   80d50:	6809      	ldr	r1, [r1, #0]
   80d52:	2903      	cmp	r1, #3
   80d54:	d8f8      	bhi.n	80d48 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
   80d56:	2301      	movs	r3, #1
   80d58:	fa03 f101 	lsl.w	r1, r3, r1
   80d5c:	43c9      	mvns	r1, r1
   80d5e:	4b01      	ldr	r3, [pc, #4]	; (80d64 <spi_select_device+0x2c>)
   80d60:	4798      	blx	r3
		}
	}
}
   80d62:	e7f1      	b.n	80d48 <spi_select_device+0x10>
   80d64:	00081425 	.word	0x00081425

00080d68 <win_is_visible>:
 *
 * \retval true \a win is visible.
 * \retval false \a win is not visible.
 */
static bool win_is_visible(const struct win_window *win)
{
   80d68:	4603      	mov	r3, r0
	/* Move up the window tree, search for unmapped windows. */
	do {
		/* Return false once an unmapped window is found. */
		if (!win->is_mapped) {
   80d6a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
   80d6e:	b110      	cbz	r0, 80d76 <win_is_visible+0xe>
			return false;
		}

		win = win->parent;
   80d70:	699b      	ldr	r3, [r3, #24]
	} while (win != NULL);
   80d72:	2b00      	cmp	r3, #0
   80d74:	d1f9      	bne.n	80d6a <win_is_visible+0x2>
	/*
	 * If we arrived here, all windows were mapped, ergo visible on
	 * screen, although maybe covered by other windows.
	 */
	return true;
}
   80d76:	4770      	bx	lr

00080d78 <win_handle_event>:
 * \retval false No event handler present or event handler doesn't
 *      accept event.
 */
static bool win_handle_event(struct win_window *win,
		enum win_event_type type, const void *data)
{
   80d78:	b508      	push	{r3, lr}
	win_event_handler_t handler = win->attributes.event_handler;
   80d7a:	68c3      	ldr	r3, [r0, #12]

	if (handler) {
   80d7c:	b10b      	cbz	r3, 80d82 <win_handle_event+0xa>
		return handler(win, type, data);
   80d7e:	4798      	blx	r3
   80d80:	bd08      	pop	{r3, pc}
	} else {
		return false;
   80d82:	2000      	movs	r0, #0
	}
}
   80d84:	bd08      	pop	{r3, pc}
	...

00080d88 <win_draw_contents>:
{
   80d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   80d8a:	b085      	sub	sp, #20
   80d8c:	4605      	mov	r5, r0
   80d8e:	460e      	mov	r6, r1
	gfx_set_clipping(clip->NW.x, clip->NW.y, clip->SE.x, clip->SE.y);
   80d90:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
   80d94:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   80d98:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   80d9c:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
   80da0:	4c15      	ldr	r4, [pc, #84]	; (80df8 <win_draw_contents+0x70>)
   80da2:	47a0      	blx	r4
	if (win->attributes.background) {
   80da4:	68a8      	ldr	r0, [r5, #8]
   80da6:	b180      	cbz	r0, 80dca <win_draw_contents+0x42>
		gfx_draw_bitmap_tiled(win->attributes.background, clip->NW.x,
   80da8:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
   80dac:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
   80db0:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   80db4:	f9b6 4002 	ldrsh.w	r4, [r6, #2]
   80db8:	9402      	str	r4, [sp, #8]
   80dba:	f9b6 4000 	ldrsh.w	r4, [r6]
   80dbe:	9401      	str	r4, [sp, #4]
   80dc0:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
   80dc4:	9400      	str	r4, [sp, #0]
   80dc6:	4c0d      	ldr	r4, [pc, #52]	; (80dfc <win_draw_contents+0x74>)
   80dc8:	47a0      	blx	r4
	win_handle_event(win, WIN_EVENT_DRAW, clip);
   80dca:	4632      	mov	r2, r6
   80dcc:	2107      	movs	r1, #7
   80dce:	4628      	mov	r0, r5
   80dd0:	4b0b      	ldr	r3, [pc, #44]	; (80e00 <win_draw_contents+0x78>)
   80dd2:	4798      	blx	r3
	child = win->top_child;
   80dd4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	if (child != NULL) {
   80dd6:	b16c      	cbz	r4, 80df4 <win_draw_contents+0x6c>
				win_draw_child(child, clip);
   80dd8:	4f0a      	ldr	r7, [pc, #40]	; (80e04 <win_draw_contents+0x7c>)
   80dda:	e002      	b.n	80de2 <win_draw_contents+0x5a>
		} while (child != win->top_child);
   80ddc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80dde:	429c      	cmp	r4, r3
   80de0:	d008      	beq.n	80df4 <win_draw_contents+0x6c>
			child = child->prev_sibling;
   80de2:	69e4      	ldr	r4, [r4, #28]
			if (child->is_mapped) {
   80de4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   80de8:	2b00      	cmp	r3, #0
   80dea:	d0f7      	beq.n	80ddc <win_draw_contents+0x54>
				win_draw_child(child, clip);
   80dec:	4631      	mov	r1, r6
   80dee:	4620      	mov	r0, r4
   80df0:	47b8      	blx	r7
   80df2:	e7f3      	b.n	80ddc <win_draw_contents+0x54>
}
   80df4:	b005      	add	sp, #20
   80df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80df8:	0008087d 	.word	0x0008087d
   80dfc:	00080b5d 	.word	0x00080b5d
   80e00:	00080d79 	.word	0x00080d79
   80e04:	00080e09 	.word	0x00080e09

00080e08 <win_draw_child>:
{
   80e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   80e0a:	b085      	sub	sp, #20
	clip.SE.x = child->attributes.area.pos.x
   80e0c:	8804      	ldrh	r4, [r0, #0]
			+ child->attributes.area.size.x - 1;
   80e0e:	8882      	ldrh	r2, [r0, #4]
	clip.SE.y = child->attributes.area.pos.y
   80e10:	8846      	ldrh	r6, [r0, #2]
			+ child->attributes.area.size.y - 1;
   80e12:	88c3      	ldrh	r3, [r0, #6]
	clip.origin.x += parent_clip->origin.x;
   80e14:	880f      	ldrh	r7, [r1, #0]
   80e16:	19e5      	adds	r5, r4, r7
   80e18:	b22d      	sxth	r5, r5
   80e1a:	f8ad 5004 	strh.w	r5, [sp, #4]
	clip.NW.x += parent_clip->origin.x;
   80e1e:	f8ad 5008 	strh.w	r5, [sp, #8]
	clip.SE.x += parent_clip->origin.x;
   80e22:	3f01      	subs	r7, #1
   80e24:	443c      	add	r4, r7
   80e26:	4414      	add	r4, r2
   80e28:	b222      	sxth	r2, r4
   80e2a:	f8ad 200c 	strh.w	r2, [sp, #12]
	clip.origin.y += parent_clip->origin.y;
   80e2e:	884f      	ldrh	r7, [r1, #2]
   80e30:	19f4      	adds	r4, r6, r7
   80e32:	b224      	sxth	r4, r4
   80e34:	f8ad 4006 	strh.w	r4, [sp, #6]
	clip.NW.y += parent_clip->origin.y;
   80e38:	f8ad 400a 	strh.w	r4, [sp, #10]
	clip.SE.y += parent_clip->origin.y;
   80e3c:	3f01      	subs	r7, #1
   80e3e:	443e      	add	r6, r7
   80e40:	4433      	add	r3, r6
   80e42:	b21b      	sxth	r3, r3
   80e44:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (clip.NW.x < parent_clip->NW.x) {
   80e48:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
   80e4c:	42b5      	cmp	r5, r6
		clip.NW.x = parent_clip->NW.x;
   80e4e:	bfb8      	it	lt
   80e50:	f8ad 6008 	strhlt.w	r6, [sp, #8]
	if (clip.NW.y < parent_clip->NW.y) {
   80e54:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
   80e58:	42ac      	cmp	r4, r5
		clip.NW.y = parent_clip->NW.y;
   80e5a:	bfb8      	it	lt
   80e5c:	f8ad 500a 	strhlt.w	r5, [sp, #10]
	if (clip.SE.x > parent_clip->SE.x) {
   80e60:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
   80e64:	42a2      	cmp	r2, r4
		clip.SE.x = parent_clip->SE.x;
   80e66:	bfc8      	it	gt
   80e68:	f8ad 400c 	strhgt.w	r4, [sp, #12]
	if (clip.SE.y > parent_clip->SE.y) {
   80e6c:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
   80e70:	4293      	cmp	r3, r2
		clip.SE.y = parent_clip->SE.y;
   80e72:	bfc8      	it	gt
   80e74:	f8ad 200e 	strhgt.w	r2, [sp, #14]
	if ((clip.NW.x > clip.SE.x) || (clip.NW.y > clip.SE.y)) {
   80e78:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   80e7c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   80e80:	429a      	cmp	r2, r3
   80e82:	dc05      	bgt.n	80e90 <win_draw_child+0x88>
   80e84:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
   80e88:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
   80e8c:	429a      	cmp	r2, r3
   80e8e:	dd01      	ble.n	80e94 <win_draw_child+0x8c>
}
   80e90:	b005      	add	sp, #20
   80e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	win_draw_contents(child, &clip);
   80e94:	a901      	add	r1, sp, #4
   80e96:	4b01      	ldr	r3, [pc, #4]	; (80e9c <win_draw_child+0x94>)
   80e98:	4798      	blx	r3
   80e9a:	e7f9      	b.n	80e90 <win_draw_child+0x88>
   80e9c:	00080d89 	.word	0x00080d89

00080ea0 <win_init>:
{
   80ea0:	b570      	push	{r4, r5, r6, lr}
	win_root.attributes.area.size.x = gfx_get_width();
   80ea2:	4e10      	ldr	r6, [pc, #64]	; (80ee4 <win_init+0x44>)
   80ea4:	47b0      	blx	r6
   80ea6:	4c10      	ldr	r4, [pc, #64]	; (80ee8 <win_init+0x48>)
   80ea8:	80a0      	strh	r0, [r4, #4]
	win_root.attributes.area.size.y = gfx_get_height();
   80eaa:	4d10      	ldr	r5, [pc, #64]	; (80eec <win_init+0x4c>)
   80eac:	47a8      	blx	r5
   80eae:	80e0      	strh	r0, [r4, #6]
	win_root.attributes.background = &win_root_background;
   80eb0:	4b0f      	ldr	r3, [pc, #60]	; (80ef0 <win_init+0x50>)
   80eb2:	60a3      	str	r3, [r4, #8]
	win_event_queue.free = WIN_EVENT_QUEUE_SIZE;
   80eb4:	4a0f      	ldr	r2, [pc, #60]	; (80ef4 <win_init+0x54>)
   80eb6:	230a      	movs	r3, #10
   80eb8:	7413      	strb	r3, [r2, #16]
	win_event_queue.start = win_event_queue_buffer;
   80eba:	4b0f      	ldr	r3, [pc, #60]	; (80ef8 <win_init+0x58>)
   80ebc:	6013      	str	r3, [r2, #0]
	win_event_queue.front = win_event_queue_buffer;
   80ebe:	6093      	str	r3, [r2, #8]
	win_event_queue.end = &win_event_queue_buffer[WIN_EVENT_QUEUE_SIZE - 1];
   80ec0:	3390      	adds	r3, #144	; 0x90
   80ec2:	6053      	str	r3, [r2, #4]
		= &win_event_queue_buffer[WIN_EVENT_QUEUE_SIZE - 1];
   80ec4:	60d3      	str	r3, [r2, #12]
	win_keyboard_focus = &win_root;
   80ec6:	4b0d      	ldr	r3, [pc, #52]	; (80efc <win_init+0x5c>)
   80ec8:	601c      	str	r4, [r3, #0]
	win_last_pointer_pos.x = gfx_get_width() / 2;
   80eca:	47b0      	blx	r6
   80ecc:	4c0c      	ldr	r4, [pc, #48]	; (80f00 <win_init+0x60>)
   80ece:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   80ed2:	1040      	asrs	r0, r0, #1
   80ed4:	8020      	strh	r0, [r4, #0]
	win_last_pointer_pos.y = gfx_get_height() / 2;
   80ed6:	47a8      	blx	r5
   80ed8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   80edc:	1040      	asrs	r0, r0, #1
   80ede:	8060      	strh	r0, [r4, #2]
   80ee0:	bd70      	pop	{r4, r5, r6, pc}
   80ee2:	bf00      	nop
   80ee4:	000808d5 	.word	0x000808d5
   80ee8:	20070cf4 	.word	0x20070cf4
   80eec:	000808e1 	.word	0x000808e1
   80ef0:	20070d20 	.word	0x20070d20
   80ef4:	20070b98 	.word	0x20070b98
   80ef8:	20070c4c 	.word	0x20070c4c
   80efc:	20070cec 	.word	0x20070cec
   80f00:	20070cf0 	.word	0x20070cf0

00080f04 <win_get_root>:
}
   80f04:	4800      	ldr	r0, [pc, #0]	; (80f08 <win_get_root+0x4>)
   80f06:	4770      	bx	lr
   80f08:	20070cf4 	.word	0x20070cf4

00080f0c <win_get_attributes>:
}
   80f0c:	4770      	bx	lr

00080f0e <win_compute_union>:
{
   80f0e:	b410      	push	{r4}
	expand_left = area->pos.x - merge->pos.x;
   80f10:	f9b1 2000 	ldrsh.w	r2, [r1]
   80f14:	8803      	ldrh	r3, [r0, #0]
   80f16:	1a9b      	subs	r3, r3, r2
   80f18:	b29b      	uxth	r3, r3
	if (expand_left > 0) {
   80f1a:	b21c      	sxth	r4, r3
   80f1c:	2c00      	cmp	r4, #0
   80f1e:	dd03      	ble.n	80f28 <win_compute_union+0x1a>
		area->pos.x -= expand_left;
   80f20:	8002      	strh	r2, [r0, #0]
		area->size.x += expand_left;
   80f22:	8882      	ldrh	r2, [r0, #4]
   80f24:	4413      	add	r3, r2
   80f26:	8083      	strh	r3, [r0, #4]
	expand_top = area->pos.y - merge->pos.y;
   80f28:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   80f2c:	8843      	ldrh	r3, [r0, #2]
   80f2e:	1a9b      	subs	r3, r3, r2
   80f30:	b29b      	uxth	r3, r3
	if (expand_top > 0) {
   80f32:	b21c      	sxth	r4, r3
   80f34:	2c00      	cmp	r4, #0
   80f36:	dd03      	ble.n	80f40 <win_compute_union+0x32>
		area->pos.y -= expand_top;
   80f38:	8042      	strh	r2, [r0, #2]
		area->size.y += expand_top;
   80f3a:	88c2      	ldrh	r2, [r0, #6]
   80f3c:	4413      	add	r3, r2
   80f3e:	80c3      	strh	r3, [r0, #6]
   80f40:	880b      	ldrh	r3, [r1, #0]
   80f42:	888a      	ldrh	r2, [r1, #4]
   80f44:	4413      	add	r3, r2
   80f46:	8802      	ldrh	r2, [r0, #0]
   80f48:	1a9b      	subs	r3, r3, r2
   80f4a:	b29b      	uxth	r3, r3
			- (area->pos.x + area->size.x);
   80f4c:	8882      	ldrh	r2, [r0, #4]
   80f4e:	1a9a      	subs	r2, r3, r2
	if (expand_width > 0) {
   80f50:	b212      	sxth	r2, r2
   80f52:	2a00      	cmp	r2, #0
		area->size.x += expand_width;
   80f54:	bfc8      	it	gt
   80f56:	8083      	strhgt	r3, [r0, #4]
   80f58:	884b      	ldrh	r3, [r1, #2]
   80f5a:	88ca      	ldrh	r2, [r1, #6]
   80f5c:	4413      	add	r3, r2
   80f5e:	8842      	ldrh	r2, [r0, #2]
   80f60:	1a9b      	subs	r3, r3, r2
   80f62:	b29b      	uxth	r3, r3
			- (area->pos.y + area->size.y);
   80f64:	88c2      	ldrh	r2, [r0, #6]
   80f66:	1a9a      	subs	r2, r3, r2
	if (expand_height > 0) {
   80f68:	b212      	sxth	r2, r2
   80f6a:	2a00      	cmp	r2, #0
		area->size.y += expand_height;
   80f6c:	bfc8      	it	gt
   80f6e:	80c3      	strhgt	r3, [r0, #6]
}
   80f70:	bc10      	pop	{r4}
   80f72:	4770      	bx	lr

00080f74 <win_compute_intersection>:
{
   80f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	const gfx_coord_t right_x = area->pos.x + area->size.x - 1;
   80f76:	f9b1 4000 	ldrsh.w	r4, [r1]
	if (clip->SE.x < area->pos.x) {
   80f7a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   80f7e:	42ac      	cmp	r4, r5
   80f80:	dc26      	bgt.n	80fd0 <win_compute_intersection+0x5c>
	const gfx_coord_t bottom_y = area->pos.y + area->size.y - 1;
   80f82:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
	if (clip->SE.y < area->pos.y) {
   80f86:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
   80f8a:	42b2      	cmp	r2, r6
   80f8c:	dc22      	bgt.n	80fd4 <win_compute_intersection+0x60>
	const gfx_coord_t right_x = area->pos.x + area->size.x - 1;
   80f8e:	888b      	ldrh	r3, [r1, #4]
   80f90:	4423      	add	r3, r4
   80f92:	3b01      	subs	r3, #1
   80f94:	b21b      	sxth	r3, r3
	if (clip->NW.x > right_x) {
   80f96:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
   80f9a:	42bb      	cmp	r3, r7
   80f9c:	db1c      	blt.n	80fd8 <win_compute_intersection+0x64>
	const gfx_coord_t bottom_y = area->pos.y + area->size.y - 1;
   80f9e:	f8b1 e006 	ldrh.w	lr, [r1, #6]
   80fa2:	4472      	add	r2, lr
   80fa4:	3a01      	subs	r2, #1
   80fa6:	b212      	sxth	r2, r2
	if (clip->NW.y > bottom_y) {
   80fa8:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
   80fac:	4572      	cmp	r2, lr
   80fae:	db15      	blt.n	80fdc <win_compute_intersection+0x68>
	if (clip->NW.x < area->pos.x) {
   80fb0:	42bc      	cmp	r4, r7
		clip->NW.x = area->pos.x;
   80fb2:	bfc8      	it	gt
   80fb4:	8084      	strhgt	r4, [r0, #4]
	if (clip->NW.y < area->pos.y) {
   80fb6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
   80fba:	458e      	cmp	lr, r1
		clip->NW.y = area->pos.y;
   80fbc:	bfb8      	it	lt
   80fbe:	80c1      	strhlt	r1, [r0, #6]
	if (clip->SE.x > right_x) {
   80fc0:	42ab      	cmp	r3, r5
		clip->SE.x = right_x;
   80fc2:	bfb8      	it	lt
   80fc4:	8103      	strhlt	r3, [r0, #8]
	if (clip->SE.y > bottom_y) {
   80fc6:	42b2      	cmp	r2, r6
   80fc8:	da0a      	bge.n	80fe0 <win_compute_intersection+0x6c>
		clip->SE.y = bottom_y;
   80fca:	8142      	strh	r2, [r0, #10]
	return true;
   80fcc:	2001      	movs	r0, #1
   80fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   80fd0:	2000      	movs	r0, #0
   80fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   80fd4:	2000      	movs	r0, #0
   80fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   80fd8:	2000      	movs	r0, #0
   80fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   80fdc:	2000      	movs	r0, #0
   80fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   80fe0:	2001      	movs	r0, #1
}
   80fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080fe4 <win_compute_clipping>:
{
   80fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80fe8:	4605      	mov	r5, r0
   80fea:	4614      	mov	r4, r2
	clip->origin = win->attributes.area.pos;
   80fec:	6800      	ldr	r0, [r0, #0]
   80fee:	6010      	str	r0, [r2, #0]
	clip->NW = win->attributes.area.pos;
   80ff0:	6828      	ldr	r0, [r5, #0]
   80ff2:	6050      	str	r0, [r2, #4]
			+ win->attributes.area.size.x - 1;
   80ff4:	882b      	ldrh	r3, [r5, #0]
   80ff6:	88aa      	ldrh	r2, [r5, #4]
   80ff8:	4413      	add	r3, r2
   80ffa:	3b01      	subs	r3, #1
	clip->SE.x = win->attributes.area.pos.x
   80ffc:	8123      	strh	r3, [r4, #8]
			+ win->attributes.area.size.y - 1;
   80ffe:	886b      	ldrh	r3, [r5, #2]
   81000:	88ea      	ldrh	r2, [r5, #6]
   81002:	4413      	add	r3, r2
   81004:	3b01      	subs	r3, #1
	clip->SE.y = win->attributes.area.pos.y
   81006:	8163      	strh	r3, [r4, #10]
	if (!win_compute_intersection(clip, dirty_area)) {
   81008:	4620      	mov	r0, r4
   8100a:	4b2b      	ldr	r3, [pc, #172]	; (810b8 <win_compute_clipping+0xd4>)
   8100c:	4798      	blx	r3
   8100e:	4607      	mov	r7, r0
   81010:	2800      	cmp	r0, #0
   81012:	d04c      	beq.n	810ae <win_compute_clipping+0xca>
	while (win != &win_root) {
   81014:	4b29      	ldr	r3, [pc, #164]	; (810bc <win_compute_clipping+0xd8>)
   81016:	429d      	cmp	r5, r3
   81018:	d049      	beq.n	810ae <win_compute_clipping+0xca>
			clip->NW.x = 0;
   8101a:	f04f 0e00 	mov.w	lr, #0
	while (win != &win_root) {
   8101e:	461e      	mov	r6, r3
		win = win->parent;
   81020:	69ad      	ldr	r5, [r5, #24]
		if (clip->NW.x < 0) {
   81022:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   81026:	2b00      	cmp	r3, #0
			clip->NW.x = 0;
   81028:	bfb8      	it	lt
   8102a:	f8a4 e004 	strhlt.w	lr, [r4, #4]
		if (clip->NW.y < 0) {
   8102e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   81032:	2b00      	cmp	r3, #0
			clip->NW.y = 0;
   81034:	bfb8      	it	lt
   81036:	f8a4 e006 	strhlt.w	lr, [r4, #6]
		if (clip->SE.x >= win->attributes.area.size.x) {
   8103a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   8103e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   81042:	429a      	cmp	r2, r3
			clip->SE.x = win->attributes.area.size.x - 1;
   81044:	bfa4      	itt	ge
   81046:	f103 33ff 	addge.w	r3, r3, #4294967295
   8104a:	8123      	strhge	r3, [r4, #8]
		if (clip->SE.y >= win->attributes.area.size.y) {
   8104c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   81050:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   81054:	429a      	cmp	r2, r3
			clip->SE.y = win->attributes.area.size.y - 1;
   81056:	bfa4      	itt	ge
   81058:	f103 33ff 	addge.w	r3, r3, #4294967295
   8105c:	8163      	strhge	r3, [r4, #10]
		if ((clip->NW.x > clip->SE.x) || (clip->NW.y > clip->SE.y)) {
   8105e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   81062:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   81066:	429a      	cmp	r2, r3
   81068:	dc20      	bgt.n	810ac <win_compute_clipping+0xc8>
   8106a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   8106e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   81072:	4288      	cmp	r0, r1
   81074:	dc1e      	bgt.n	810b4 <win_compute_clipping+0xd0>
		clip->origin.x += win->attributes.area.pos.x;
   81076:	f8b4 c000 	ldrh.w	ip, [r4]
   8107a:	f8b5 8000 	ldrh.w	r8, [r5]
   8107e:	44c4      	add	ip, r8
   81080:	f8a4 c000 	strh.w	ip, [r4]
		clip->NW.x += win->attributes.area.pos.x;
   81084:	f8b5 c000 	ldrh.w	ip, [r5]
   81088:	4462      	add	r2, ip
   8108a:	80a2      	strh	r2, [r4, #4]
		clip->SE.x += win->attributes.area.pos.x;
   8108c:	882a      	ldrh	r2, [r5, #0]
   8108e:	4413      	add	r3, r2
   81090:	8123      	strh	r3, [r4, #8]
		clip->origin.y += win->attributes.area.pos.y;
   81092:	8863      	ldrh	r3, [r4, #2]
   81094:	886a      	ldrh	r2, [r5, #2]
   81096:	4413      	add	r3, r2
   81098:	8063      	strh	r3, [r4, #2]
		clip->NW.y += win->attributes.area.pos.y;
   8109a:	886b      	ldrh	r3, [r5, #2]
   8109c:	4418      	add	r0, r3
   8109e:	80e0      	strh	r0, [r4, #6]
		clip->SE.y += win->attributes.area.pos.y;
   810a0:	886b      	ldrh	r3, [r5, #2]
   810a2:	4419      	add	r1, r3
   810a4:	8161      	strh	r1, [r4, #10]
	while (win != &win_root) {
   810a6:	42b5      	cmp	r5, r6
   810a8:	d1ba      	bne.n	81020 <win_compute_clipping+0x3c>
   810aa:	e000      	b.n	810ae <win_compute_clipping+0xca>
			return false;
   810ac:	2700      	movs	r7, #0
}
   810ae:	4638      	mov	r0, r7
   810b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
   810b4:	2700      	movs	r7, #0
   810b6:	e7fa      	b.n	810ae <win_compute_clipping+0xca>
   810b8:	00080f75 	.word	0x00080f75
   810bc:	20070cf4 	.word	0x20070cf4

000810c0 <win_draw>:
{
   810c0:	b570      	push	{r4, r5, r6, lr}
   810c2:	b084      	sub	sp, #16
   810c4:	4604      	mov	r4, r0
   810c6:	460d      	mov	r5, r1
	if (!win_compute_clipping(win, dirty_area, &clip)) {
   810c8:	aa01      	add	r2, sp, #4
   810ca:	4b1a      	ldr	r3, [pc, #104]	; (81134 <win_draw+0x74>)
   810cc:	4798      	blx	r3
   810ce:	b198      	cbz	r0, 810f8 <win_draw+0x38>
	if (win->parent && (win->attributes.behavior
   810d0:	69a3      	ldr	r3, [r4, #24]
   810d2:	b11b      	cbz	r3, 810dc <win_draw+0x1c>
   810d4:	7c23      	ldrb	r3, [r4, #16]
   810d6:	f013 0f02 	tst.w	r3, #2
   810da:	d109      	bne.n	810f0 <win_draw+0x30>
	win_draw_contents(win, &clip);
   810dc:	a901      	add	r1, sp, #4
   810de:	4620      	mov	r0, r4
   810e0:	4b15      	ldr	r3, [pc, #84]	; (81138 <win_draw+0x78>)
   810e2:	4798      	blx	r3
	while (win != &win_root) {
   810e4:	4b15      	ldr	r3, [pc, #84]	; (8113c <win_draw+0x7c>)
   810e6:	429c      	cmp	r4, r3
   810e8:	d006      	beq.n	810f8 <win_draw+0x38>
				win_draw_child(win, &clip);
   810ea:	4d15      	ldr	r5, [pc, #84]	; (81140 <win_draw+0x80>)
	while (win != &win_root) {
   810ec:	461e      	mov	r6, r3
   810ee:	e008      	b.n	81102 <win_draw+0x42>
		win_draw_parent(win, dirty_area);
   810f0:	4629      	mov	r1, r5
   810f2:	4620      	mov	r0, r4
   810f4:	4b13      	ldr	r3, [pc, #76]	; (81144 <win_draw+0x84>)
   810f6:	4798      	blx	r3
}
   810f8:	b004      	add	sp, #16
   810fa:	bd70      	pop	{r4, r5, r6, pc}
		while (win != win->parent->top_child) {
   810fc:	461c      	mov	r4, r3
	while (win != &win_root) {
   810fe:	42b3      	cmp	r3, r6
   81100:	d0fa      	beq.n	810f8 <win_draw+0x38>
		clip.origin.x -= win->attributes.area.pos.x;
   81102:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   81106:	8822      	ldrh	r2, [r4, #0]
   81108:	1a9b      	subs	r3, r3, r2
   8110a:	f8ad 3004 	strh.w	r3, [sp, #4]
		clip.origin.y -= win->attributes.area.pos.y;
   8110e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81112:	8862      	ldrh	r2, [r4, #2]
   81114:	1a9b      	subs	r3, r3, r2
   81116:	f8ad 3006 	strh.w	r3, [sp, #6]
		while (win != win->parent->top_child) {
   8111a:	69a3      	ldr	r3, [r4, #24]
   8111c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   8111e:	4294      	cmp	r4, r2
   81120:	d0ec      	beq.n	810fc <win_draw+0x3c>
			win = win->prev_sibling;
   81122:	69e4      	ldr	r4, [r4, #28]
			if (win->is_mapped) {
   81124:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   81128:	2b00      	cmp	r3, #0
   8112a:	d0f6      	beq.n	8111a <win_draw+0x5a>
				win_draw_child(win, &clip);
   8112c:	a901      	add	r1, sp, #4
   8112e:	4620      	mov	r0, r4
   81130:	47a8      	blx	r5
   81132:	e7f2      	b.n	8111a <win_draw+0x5a>
   81134:	00080fe5 	.word	0x00080fe5
   81138:	00080d89 	.word	0x00080d89
   8113c:	20070cf4 	.word	0x20070cf4
   81140:	00080e09 	.word	0x00080e09
   81144:	00081149 	.word	0x00081149

00081148 <win_draw_parent>:
{
   81148:	b510      	push	{r4, lr}
   8114a:	b082      	sub	sp, #8
   8114c:	4602      	mov	r2, r0
	struct win_area area = *dirty_area;
   8114e:	466b      	mov	r3, sp
   81150:	6808      	ldr	r0, [r1, #0]
   81152:	6849      	ldr	r1, [r1, #4]
   81154:	c303      	stmia	r3!, {r0, r1}
	if (win_translate_area_to_parent(&area, child->parent)) {
   81156:	6990      	ldr	r0, [r2, #24]
	if (area->pos.x < 0) {
   81158:	f9bd 3000 	ldrsh.w	r3, [sp]
   8115c:	2b00      	cmp	r3, #0
   8115e:	db30      	blt.n	811c2 <win_draw_parent+0x7a>
	if (area->pos.y < 0) {
   81160:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   81164:	2b00      	cmp	r3, #0
   81166:	db35      	blt.n	811d4 <win_draw_parent+0x8c>
	if ((area->pos.x + area->size.x) > parent_area->size.x) {
   81168:	f9bd 2000 	ldrsh.w	r2, [sp]
   8116c:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   81170:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   81174:	4413      	add	r3, r2
   81176:	428b      	cmp	r3, r1
		area->size.x = parent_area->size.x - area->pos.x;
   81178:	bfc4      	itt	gt
   8117a:	1a89      	subgt	r1, r1, r2
   8117c:	f8ad 1004 	strhgt.w	r1, [sp, #4]
	if ((area->pos.y + area->size.y) > parent_area->size.y) {
   81180:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   81184:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
   81188:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
   8118c:	4419      	add	r1, r3
   8118e:	42a1      	cmp	r1, r4
		area->size.y = parent_area->size.y - area->pos.y;
   81190:	bfc4      	itt	gt
   81192:	1ae4      	subgt	r4, r4, r3
   81194:	f8ad 4006 	strhgt.w	r4, [sp, #6]
	if ((area->size.x <= 0) || (area->size.y <= 0)) {
   81198:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   8119c:	2900      	cmp	r1, #0
   8119e:	dd0e      	ble.n	811be <win_draw_parent+0x76>
   811a0:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
   811a4:	2900      	cmp	r1, #0
   811a6:	dd0a      	ble.n	811be <win_draw_parent+0x76>
	area->pos.x += parent_area->pos.x;
   811a8:	8801      	ldrh	r1, [r0, #0]
   811aa:	440a      	add	r2, r1
   811ac:	f8ad 2000 	strh.w	r2, [sp]
	area->pos.y += parent_area->pos.y;
   811b0:	8842      	ldrh	r2, [r0, #2]
   811b2:	4413      	add	r3, r2
   811b4:	f8ad 3002 	strh.w	r3, [sp, #2]
		win_draw(child->parent, &area);
   811b8:	4669      	mov	r1, sp
   811ba:	4b0b      	ldr	r3, [pc, #44]	; (811e8 <win_draw_parent+0xa0>)
   811bc:	4798      	blx	r3
}
   811be:	b002      	add	sp, #8
   811c0:	bd10      	pop	{r4, pc}
		area->size.x += area->pos.x;
   811c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   811c6:	4413      	add	r3, r2
   811c8:	f8ad 3004 	strh.w	r3, [sp, #4]
		area->pos.x = 0;
   811cc:	2300      	movs	r3, #0
   811ce:	f8ad 3000 	strh.w	r3, [sp]
   811d2:	e7c5      	b.n	81160 <win_draw_parent+0x18>
		area->size.y += area->pos.y;
   811d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   811d8:	4413      	add	r3, r2
   811da:	f8ad 3006 	strh.w	r3, [sp, #6]
		area->pos.y = 0;
   811de:	2300      	movs	r3, #0
   811e0:	f8ad 3002 	strh.w	r3, [sp, #2]
   811e4:	e7c0      	b.n	81168 <win_draw_parent+0x20>
   811e6:	bf00      	nop
   811e8:	000810c1 	.word	0x000810c1

000811ec <win_set_area>:
{
   811ec:	b570      	push	{r4, r5, r6, lr}
   811ee:	b084      	sub	sp, #16
   811f0:	4604      	mov	r4, r0
   811f2:	460d      	mov	r5, r1
   811f4:	f88d 2007 	strb.w	r2, [sp, #7]
	dirty_area = win->attributes.area;
   811f8:	c803      	ldmia	r0, {r0, r1}
   811fa:	ab04      	add	r3, sp, #16
   811fc:	e903 0003 	stmdb	r3, {r0, r1}
	if (attribute_mask & WIN_ATTR_POSITION) {
   81200:	f012 0f01 	tst.w	r2, #1
   81204:	d129      	bne.n	8125a <win_set_area+0x6e>
	bool exposed_areas = false;
   81206:	2600      	movs	r6, #0
	if (attribute_mask & WIN_ATTR_SIZE) {
   81208:	f89d 3007 	ldrb.w	r3, [sp, #7]
   8120c:	f013 0f02 	tst.w	r3, #2
   81210:	d012      	beq.n	81238 <win_set_area+0x4c>
		if ((new_area->size.x < win->attributes.area.size.x) ||
   81212:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   81216:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   8121a:	429a      	cmp	r2, r3
   8121c:	db25      	blt.n	8126a <win_set_area+0x7e>
   8121e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
   81222:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
			exposed_areas = true;
   81226:	429a      	cmp	r2, r3
   81228:	bfb8      	it	lt
   8122a:	2601      	movlt	r6, #1
		win->attributes.area.size = new_area->size;
   8122c:	6868      	ldr	r0, [r5, #4]
   8122e:	6060      	str	r0, [r4, #4]
		win_compute_union(&dirty_area, new_area);
   81230:	4629      	mov	r1, r5
   81232:	a802      	add	r0, sp, #8
   81234:	4b10      	ldr	r3, [pc, #64]	; (81278 <win_set_area+0x8c>)
   81236:	4798      	blx	r3
	win_handle_event(win, WIN_EVENT_ATTRIBUTES, &attribute_mask);
   81238:	f10d 0207 	add.w	r2, sp, #7
   8123c:	2108      	movs	r1, #8
   8123e:	4620      	mov	r0, r4
   81240:	4b0e      	ldr	r3, [pc, #56]	; (8127c <win_set_area+0x90>)
   81242:	4798      	blx	r3
	if (win_is_visible(win)) {
   81244:	4620      	mov	r0, r4
   81246:	4b0e      	ldr	r3, [pc, #56]	; (81280 <win_set_area+0x94>)
   81248:	4798      	blx	r3
   8124a:	b120      	cbz	r0, 81256 <win_set_area+0x6a>
		if (exposed_areas) {
   8124c:	b97e      	cbnz	r6, 8126e <win_set_area+0x82>
			win_draw(win, &dirty_area);
   8124e:	a902      	add	r1, sp, #8
   81250:	4620      	mov	r0, r4
   81252:	4b0c      	ldr	r3, [pc, #48]	; (81284 <win_set_area+0x98>)
   81254:	4798      	blx	r3
}
   81256:	b004      	add	sp, #16
   81258:	bd70      	pop	{r4, r5, r6, pc}
		win->attributes.area.pos = new_area->pos;
   8125a:	6828      	ldr	r0, [r5, #0]
   8125c:	6020      	str	r0, [r4, #0]
		win_compute_union(&dirty_area, new_area);
   8125e:	4629      	mov	r1, r5
   81260:	a802      	add	r0, sp, #8
   81262:	4b05      	ldr	r3, [pc, #20]	; (81278 <win_set_area+0x8c>)
   81264:	4798      	blx	r3
		exposed_areas = true;
   81266:	2601      	movs	r6, #1
   81268:	e7ce      	b.n	81208 <win_set_area+0x1c>
			exposed_areas = true;
   8126a:	2601      	movs	r6, #1
   8126c:	e7de      	b.n	8122c <win_set_area+0x40>
			win_draw_parent(win, &dirty_area);
   8126e:	a902      	add	r1, sp, #8
   81270:	4620      	mov	r0, r4
   81272:	4b05      	ldr	r3, [pc, #20]	; (81288 <win_set_area+0x9c>)
   81274:	4798      	blx	r3
   81276:	e7ee      	b.n	81256 <win_set_area+0x6a>
   81278:	00080f0f 	.word	0x00080f0f
   8127c:	00080d79 	.word	0x00080d79
   81280:	00080d69 	.word	0x00080d69
   81284:	000810c1 	.word	0x000810c1
   81288:	00081149 	.word	0x00081149

0008128c <win_set_attributes>:
{
   8128c:	b530      	push	{r4, r5, lr}
   8128e:	b085      	sub	sp, #20
   81290:	4604      	mov	r4, r0
   81292:	460b      	mov	r3, r1
   81294:	f88d 2007 	strb.w	r2, [sp, #7]
	dirty_area = win->attributes.area;
   81298:	c803      	ldmia	r0, {r0, r1}
   8129a:	ad04      	add	r5, sp, #16
   8129c:	e905 0003 	stmdb	r5, {r0, r1}
	if (attribute_mask & WIN_ATTR_BACKGROUND) {
   812a0:	f012 0f04 	tst.w	r2, #4
		win->attributes.background = new_attributes->background;
   812a4:	bf1d      	ittte	ne
   812a6:	6899      	ldrne	r1, [r3, #8]
   812a8:	60a1      	strne	r1, [r4, #8]
		needs_redraw = true;
   812aa:	2501      	movne	r5, #1
	bool needs_redraw = false;
   812ac:	2500      	moveq	r5, #0
	if (attribute_mask & WIN_ATTR_EVENTHANDLER) {
   812ae:	f012 0f08 	tst.w	r2, #8
		win->attributes.event_handler = new_attributes->event_handler;
   812b2:	bf1c      	itt	ne
   812b4:	68d9      	ldrne	r1, [r3, #12]
   812b6:	60e1      	strne	r1, [r4, #12]
	if (attribute_mask & WIN_ATTR_BEHAVIOR) {
   812b8:	f012 0f10 	tst.w	r2, #16
		win->attributes.behavior = new_attributes->behavior;
   812bc:	bf1c      	itt	ne
   812be:	7c19      	ldrbne	r1, [r3, #16]
   812c0:	7421      	strbne	r1, [r4, #16]
	if (attribute_mask & WIN_ATTR_CUSTOM) {
   812c2:	f012 0f20 	tst.w	r2, #32
		win->attributes.custom = new_attributes->custom;
   812c6:	bf1c      	itt	ne
   812c8:	6959      	ldrne	r1, [r3, #20]
   812ca:	6161      	strne	r1, [r4, #20]
	if (attribute_mask & (WIN_ATTR_POSITION | WIN_ATTR_SIZE)) {
   812cc:	f012 0f03 	tst.w	r2, #3
   812d0:	d10f      	bne.n	812f2 <win_set_attributes+0x66>
		win_handle_event(win, WIN_EVENT_ATTRIBUTES, &attribute_mask);
   812d2:	f10d 0207 	add.w	r2, sp, #7
   812d6:	2108      	movs	r1, #8
   812d8:	4620      	mov	r0, r4
   812da:	4b09      	ldr	r3, [pc, #36]	; (81300 <win_set_attributes+0x74>)
   812dc:	4798      	blx	r3
		if (needs_redraw && win_is_visible(win)) {
   812de:	b165      	cbz	r5, 812fa <win_set_attributes+0x6e>
   812e0:	4620      	mov	r0, r4
   812e2:	4b08      	ldr	r3, [pc, #32]	; (81304 <win_set_attributes+0x78>)
   812e4:	4798      	blx	r3
   812e6:	b140      	cbz	r0, 812fa <win_set_attributes+0x6e>
			win_draw(win, &dirty_area);
   812e8:	a902      	add	r1, sp, #8
   812ea:	4620      	mov	r0, r4
   812ec:	4b06      	ldr	r3, [pc, #24]	; (81308 <win_set_attributes+0x7c>)
   812ee:	4798      	blx	r3
}
   812f0:	e003      	b.n	812fa <win_set_attributes+0x6e>
		win_set_area(win, &(new_attributes->area), attribute_mask);
   812f2:	4619      	mov	r1, r3
   812f4:	4620      	mov	r0, r4
   812f6:	4b05      	ldr	r3, [pc, #20]	; (8130c <win_set_attributes+0x80>)
   812f8:	4798      	blx	r3
}
   812fa:	b005      	add	sp, #20
   812fc:	bd30      	pop	{r4, r5, pc}
   812fe:	bf00      	nop
   81300:	00080d79 	.word	0x00080d79
   81304:	00080d69 	.word	0x00080d69
   81308:	000810c1 	.word	0x000810c1
   8130c:	000811ed 	.word	0x000811ed

00081310 <win_redraw>:
{
   81310:	b510      	push	{r4, lr}
   81312:	4604      	mov	r4, r0
	if (win_is_visible(win)) {
   81314:	4b04      	ldr	r3, [pc, #16]	; (81328 <win_redraw+0x18>)
   81316:	4798      	blx	r3
   81318:	b900      	cbnz	r0, 8131c <win_redraw+0xc>
   8131a:	bd10      	pop	{r4, pc}
		win_draw(win, dirty_area);
   8131c:	4621      	mov	r1, r4
   8131e:	4620      	mov	r0, r4
   81320:	4b02      	ldr	r3, [pc, #8]	; (8132c <win_redraw+0x1c>)
   81322:	4798      	blx	r3
}
   81324:	e7f9      	b.n	8131a <win_redraw+0xa>
   81326:	bf00      	nop
   81328:	00080d69 	.word	0x00080d69
   8132c:	000810c1 	.word	0x000810c1

00081330 <win_show>:
{
   81330:	b508      	push	{r3, lr}
	if (win->is_mapped) {
   81332:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   81336:	b103      	cbz	r3, 8133a <win_show+0xa>
   81338:	bd08      	pop	{r3, pc}
	win->is_mapped = true;
   8133a:	2301      	movs	r3, #1
   8133c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	win_redraw(win);
   81340:	4b01      	ldr	r3, [pc, #4]	; (81348 <win_show+0x18>)
   81342:	4798      	blx	r3
   81344:	e7f8      	b.n	81338 <win_show+0x8>
   81346:	bf00      	nop
   81348:	00081311 	.word	0x00081311

0008134c <membag_init>:
 * This function sets up the membags, allocates memory from the memory pool, and
 * initializes them. Any existing allocations are destroyed and all memory pools
 * reset to their initial states.
 */
void membag_init(void)
{
   8134c:	b430      	push	{r4, r5}
	uint8_t i;
	uintptr_t poolptr;

	poolptr = (uintptr_t)membag_pool;
   8134e:	4a09      	ldr	r2, [pc, #36]	; (81374 <membag_init+0x28>)
   81350:	4b09      	ldr	r3, [pc, #36]	; (81378 <membag_init+0x2c>)
   81352:	f103 0578 	add.w	r5, r3, #120	; 0x78
				membag_list[i].num_blocks);
		membag_list[i].end = poolptr;
		membag_list[i].blocks_free = membag_list[i].num_blocks;

		/* Mark all blocks as free. */
		membag_list[i].allocated = 0;
   81356:	2400      	movs	r4, #0
		membag_list[i].start = poolptr;
   81358:	609a      	str	r2, [r3, #8]
				membag_list[i].num_blocks);
   8135a:	6859      	ldr	r1, [r3, #4]
		poolptr += (membag_list[i].block_size *
   8135c:	6818      	ldr	r0, [r3, #0]
   8135e:	fb00 2201 	mla	r2, r0, r1, r2
		membag_list[i].end = poolptr;
   81362:	60da      	str	r2, [r3, #12]
		membag_list[i].blocks_free = membag_list[i].num_blocks;
   81364:	7519      	strb	r1, [r3, #20]
		membag_list[i].allocated = 0;
   81366:	611c      	str	r4, [r3, #16]
   81368:	3318      	adds	r3, #24
	for (i = 0; i < ARRAY_LEN(membag_list); i++) {
   8136a:	42ab      	cmp	r3, r5
   8136c:	d1f4      	bne.n	81358 <membag_init+0xc>
	}
}
   8136e:	bc30      	pop	{r4, r5}
   81370:	4770      	bx	lr
   81372:	bf00      	nop
   81374:	20070d2c 	.word	0x20070d2c
   81378:	20070138 	.word	0x20070138

0008137c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8137c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   81380:	b980      	cbnz	r0, 813a4 <_read+0x28>
   81382:	460c      	mov	r4, r1
   81384:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   81386:	2a00      	cmp	r2, #0
   81388:	dd0f      	ble.n	813aa <_read+0x2e>
   8138a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8138c:	4e08      	ldr	r6, [pc, #32]	; (813b0 <_read+0x34>)
   8138e:	4d09      	ldr	r5, [pc, #36]	; (813b4 <_read+0x38>)
   81390:	6830      	ldr	r0, [r6, #0]
   81392:	4621      	mov	r1, r4
   81394:	682b      	ldr	r3, [r5, #0]
   81396:	4798      	blx	r3
		ptr++;
   81398:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8139a:	42bc      	cmp	r4, r7
   8139c:	d1f8      	bne.n	81390 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8139e:	4640      	mov	r0, r8
   813a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   813a4:	f04f 38ff 	mov.w	r8, #4294967295
   813a8:	e7f9      	b.n	8139e <_read+0x22>
	for (; len > 0; --len) {
   813aa:	4680      	mov	r8, r0
   813ac:	e7f7      	b.n	8139e <_read+0x22>
   813ae:	bf00      	nop
   813b0:	20071444 	.word	0x20071444
   813b4:	2007143c 	.word	0x2007143c

000813b8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   813b8:	3801      	subs	r0, #1
   813ba:	2802      	cmp	r0, #2
   813bc:	d815      	bhi.n	813ea <_write+0x32>
{
   813be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   813c2:	460e      	mov	r6, r1
   813c4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   813c6:	b19a      	cbz	r2, 813f0 <_write+0x38>
   813c8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   813ca:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81404 <_write+0x4c>
   813ce:	4f0c      	ldr	r7, [pc, #48]	; (81400 <_write+0x48>)
   813d0:	f8d8 0000 	ldr.w	r0, [r8]
   813d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   813d8:	683b      	ldr	r3, [r7, #0]
   813da:	4798      	blx	r3
   813dc:	2800      	cmp	r0, #0
   813de:	db0a      	blt.n	813f6 <_write+0x3e>
   813e0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   813e2:	3c01      	subs	r4, #1
   813e4:	d1f4      	bne.n	813d0 <_write+0x18>
   813e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   813ea:	f04f 30ff 	mov.w	r0, #4294967295
   813ee:	4770      	bx	lr
	for (; len != 0; --len) {
   813f0:	4610      	mov	r0, r2
   813f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   813f6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   813fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813fe:	bf00      	nop
   81400:	20071440 	.word	0x20071440
   81404:	20071444 	.word	0x20071444

00081408 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   81408:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   8140a:	4b04      	ldr	r3, [pc, #16]	; (8141c <spi_enable_clock+0x14>)
   8140c:	4298      	cmp	r0, r3
   8140e:	d000      	beq.n	81412 <spi_enable_clock+0xa>
   81410:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81412:	2018      	movs	r0, #24
   81414:	4b02      	ldr	r3, [pc, #8]	; (81420 <spi_enable_clock+0x18>)
   81416:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   81418:	e7fa      	b.n	81410 <spi_enable_clock+0x8>
   8141a:	bf00      	nop
   8141c:	40008000 	.word	0x40008000
   81420:	00081e41 	.word	0x00081e41

00081424 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   81424:	6843      	ldr	r3, [r0, #4]
   81426:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   8142a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   8142c:	6843      	ldr	r3, [r0, #4]
   8142e:	0409      	lsls	r1, r1, #16
   81430:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   81434:	4319      	orrs	r1, r3
   81436:	6041      	str	r1, [r0, #4]
   81438:	4770      	bx	lr

0008143a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   8143a:	6843      	ldr	r3, [r0, #4]
   8143c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81440:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   81442:	6843      	ldr	r3, [r0, #4]
   81444:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   81448:	6041      	str	r1, [r0, #4]
   8144a:	4770      	bx	lr

0008144c <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   8144c:	b932      	cbnz	r2, 8145c <spi_set_clock_polarity+0x10>
   8144e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   81452:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81454:	f023 0301 	bic.w	r3, r3, #1
   81458:	6303      	str	r3, [r0, #48]	; 0x30
   8145a:	4770      	bx	lr
   8145c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   81460:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81462:	f043 0301 	orr.w	r3, r3, #1
   81466:	6303      	str	r3, [r0, #48]	; 0x30
   81468:	4770      	bx	lr

0008146a <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   8146a:	b932      	cbnz	r2, 8147a <spi_set_clock_phase+0x10>
   8146c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   81470:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81472:	f023 0302 	bic.w	r3, r3, #2
   81476:	6303      	str	r3, [r0, #48]	; 0x30
   81478:	4770      	bx	lr
   8147a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8147e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81480:	f043 0302 	orr.w	r3, r3, #2
   81484:	6303      	str	r3, [r0, #48]	; 0x30
   81486:	4770      	bx	lr

00081488 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   81488:	2a04      	cmp	r2, #4
   8148a:	d003      	beq.n	81494 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   8148c:	b16a      	cbz	r2, 814aa <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   8148e:	2a08      	cmp	r2, #8
   81490:	d016      	beq.n	814c0 <spi_configure_cs_behavior+0x38>
   81492:	4770      	bx	lr
   81494:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   81498:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8149a:	f023 0308 	bic.w	r3, r3, #8
   8149e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   814a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814a2:	f043 0304 	orr.w	r3, r3, #4
   814a6:	6303      	str	r3, [r0, #48]	; 0x30
   814a8:	4770      	bx	lr
   814aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   814ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814b0:	f023 0308 	bic.w	r3, r3, #8
   814b4:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   814b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814b8:	f023 0304 	bic.w	r3, r3, #4
   814bc:	6303      	str	r3, [r0, #48]	; 0x30
   814be:	4770      	bx	lr
   814c0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   814c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814c6:	f043 0308 	orr.w	r3, r3, #8
   814ca:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   814cc:	e7e1      	b.n	81492 <spi_configure_cs_behavior+0xa>

000814ce <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   814ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   814d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   814d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   814d8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   814da:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   814dc:	431a      	orrs	r2, r3
   814de:	630a      	str	r2, [r1, #48]	; 0x30
   814e0:	4770      	bx	lr

000814e2 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   814e2:	1e43      	subs	r3, r0, #1
   814e4:	4419      	add	r1, r3
   814e6:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   814ea:	1e43      	subs	r3, r0, #1
   814ec:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   814ee:	bf94      	ite	ls
   814f0:	b200      	sxthls	r0, r0
		return -1;
   814f2:	f04f 30ff 	movhi.w	r0, #4294967295
}
   814f6:	4770      	bx	lr

000814f8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
   814f8:	b172      	cbz	r2, 81518 <spi_set_baudrate_div+0x20>
{
   814fa:	b410      	push	{r4}
   814fc:	4614      	mov	r4, r2
   814fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   81502:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81504:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   81508:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   8150a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   8150c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   81510:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   81512:	2000      	movs	r0, #0
}
   81514:	bc10      	pop	{r4}
   81516:	4770      	bx	lr
        return -1;
   81518:	f04f 30ff 	mov.w	r0, #4294967295
   8151c:	4770      	bx	lr

0008151e <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8151e:	b410      	push	{r4}
   81520:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   81524:	6b08      	ldr	r0, [r1, #48]	; 0x30
   81526:	b280      	uxth	r0, r0
   81528:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   8152a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   8152c:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   81530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   81534:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   81536:	bc10      	pop	{r4}
   81538:	4770      	bx	lr

0008153a <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8153a:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8153c:	23ac      	movs	r3, #172	; 0xac
   8153e:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81540:	680b      	ldr	r3, [r1, #0]
   81542:	684a      	ldr	r2, [r1, #4]
   81544:	fbb3 f3f2 	udiv	r3, r3, r2
   81548:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8154a:	1e5c      	subs	r4, r3, #1
   8154c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81550:	4294      	cmp	r4, r2
   81552:	d80b      	bhi.n	8156c <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   81554:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81556:	688b      	ldr	r3, [r1, #8]
   81558:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8155a:	f240 2302 	movw	r3, #514	; 0x202
   8155e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81562:	2350      	movs	r3, #80	; 0x50
   81564:	6003      	str	r3, [r0, #0]

	return 0;
   81566:	2000      	movs	r0, #0
}
   81568:	bc10      	pop	{r4}
   8156a:	4770      	bx	lr
		return 1;
   8156c:	2001      	movs	r0, #1
   8156e:	e7fb      	b.n	81568 <uart_init+0x2e>

00081570 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81570:	6943      	ldr	r3, [r0, #20]
   81572:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81576:	bf1a      	itte	ne
   81578:	61c1      	strne	r1, [r0, #28]
	return 0;
   8157a:	2000      	movne	r0, #0
		return 1;
   8157c:	2001      	moveq	r0, #1
}
   8157e:	4770      	bx	lr

00081580 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81580:	6943      	ldr	r3, [r0, #20]
   81582:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81586:	bf1d      	ittte	ne
   81588:	6983      	ldrne	r3, [r0, #24]
   8158a:	700b      	strbne	r3, [r1, #0]
	return 0;
   8158c:	2000      	movne	r0, #0
		return 1;
   8158e:	2001      	moveq	r0, #1
}
   81590:	4770      	bx	lr

00081592 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81592:	6943      	ldr	r3, [r0, #20]
   81594:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81598:	bf1d      	ittte	ne
   8159a:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8159e:	61c1      	strne	r1, [r0, #28]
	return 0;
   815a0:	2000      	movne	r0, #0
		return 1;
   815a2:	2001      	moveq	r0, #1
}
   815a4:	4770      	bx	lr

000815a6 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815a6:	6943      	ldr	r3, [r0, #20]
   815a8:	f013 0f01 	tst.w	r3, #1
   815ac:	d005      	beq.n	815ba <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   815ae:	6983      	ldr	r3, [r0, #24]
   815b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   815b4:	600b      	str	r3, [r1, #0]

	return 0;
   815b6:	2000      	movs	r0, #0
   815b8:	4770      	bx	lr
		return 1;
   815ba:	2001      	movs	r0, #1
}
   815bc:	4770      	bx	lr

000815be <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   815be:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   815c0:	685a      	ldr	r2, [r3, #4]
   815c2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   815c4:	6842      	ldr	r2, [r0, #4]
   815c6:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   815c8:	685a      	ldr	r2, [r3, #4]
   815ca:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   815cc:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   815ce:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   815d0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   815d2:	6803      	ldr	r3, [r0, #0]
   815d4:	3301      	adds	r3, #1
   815d6:	6003      	str	r3, [r0, #0]
   815d8:	4770      	bx	lr

000815da <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   815da:	6843      	ldr	r3, [r0, #4]
   815dc:	6882      	ldr	r2, [r0, #8]
   815de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   815e0:	6883      	ldr	r3, [r0, #8]
   815e2:	6842      	ldr	r2, [r0, #4]
   815e4:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   815e6:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   815e8:	685a      	ldr	r2, [r3, #4]
   815ea:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   815ec:	bf04      	itt	eq
   815ee:	6882      	ldreq	r2, [r0, #8]
   815f0:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   815f2:	2200      	movs	r2, #0
   815f4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   815f6:	681a      	ldr	r2, [r3, #0]
   815f8:	3a01      	subs	r2, #1
   815fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   815fc:	6818      	ldr	r0, [r3, #0]
}
   815fe:	4770      	bx	lr

00081600 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81600:	4b06      	ldr	r3, [pc, #24]	; (8161c <pxCurrentTCBConst2>)
   81602:	6819      	ldr	r1, [r3, #0]
   81604:	6808      	ldr	r0, [r1, #0]
   81606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8160a:	f380 8809 	msr	PSP, r0
   8160e:	f04f 0000 	mov.w	r0, #0
   81612:	f380 8811 	msr	BASEPRI, r0
   81616:	f04e 0e0d 	orr.w	lr, lr, #13
   8161a:	4770      	bx	lr

0008161c <pxCurrentTCBConst2>:
   8161c:	200712fc 	.word	0x200712fc

00081620 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81620:	f3ef 8011 	mrs	r0, BASEPRI
   81624:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81628:	f381 8811 	msr	BASEPRI, r1
   8162c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8162e:	2000      	movs	r0, #0

00081630 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81630:	f380 8811 	msr	BASEPRI, r0
   81634:	4770      	bx	lr
	...

00081638 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   81638:	f3ef 8009 	mrs	r0, PSP
   8163c:	4b0c      	ldr	r3, [pc, #48]	; (81670 <pxCurrentTCBConst>)
   8163e:	681a      	ldr	r2, [r3, #0]
   81640:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81644:	6010      	str	r0, [r2, #0]
   81646:	e92d 4008 	stmdb	sp!, {r3, lr}
   8164a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8164e:	f380 8811 	msr	BASEPRI, r0
   81652:	f000 f8b9 	bl	817c8 <vTaskSwitchContext>
   81656:	f04f 0000 	mov.w	r0, #0
   8165a:	f380 8811 	msr	BASEPRI, r0
   8165e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81662:	6819      	ldr	r1, [r3, #0]
   81664:	6808      	ldr	r0, [r1, #0]
   81666:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8166a:	f380 8809 	msr	PSP, r0
   8166e:	4770      	bx	lr

00081670 <pxCurrentTCBConst>:
   81670:	200712fc 	.word	0x200712fc

00081674 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81674:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8167a:	4b05      	ldr	r3, [pc, #20]	; (81690 <SysTick_Handler+0x1c>)
   8167c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8167e:	4b05      	ldr	r3, [pc, #20]	; (81694 <SysTick_Handler+0x20>)
   81680:	4798      	blx	r3
	{
		vTaskIncrementTick();
   81682:	4b05      	ldr	r3, [pc, #20]	; (81698 <SysTick_Handler+0x24>)
   81684:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81686:	2000      	movs	r0, #0
   81688:	4b04      	ldr	r3, [pc, #16]	; (8169c <SysTick_Handler+0x28>)
   8168a:	4798      	blx	r3
   8168c:	bd08      	pop	{r3, pc}
   8168e:	bf00      	nop
   81690:	e000ed04 	.word	0xe000ed04
   81694:	00081621 	.word	0x00081621
   81698:	000816a1 	.word	0x000816a1
   8169c:	00081631 	.word	0x00081631

000816a0 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   816a0:	4b3d      	ldr	r3, [pc, #244]	; (81798 <vTaskIncrementTick+0xf8>)
   816a2:	681b      	ldr	r3, [r3, #0]
   816a4:	2b00      	cmp	r3, #0
   816a6:	d16f      	bne.n	81788 <vTaskIncrementTick+0xe8>
{
   816a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   816ac:	4b3b      	ldr	r3, [pc, #236]	; (8179c <vTaskIncrementTick+0xfc>)
   816ae:	681a      	ldr	r2, [r3, #0]
   816b0:	3201      	adds	r2, #1
   816b2:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   816b4:	681b      	ldr	r3, [r3, #0]
   816b6:	b9ab      	cbnz	r3, 816e4 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   816b8:	4b39      	ldr	r3, [pc, #228]	; (817a0 <vTaskIncrementTick+0x100>)
   816ba:	681b      	ldr	r3, [r3, #0]
   816bc:	681b      	ldr	r3, [r3, #0]
   816be:	2b00      	cmp	r3, #0
   816c0:	d128      	bne.n	81714 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   816c2:	4b37      	ldr	r3, [pc, #220]	; (817a0 <vTaskIncrementTick+0x100>)
   816c4:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   816c6:	4a37      	ldr	r2, [pc, #220]	; (817a4 <vTaskIncrementTick+0x104>)
   816c8:	6810      	ldr	r0, [r2, #0]
   816ca:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   816cc:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   816ce:	4936      	ldr	r1, [pc, #216]	; (817a8 <vTaskIncrementTick+0x108>)
   816d0:	680a      	ldr	r2, [r1, #0]
   816d2:	3201      	adds	r2, #1
   816d4:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   816d6:	681b      	ldr	r3, [r3, #0]
   816d8:	681b      	ldr	r3, [r3, #0]
   816da:	b9fb      	cbnz	r3, 8171c <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   816dc:	f04f 32ff 	mov.w	r2, #4294967295
   816e0:	4b32      	ldr	r3, [pc, #200]	; (817ac <vTaskIncrementTick+0x10c>)
   816e2:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   816e4:	4b2d      	ldr	r3, [pc, #180]	; (8179c <vTaskIncrementTick+0xfc>)
   816e6:	681a      	ldr	r2, [r3, #0]
   816e8:	4b30      	ldr	r3, [pc, #192]	; (817ac <vTaskIncrementTick+0x10c>)
   816ea:	681b      	ldr	r3, [r3, #0]
   816ec:	429a      	cmp	r2, r3
   816ee:	d350      	bcc.n	81792 <vTaskIncrementTick+0xf2>
   816f0:	4b2b      	ldr	r3, [pc, #172]	; (817a0 <vTaskIncrementTick+0x100>)
   816f2:	681b      	ldr	r3, [r3, #0]
   816f4:	681b      	ldr	r3, [r3, #0]
   816f6:	b1cb      	cbz	r3, 8172c <vTaskIncrementTick+0x8c>
   816f8:	4b29      	ldr	r3, [pc, #164]	; (817a0 <vTaskIncrementTick+0x100>)
   816fa:	681b      	ldr	r3, [r3, #0]
   816fc:	68db      	ldr	r3, [r3, #12]
   816fe:	68dc      	ldr	r4, [r3, #12]
   81700:	6863      	ldr	r3, [r4, #4]
   81702:	4a26      	ldr	r2, [pc, #152]	; (8179c <vTaskIncrementTick+0xfc>)
   81704:	6812      	ldr	r2, [r2, #0]
   81706:	4293      	cmp	r3, r2
   81708:	d816      	bhi.n	81738 <vTaskIncrementTick+0x98>
   8170a:	4e29      	ldr	r6, [pc, #164]	; (817b0 <vTaskIncrementTick+0x110>)
   8170c:	4f29      	ldr	r7, [pc, #164]	; (817b4 <vTaskIncrementTick+0x114>)
   8170e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 817c4 <vTaskIncrementTick+0x124>
   81712:	e02f      	b.n	81774 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81714:	4b28      	ldr	r3, [pc, #160]	; (817b8 <vTaskIncrementTick+0x118>)
   81716:	4798      	blx	r3
   81718:	bf00      	nop
   8171a:	e7fd      	b.n	81718 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8171c:	4b20      	ldr	r3, [pc, #128]	; (817a0 <vTaskIncrementTick+0x100>)
   8171e:	681b      	ldr	r3, [r3, #0]
   81720:	68db      	ldr	r3, [r3, #12]
   81722:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81724:	685a      	ldr	r2, [r3, #4]
   81726:	4b21      	ldr	r3, [pc, #132]	; (817ac <vTaskIncrementTick+0x10c>)
   81728:	601a      	str	r2, [r3, #0]
   8172a:	e7db      	b.n	816e4 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   8172c:	f04f 32ff 	mov.w	r2, #4294967295
   81730:	4b1e      	ldr	r3, [pc, #120]	; (817ac <vTaskIncrementTick+0x10c>)
   81732:	601a      	str	r2, [r3, #0]
   81734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81738:	4a1c      	ldr	r2, [pc, #112]	; (817ac <vTaskIncrementTick+0x10c>)
   8173a:	6013      	str	r3, [r2, #0]
   8173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81740:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81742:	683b      	ldr	r3, [r7, #0]
   81744:	4298      	cmp	r0, r3
   81746:	bf88      	it	hi
   81748:	6038      	strhi	r0, [r7, #0]
   8174a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8174e:	4629      	mov	r1, r5
   81750:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81754:	4b19      	ldr	r3, [pc, #100]	; (817bc <vTaskIncrementTick+0x11c>)
   81756:	4798      	blx	r3
   81758:	4b11      	ldr	r3, [pc, #68]	; (817a0 <vTaskIncrementTick+0x100>)
   8175a:	681b      	ldr	r3, [r3, #0]
   8175c:	681b      	ldr	r3, [r3, #0]
   8175e:	2b00      	cmp	r3, #0
   81760:	d0e4      	beq.n	8172c <vTaskIncrementTick+0x8c>
   81762:	4b0f      	ldr	r3, [pc, #60]	; (817a0 <vTaskIncrementTick+0x100>)
   81764:	681b      	ldr	r3, [r3, #0]
   81766:	68db      	ldr	r3, [r3, #12]
   81768:	68dc      	ldr	r4, [r3, #12]
   8176a:	6863      	ldr	r3, [r4, #4]
   8176c:	4a0b      	ldr	r2, [pc, #44]	; (8179c <vTaskIncrementTick+0xfc>)
   8176e:	6812      	ldr	r2, [r2, #0]
   81770:	4293      	cmp	r3, r2
   81772:	d8e1      	bhi.n	81738 <vTaskIncrementTick+0x98>
   81774:	1d25      	adds	r5, r4, #4
   81776:	4628      	mov	r0, r5
   81778:	47b0      	blx	r6
   8177a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8177c:	2b00      	cmp	r3, #0
   8177e:	d0df      	beq.n	81740 <vTaskIncrementTick+0xa0>
   81780:	f104 0018 	add.w	r0, r4, #24
   81784:	47b0      	blx	r6
   81786:	e7db      	b.n	81740 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   81788:	4a0d      	ldr	r2, [pc, #52]	; (817c0 <vTaskIncrementTick+0x120>)
   8178a:	6813      	ldr	r3, [r2, #0]
   8178c:	3301      	adds	r3, #1
   8178e:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   81790:	4770      	bx	lr
   81792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81796:	bf00      	nop
   81798:	20071370 	.word	0x20071370
   8179c:	20071380 	.word	0x20071380
   817a0:	20071300 	.word	0x20071300
   817a4:	20071304 	.word	0x20071304
   817a8:	2007137c 	.word	0x2007137c
   817ac:	200701b0 	.word	0x200701b0
   817b0:	000815db 	.word	0x000815db
   817b4:	20071374 	.word	0x20071374
   817b8:	00081621 	.word	0x00081621
   817bc:	000815bf 	.word	0x000815bf
   817c0:	2007136c 	.word	0x2007136c
   817c4:	20071308 	.word	0x20071308

000817c8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   817c8:	4b21      	ldr	r3, [pc, #132]	; (81850 <vTaskSwitchContext+0x88>)
   817ca:	681b      	ldr	r3, [r3, #0]
   817cc:	b9eb      	cbnz	r3, 8180a <vTaskSwitchContext+0x42>
{
   817ce:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   817d0:	4b20      	ldr	r3, [pc, #128]	; (81854 <vTaskSwitchContext+0x8c>)
   817d2:	681b      	ldr	r3, [r3, #0]
   817d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   817d8:	009b      	lsls	r3, r3, #2
   817da:	4a1f      	ldr	r2, [pc, #124]	; (81858 <vTaskSwitchContext+0x90>)
   817dc:	58d3      	ldr	r3, [r2, r3]
   817de:	b9c3      	cbnz	r3, 81812 <vTaskSwitchContext+0x4a>
   817e0:	4b1c      	ldr	r3, [pc, #112]	; (81854 <vTaskSwitchContext+0x8c>)
   817e2:	681b      	ldr	r3, [r3, #0]
   817e4:	b16b      	cbz	r3, 81802 <vTaskSwitchContext+0x3a>
   817e6:	4a1b      	ldr	r2, [pc, #108]	; (81854 <vTaskSwitchContext+0x8c>)
   817e8:	491b      	ldr	r1, [pc, #108]	; (81858 <vTaskSwitchContext+0x90>)
   817ea:	6813      	ldr	r3, [r2, #0]
   817ec:	3b01      	subs	r3, #1
   817ee:	6013      	str	r3, [r2, #0]
   817f0:	6813      	ldr	r3, [r2, #0]
   817f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   817f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   817fa:	b953      	cbnz	r3, 81812 <vTaskSwitchContext+0x4a>
   817fc:	6813      	ldr	r3, [r2, #0]
   817fe:	2b00      	cmp	r3, #0
   81800:	d1f3      	bne.n	817ea <vTaskSwitchContext+0x22>
   81802:	4b16      	ldr	r3, [pc, #88]	; (8185c <vTaskSwitchContext+0x94>)
   81804:	4798      	blx	r3
   81806:	bf00      	nop
   81808:	e7fd      	b.n	81806 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   8180a:	2201      	movs	r2, #1
   8180c:	4b14      	ldr	r3, [pc, #80]	; (81860 <vTaskSwitchContext+0x98>)
   8180e:	601a      	str	r2, [r3, #0]
   81810:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81812:	4b10      	ldr	r3, [pc, #64]	; (81854 <vTaskSwitchContext+0x8c>)
   81814:	681b      	ldr	r3, [r3, #0]
   81816:	4a10      	ldr	r2, [pc, #64]	; (81858 <vTaskSwitchContext+0x90>)
   81818:	0099      	lsls	r1, r3, #2
   8181a:	18c8      	adds	r0, r1, r3
   8181c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81820:	6844      	ldr	r4, [r0, #4]
   81822:	6864      	ldr	r4, [r4, #4]
   81824:	6044      	str	r4, [r0, #4]
   81826:	4419      	add	r1, r3
   81828:	4602      	mov	r2, r0
   8182a:	3208      	adds	r2, #8
   8182c:	4294      	cmp	r4, r2
   8182e:	d009      	beq.n	81844 <vTaskSwitchContext+0x7c>
   81830:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81834:	4a08      	ldr	r2, [pc, #32]	; (81858 <vTaskSwitchContext+0x90>)
   81836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8183a:	685b      	ldr	r3, [r3, #4]
   8183c:	68da      	ldr	r2, [r3, #12]
   8183e:	4b09      	ldr	r3, [pc, #36]	; (81864 <vTaskSwitchContext+0x9c>)
   81840:	601a      	str	r2, [r3, #0]
   81842:	bd10      	pop	{r4, pc}
   81844:	6860      	ldr	r0, [r4, #4]
   81846:	4a04      	ldr	r2, [pc, #16]	; (81858 <vTaskSwitchContext+0x90>)
   81848:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8184c:	6050      	str	r0, [r2, #4]
   8184e:	e7ef      	b.n	81830 <vTaskSwitchContext+0x68>
   81850:	20071370 	.word	0x20071370
   81854:	20071374 	.word	0x20071374
   81858:	20071308 	.word	0x20071308
   8185c:	00081621 	.word	0x00081621
   81860:	20071378 	.word	0x20071378
   81864:	200712fc 	.word	0x200712fc

00081868 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81868:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8186a:	480e      	ldr	r0, [pc, #56]	; (818a4 <sysclk_init+0x3c>)
   8186c:	4b0e      	ldr	r3, [pc, #56]	; (818a8 <sysclk_init+0x40>)
   8186e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81870:	213e      	movs	r1, #62	; 0x3e
   81872:	2000      	movs	r0, #0
   81874:	4b0d      	ldr	r3, [pc, #52]	; (818ac <sysclk_init+0x44>)
   81876:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81878:	4c0d      	ldr	r4, [pc, #52]	; (818b0 <sysclk_init+0x48>)
   8187a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8187c:	2800      	cmp	r0, #0
   8187e:	d0fc      	beq.n	8187a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81880:	4b0c      	ldr	r3, [pc, #48]	; (818b4 <sysclk_init+0x4c>)
   81882:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81884:	4a0c      	ldr	r2, [pc, #48]	; (818b8 <sysclk_init+0x50>)
   81886:	4b0d      	ldr	r3, [pc, #52]	; (818bc <sysclk_init+0x54>)
   81888:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8188a:	4c0d      	ldr	r4, [pc, #52]	; (818c0 <sysclk_init+0x58>)
   8188c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8188e:	2800      	cmp	r0, #0
   81890:	d0fc      	beq.n	8188c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81892:	2010      	movs	r0, #16
   81894:	4b0b      	ldr	r3, [pc, #44]	; (818c4 <sysclk_init+0x5c>)
   81896:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81898:	4b0b      	ldr	r3, [pc, #44]	; (818c8 <sysclk_init+0x60>)
   8189a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8189c:	4801      	ldr	r0, [pc, #4]	; (818a4 <sysclk_init+0x3c>)
   8189e:	4b02      	ldr	r3, [pc, #8]	; (818a8 <sysclk_init+0x40>)
   818a0:	4798      	blx	r3
   818a2:	bd10      	pop	{r4, pc}
   818a4:	0501bd00 	.word	0x0501bd00
   818a8:	200700b1 	.word	0x200700b1
   818ac:	00081dbd 	.word	0x00081dbd
   818b0:	00081e11 	.word	0x00081e11
   818b4:	00081e21 	.word	0x00081e21
   818b8:	200d3f01 	.word	0x200d3f01
   818bc:	400e0600 	.word	0x400e0600
   818c0:	00081e31 	.word	0x00081e31
   818c4:	00081d59 	.word	0x00081d59
   818c8:	00081f31 	.word	0x00081f31

000818cc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   818cc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   818ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   818d2:	4b20      	ldr	r3, [pc, #128]	; (81954 <board_init+0x88>)
   818d4:	605a      	str	r2, [r3, #4]
   818d6:	200b      	movs	r0, #11
   818d8:	4c1f      	ldr	r4, [pc, #124]	; (81958 <board_init+0x8c>)
   818da:	47a0      	blx	r4
   818dc:	200c      	movs	r0, #12
   818de:	47a0      	blx	r4
   818e0:	200d      	movs	r0, #13
   818e2:	47a0      	blx	r4
   818e4:	200e      	movs	r0, #14
   818e6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   818e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818ec:	203b      	movs	r0, #59	; 0x3b
   818ee:	4c1b      	ldr	r4, [pc, #108]	; (8195c <board_init+0x90>)
   818f0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   818f2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818f6:	2055      	movs	r0, #85	; 0x55
   818f8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   818fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818fe:	2056      	movs	r0, #86	; 0x56
   81900:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81902:	4917      	ldr	r1, [pc, #92]	; (81960 <board_init+0x94>)
   81904:	2068      	movs	r0, #104	; 0x68
   81906:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81908:	4916      	ldr	r1, [pc, #88]	; (81964 <board_init+0x98>)
   8190a:	205c      	movs	r0, #92	; 0x5c
   8190c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8190e:	4a16      	ldr	r2, [pc, #88]	; (81968 <board_init+0x9c>)
   81910:	f44f 7140 	mov.w	r1, #768	; 0x300
   81914:	4815      	ldr	r0, [pc, #84]	; (8196c <board_init+0xa0>)
   81916:	4b16      	ldr	r3, [pc, #88]	; (81970 <board_init+0xa4>)
   81918:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   8191a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8191e:	2019      	movs	r0, #25
   81920:	47a0      	blx	r4
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81922:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81926:	201a      	movs	r0, #26
   81928:	47a0      	blx	r4
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   8192a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8192e:	201b      	movs	r0, #27
   81930:	47a0      	blx	r4
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81932:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81936:	201c      	movs	r0, #28
   81938:	47a0      	blx	r4
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS1
	        gpio_configure_pin(SPI0_NPCS1_PA29_GPIO,SPI0_NPCS1_PA29_FLAGS);
   8193a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8193e:	201d      	movs	r0, #29
   81940:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81942:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81946:	202b      	movs	r0, #43	; 0x2b
   81948:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8194a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8194e:	202a      	movs	r0, #42	; 0x2a
   81950:	47a0      	blx	r4
   81952:	bd10      	pop	{r4, pc}
   81954:	400e1a50 	.word	0x400e1a50
   81958:	00081e41 	.word	0x00081e41
   8195c:	00081a41 	.word	0x00081a41
   81960:	28000079 	.word	0x28000079
   81964:	28000001 	.word	0x28000001
   81968:	08000001 	.word	0x08000001
   8196c:	400e0e00 	.word	0x400e0e00
   81970:	00081b11 	.word	0x00081b11

00081974 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81974:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81976:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8197a:	d016      	beq.n	819aa <pio_set_peripheral+0x36>
   8197c:	d80b      	bhi.n	81996 <pio_set_peripheral+0x22>
   8197e:	b149      	cbz	r1, 81994 <pio_set_peripheral+0x20>
   81980:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81984:	d105      	bne.n	81992 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81986:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81988:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8198a:	400b      	ands	r3, r1
   8198c:	ea23 0302 	bic.w	r3, r3, r2
   81990:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81992:	6042      	str	r2, [r0, #4]
   81994:	4770      	bx	lr
	switch (ul_type) {
   81996:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8199a:	d0fb      	beq.n	81994 <pio_set_peripheral+0x20>
   8199c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   819a0:	d0f8      	beq.n	81994 <pio_set_peripheral+0x20>
   819a2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   819a6:	d1f4      	bne.n	81992 <pio_set_peripheral+0x1e>
   819a8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   819aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   819ac:	4313      	orrs	r3, r2
   819ae:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   819b0:	e7ef      	b.n	81992 <pio_set_peripheral+0x1e>

000819b2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   819b2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   819b4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   819b8:	bf14      	ite	ne
   819ba:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   819bc:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   819be:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   819c2:	bf14      	ite	ne
   819c4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   819c6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   819c8:	f012 0f02 	tst.w	r2, #2
   819cc:	d107      	bne.n	819de <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   819ce:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   819d2:	bf18      	it	ne
   819d4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   819d8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   819da:	6001      	str	r1, [r0, #0]
   819dc:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   819de:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   819e2:	e7f9      	b.n	819d8 <pio_set_input+0x26>

000819e4 <pio_set_output>:
{
   819e4:	b410      	push	{r4}
   819e6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   819e8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   819ea:	b944      	cbnz	r4, 819fe <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   819ec:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   819ee:	b143      	cbz	r3, 81a02 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   819f0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   819f2:	b942      	cbnz	r2, 81a06 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   819f4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   819f6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   819f8:	6001      	str	r1, [r0, #0]
}
   819fa:	bc10      	pop	{r4}
   819fc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   819fe:	6641      	str	r1, [r0, #100]	; 0x64
   81a00:	e7f5      	b.n	819ee <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81a02:	6541      	str	r1, [r0, #84]	; 0x54
   81a04:	e7f5      	b.n	819f2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81a06:	6301      	str	r1, [r0, #48]	; 0x30
   81a08:	e7f5      	b.n	819f6 <pio_set_output+0x12>

00081a0a <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   81a0a:	f012 0f10 	tst.w	r2, #16
   81a0e:	d010      	beq.n	81a32 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   81a10:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   81a14:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   81a18:	bf14      	ite	ne
   81a1a:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   81a1e:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   81a22:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   81a26:	bf14      	ite	ne
   81a28:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   81a2c:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81a30:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   81a32:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81a36:	4770      	bx	lr

00081a38 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81a38:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81a3a:	4770      	bx	lr

00081a3c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81a3c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81a3e:	4770      	bx	lr

00081a40 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81a40:	b570      	push	{r4, r5, r6, lr}
   81a42:	b082      	sub	sp, #8
   81a44:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81a46:	0943      	lsrs	r3, r0, #5
   81a48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81a4c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81a50:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81a52:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81a56:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81a5a:	d031      	beq.n	81ac0 <pio_configure_pin+0x80>
   81a5c:	d816      	bhi.n	81a8c <pio_configure_pin+0x4c>
   81a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81a62:	d01b      	beq.n	81a9c <pio_configure_pin+0x5c>
   81a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81a68:	d116      	bne.n	81a98 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81a6a:	f000 001f 	and.w	r0, r0, #31
   81a6e:	2601      	movs	r6, #1
   81a70:	4086      	lsls	r6, r0
   81a72:	4632      	mov	r2, r6
   81a74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81a78:	4620      	mov	r0, r4
   81a7a:	4b22      	ldr	r3, [pc, #136]	; (81b04 <pio_configure_pin+0xc4>)
   81a7c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81a7e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81a82:	bf14      	ite	ne
   81a84:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81a86:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81a88:	2001      	movs	r0, #1
   81a8a:	e017      	b.n	81abc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81a8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81a90:	d021      	beq.n	81ad6 <pio_configure_pin+0x96>
   81a92:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81a96:	d01e      	beq.n	81ad6 <pio_configure_pin+0x96>
		return 0;
   81a98:	2000      	movs	r0, #0
   81a9a:	e00f      	b.n	81abc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81a9c:	f000 001f 	and.w	r0, r0, #31
   81aa0:	2601      	movs	r6, #1
   81aa2:	4086      	lsls	r6, r0
   81aa4:	4632      	mov	r2, r6
   81aa6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81aaa:	4620      	mov	r0, r4
   81aac:	4b15      	ldr	r3, [pc, #84]	; (81b04 <pio_configure_pin+0xc4>)
   81aae:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81ab0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81ab4:	bf14      	ite	ne
   81ab6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81ab8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81aba:	2001      	movs	r0, #1
}
   81abc:	b002      	add	sp, #8
   81abe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81ac0:	f000 011f 	and.w	r1, r0, #31
   81ac4:	2601      	movs	r6, #1
   81ac6:	462a      	mov	r2, r5
   81ac8:	fa06 f101 	lsl.w	r1, r6, r1
   81acc:	4620      	mov	r0, r4
   81ace:	4b0e      	ldr	r3, [pc, #56]	; (81b08 <pio_configure_pin+0xc8>)
   81ad0:	4798      	blx	r3
	return 1;
   81ad2:	4630      	mov	r0, r6
		break;
   81ad4:	e7f2      	b.n	81abc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81ad6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81ada:	f000 011f 	and.w	r1, r0, #31
   81ade:	2601      	movs	r6, #1
   81ae0:	ea05 0306 	and.w	r3, r5, r6
   81ae4:	9300      	str	r3, [sp, #0]
   81ae6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81aea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81aee:	bf14      	ite	ne
   81af0:	2200      	movne	r2, #0
   81af2:	2201      	moveq	r2, #1
   81af4:	fa06 f101 	lsl.w	r1, r6, r1
   81af8:	4620      	mov	r0, r4
   81afa:	4c04      	ldr	r4, [pc, #16]	; (81b0c <pio_configure_pin+0xcc>)
   81afc:	47a0      	blx	r4
	return 1;
   81afe:	4630      	mov	r0, r6
		break;
   81b00:	e7dc      	b.n	81abc <pio_configure_pin+0x7c>
   81b02:	bf00      	nop
   81b04:	00081975 	.word	0x00081975
   81b08:	000819b3 	.word	0x000819b3
   81b0c:	000819e5 	.word	0x000819e5

00081b10 <pio_configure_pin_group>:
{
   81b10:	b570      	push	{r4, r5, r6, lr}
   81b12:	b082      	sub	sp, #8
   81b14:	4605      	mov	r5, r0
   81b16:	460e      	mov	r6, r1
   81b18:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81b1a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81b1e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81b22:	d027      	beq.n	81b74 <pio_configure_pin_group+0x64>
   81b24:	d811      	bhi.n	81b4a <pio_configure_pin_group+0x3a>
   81b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81b2a:	d016      	beq.n	81b5a <pio_configure_pin_group+0x4a>
   81b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81b30:	d111      	bne.n	81b56 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81b32:	460a      	mov	r2, r1
   81b34:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81b38:	4b19      	ldr	r3, [pc, #100]	; (81ba0 <pio_configure_pin_group+0x90>)
   81b3a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81b3c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81b40:	bf14      	ite	ne
   81b42:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81b44:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81b46:	2001      	movs	r0, #1
   81b48:	e012      	b.n	81b70 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81b4e:	d015      	beq.n	81b7c <pio_configure_pin_group+0x6c>
   81b50:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81b54:	d012      	beq.n	81b7c <pio_configure_pin_group+0x6c>
		return 0;
   81b56:	2000      	movs	r0, #0
   81b58:	e00a      	b.n	81b70 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81b5a:	460a      	mov	r2, r1
   81b5c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b60:	4b0f      	ldr	r3, [pc, #60]	; (81ba0 <pio_configure_pin_group+0x90>)
   81b62:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81b64:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81b68:	bf14      	ite	ne
   81b6a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81b6c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81b6e:	2001      	movs	r0, #1
}
   81b70:	b002      	add	sp, #8
   81b72:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81b74:	4b0b      	ldr	r3, [pc, #44]	; (81ba4 <pio_configure_pin_group+0x94>)
   81b76:	4798      	blx	r3
	return 1;
   81b78:	2001      	movs	r0, #1
		break;
   81b7a:	e7f9      	b.n	81b70 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81b7c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81b80:	f004 0301 	and.w	r3, r4, #1
   81b84:	9300      	str	r3, [sp, #0]
   81b86:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81b8a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81b8e:	bf14      	ite	ne
   81b90:	2200      	movne	r2, #0
   81b92:	2201      	moveq	r2, #1
   81b94:	4631      	mov	r1, r6
   81b96:	4628      	mov	r0, r5
   81b98:	4c03      	ldr	r4, [pc, #12]	; (81ba8 <pio_configure_pin_group+0x98>)
   81b9a:	47a0      	blx	r4
	return 1;
   81b9c:	2001      	movs	r0, #1
		break;
   81b9e:	e7e7      	b.n	81b70 <pio_configure_pin_group+0x60>
   81ba0:	00081975 	.word	0x00081975
   81ba4:	000819b3 	.word	0x000819b3
   81ba8:	000819e5 	.word	0x000819e5

00081bac <pio_enable_pin_interrupt>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81bac:	0943      	lsrs	r3, r0, #5
   81bae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81bb2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81bb6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_IER = 1 << (ul_pin & 0x1F);
   81bb8:	f000 001f 	and.w	r0, r0, #31
   81bbc:	2201      	movs	r2, #1
   81bbe:	fa02 f000 	lsl.w	r0, r2, r0
   81bc2:	6418      	str	r0, [r3, #64]	; 0x40
   81bc4:	4770      	bx	lr

00081bc6 <pio_disable_pin_interrupt>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81bc6:	0943      	lsrs	r3, r0, #5
   81bc8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81bcc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81bd0:	025b      	lsls	r3, r3, #9
	p_pio->PIO_IDR = 1 << (ul_pin & 0x1F);
   81bd2:	f000 001f 	and.w	r0, r0, #31
   81bd6:	2201      	movs	r2, #1
   81bd8:	fa02 f000 	lsl.w	r0, r2, r0
   81bdc:	6458      	str	r0, [r3, #68]	; 0x44
   81bde:	4770      	bx	lr

00081be0 <pio_get_pin_group>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81be0:	0940      	lsrs	r0, r0, #5
   81be2:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   81be6:	f200 7007 	addw	r0, r0, #1799	; 0x707
#endif
	return p_pio;
}
   81bea:	0240      	lsls	r0, r0, #9
   81bec:	4770      	bx	lr

00081bee <pio_get_pin_group_id>:
	
	#ifdef ID_PIOE 
	if (ul_pin >= PIO_PE0_IDX) ul_id = ID_PIOE; 
	#endif 
#else
	ul_id = ID_PIOA + (ul_pin >> 5);
   81bee:	0940      	lsrs	r0, r0, #5
#endif
	return ul_id;
}
   81bf0:	300b      	adds	r0, #11
   81bf2:	4770      	bx	lr

00081bf4 <pio_get_pin_group_mask>:
 *
 * \return GPIO port pin mask.
 */
uint32_t pio_get_pin_group_mask(uint32_t ul_pin)
{
	uint32_t ul_mask = 1 << (ul_pin & 0x1F);
   81bf4:	f000 001f 	and.w	r0, r0, #31
	return ul_mask;
}
   81bf8:	2301      	movs	r3, #1
   81bfa:	fa03 f000 	lsl.w	r0, r3, r0
   81bfe:	4770      	bx	lr

00081c00 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c04:	4604      	mov	r4, r0
   81c06:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81c08:	4b0e      	ldr	r3, [pc, #56]	; (81c44 <pio_handler_process+0x44>)
   81c0a:	4798      	blx	r3
   81c0c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81c0e:	4620      	mov	r0, r4
   81c10:	4b0d      	ldr	r3, [pc, #52]	; (81c48 <pio_handler_process+0x48>)
   81c12:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81c14:	4005      	ands	r5, r0
   81c16:	d013      	beq.n	81c40 <pio_handler_process+0x40>
   81c18:	4c0c      	ldr	r4, [pc, #48]	; (81c4c <pio_handler_process+0x4c>)
   81c1a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81c1e:	e003      	b.n	81c28 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81c20:	42b4      	cmp	r4, r6
   81c22:	d00d      	beq.n	81c40 <pio_handler_process+0x40>
   81c24:	3410      	adds	r4, #16
		while (status != 0) {
   81c26:	b15d      	cbz	r5, 81c40 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81c28:	6820      	ldr	r0, [r4, #0]
   81c2a:	4540      	cmp	r0, r8
   81c2c:	d1f8      	bne.n	81c20 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81c2e:	6861      	ldr	r1, [r4, #4]
   81c30:	4229      	tst	r1, r5
   81c32:	d0f5      	beq.n	81c20 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81c34:	68e3      	ldr	r3, [r4, #12]
   81c36:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81c38:	6863      	ldr	r3, [r4, #4]
   81c3a:	ea25 0503 	bic.w	r5, r5, r3
   81c3e:	e7ef      	b.n	81c20 <pio_handler_process+0x20>
   81c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c44:	00081a39 	.word	0x00081a39
   81c48:	00081a3d 	.word	0x00081a3d
   81c4c:	20071384 	.word	0x20071384

00081c50 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   81c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   81c52:	4c18      	ldr	r4, [pc, #96]	; (81cb4 <pio_handler_set+0x64>)
   81c54:	6826      	ldr	r6, [r4, #0]
   81c56:	2e06      	cmp	r6, #6
   81c58:	d829      	bhi.n	81cae <pio_handler_set+0x5e>
   81c5a:	f04f 0c00 	mov.w	ip, #0
   81c5e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   81c60:	4f15      	ldr	r7, [pc, #84]	; (81cb8 <pio_handler_set+0x68>)
   81c62:	e004      	b.n	81c6e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   81c64:	3401      	adds	r4, #1
   81c66:	b2e4      	uxtb	r4, r4
   81c68:	46a4      	mov	ip, r4
   81c6a:	42a6      	cmp	r6, r4
   81c6c:	d309      	bcc.n	81c82 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   81c6e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   81c70:	0125      	lsls	r5, r4, #4
   81c72:	597d      	ldr	r5, [r7, r5]
   81c74:	428d      	cmp	r5, r1
   81c76:	d1f5      	bne.n	81c64 <pio_handler_set+0x14>
   81c78:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   81c7c:	686d      	ldr	r5, [r5, #4]
   81c7e:	4295      	cmp	r5, r2
   81c80:	d1f0      	bne.n	81c64 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   81c82:	4d0d      	ldr	r5, [pc, #52]	; (81cb8 <pio_handler_set+0x68>)
   81c84:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   81c88:	eb05 040e 	add.w	r4, r5, lr
   81c8c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   81c90:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   81c92:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   81c94:	9906      	ldr	r1, [sp, #24]
   81c96:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   81c98:	3601      	adds	r6, #1
   81c9a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   81c9c:	bf04      	itt	eq
   81c9e:	4905      	ldreq	r1, [pc, #20]	; (81cb4 <pio_handler_set+0x64>)
   81ca0:	600e      	streq	r6, [r1, #0]
   81ca2:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81ca4:	461a      	mov	r2, r3
   81ca6:	4b05      	ldr	r3, [pc, #20]	; (81cbc <pio_handler_set+0x6c>)
   81ca8:	4798      	blx	r3

	return 0;
   81caa:	2000      	movs	r0, #0
   81cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   81cae:	2001      	movs	r0, #1
}
   81cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81cb2:	bf00      	nop
   81cb4:	200713f4 	.word	0x200713f4
   81cb8:	20071384 	.word	0x20071384
   81cbc:	00081a0b 	.word	0x00081a0b

00081cc0 <pio_handler_set_pin>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set_pin(uint32_t ul_pin, uint32_t ul_flag,
		void (*p_handler) (uint32_t, uint32_t))
{
   81cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81cc4:	b082      	sub	sp, #8
   81cc6:	4604      	mov	r4, r0
   81cc8:	460f      	mov	r7, r1
   81cca:	4690      	mov	r8, r2
	Pio *p_pio = pio_get_pin_group(ul_pin);
   81ccc:	4b0a      	ldr	r3, [pc, #40]	; (81cf8 <pio_handler_set_pin+0x38>)
   81cce:	4798      	blx	r3
   81cd0:	4605      	mov	r5, r0
	uint32_t group_id =  pio_get_pin_group_id(ul_pin);
   81cd2:	4620      	mov	r0, r4
   81cd4:	4b09      	ldr	r3, [pc, #36]	; (81cfc <pio_handler_set_pin+0x3c>)
   81cd6:	4798      	blx	r3
   81cd8:	4606      	mov	r6, r0
	uint32_t group_mask = pio_get_pin_group_mask(ul_pin);
   81cda:	4620      	mov	r0, r4
   81cdc:	4b08      	ldr	r3, [pc, #32]	; (81d00 <pio_handler_set_pin+0x40>)
   81cde:	4798      	blx	r3

	return pio_handler_set(p_pio, group_id, group_mask, ul_flag, p_handler);
   81ce0:	f8cd 8000 	str.w	r8, [sp]
   81ce4:	463b      	mov	r3, r7
   81ce6:	4602      	mov	r2, r0
   81ce8:	4631      	mov	r1, r6
   81cea:	4628      	mov	r0, r5
   81cec:	4c05      	ldr	r4, [pc, #20]	; (81d04 <pio_handler_set_pin+0x44>)
   81cee:	47a0      	blx	r4
}
   81cf0:	b002      	add	sp, #8
   81cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81cf6:	bf00      	nop
   81cf8:	00081be1 	.word	0x00081be1
   81cfc:	00081bef 	.word	0x00081bef
   81d00:	00081bf5 	.word	0x00081bf5
   81d04:	00081c51 	.word	0x00081c51

00081d08 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81d08:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81d0a:	210b      	movs	r1, #11
   81d0c:	4801      	ldr	r0, [pc, #4]	; (81d14 <PIOA_Handler+0xc>)
   81d0e:	4b02      	ldr	r3, [pc, #8]	; (81d18 <PIOA_Handler+0x10>)
   81d10:	4798      	blx	r3
   81d12:	bd08      	pop	{r3, pc}
   81d14:	400e0e00 	.word	0x400e0e00
   81d18:	00081c01 	.word	0x00081c01

00081d1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81d1c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81d1e:	210c      	movs	r1, #12
   81d20:	4801      	ldr	r0, [pc, #4]	; (81d28 <PIOB_Handler+0xc>)
   81d22:	4b02      	ldr	r3, [pc, #8]	; (81d2c <PIOB_Handler+0x10>)
   81d24:	4798      	blx	r3
   81d26:	bd08      	pop	{r3, pc}
   81d28:	400e1000 	.word	0x400e1000
   81d2c:	00081c01 	.word	0x00081c01

00081d30 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81d30:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81d32:	210d      	movs	r1, #13
   81d34:	4801      	ldr	r0, [pc, #4]	; (81d3c <PIOC_Handler+0xc>)
   81d36:	4b02      	ldr	r3, [pc, #8]	; (81d40 <PIOC_Handler+0x10>)
   81d38:	4798      	blx	r3
   81d3a:	bd08      	pop	{r3, pc}
   81d3c:	400e1200 	.word	0x400e1200
   81d40:	00081c01 	.word	0x00081c01

00081d44 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81d44:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81d46:	210e      	movs	r1, #14
   81d48:	4801      	ldr	r0, [pc, #4]	; (81d50 <PIOD_Handler+0xc>)
   81d4a:	4b02      	ldr	r3, [pc, #8]	; (81d54 <PIOD_Handler+0x10>)
   81d4c:	4798      	blx	r3
   81d4e:	bd08      	pop	{r3, pc}
   81d50:	400e1400 	.word	0x400e1400
   81d54:	00081c01 	.word	0x00081c01

00081d58 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81d58:	4a17      	ldr	r2, [pc, #92]	; (81db8 <pmc_switch_mck_to_pllack+0x60>)
   81d5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81d60:	4318      	orrs	r0, r3
   81d62:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81d64:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81d66:	f013 0f08 	tst.w	r3, #8
   81d6a:	d10a      	bne.n	81d82 <pmc_switch_mck_to_pllack+0x2a>
   81d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81d70:	4911      	ldr	r1, [pc, #68]	; (81db8 <pmc_switch_mck_to_pllack+0x60>)
   81d72:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81d74:	f012 0f08 	tst.w	r2, #8
   81d78:	d103      	bne.n	81d82 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81d7a:	3b01      	subs	r3, #1
   81d7c:	d1f9      	bne.n	81d72 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81d7e:	2001      	movs	r0, #1
   81d80:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81d82:	4a0d      	ldr	r2, [pc, #52]	; (81db8 <pmc_switch_mck_to_pllack+0x60>)
   81d84:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81d86:	f023 0303 	bic.w	r3, r3, #3
   81d8a:	f043 0302 	orr.w	r3, r3, #2
   81d8e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81d90:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81d92:	f013 0f08 	tst.w	r3, #8
   81d96:	d10a      	bne.n	81dae <pmc_switch_mck_to_pllack+0x56>
   81d98:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81d9c:	4906      	ldr	r1, [pc, #24]	; (81db8 <pmc_switch_mck_to_pllack+0x60>)
   81d9e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81da0:	f012 0f08 	tst.w	r2, #8
   81da4:	d105      	bne.n	81db2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81da6:	3b01      	subs	r3, #1
   81da8:	d1f9      	bne.n	81d9e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81daa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81dac:	4770      	bx	lr
	return 0;
   81dae:	2000      	movs	r0, #0
   81db0:	4770      	bx	lr
   81db2:	2000      	movs	r0, #0
   81db4:	4770      	bx	lr
   81db6:	bf00      	nop
   81db8:	400e0600 	.word	0x400e0600

00081dbc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81dbc:	b9c8      	cbnz	r0, 81df2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81dbe:	4a11      	ldr	r2, [pc, #68]	; (81e04 <pmc_switch_mainck_to_xtal+0x48>)
   81dc0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81dc2:	0209      	lsls	r1, r1, #8
   81dc4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81dc6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81dca:	f023 0303 	bic.w	r3, r3, #3
   81dce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81dd2:	f043 0301 	orr.w	r3, r3, #1
   81dd6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81dd8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81dda:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81ddc:	f013 0f01 	tst.w	r3, #1
   81de0:	d0fb      	beq.n	81dda <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81de2:	4a08      	ldr	r2, [pc, #32]	; (81e04 <pmc_switch_mainck_to_xtal+0x48>)
   81de4:	6a13      	ldr	r3, [r2, #32]
   81de6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81dee:	6213      	str	r3, [r2, #32]
   81df0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81df2:	4904      	ldr	r1, [pc, #16]	; (81e04 <pmc_switch_mainck_to_xtal+0x48>)
   81df4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81df6:	4a04      	ldr	r2, [pc, #16]	; (81e08 <pmc_switch_mainck_to_xtal+0x4c>)
   81df8:	401a      	ands	r2, r3
   81dfa:	4b04      	ldr	r3, [pc, #16]	; (81e0c <pmc_switch_mainck_to_xtal+0x50>)
   81dfc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81dfe:	620b      	str	r3, [r1, #32]
   81e00:	4770      	bx	lr
   81e02:	bf00      	nop
   81e04:	400e0600 	.word	0x400e0600
   81e08:	fec8fffc 	.word	0xfec8fffc
   81e0c:	01370002 	.word	0x01370002

00081e10 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81e10:	4b02      	ldr	r3, [pc, #8]	; (81e1c <pmc_osc_is_ready_mainck+0xc>)
   81e12:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81e14:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81e18:	4770      	bx	lr
   81e1a:	bf00      	nop
   81e1c:	400e0600 	.word	0x400e0600

00081e20 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81e20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81e24:	4b01      	ldr	r3, [pc, #4]	; (81e2c <pmc_disable_pllack+0xc>)
   81e26:	629a      	str	r2, [r3, #40]	; 0x28
   81e28:	4770      	bx	lr
   81e2a:	bf00      	nop
   81e2c:	400e0600 	.word	0x400e0600

00081e30 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81e30:	4b02      	ldr	r3, [pc, #8]	; (81e3c <pmc_is_locked_pllack+0xc>)
   81e32:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81e34:	f000 0002 	and.w	r0, r0, #2
   81e38:	4770      	bx	lr
   81e3a:	bf00      	nop
   81e3c:	400e0600 	.word	0x400e0600

00081e40 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81e40:	282c      	cmp	r0, #44	; 0x2c
   81e42:	d81e      	bhi.n	81e82 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   81e44:	281f      	cmp	r0, #31
   81e46:	d80c      	bhi.n	81e62 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81e48:	4b11      	ldr	r3, [pc, #68]	; (81e90 <pmc_enable_periph_clk+0x50>)
   81e4a:	699a      	ldr	r2, [r3, #24]
   81e4c:	2301      	movs	r3, #1
   81e4e:	4083      	lsls	r3, r0
   81e50:	4393      	bics	r3, r2
   81e52:	d018      	beq.n	81e86 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   81e54:	2301      	movs	r3, #1
   81e56:	fa03 f000 	lsl.w	r0, r3, r0
   81e5a:	4b0d      	ldr	r3, [pc, #52]	; (81e90 <pmc_enable_periph_clk+0x50>)
   81e5c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81e5e:	2000      	movs	r0, #0
   81e60:	4770      	bx	lr
		ul_id -= 32;
   81e62:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81e64:	4b0a      	ldr	r3, [pc, #40]	; (81e90 <pmc_enable_periph_clk+0x50>)
   81e66:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81e6a:	2301      	movs	r3, #1
   81e6c:	4083      	lsls	r3, r0
   81e6e:	4393      	bics	r3, r2
   81e70:	d00b      	beq.n	81e8a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   81e72:	2301      	movs	r3, #1
   81e74:	fa03 f000 	lsl.w	r0, r3, r0
   81e78:	4b05      	ldr	r3, [pc, #20]	; (81e90 <pmc_enable_periph_clk+0x50>)
   81e7a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   81e7e:	2000      	movs	r0, #0
   81e80:	4770      	bx	lr
		return 1;
   81e82:	2001      	movs	r0, #1
   81e84:	4770      	bx	lr
	return 0;
   81e86:	2000      	movs	r0, #0
   81e88:	4770      	bx	lr
   81e8a:	2000      	movs	r0, #0
}
   81e8c:	4770      	bx	lr
   81e8e:	bf00      	nop
   81e90:	400e0600 	.word	0x400e0600

00081e94 <Dummy_Handler>:
int Dummy_Handler(void)
{
	while (1) {
		return 1;
	}
}
   81e94:	2001      	movs	r0, #1
   81e96:	4770      	bx	lr

00081e98 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81e98:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81e9a:	4b1c      	ldr	r3, [pc, #112]	; (81f0c <Reset_Handler+0x74>)
   81e9c:	4a1c      	ldr	r2, [pc, #112]	; (81f10 <Reset_Handler+0x78>)
   81e9e:	429a      	cmp	r2, r3
   81ea0:	d010      	beq.n	81ec4 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81ea2:	4b1c      	ldr	r3, [pc, #112]	; (81f14 <Reset_Handler+0x7c>)
   81ea4:	4a19      	ldr	r2, [pc, #100]	; (81f0c <Reset_Handler+0x74>)
   81ea6:	429a      	cmp	r2, r3
   81ea8:	d20c      	bcs.n	81ec4 <Reset_Handler+0x2c>
   81eaa:	3b01      	subs	r3, #1
   81eac:	1a9b      	subs	r3, r3, r2
   81eae:	f023 0303 	bic.w	r3, r3, #3
   81eb2:	3304      	adds	r3, #4
   81eb4:	4413      	add	r3, r2
   81eb6:	4916      	ldr	r1, [pc, #88]	; (81f10 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81eb8:	f851 0b04 	ldr.w	r0, [r1], #4
   81ebc:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81ec0:	429a      	cmp	r2, r3
   81ec2:	d1f9      	bne.n	81eb8 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81ec4:	4b14      	ldr	r3, [pc, #80]	; (81f18 <Reset_Handler+0x80>)
   81ec6:	4a15      	ldr	r2, [pc, #84]	; (81f1c <Reset_Handler+0x84>)
   81ec8:	429a      	cmp	r2, r3
   81eca:	d20a      	bcs.n	81ee2 <Reset_Handler+0x4a>
   81ecc:	3b01      	subs	r3, #1
   81ece:	1a9b      	subs	r3, r3, r2
   81ed0:	f023 0303 	bic.w	r3, r3, #3
   81ed4:	3304      	adds	r3, #4
   81ed6:	4413      	add	r3, r2
		*pDest++ = 0;
   81ed8:	2100      	movs	r1, #0
   81eda:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81ede:	4293      	cmp	r3, r2
   81ee0:	d1fb      	bne.n	81eda <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81ee2:	4b0f      	ldr	r3, [pc, #60]	; (81f20 <Reset_Handler+0x88>)
   81ee4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81ee8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81eec:	490d      	ldr	r1, [pc, #52]	; (81f24 <Reset_Handler+0x8c>)
   81eee:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81ef0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81ef8:	d203      	bcs.n	81f02 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81efa:	688b      	ldr	r3, [r1, #8]
   81efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81f00:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81f02:	4b09      	ldr	r3, [pc, #36]	; (81f28 <Reset_Handler+0x90>)
   81f04:	4798      	blx	r3

	/* Branch to main function */
	main();
   81f06:	4b09      	ldr	r3, [pc, #36]	; (81f2c <Reset_Handler+0x94>)
   81f08:	4798      	blx	r3
   81f0a:	e7fe      	b.n	81f0a <Reset_Handler+0x72>
   81f0c:	20070000 	.word	0x20070000
   81f10:	0008649c 	.word	0x0008649c
   81f14:	20070b70 	.word	0x20070b70
   81f18:	20071470 	.word	0x20071470
   81f1c:	20070b70 	.word	0x20070b70
   81f20:	00080000 	.word	0x00080000
   81f24:	e000ed00 	.word	0xe000ed00
   81f28:	00082429 	.word	0x00082429
   81f2c:	00082389 	.word	0x00082389

00081f30 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81f30:	4b3d      	ldr	r3, [pc, #244]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81f34:	f003 0303 	and.w	r3, r3, #3
   81f38:	2b03      	cmp	r3, #3
   81f3a:	d80e      	bhi.n	81f5a <SystemCoreClockUpdate+0x2a>
   81f3c:	e8df f003 	tbb	[pc, r3]
   81f40:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81f44:	4b39      	ldr	r3, [pc, #228]	; (8202c <SystemCoreClockUpdate+0xfc>)
   81f46:	695b      	ldr	r3, [r3, #20]
   81f48:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81f4c:	bf14      	ite	ne
   81f4e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81f52:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81f56:	4b36      	ldr	r3, [pc, #216]	; (82030 <SystemCoreClockUpdate+0x100>)
   81f58:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81f5a:	4b33      	ldr	r3, [pc, #204]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81f62:	2b70      	cmp	r3, #112	; 0x70
   81f64:	d057      	beq.n	82016 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81f66:	4b30      	ldr	r3, [pc, #192]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81f6a:	4931      	ldr	r1, [pc, #196]	; (82030 <SystemCoreClockUpdate+0x100>)
   81f6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81f70:	680b      	ldr	r3, [r1, #0]
   81f72:	40d3      	lsrs	r3, r2
   81f74:	600b      	str	r3, [r1, #0]
   81f76:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81f78:	4b2b      	ldr	r3, [pc, #172]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81f7a:	6a1b      	ldr	r3, [r3, #32]
   81f7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81f80:	d003      	beq.n	81f8a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81f82:	4a2c      	ldr	r2, [pc, #176]	; (82034 <SystemCoreClockUpdate+0x104>)
   81f84:	4b2a      	ldr	r3, [pc, #168]	; (82030 <SystemCoreClockUpdate+0x100>)
   81f86:	601a      	str	r2, [r3, #0]
   81f88:	e7e7      	b.n	81f5a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81f8a:	4a2b      	ldr	r2, [pc, #172]	; (82038 <SystemCoreClockUpdate+0x108>)
   81f8c:	4b28      	ldr	r3, [pc, #160]	; (82030 <SystemCoreClockUpdate+0x100>)
   81f8e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81f90:	4b25      	ldr	r3, [pc, #148]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81f92:	6a1b      	ldr	r3, [r3, #32]
   81f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81f98:	2b10      	cmp	r3, #16
   81f9a:	d005      	beq.n	81fa8 <SystemCoreClockUpdate+0x78>
   81f9c:	2b20      	cmp	r3, #32
   81f9e:	d1dc      	bne.n	81f5a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81fa0:	4a24      	ldr	r2, [pc, #144]	; (82034 <SystemCoreClockUpdate+0x104>)
   81fa2:	4b23      	ldr	r3, [pc, #140]	; (82030 <SystemCoreClockUpdate+0x100>)
   81fa4:	601a      	str	r2, [r3, #0]
				break;
   81fa6:	e7d8      	b.n	81f5a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81fa8:	4a24      	ldr	r2, [pc, #144]	; (8203c <SystemCoreClockUpdate+0x10c>)
   81faa:	4b21      	ldr	r3, [pc, #132]	; (82030 <SystemCoreClockUpdate+0x100>)
   81fac:	601a      	str	r2, [r3, #0]
				break;
   81fae:	e7d4      	b.n	81f5a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81fb0:	4b1d      	ldr	r3, [pc, #116]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81fb2:	6a1b      	ldr	r3, [r3, #32]
   81fb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81fb8:	d00c      	beq.n	81fd4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81fba:	4a1e      	ldr	r2, [pc, #120]	; (82034 <SystemCoreClockUpdate+0x104>)
   81fbc:	4b1c      	ldr	r3, [pc, #112]	; (82030 <SystemCoreClockUpdate+0x100>)
   81fbe:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81fc0:	4b19      	ldr	r3, [pc, #100]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81fc4:	f003 0303 	and.w	r3, r3, #3
   81fc8:	2b02      	cmp	r3, #2
   81fca:	d016      	beq.n	81ffa <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81fcc:	4a1c      	ldr	r2, [pc, #112]	; (82040 <SystemCoreClockUpdate+0x110>)
   81fce:	4b18      	ldr	r3, [pc, #96]	; (82030 <SystemCoreClockUpdate+0x100>)
   81fd0:	601a      	str	r2, [r3, #0]
   81fd2:	e7c2      	b.n	81f5a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81fd4:	4a18      	ldr	r2, [pc, #96]	; (82038 <SystemCoreClockUpdate+0x108>)
   81fd6:	4b16      	ldr	r3, [pc, #88]	; (82030 <SystemCoreClockUpdate+0x100>)
   81fd8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81fda:	4b13      	ldr	r3, [pc, #76]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81fdc:	6a1b      	ldr	r3, [r3, #32]
   81fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81fe2:	2b10      	cmp	r3, #16
   81fe4:	d005      	beq.n	81ff2 <SystemCoreClockUpdate+0xc2>
   81fe6:	2b20      	cmp	r3, #32
   81fe8:	d1ea      	bne.n	81fc0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81fea:	4a12      	ldr	r2, [pc, #72]	; (82034 <SystemCoreClockUpdate+0x104>)
   81fec:	4b10      	ldr	r3, [pc, #64]	; (82030 <SystemCoreClockUpdate+0x100>)
   81fee:	601a      	str	r2, [r3, #0]
				break;
   81ff0:	e7e6      	b.n	81fc0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81ff2:	4a12      	ldr	r2, [pc, #72]	; (8203c <SystemCoreClockUpdate+0x10c>)
   81ff4:	4b0e      	ldr	r3, [pc, #56]	; (82030 <SystemCoreClockUpdate+0x100>)
   81ff6:	601a      	str	r2, [r3, #0]
				break;
   81ff8:	e7e2      	b.n	81fc0 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81ffa:	4a0b      	ldr	r2, [pc, #44]	; (82028 <SystemCoreClockUpdate+0xf8>)
   81ffc:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81ffe:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82000:	480b      	ldr	r0, [pc, #44]	; (82030 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82002:	f3c1 410a 	ubfx	r1, r1, #16, #11
   82006:	6803      	ldr	r3, [r0, #0]
   82008:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8200c:	b2d2      	uxtb	r2, r2
   8200e:	fbb3 f3f2 	udiv	r3, r3, r2
   82012:	6003      	str	r3, [r0, #0]
   82014:	e7a1      	b.n	81f5a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   82016:	4a06      	ldr	r2, [pc, #24]	; (82030 <SystemCoreClockUpdate+0x100>)
   82018:	6813      	ldr	r3, [r2, #0]
   8201a:	490a      	ldr	r1, [pc, #40]	; (82044 <SystemCoreClockUpdate+0x114>)
   8201c:	fba1 1303 	umull	r1, r3, r1, r3
   82020:	085b      	lsrs	r3, r3, #1
   82022:	6013      	str	r3, [r2, #0]
   82024:	4770      	bx	lr
   82026:	bf00      	nop
   82028:	400e0600 	.word	0x400e0600
   8202c:	400e1a10 	.word	0x400e1a10
   82030:	200701b4 	.word	0x200701b4
   82034:	00b71b00 	.word	0x00b71b00
   82038:	003d0900 	.word	0x003d0900
   8203c:	007a1200 	.word	0x007a1200
   82040:	0e4e1c00 	.word	0x0e4e1c00
   82044:	aaaaaaab 	.word	0xaaaaaaab

00082048 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82048:	4b0a      	ldr	r3, [pc, #40]	; (82074 <_sbrk+0x2c>)
   8204a:	681b      	ldr	r3, [r3, #0]
   8204c:	b153      	cbz	r3, 82064 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8204e:	4b09      	ldr	r3, [pc, #36]	; (82074 <_sbrk+0x2c>)
   82050:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82052:	181a      	adds	r2, r3, r0
   82054:	4908      	ldr	r1, [pc, #32]	; (82078 <_sbrk+0x30>)
   82056:	4291      	cmp	r1, r2
   82058:	db08      	blt.n	8206c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8205a:	4610      	mov	r0, r2
   8205c:	4a05      	ldr	r2, [pc, #20]	; (82074 <_sbrk+0x2c>)
   8205e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82060:	4618      	mov	r0, r3
   82062:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82064:	4a05      	ldr	r2, [pc, #20]	; (8207c <_sbrk+0x34>)
   82066:	4b03      	ldr	r3, [pc, #12]	; (82074 <_sbrk+0x2c>)
   82068:	601a      	str	r2, [r3, #0]
   8206a:	e7f0      	b.n	8204e <_sbrk+0x6>
		return (caddr_t) -1;	
   8206c:	f04f 30ff 	mov.w	r0, #4294967295
}
   82070:	4770      	bx	lr
   82072:	bf00      	nop
   82074:	200713f8 	.word	0x200713f8
   82078:	20087ffc 	.word	0x20087ffc
   8207c:	20073470 	.word	0x20073470

00082080 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82080:	f04f 30ff 	mov.w	r0, #4294967295
   82084:	4770      	bx	lr

00082086 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8208a:	604b      	str	r3, [r1, #4]

	return 0;
}
   8208c:	2000      	movs	r0, #0
   8208e:	4770      	bx	lr

00082090 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82090:	2001      	movs	r0, #1
   82092:	4770      	bx	lr

00082094 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82094:	2000      	movs	r0, #0
   82096:	4770      	bx	lr

00082098 <LCD_init_pins>:

enum showPage pagetoshow = MainPage;

//Initialize LCD PINS
void LCD_init_pins()
{
   82098:	b570      	push	{r4, r5, r6, lr}
			//GPIOS INITIALIZATION AS OUTPUT FOR DC/RESET/LED <- Will go into the function to init my connections
			pmc_enable_periph_clk(ID_PIOC);
   8209a:	200d      	movs	r0, #13
   8209c:	4e1f      	ldr	r6, [pc, #124]	; (8211c <LCD_init_pins+0x84>)
   8209e:	47b0      	blx	r6
			pmc_enable_periph_clk(ID_PIOA);
   820a0:	200b      	movs	r0, #11
   820a2:	47b0      	blx	r6
			
			gpio_configure_pin(PIO_PC23_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);  //GPIO in turn calls PIO
   820a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820a8:	2057      	movs	r0, #87	; 0x57
   820aa:	4c1d      	ldr	r4, [pc, #116]	; (82120 <LCD_init_pins+0x88>)
   820ac:	47a0      	blx	r4
			gpio_configure_pin(PIO_PC24_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   820ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820b2:	2058      	movs	r0, #88	; 0x58
   820b4:	47a0      	blx	r4
			gpio_configure_pin(PIO_PC25_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   820b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   820ba:	2059      	movs	r0, #89	; 0x59
   820bc:	47a0      	blx	r4
			
			//gpio_configure_pin(PIO_PC28_IDX,PIO_TYPE_PIO_INPUT | PIO_DEFAULT);
			
			
			//----------------Touch IRQ Setting--------------//
			pio_set_input(PIOC, PIO_PC28, PIO_PULLUP); 
   820be:	2201      	movs	r2, #1
   820c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   820c4:	4817      	ldr	r0, [pc, #92]	; (82124 <LCD_init_pins+0x8c>)
   820c6:	4b18      	ldr	r3, [pc, #96]	; (82128 <LCD_init_pins+0x90>)
   820c8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   820ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   820ce:	4b17      	ldr	r3, [pc, #92]	; (8212c <LCD_init_pins+0x94>)
   820d0:	601a      	str	r2, [r3, #0]
			
			NVIC_EnableIRQ(PIOC_IRQn); 
			//-----------------------------------------------//

			
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA25A_SPI0_MISO);
   820d2:	4d17      	ldr	r5, [pc, #92]	; (82130 <LCD_init_pins+0x98>)
   820d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   820d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820dc:	4628      	mov	r0, r5
   820de:	4c15      	ldr	r4, [pc, #84]	; (82134 <LCD_init_pins+0x9c>)
   820e0:	47a0      	blx	r4
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA26A_SPI0_MOSI);
   820e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   820e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820ea:	4628      	mov	r0, r5
   820ec:	47a0      	blx	r4
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA27A_SPI0_SPCK);
   820ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   820f2:	4611      	mov	r1, r2
   820f4:	4628      	mov	r0, r5
   820f6:	47a0      	blx	r4
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA28A_SPI0_NPCS0);
   820f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   820fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82100:	4628      	mov	r0, r5
   82102:	47a0      	blx	r4
			
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA29A_SPI0_NPCS1);
   82104:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82108:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8210c:	4628      	mov	r0, r5
   8210e:	47a0      	blx	r4
			
			pmc_enable_periph_clk(ID_SPI0);
   82110:	2018      	movs	r0, #24
   82112:	47b0      	blx	r6
			
			
			spi_master_init(SPI0);
   82114:	4808      	ldr	r0, [pc, #32]	; (82138 <LCD_init_pins+0xa0>)
   82116:	4b09      	ldr	r3, [pc, #36]	; (8213c <LCD_init_pins+0xa4>)
   82118:	4798      	blx	r3
   8211a:	bd70      	pop	{r4, r5, r6, pc}
   8211c:	00081e41 	.word	0x00081e41
   82120:	00081a41 	.word	0x00081a41
   82124:	400e1200 	.word	0x400e1200
   82128:	000819b3 	.word	0x000819b3
   8212c:	e000e100 	.word	0xe000e100
   82130:	400e0e00 	.word	0x400e0e00
   82134:	00081975 	.word	0x00081975
   82138:	40008000 	.word	0x40008000
   8213c:	00080c65 	.word	0x00080c65

00082140 <LCD_init_functions>:
}

//Initialize all the necessary libraries and functions

void LCD_init_functions()
{
   82140:	b508      	push	{r3, lr}
		 membag_init();
   82142:	4b04      	ldr	r3, [pc, #16]	; (82154 <LCD_init_functions+0x14>)
   82144:	4798      	blx	r3
		 
		 ili9341_init();
   82146:	4b04      	ldr	r3, [pc, #16]	; (82158 <LCD_init_functions+0x18>)
   82148:	4798      	blx	r3
		 
		 gfx_init();
   8214a:	4b04      	ldr	r3, [pc, #16]	; (8215c <LCD_init_functions+0x1c>)
   8214c:	4798      	blx	r3
		
		 win_init();
   8214e:	4b04      	ldr	r3, [pc, #16]	; (82160 <LCD_init_functions+0x20>)
   82150:	4798      	blx	r3
   82152:	bd08      	pop	{r3, pc}
   82154:	0008134d 	.word	0x0008134d
   82158:	000805a1 	.word	0x000805a1
   8215c:	00080c09 	.word	0x00080c09
   82160:	00080ea1 	.word	0x00080ea1

00082164 <LCD_setup_window>:
}

//we need a base window

void LCD_setup_window()
{
   82164:	b570      	push	{r4, r5, r6, lr}
   82166:	b086      	sub	sp, #24
		struct win_attributes root_attr;
		struct win_window *win_root;

		win_root = win_get_root();
   82168:	4b0c      	ldr	r3, [pc, #48]	; (8219c <LCD_setup_window+0x38>)
   8216a:	4798      	blx	r3
   8216c:	4606      	mov	r6, r0
		root_attr = *win_get_attributes(win_root);
   8216e:	4b0c      	ldr	r3, [pc, #48]	; (821a0 <LCD_setup_window+0x3c>)
   82170:	4798      	blx	r3
   82172:	466c      	mov	r4, sp
   82174:	4605      	mov	r5, r0
   82176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8217a:	e895 0003 	ldmia.w	r5, {r0, r1}
   8217e:	e884 0003 	stmia.w	r4, {r0, r1}
		root_attr.background = &atmel_logo_small;
   82182:	4b08      	ldr	r3, [pc, #32]	; (821a4 <LCD_setup_window+0x40>)
   82184:	9302      	str	r3, [sp, #8]
		win_set_attributes(win_root, &root_attr, WIN_ATTR_BACKGROUND);
   82186:	2204      	movs	r2, #4
   82188:	4669      	mov	r1, sp
   8218a:	4630      	mov	r0, r6
   8218c:	4b06      	ldr	r3, [pc, #24]	; (821a8 <LCD_setup_window+0x44>)
   8218e:	4798      	blx	r3

		win_show(win_root);
   82190:	4630      	mov	r0, r6
   82192:	4b06      	ldr	r3, [pc, #24]	; (821ac <LCD_setup_window+0x48>)
   82194:	4798      	blx	r3
	
}
   82196:	b006      	add	sp, #24
   82198:	bd70      	pop	{r4, r5, r6, pc}
   8219a:	bf00      	nop
   8219c:	00080f05 	.word	0x00080f05
   821a0:	00080f0d 	.word	0x00080f0d
   821a4:	200701b8 	.word	0x200701b8
   821a8:	0008128d 	.word	0x0008128d
   821ac:	00081331 	.word	0x00081331

000821b0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   821b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   821b2:	b083      	sub	sp, #12
   821b4:	4604      	mov	r4, r0
   821b6:	460d      	mov	r5, r1
	uint32_t val = 0;
   821b8:	2300      	movs	r3, #0
   821ba:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   821bc:	4b20      	ldr	r3, [pc, #128]	; (82240 <usart_serial_getchar+0x90>)
   821be:	4298      	cmp	r0, r3
   821c0:	d00d      	beq.n	821de <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   821c2:	4b20      	ldr	r3, [pc, #128]	; (82244 <usart_serial_getchar+0x94>)
   821c4:	4298      	cmp	r0, r3
   821c6:	d012      	beq.n	821ee <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   821c8:	4b1f      	ldr	r3, [pc, #124]	; (82248 <usart_serial_getchar+0x98>)
   821ca:	4298      	cmp	r0, r3
   821cc:	d019      	beq.n	82202 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   821ce:	4b1f      	ldr	r3, [pc, #124]	; (8224c <usart_serial_getchar+0x9c>)
   821d0:	429c      	cmp	r4, r3
   821d2:	d020      	beq.n	82216 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   821d4:	4b1e      	ldr	r3, [pc, #120]	; (82250 <usart_serial_getchar+0xa0>)
   821d6:	429c      	cmp	r4, r3
   821d8:	d027      	beq.n	8222a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   821da:	b003      	add	sp, #12
   821dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   821de:	461f      	mov	r7, r3
   821e0:	4e1c      	ldr	r6, [pc, #112]	; (82254 <usart_serial_getchar+0xa4>)
   821e2:	4629      	mov	r1, r5
   821e4:	4638      	mov	r0, r7
   821e6:	47b0      	blx	r6
   821e8:	2800      	cmp	r0, #0
   821ea:	d1fa      	bne.n	821e2 <usart_serial_getchar+0x32>
   821ec:	e7ef      	b.n	821ce <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   821ee:	461f      	mov	r7, r3
   821f0:	4e19      	ldr	r6, [pc, #100]	; (82258 <usart_serial_getchar+0xa8>)
   821f2:	a901      	add	r1, sp, #4
   821f4:	4638      	mov	r0, r7
   821f6:	47b0      	blx	r6
   821f8:	2800      	cmp	r0, #0
   821fa:	d1fa      	bne.n	821f2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   821fc:	9b01      	ldr	r3, [sp, #4]
   821fe:	702b      	strb	r3, [r5, #0]
   82200:	e7e8      	b.n	821d4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   82202:	461e      	mov	r6, r3
   82204:	4c14      	ldr	r4, [pc, #80]	; (82258 <usart_serial_getchar+0xa8>)
   82206:	a901      	add	r1, sp, #4
   82208:	4630      	mov	r0, r6
   8220a:	47a0      	blx	r4
   8220c:	2800      	cmp	r0, #0
   8220e:	d1fa      	bne.n	82206 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   82210:	9b01      	ldr	r3, [sp, #4]
   82212:	702b      	strb	r3, [r5, #0]
   82214:	e7e1      	b.n	821da <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   82216:	461e      	mov	r6, r3
   82218:	4c0f      	ldr	r4, [pc, #60]	; (82258 <usart_serial_getchar+0xa8>)
   8221a:	a901      	add	r1, sp, #4
   8221c:	4630      	mov	r0, r6
   8221e:	47a0      	blx	r4
   82220:	2800      	cmp	r0, #0
   82222:	d1fa      	bne.n	8221a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   82224:	9b01      	ldr	r3, [sp, #4]
   82226:	702b      	strb	r3, [r5, #0]
   82228:	e7d7      	b.n	821da <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8222a:	461e      	mov	r6, r3
   8222c:	4c0a      	ldr	r4, [pc, #40]	; (82258 <usart_serial_getchar+0xa8>)
   8222e:	a901      	add	r1, sp, #4
   82230:	4630      	mov	r0, r6
   82232:	47a0      	blx	r4
   82234:	2800      	cmp	r0, #0
   82236:	d1fa      	bne.n	8222e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   82238:	9b01      	ldr	r3, [sp, #4]
   8223a:	702b      	strb	r3, [r5, #0]
}
   8223c:	e7cd      	b.n	821da <usart_serial_getchar+0x2a>
   8223e:	bf00      	nop
   82240:	400e0800 	.word	0x400e0800
   82244:	40098000 	.word	0x40098000
   82248:	4009c000 	.word	0x4009c000
   8224c:	400a0000 	.word	0x400a0000
   82250:	400a4000 	.word	0x400a4000
   82254:	00081581 	.word	0x00081581
   82258:	000815a7 	.word	0x000815a7

0008225c <usart_serial_putchar>:
{
   8225c:	b570      	push	{r4, r5, r6, lr}
   8225e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   82260:	4b1e      	ldr	r3, [pc, #120]	; (822dc <usart_serial_putchar+0x80>)
   82262:	4298      	cmp	r0, r3
   82264:	d00d      	beq.n	82282 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   82266:	4b1e      	ldr	r3, [pc, #120]	; (822e0 <usart_serial_putchar+0x84>)
   82268:	4298      	cmp	r0, r3
   8226a:	d013      	beq.n	82294 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8226c:	4b1d      	ldr	r3, [pc, #116]	; (822e4 <usart_serial_putchar+0x88>)
   8226e:	4298      	cmp	r0, r3
   82270:	d019      	beq.n	822a6 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   82272:	4b1d      	ldr	r3, [pc, #116]	; (822e8 <usart_serial_putchar+0x8c>)
   82274:	4298      	cmp	r0, r3
   82276:	d01f      	beq.n	822b8 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   82278:	4b1c      	ldr	r3, [pc, #112]	; (822ec <usart_serial_putchar+0x90>)
   8227a:	4298      	cmp	r0, r3
   8227c:	d025      	beq.n	822ca <usart_serial_putchar+0x6e>
	return 0;
   8227e:	2000      	movs	r0, #0
}
   82280:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   82282:	461e      	mov	r6, r3
   82284:	4d1a      	ldr	r5, [pc, #104]	; (822f0 <usart_serial_putchar+0x94>)
   82286:	4621      	mov	r1, r4
   82288:	4630      	mov	r0, r6
   8228a:	47a8      	blx	r5
   8228c:	2800      	cmp	r0, #0
   8228e:	d1fa      	bne.n	82286 <usart_serial_putchar+0x2a>
		return 1;
   82290:	2001      	movs	r0, #1
   82292:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82294:	461e      	mov	r6, r3
   82296:	4d17      	ldr	r5, [pc, #92]	; (822f4 <usart_serial_putchar+0x98>)
   82298:	4621      	mov	r1, r4
   8229a:	4630      	mov	r0, r6
   8229c:	47a8      	blx	r5
   8229e:	2800      	cmp	r0, #0
   822a0:	d1fa      	bne.n	82298 <usart_serial_putchar+0x3c>
		return 1;
   822a2:	2001      	movs	r0, #1
   822a4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   822a6:	461e      	mov	r6, r3
   822a8:	4d12      	ldr	r5, [pc, #72]	; (822f4 <usart_serial_putchar+0x98>)
   822aa:	4621      	mov	r1, r4
   822ac:	4630      	mov	r0, r6
   822ae:	47a8      	blx	r5
   822b0:	2800      	cmp	r0, #0
   822b2:	d1fa      	bne.n	822aa <usart_serial_putchar+0x4e>
		return 1;
   822b4:	2001      	movs	r0, #1
   822b6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   822b8:	461e      	mov	r6, r3
   822ba:	4d0e      	ldr	r5, [pc, #56]	; (822f4 <usart_serial_putchar+0x98>)
   822bc:	4621      	mov	r1, r4
   822be:	4630      	mov	r0, r6
   822c0:	47a8      	blx	r5
   822c2:	2800      	cmp	r0, #0
   822c4:	d1fa      	bne.n	822bc <usart_serial_putchar+0x60>
		return 1;
   822c6:	2001      	movs	r0, #1
   822c8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   822ca:	461e      	mov	r6, r3
   822cc:	4d09      	ldr	r5, [pc, #36]	; (822f4 <usart_serial_putchar+0x98>)
   822ce:	4621      	mov	r1, r4
   822d0:	4630      	mov	r0, r6
   822d2:	47a8      	blx	r5
   822d4:	2800      	cmp	r0, #0
   822d6:	d1fa      	bne.n	822ce <usart_serial_putchar+0x72>
		return 1;
   822d8:	2001      	movs	r0, #1
   822da:	bd70      	pop	{r4, r5, r6, pc}
   822dc:	400e0800 	.word	0x400e0800
   822e0:	40098000 	.word	0x40098000
   822e4:	4009c000 	.word	0x4009c000
   822e8:	400a0000 	.word	0x400a0000
   822ec:	400a4000 	.word	0x400a4000
   822f0:	00081571 	.word	0x00081571
   822f4:	00081593 	.word	0x00081593

000822f8 <piohandler>:
//--------------------------------------------------------------------//


//----------------Handler Function------------------------------------//
void piohandler(uint32_t p_x, uint32_t p_y)
{
   822f8:	b508      	push	{r3, lr}
	
	//printf("PIO handler running %d, %d\n", p_x,p_y);
	printf("PIO handle.\n");
   822fa:	4802      	ldr	r0, [pc, #8]	; (82304 <piohandler+0xc>)
   822fc:	4b02      	ldr	r3, [pc, #8]	; (82308 <piohandler+0x10>)
   822fe:	4798      	blx	r3
   82300:	bd08      	pop	{r3, pc}
   82302:	bf00      	nop
   82304:	000862f8 	.word	0x000862f8
   82308:	00082479 	.word	0x00082479

0008230c <config_console_uart>:
{
   8230c:	b530      	push	{r4, r5, lr}
   8230e:	b085      	sub	sp, #20
   82310:	2008      	movs	r0, #8
   82312:	4d12      	ldr	r5, [pc, #72]	; (8235c <config_console_uart+0x50>)
   82314:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   82316:	4c12      	ldr	r4, [pc, #72]	; (82360 <config_console_uart+0x54>)
   82318:	4b12      	ldr	r3, [pc, #72]	; (82364 <config_console_uart+0x58>)
   8231a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8231c:	4a12      	ldr	r2, [pc, #72]	; (82368 <config_console_uart+0x5c>)
   8231e:	4b13      	ldr	r3, [pc, #76]	; (8236c <config_console_uart+0x60>)
   82320:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82322:	4a13      	ldr	r2, [pc, #76]	; (82370 <config_console_uart+0x64>)
   82324:	4b13      	ldr	r3, [pc, #76]	; (82374 <config_console_uart+0x68>)
   82326:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82328:	4b13      	ldr	r3, [pc, #76]	; (82378 <config_console_uart+0x6c>)
   8232a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8232c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82330:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   82332:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82336:	9303      	str	r3, [sp, #12]
   82338:	2008      	movs	r0, #8
   8233a:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   8233c:	a901      	add	r1, sp, #4
   8233e:	4620      	mov	r0, r4
   82340:	4b0e      	ldr	r3, [pc, #56]	; (8237c <config_console_uart+0x70>)
   82342:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82344:	4d0e      	ldr	r5, [pc, #56]	; (82380 <config_console_uart+0x74>)
   82346:	682b      	ldr	r3, [r5, #0]
   82348:	2100      	movs	r1, #0
   8234a:	6898      	ldr	r0, [r3, #8]
   8234c:	4c0d      	ldr	r4, [pc, #52]	; (82384 <config_console_uart+0x78>)
   8234e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82350:	682b      	ldr	r3, [r5, #0]
   82352:	2100      	movs	r1, #0
   82354:	6858      	ldr	r0, [r3, #4]
   82356:	47a0      	blx	r4
}
   82358:	b005      	add	sp, #20
   8235a:	bd30      	pop	{r4, r5, pc}
   8235c:	00081e41 	.word	0x00081e41
   82360:	400e0800 	.word	0x400e0800
   82364:	20071444 	.word	0x20071444
   82368:	0008225d 	.word	0x0008225d
   8236c:	20071440 	.word	0x20071440
   82370:	000821b1 	.word	0x000821b1
   82374:	2007143c 	.word	0x2007143c
   82378:	0501bd00 	.word	0x0501bd00
   8237c:	0008153b 	.word	0x0008153b
   82380:	200701c4 	.word	0x200701c4
   82384:	00082629 	.word	0x00082629

00082388 <main>:
}



int main (void)
{
   82388:	b570      	push	{r4, r5, r6, lr}
   8238a:	b082      	sub	sp, #8
	/* Insert system clock initialization code here (sysclk_init()). */
	
	sysclk_init();
   8238c:	4b14      	ldr	r3, [pc, #80]	; (823e0 <main+0x58>)
   8238e:	4798      	blx	r3

	board_init();
   82390:	4b14      	ldr	r3, [pc, #80]	; (823e4 <main+0x5c>)
   82392:	4798      	blx	r3
	
	config_console_uart();
   82394:	4b14      	ldr	r3, [pc, #80]	; (823e8 <main+0x60>)
   82396:	4798      	blx	r3
	
	LCD_init_pins();
   82398:	4b14      	ldr	r3, [pc, #80]	; (823ec <main+0x64>)
   8239a:	4798      	blx	r3
	
	LCD_init_functions();
   8239c:	4b14      	ldr	r3, [pc, #80]	; (823f0 <main+0x68>)
   8239e:	4798      	blx	r3
	
	LCD_setup_window();
   823a0:	4b14      	ldr	r3, [pc, #80]	; (823f4 <main+0x6c>)
   823a2:	4798      	blx	r3
	
	ads7843_init();
   823a4:	4b14      	ldr	r3, [pc, #80]	; (823f8 <main+0x70>)
   823a6:	4798      	blx	r3
	
		
		uint32_t p_x;
		uint32_t p_y;
	
	ads7843_set_handler(piohandler);
   823a8:	4814      	ldr	r0, [pc, #80]	; (823fc <main+0x74>)
   823aa:	4b15      	ldr	r3, [pc, #84]	; (82400 <main+0x78>)
   823ac:	4798      	blx	r3
	
	ads7843_enable_interrupt();  //Is redundant
   823ae:	4b15      	ldr	r3, [pc, #84]	; (82404 <main+0x7c>)
   823b0:	4798      	blx	r3
		
		//gfx_draw_string(str,30, 50, &sysfont  , GFX_COLOR_DK_CYAN, GFX_COLOR_BLACK);
		
		//gfx_draw_string_aligned(str,250, 240, &sysfont  , GFX_COLOR_DK_CYAN, GFX_COLOR_BLACK,TEXT_POS_BOTTOM,TEXT_ALIGN_CENTER);
		
		if(ads7843_is_pressed())
   823b2:	4d15      	ldr	r5, [pc, #84]	; (82408 <main+0x80>)
		{
			printf("Touch screen pressed.\n");
   823b4:	4e15      	ldr	r6, [pc, #84]	; (8240c <main+0x84>)
   823b6:	4c16      	ldr	r4, [pc, #88]	; (82410 <main+0x88>)
   823b8:	e004      	b.n	823c4 <main+0x3c>
			ads7843_get_raw_point(&p_x, &p_y);
			printf("The user touched the screen at x = %d and y = %d",p_x,p_y);

		}
 		printf("This is Arduino Console UART Application.\n");
   823ba:	4816      	ldr	r0, [pc, #88]	; (82414 <main+0x8c>)
   823bc:	47a0      	blx	r4
//		}
//		win_show(wtk_button_as_child(btn));

//		LCD_task_function();
		
		delay_ms(1000);
   823be:	4816      	ldr	r0, [pc, #88]	; (82418 <main+0x90>)
   823c0:	4b16      	ldr	r3, [pc, #88]	; (8241c <main+0x94>)
   823c2:	4798      	blx	r3
		if(ads7843_is_pressed())
   823c4:	47a8      	blx	r5
   823c6:	2800      	cmp	r0, #0
   823c8:	d0f7      	beq.n	823ba <main+0x32>
			printf("Touch screen pressed.\n");
   823ca:	4630      	mov	r0, r6
   823cc:	47a0      	blx	r4
			ads7843_get_raw_point(&p_x, &p_y);
   823ce:	4669      	mov	r1, sp
   823d0:	a801      	add	r0, sp, #4
   823d2:	4b13      	ldr	r3, [pc, #76]	; (82420 <main+0x98>)
   823d4:	4798      	blx	r3
			printf("The user touched the screen at x = %d and y = %d",p_x,p_y);
   823d6:	9a00      	ldr	r2, [sp, #0]
   823d8:	9901      	ldr	r1, [sp, #4]
   823da:	4812      	ldr	r0, [pc, #72]	; (82424 <main+0x9c>)
   823dc:	47a0      	blx	r4
   823de:	e7ec      	b.n	823ba <main+0x32>
   823e0:	00081869 	.word	0x00081869
   823e4:	000818cd 	.word	0x000818cd
   823e8:	0008230d 	.word	0x0008230d
   823ec:	00082099 	.word	0x00082099
   823f0:	00082141 	.word	0x00082141
   823f4:	00082165 	.word	0x00082165
   823f8:	00080281 	.word	0x00080281
   823fc:	000822f9 	.word	0x000822f9
   82400:	0008021d 	.word	0x0008021d
   82404:	0008023d 	.word	0x0008023d
   82408:	00080209 	.word	0x00080209
   8240c:	00086280 	.word	0x00086280
   82410:	00082479 	.word	0x00082479
   82414:	000862cc 	.word	0x000862cc
   82418:	005b8d80 	.word	0x005b8d80
   8241c:	20070001 	.word	0x20070001
   82420:	0008024d 	.word	0x0008024d
   82424:	00086298 	.word	0x00086298

00082428 <__libc_init_array>:
   82428:	b570      	push	{r4, r5, r6, lr}
   8242a:	4e0f      	ldr	r6, [pc, #60]	; (82468 <__libc_init_array+0x40>)
   8242c:	4d0f      	ldr	r5, [pc, #60]	; (8246c <__libc_init_array+0x44>)
   8242e:	1b76      	subs	r6, r6, r5
   82430:	10b6      	asrs	r6, r6, #2
   82432:	bf18      	it	ne
   82434:	2400      	movne	r4, #0
   82436:	d005      	beq.n	82444 <__libc_init_array+0x1c>
   82438:	3401      	adds	r4, #1
   8243a:	f855 3b04 	ldr.w	r3, [r5], #4
   8243e:	4798      	blx	r3
   82440:	42a6      	cmp	r6, r4
   82442:	d1f9      	bne.n	82438 <__libc_init_array+0x10>
   82444:	4e0a      	ldr	r6, [pc, #40]	; (82470 <__libc_init_array+0x48>)
   82446:	4d0b      	ldr	r5, [pc, #44]	; (82474 <__libc_init_array+0x4c>)
   82448:	f004 f812 	bl	86470 <_init>
   8244c:	1b76      	subs	r6, r6, r5
   8244e:	10b6      	asrs	r6, r6, #2
   82450:	bf18      	it	ne
   82452:	2400      	movne	r4, #0
   82454:	d006      	beq.n	82464 <__libc_init_array+0x3c>
   82456:	3401      	adds	r4, #1
   82458:	f855 3b04 	ldr.w	r3, [r5], #4
   8245c:	4798      	blx	r3
   8245e:	42a6      	cmp	r6, r4
   82460:	d1f9      	bne.n	82456 <__libc_init_array+0x2e>
   82462:	bd70      	pop	{r4, r5, r6, pc}
   82464:	bd70      	pop	{r4, r5, r6, pc}
   82466:	bf00      	nop
   82468:	0008647c 	.word	0x0008647c
   8246c:	0008647c 	.word	0x0008647c
   82470:	00086484 	.word	0x00086484
   82474:	0008647c 	.word	0x0008647c

00082478 <iprintf>:
   82478:	b40f      	push	{r0, r1, r2, r3}
   8247a:	b510      	push	{r4, lr}
   8247c:	4b07      	ldr	r3, [pc, #28]	; (8249c <iprintf+0x24>)
   8247e:	b082      	sub	sp, #8
   82480:	ac04      	add	r4, sp, #16
   82482:	f854 2b04 	ldr.w	r2, [r4], #4
   82486:	6818      	ldr	r0, [r3, #0]
   82488:	4623      	mov	r3, r4
   8248a:	6881      	ldr	r1, [r0, #8]
   8248c:	9401      	str	r4, [sp, #4]
   8248e:	f000 fa09 	bl	828a4 <_vfiprintf_r>
   82492:	b002      	add	sp, #8
   82494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82498:	b004      	add	sp, #16
   8249a:	4770      	bx	lr
   8249c:	200701c4 	.word	0x200701c4

000824a0 <memcpy>:
   824a0:	4684      	mov	ip, r0
   824a2:	ea41 0300 	orr.w	r3, r1, r0
   824a6:	f013 0303 	ands.w	r3, r3, #3
   824aa:	d149      	bne.n	82540 <memcpy+0xa0>
   824ac:	3a40      	subs	r2, #64	; 0x40
   824ae:	d323      	bcc.n	824f8 <memcpy+0x58>
   824b0:	680b      	ldr	r3, [r1, #0]
   824b2:	6003      	str	r3, [r0, #0]
   824b4:	684b      	ldr	r3, [r1, #4]
   824b6:	6043      	str	r3, [r0, #4]
   824b8:	688b      	ldr	r3, [r1, #8]
   824ba:	6083      	str	r3, [r0, #8]
   824bc:	68cb      	ldr	r3, [r1, #12]
   824be:	60c3      	str	r3, [r0, #12]
   824c0:	690b      	ldr	r3, [r1, #16]
   824c2:	6103      	str	r3, [r0, #16]
   824c4:	694b      	ldr	r3, [r1, #20]
   824c6:	6143      	str	r3, [r0, #20]
   824c8:	698b      	ldr	r3, [r1, #24]
   824ca:	6183      	str	r3, [r0, #24]
   824cc:	69cb      	ldr	r3, [r1, #28]
   824ce:	61c3      	str	r3, [r0, #28]
   824d0:	6a0b      	ldr	r3, [r1, #32]
   824d2:	6203      	str	r3, [r0, #32]
   824d4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   824d6:	6243      	str	r3, [r0, #36]	; 0x24
   824d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   824da:	6283      	str	r3, [r0, #40]	; 0x28
   824dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   824de:	62c3      	str	r3, [r0, #44]	; 0x2c
   824e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   824e2:	6303      	str	r3, [r0, #48]	; 0x30
   824e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   824e6:	6343      	str	r3, [r0, #52]	; 0x34
   824e8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   824ea:	6383      	str	r3, [r0, #56]	; 0x38
   824ec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   824ee:	63c3      	str	r3, [r0, #60]	; 0x3c
   824f0:	3040      	adds	r0, #64	; 0x40
   824f2:	3140      	adds	r1, #64	; 0x40
   824f4:	3a40      	subs	r2, #64	; 0x40
   824f6:	d2db      	bcs.n	824b0 <memcpy+0x10>
   824f8:	3230      	adds	r2, #48	; 0x30
   824fa:	d30b      	bcc.n	82514 <memcpy+0x74>
   824fc:	680b      	ldr	r3, [r1, #0]
   824fe:	6003      	str	r3, [r0, #0]
   82500:	684b      	ldr	r3, [r1, #4]
   82502:	6043      	str	r3, [r0, #4]
   82504:	688b      	ldr	r3, [r1, #8]
   82506:	6083      	str	r3, [r0, #8]
   82508:	68cb      	ldr	r3, [r1, #12]
   8250a:	60c3      	str	r3, [r0, #12]
   8250c:	3010      	adds	r0, #16
   8250e:	3110      	adds	r1, #16
   82510:	3a10      	subs	r2, #16
   82512:	d2f3      	bcs.n	824fc <memcpy+0x5c>
   82514:	320c      	adds	r2, #12
   82516:	d305      	bcc.n	82524 <memcpy+0x84>
   82518:	f851 3b04 	ldr.w	r3, [r1], #4
   8251c:	f840 3b04 	str.w	r3, [r0], #4
   82520:	3a04      	subs	r2, #4
   82522:	d2f9      	bcs.n	82518 <memcpy+0x78>
   82524:	3204      	adds	r2, #4
   82526:	d008      	beq.n	8253a <memcpy+0x9a>
   82528:	07d2      	lsls	r2, r2, #31
   8252a:	bf1c      	itt	ne
   8252c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82530:	f800 3b01 	strbne.w	r3, [r0], #1
   82534:	d301      	bcc.n	8253a <memcpy+0x9a>
   82536:	880b      	ldrh	r3, [r1, #0]
   82538:	8003      	strh	r3, [r0, #0]
   8253a:	4660      	mov	r0, ip
   8253c:	4770      	bx	lr
   8253e:	bf00      	nop
   82540:	2a08      	cmp	r2, #8
   82542:	d313      	bcc.n	8256c <memcpy+0xcc>
   82544:	078b      	lsls	r3, r1, #30
   82546:	d0b1      	beq.n	824ac <memcpy+0xc>
   82548:	f010 0303 	ands.w	r3, r0, #3
   8254c:	d0ae      	beq.n	824ac <memcpy+0xc>
   8254e:	f1c3 0304 	rsb	r3, r3, #4
   82552:	1ad2      	subs	r2, r2, r3
   82554:	07db      	lsls	r3, r3, #31
   82556:	bf1c      	itt	ne
   82558:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8255c:	f800 3b01 	strbne.w	r3, [r0], #1
   82560:	d3a4      	bcc.n	824ac <memcpy+0xc>
   82562:	f831 3b02 	ldrh.w	r3, [r1], #2
   82566:	f820 3b02 	strh.w	r3, [r0], #2
   8256a:	e79f      	b.n	824ac <memcpy+0xc>
   8256c:	3a04      	subs	r2, #4
   8256e:	d3d9      	bcc.n	82524 <memcpy+0x84>
   82570:	3a01      	subs	r2, #1
   82572:	f811 3b01 	ldrb.w	r3, [r1], #1
   82576:	f800 3b01 	strb.w	r3, [r0], #1
   8257a:	d2f9      	bcs.n	82570 <memcpy+0xd0>
   8257c:	780b      	ldrb	r3, [r1, #0]
   8257e:	7003      	strb	r3, [r0, #0]
   82580:	784b      	ldrb	r3, [r1, #1]
   82582:	7043      	strb	r3, [r0, #1]
   82584:	788b      	ldrb	r3, [r1, #2]
   82586:	7083      	strb	r3, [r0, #2]
   82588:	4660      	mov	r0, ip
   8258a:	4770      	bx	lr

0008258c <memset>:
   8258c:	b470      	push	{r4, r5, r6}
   8258e:	0786      	lsls	r6, r0, #30
   82590:	d046      	beq.n	82620 <memset+0x94>
   82592:	1e54      	subs	r4, r2, #1
   82594:	2a00      	cmp	r2, #0
   82596:	d041      	beq.n	8261c <memset+0x90>
   82598:	b2ca      	uxtb	r2, r1
   8259a:	4603      	mov	r3, r0
   8259c:	e002      	b.n	825a4 <memset+0x18>
   8259e:	f114 34ff 	adds.w	r4, r4, #4294967295
   825a2:	d33b      	bcc.n	8261c <memset+0x90>
   825a4:	f803 2b01 	strb.w	r2, [r3], #1
   825a8:	079d      	lsls	r5, r3, #30
   825aa:	d1f8      	bne.n	8259e <memset+0x12>
   825ac:	2c03      	cmp	r4, #3
   825ae:	d92e      	bls.n	8260e <memset+0x82>
   825b0:	b2cd      	uxtb	r5, r1
   825b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   825b6:	2c0f      	cmp	r4, #15
   825b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   825bc:	d919      	bls.n	825f2 <memset+0x66>
   825be:	4626      	mov	r6, r4
   825c0:	f103 0210 	add.w	r2, r3, #16
   825c4:	3e10      	subs	r6, #16
   825c6:	2e0f      	cmp	r6, #15
   825c8:	f842 5c10 	str.w	r5, [r2, #-16]
   825cc:	f842 5c0c 	str.w	r5, [r2, #-12]
   825d0:	f842 5c08 	str.w	r5, [r2, #-8]
   825d4:	f842 5c04 	str.w	r5, [r2, #-4]
   825d8:	f102 0210 	add.w	r2, r2, #16
   825dc:	d8f2      	bhi.n	825c4 <memset+0x38>
   825de:	f1a4 0210 	sub.w	r2, r4, #16
   825e2:	f022 020f 	bic.w	r2, r2, #15
   825e6:	f004 040f 	and.w	r4, r4, #15
   825ea:	3210      	adds	r2, #16
   825ec:	2c03      	cmp	r4, #3
   825ee:	4413      	add	r3, r2
   825f0:	d90d      	bls.n	8260e <memset+0x82>
   825f2:	461e      	mov	r6, r3
   825f4:	4622      	mov	r2, r4
   825f6:	3a04      	subs	r2, #4
   825f8:	2a03      	cmp	r2, #3
   825fa:	f846 5b04 	str.w	r5, [r6], #4
   825fe:	d8fa      	bhi.n	825f6 <memset+0x6a>
   82600:	1f22      	subs	r2, r4, #4
   82602:	f022 0203 	bic.w	r2, r2, #3
   82606:	3204      	adds	r2, #4
   82608:	4413      	add	r3, r2
   8260a:	f004 0403 	and.w	r4, r4, #3
   8260e:	b12c      	cbz	r4, 8261c <memset+0x90>
   82610:	b2c9      	uxtb	r1, r1
   82612:	441c      	add	r4, r3
   82614:	f803 1b01 	strb.w	r1, [r3], #1
   82618:	429c      	cmp	r4, r3
   8261a:	d1fb      	bne.n	82614 <memset+0x88>
   8261c:	bc70      	pop	{r4, r5, r6}
   8261e:	4770      	bx	lr
   82620:	4614      	mov	r4, r2
   82622:	4603      	mov	r3, r0
   82624:	e7c2      	b.n	825ac <memset+0x20>
   82626:	bf00      	nop

00082628 <setbuf>:
   82628:	2900      	cmp	r1, #0
   8262a:	bf0c      	ite	eq
   8262c:	2202      	moveq	r2, #2
   8262e:	2200      	movne	r2, #0
   82630:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82634:	f000 b800 	b.w	82638 <setvbuf>

00082638 <setvbuf>:
   82638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8263c:	4d61      	ldr	r5, [pc, #388]	; (827c4 <setvbuf+0x18c>)
   8263e:	b083      	sub	sp, #12
   82640:	682d      	ldr	r5, [r5, #0]
   82642:	4604      	mov	r4, r0
   82644:	460f      	mov	r7, r1
   82646:	4690      	mov	r8, r2
   82648:	461e      	mov	r6, r3
   8264a:	b115      	cbz	r5, 82652 <setvbuf+0x1a>
   8264c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8264e:	2b00      	cmp	r3, #0
   82650:	d064      	beq.n	8271c <setvbuf+0xe4>
   82652:	f1b8 0f02 	cmp.w	r8, #2
   82656:	d006      	beq.n	82666 <setvbuf+0x2e>
   82658:	f1b8 0f01 	cmp.w	r8, #1
   8265c:	f200 809f 	bhi.w	8279e <setvbuf+0x166>
   82660:	2e00      	cmp	r6, #0
   82662:	f2c0 809c 	blt.w	8279e <setvbuf+0x166>
   82666:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82668:	07d8      	lsls	r0, r3, #31
   8266a:	d534      	bpl.n	826d6 <setvbuf+0x9e>
   8266c:	4621      	mov	r1, r4
   8266e:	4628      	mov	r0, r5
   82670:	f001 f8b0 	bl	837d4 <_fflush_r>
   82674:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82676:	b141      	cbz	r1, 8268a <setvbuf+0x52>
   82678:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8267c:	4299      	cmp	r1, r3
   8267e:	d002      	beq.n	82686 <setvbuf+0x4e>
   82680:	4628      	mov	r0, r5
   82682:	f001 fa25 	bl	83ad0 <_free_r>
   82686:	2300      	movs	r3, #0
   82688:	6323      	str	r3, [r4, #48]	; 0x30
   8268a:	2200      	movs	r2, #0
   8268c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82690:	61a2      	str	r2, [r4, #24]
   82692:	6062      	str	r2, [r4, #4]
   82694:	061a      	lsls	r2, r3, #24
   82696:	d43a      	bmi.n	8270e <setvbuf+0xd6>
   82698:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   8269c:	f023 0303 	bic.w	r3, r3, #3
   826a0:	f1b8 0f02 	cmp.w	r8, #2
   826a4:	81a3      	strh	r3, [r4, #12]
   826a6:	d01d      	beq.n	826e4 <setvbuf+0xac>
   826a8:	ab01      	add	r3, sp, #4
   826aa:	466a      	mov	r2, sp
   826ac:	4621      	mov	r1, r4
   826ae:	4628      	mov	r0, r5
   826b0:	f001 fcac 	bl	8400c <__swhatbuf_r>
   826b4:	89a3      	ldrh	r3, [r4, #12]
   826b6:	4318      	orrs	r0, r3
   826b8:	81a0      	strh	r0, [r4, #12]
   826ba:	2e00      	cmp	r6, #0
   826bc:	d132      	bne.n	82724 <setvbuf+0xec>
   826be:	9e00      	ldr	r6, [sp, #0]
   826c0:	4630      	mov	r0, r6
   826c2:	f001 fd1b 	bl	840fc <malloc>
   826c6:	4607      	mov	r7, r0
   826c8:	2800      	cmp	r0, #0
   826ca:	d06b      	beq.n	827a4 <setvbuf+0x16c>
   826cc:	89a3      	ldrh	r3, [r4, #12]
   826ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   826d2:	81a3      	strh	r3, [r4, #12]
   826d4:	e028      	b.n	82728 <setvbuf+0xf0>
   826d6:	89a3      	ldrh	r3, [r4, #12]
   826d8:	0599      	lsls	r1, r3, #22
   826da:	d4c7      	bmi.n	8266c <setvbuf+0x34>
   826dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   826de:	f001 fc91 	bl	84004 <__retarget_lock_acquire_recursive>
   826e2:	e7c3      	b.n	8266c <setvbuf+0x34>
   826e4:	2500      	movs	r5, #0
   826e6:	2600      	movs	r6, #0
   826e8:	2001      	movs	r0, #1
   826ea:	6e61      	ldr	r1, [r4, #100]	; 0x64
   826ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
   826f0:	f043 0302 	orr.w	r3, r3, #2
   826f4:	60a6      	str	r6, [r4, #8]
   826f6:	07ce      	lsls	r6, r1, #31
   826f8:	81a3      	strh	r3, [r4, #12]
   826fa:	6160      	str	r0, [r4, #20]
   826fc:	6022      	str	r2, [r4, #0]
   826fe:	6122      	str	r2, [r4, #16]
   82700:	d401      	bmi.n	82706 <setvbuf+0xce>
   82702:	0598      	lsls	r0, r3, #22
   82704:	d53e      	bpl.n	82784 <setvbuf+0x14c>
   82706:	4628      	mov	r0, r5
   82708:	b003      	add	sp, #12
   8270a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8270e:	6921      	ldr	r1, [r4, #16]
   82710:	4628      	mov	r0, r5
   82712:	f001 f9dd 	bl	83ad0 <_free_r>
   82716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8271a:	e7bd      	b.n	82698 <setvbuf+0x60>
   8271c:	4628      	mov	r0, r5
   8271e:	f001 f8b1 	bl	83884 <__sinit>
   82722:	e796      	b.n	82652 <setvbuf+0x1a>
   82724:	2f00      	cmp	r7, #0
   82726:	d0cb      	beq.n	826c0 <setvbuf+0x88>
   82728:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8272a:	2b00      	cmp	r3, #0
   8272c:	d033      	beq.n	82796 <setvbuf+0x15e>
   8272e:	9b00      	ldr	r3, [sp, #0]
   82730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82734:	429e      	cmp	r6, r3
   82736:	bf1c      	itt	ne
   82738:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   8273c:	81a2      	strhne	r2, [r4, #12]
   8273e:	f1b8 0f01 	cmp.w	r8, #1
   82742:	bf04      	itt	eq
   82744:	f042 0201 	orreq.w	r2, r2, #1
   82748:	81a2      	strheq	r2, [r4, #12]
   8274a:	b292      	uxth	r2, r2
   8274c:	f012 0308 	ands.w	r3, r2, #8
   82750:	6027      	str	r7, [r4, #0]
   82752:	6127      	str	r7, [r4, #16]
   82754:	6166      	str	r6, [r4, #20]
   82756:	d00e      	beq.n	82776 <setvbuf+0x13e>
   82758:	07d1      	lsls	r1, r2, #31
   8275a:	d51a      	bpl.n	82792 <setvbuf+0x15a>
   8275c:	2300      	movs	r3, #0
   8275e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82760:	4276      	negs	r6, r6
   82762:	f015 0501 	ands.w	r5, r5, #1
   82766:	61a6      	str	r6, [r4, #24]
   82768:	60a3      	str	r3, [r4, #8]
   8276a:	d009      	beq.n	82780 <setvbuf+0x148>
   8276c:	2500      	movs	r5, #0
   8276e:	4628      	mov	r0, r5
   82770:	b003      	add	sp, #12
   82772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82776:	60a3      	str	r3, [r4, #8]
   82778:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8277a:	f015 0501 	ands.w	r5, r5, #1
   8277e:	d1f5      	bne.n	8276c <setvbuf+0x134>
   82780:	0593      	lsls	r3, r2, #22
   82782:	d4c0      	bmi.n	82706 <setvbuf+0xce>
   82784:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82786:	f001 fc3f 	bl	84008 <__retarget_lock_release_recursive>
   8278a:	4628      	mov	r0, r5
   8278c:	b003      	add	sp, #12
   8278e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82792:	60a6      	str	r6, [r4, #8]
   82794:	e7f0      	b.n	82778 <setvbuf+0x140>
   82796:	4628      	mov	r0, r5
   82798:	f001 f874 	bl	83884 <__sinit>
   8279c:	e7c7      	b.n	8272e <setvbuf+0xf6>
   8279e:	f04f 35ff 	mov.w	r5, #4294967295
   827a2:	e7b0      	b.n	82706 <setvbuf+0xce>
   827a4:	f8dd 9000 	ldr.w	r9, [sp]
   827a8:	45b1      	cmp	r9, r6
   827aa:	d004      	beq.n	827b6 <setvbuf+0x17e>
   827ac:	4648      	mov	r0, r9
   827ae:	f001 fca5 	bl	840fc <malloc>
   827b2:	4607      	mov	r7, r0
   827b4:	b920      	cbnz	r0, 827c0 <setvbuf+0x188>
   827b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   827ba:	f04f 35ff 	mov.w	r5, #4294967295
   827be:	e792      	b.n	826e6 <setvbuf+0xae>
   827c0:	464e      	mov	r6, r9
   827c2:	e783      	b.n	826cc <setvbuf+0x94>
   827c4:	200701c4 	.word	0x200701c4

000827c8 <strlen>:
   827c8:	f020 0103 	bic.w	r1, r0, #3
   827cc:	f010 0003 	ands.w	r0, r0, #3
   827d0:	f1c0 0000 	rsb	r0, r0, #0
   827d4:	f851 3b04 	ldr.w	r3, [r1], #4
   827d8:	f100 0c04 	add.w	ip, r0, #4
   827dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   827e0:	f06f 0200 	mvn.w	r2, #0
   827e4:	bf1c      	itt	ne
   827e6:	fa22 f20c 	lsrne.w	r2, r2, ip
   827ea:	4313      	orrne	r3, r2
   827ec:	f04f 0c01 	mov.w	ip, #1
   827f0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   827f4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   827f8:	eba3 020c 	sub.w	r2, r3, ip
   827fc:	ea22 0203 	bic.w	r2, r2, r3
   82800:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82804:	bf04      	itt	eq
   82806:	f851 3b04 	ldreq.w	r3, [r1], #4
   8280a:	3004      	addeq	r0, #4
   8280c:	d0f4      	beq.n	827f8 <strlen+0x30>
   8280e:	f1c2 0100 	rsb	r1, r2, #0
   82812:	ea02 0201 	and.w	r2, r2, r1
   82816:	fab2 f282 	clz	r2, r2
   8281a:	f1c2 021f 	rsb	r2, r2, #31
   8281e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82822:	4770      	bx	lr

00082824 <__sprint_r.part.0>:
   82824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82828:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8282a:	4693      	mov	fp, r2
   8282c:	049c      	lsls	r4, r3, #18
   8282e:	d52f      	bpl.n	82890 <__sprint_r.part.0+0x6c>
   82830:	6893      	ldr	r3, [r2, #8]
   82832:	6812      	ldr	r2, [r2, #0]
   82834:	b353      	cbz	r3, 8288c <__sprint_r.part.0+0x68>
   82836:	460e      	mov	r6, r1
   82838:	4607      	mov	r7, r0
   8283a:	f102 0908 	add.w	r9, r2, #8
   8283e:	e919 0420 	ldmdb	r9, {r5, sl}
   82842:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82846:	d017      	beq.n	82878 <__sprint_r.part.0+0x54>
   82848:	2400      	movs	r4, #0
   8284a:	3d04      	subs	r5, #4
   8284c:	e001      	b.n	82852 <__sprint_r.part.0+0x2e>
   8284e:	45a0      	cmp	r8, r4
   82850:	d010      	beq.n	82874 <__sprint_r.part.0+0x50>
   82852:	4632      	mov	r2, r6
   82854:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82858:	4638      	mov	r0, r7
   8285a:	f001 f8b5 	bl	839c8 <_fputwc_r>
   8285e:	1c43      	adds	r3, r0, #1
   82860:	f104 0401 	add.w	r4, r4, #1
   82864:	d1f3      	bne.n	8284e <__sprint_r.part.0+0x2a>
   82866:	2300      	movs	r3, #0
   82868:	f8cb 3008 	str.w	r3, [fp, #8]
   8286c:	f8cb 3004 	str.w	r3, [fp, #4]
   82870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82874:	f8db 3008 	ldr.w	r3, [fp, #8]
   82878:	f02a 0a03 	bic.w	sl, sl, #3
   8287c:	eba3 030a 	sub.w	r3, r3, sl
   82880:	f8cb 3008 	str.w	r3, [fp, #8]
   82884:	f109 0908 	add.w	r9, r9, #8
   82888:	2b00      	cmp	r3, #0
   8288a:	d1d8      	bne.n	8283e <__sprint_r.part.0+0x1a>
   8288c:	2000      	movs	r0, #0
   8288e:	e7ea      	b.n	82866 <__sprint_r.part.0+0x42>
   82890:	f001 fa04 	bl	83c9c <__sfvwrite_r>
   82894:	2300      	movs	r3, #0
   82896:	f8cb 3008 	str.w	r3, [fp, #8]
   8289a:	f8cb 3004 	str.w	r3, [fp, #4]
   8289e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828a2:	bf00      	nop

000828a4 <_vfiprintf_r>:
   828a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828a8:	b0ad      	sub	sp, #180	; 0xb4
   828aa:	461d      	mov	r5, r3
   828ac:	468b      	mov	fp, r1
   828ae:	4690      	mov	r8, r2
   828b0:	9307      	str	r3, [sp, #28]
   828b2:	9006      	str	r0, [sp, #24]
   828b4:	b118      	cbz	r0, 828be <_vfiprintf_r+0x1a>
   828b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   828b8:	2b00      	cmp	r3, #0
   828ba:	f000 80f3 	beq.w	82aa4 <_vfiprintf_r+0x200>
   828be:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   828c2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   828c6:	07df      	lsls	r7, r3, #31
   828c8:	b281      	uxth	r1, r0
   828ca:	d402      	bmi.n	828d2 <_vfiprintf_r+0x2e>
   828cc:	058e      	lsls	r6, r1, #22
   828ce:	f140 80fc 	bpl.w	82aca <_vfiprintf_r+0x226>
   828d2:	048c      	lsls	r4, r1, #18
   828d4:	d40a      	bmi.n	828ec <_vfiprintf_r+0x48>
   828d6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   828da:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   828de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   828e2:	f8ab 100c 	strh.w	r1, [fp, #12]
   828e6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   828ea:	b289      	uxth	r1, r1
   828ec:	0708      	lsls	r0, r1, #28
   828ee:	f140 80b3 	bpl.w	82a58 <_vfiprintf_r+0x1b4>
   828f2:	f8db 3010 	ldr.w	r3, [fp, #16]
   828f6:	2b00      	cmp	r3, #0
   828f8:	f000 80ae 	beq.w	82a58 <_vfiprintf_r+0x1b4>
   828fc:	f001 031a 	and.w	r3, r1, #26
   82900:	2b0a      	cmp	r3, #10
   82902:	f000 80b5 	beq.w	82a70 <_vfiprintf_r+0x1cc>
   82906:	2300      	movs	r3, #0
   82908:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   8290c:	46d1      	mov	r9, sl
   8290e:	930b      	str	r3, [sp, #44]	; 0x2c
   82910:	9303      	str	r3, [sp, #12]
   82912:	9311      	str	r3, [sp, #68]	; 0x44
   82914:	9310      	str	r3, [sp, #64]	; 0x40
   82916:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8291a:	f8cd b010 	str.w	fp, [sp, #16]
   8291e:	f898 3000 	ldrb.w	r3, [r8]
   82922:	4644      	mov	r4, r8
   82924:	b1fb      	cbz	r3, 82966 <_vfiprintf_r+0xc2>
   82926:	2b25      	cmp	r3, #37	; 0x25
   82928:	d102      	bne.n	82930 <_vfiprintf_r+0x8c>
   8292a:	e01c      	b.n	82966 <_vfiprintf_r+0xc2>
   8292c:	2b25      	cmp	r3, #37	; 0x25
   8292e:	d003      	beq.n	82938 <_vfiprintf_r+0x94>
   82930:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82934:	2b00      	cmp	r3, #0
   82936:	d1f9      	bne.n	8292c <_vfiprintf_r+0x88>
   82938:	eba4 0508 	sub.w	r5, r4, r8
   8293c:	b19d      	cbz	r5, 82966 <_vfiprintf_r+0xc2>
   8293e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82940:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82942:	3301      	adds	r3, #1
   82944:	442a      	add	r2, r5
   82946:	2b07      	cmp	r3, #7
   82948:	f8c9 8000 	str.w	r8, [r9]
   8294c:	f8c9 5004 	str.w	r5, [r9, #4]
   82950:	9211      	str	r2, [sp, #68]	; 0x44
   82952:	9310      	str	r3, [sp, #64]	; 0x40
   82954:	dd7a      	ble.n	82a4c <_vfiprintf_r+0x1a8>
   82956:	2a00      	cmp	r2, #0
   82958:	f040 84b5 	bne.w	832c6 <_vfiprintf_r+0xa22>
   8295c:	46d1      	mov	r9, sl
   8295e:	9b03      	ldr	r3, [sp, #12]
   82960:	9210      	str	r2, [sp, #64]	; 0x40
   82962:	442b      	add	r3, r5
   82964:	9303      	str	r3, [sp, #12]
   82966:	7823      	ldrb	r3, [r4, #0]
   82968:	2b00      	cmp	r3, #0
   8296a:	f000 83e5 	beq.w	83138 <_vfiprintf_r+0x894>
   8296e:	2000      	movs	r0, #0
   82970:	f04f 0300 	mov.w	r3, #0
   82974:	f104 0801 	add.w	r8, r4, #1
   82978:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8297c:	7862      	ldrb	r2, [r4, #1]
   8297e:	4606      	mov	r6, r0
   82980:	4605      	mov	r5, r0
   82982:	4603      	mov	r3, r0
   82984:	f04f 34ff 	mov.w	r4, #4294967295
   82988:	f108 0801 	add.w	r8, r8, #1
   8298c:	f1a2 0120 	sub.w	r1, r2, #32
   82990:	2958      	cmp	r1, #88	; 0x58
   82992:	f200 82d9 	bhi.w	82f48 <_vfiprintf_r+0x6a4>
   82996:	e8df f011 	tbh	[pc, r1, lsl #1]
   8299a:	0228      	.short	0x0228
   8299c:	02d702d7 	.word	0x02d702d7
   829a0:	02d70230 	.word	0x02d70230
   829a4:	02d702d7 	.word	0x02d702d7
   829a8:	02d702d7 	.word	0x02d702d7
   829ac:	00a002d7 	.word	0x00a002d7
   829b0:	02d70288 	.word	0x02d70288
   829b4:	02b800a8 	.word	0x02b800a8
   829b8:	01a602d7 	.word	0x01a602d7
   829bc:	01ab01ab 	.word	0x01ab01ab
   829c0:	01ab01ab 	.word	0x01ab01ab
   829c4:	01ab01ab 	.word	0x01ab01ab
   829c8:	01ab01ab 	.word	0x01ab01ab
   829cc:	02d701ab 	.word	0x02d701ab
   829d0:	02d702d7 	.word	0x02d702d7
   829d4:	02d702d7 	.word	0x02d702d7
   829d8:	02d702d7 	.word	0x02d702d7
   829dc:	02d702d7 	.word	0x02d702d7
   829e0:	01b902d7 	.word	0x01b902d7
   829e4:	02d702d7 	.word	0x02d702d7
   829e8:	02d702d7 	.word	0x02d702d7
   829ec:	02d702d7 	.word	0x02d702d7
   829f0:	02d702d7 	.word	0x02d702d7
   829f4:	02d702d7 	.word	0x02d702d7
   829f8:	02d7019e 	.word	0x02d7019e
   829fc:	02d702d7 	.word	0x02d702d7
   82a00:	02d702d7 	.word	0x02d702d7
   82a04:	02d701a2 	.word	0x02d701a2
   82a08:	025a02d7 	.word	0x025a02d7
   82a0c:	02d702d7 	.word	0x02d702d7
   82a10:	02d702d7 	.word	0x02d702d7
   82a14:	02d702d7 	.word	0x02d702d7
   82a18:	02d702d7 	.word	0x02d702d7
   82a1c:	02d702d7 	.word	0x02d702d7
   82a20:	02220261 	.word	0x02220261
   82a24:	02d702d7 	.word	0x02d702d7
   82a28:	027602d7 	.word	0x027602d7
   82a2c:	02d70222 	.word	0x02d70222
   82a30:	027b02d7 	.word	0x027b02d7
   82a34:	01fc02d7 	.word	0x01fc02d7
   82a38:	02100189 	.word	0x02100189
   82a3c:	02d702d2 	.word	0x02d702d2
   82a40:	02d70295 	.word	0x02d70295
   82a44:	02d700ad 	.word	0x02d700ad
   82a48:	023502d7 	.word	0x023502d7
   82a4c:	f109 0908 	add.w	r9, r9, #8
   82a50:	9b03      	ldr	r3, [sp, #12]
   82a52:	442b      	add	r3, r5
   82a54:	9303      	str	r3, [sp, #12]
   82a56:	e786      	b.n	82966 <_vfiprintf_r+0xc2>
   82a58:	4659      	mov	r1, fp
   82a5a:	9806      	ldr	r0, [sp, #24]
   82a5c:	f000 fdaa 	bl	835b4 <__swsetup_r>
   82a60:	bb18      	cbnz	r0, 82aaa <_vfiprintf_r+0x206>
   82a62:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82a66:	f001 031a 	and.w	r3, r1, #26
   82a6a:	2b0a      	cmp	r3, #10
   82a6c:	f47f af4b 	bne.w	82906 <_vfiprintf_r+0x62>
   82a70:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82a74:	2b00      	cmp	r3, #0
   82a76:	f6ff af46 	blt.w	82906 <_vfiprintf_r+0x62>
   82a7a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82a7e:	07db      	lsls	r3, r3, #31
   82a80:	d405      	bmi.n	82a8e <_vfiprintf_r+0x1ea>
   82a82:	058f      	lsls	r7, r1, #22
   82a84:	d403      	bmi.n	82a8e <_vfiprintf_r+0x1ea>
   82a86:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82a8a:	f001 fabd 	bl	84008 <__retarget_lock_release_recursive>
   82a8e:	462b      	mov	r3, r5
   82a90:	4642      	mov	r2, r8
   82a92:	4659      	mov	r1, fp
   82a94:	9806      	ldr	r0, [sp, #24]
   82a96:	f000 fd49 	bl	8352c <__sbprintf>
   82a9a:	9003      	str	r0, [sp, #12]
   82a9c:	9803      	ldr	r0, [sp, #12]
   82a9e:	b02d      	add	sp, #180	; 0xb4
   82aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82aa4:	f000 feee 	bl	83884 <__sinit>
   82aa8:	e709      	b.n	828be <_vfiprintf_r+0x1a>
   82aaa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82aae:	07d9      	lsls	r1, r3, #31
   82ab0:	d404      	bmi.n	82abc <_vfiprintf_r+0x218>
   82ab2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82ab6:	059a      	lsls	r2, r3, #22
   82ab8:	f140 84ae 	bpl.w	83418 <_vfiprintf_r+0xb74>
   82abc:	f04f 33ff 	mov.w	r3, #4294967295
   82ac0:	9303      	str	r3, [sp, #12]
   82ac2:	9803      	ldr	r0, [sp, #12]
   82ac4:	b02d      	add	sp, #180	; 0xb4
   82ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82aca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82ace:	f001 fa99 	bl	84004 <__retarget_lock_acquire_recursive>
   82ad2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82ad6:	b281      	uxth	r1, r0
   82ad8:	e6fb      	b.n	828d2 <_vfiprintf_r+0x2e>
   82ada:	9907      	ldr	r1, [sp, #28]
   82adc:	460a      	mov	r2, r1
   82ade:	680d      	ldr	r5, [r1, #0]
   82ae0:	3204      	adds	r2, #4
   82ae2:	2d00      	cmp	r5, #0
   82ae4:	9207      	str	r2, [sp, #28]
   82ae6:	da02      	bge.n	82aee <_vfiprintf_r+0x24a>
   82ae8:	426d      	negs	r5, r5
   82aea:	f043 0304 	orr.w	r3, r3, #4
   82aee:	f898 2000 	ldrb.w	r2, [r8]
   82af2:	e749      	b.n	82988 <_vfiprintf_r+0xe4>
   82af4:	9508      	str	r5, [sp, #32]
   82af6:	069e      	lsls	r6, r3, #26
   82af8:	f100 845a 	bmi.w	833b0 <_vfiprintf_r+0xb0c>
   82afc:	9907      	ldr	r1, [sp, #28]
   82afe:	06dd      	lsls	r5, r3, #27
   82b00:	460a      	mov	r2, r1
   82b02:	f100 83ef 	bmi.w	832e4 <_vfiprintf_r+0xa40>
   82b06:	0658      	lsls	r0, r3, #25
   82b08:	f140 83ec 	bpl.w	832e4 <_vfiprintf_r+0xa40>
   82b0c:	2700      	movs	r7, #0
   82b0e:	2201      	movs	r2, #1
   82b10:	880e      	ldrh	r6, [r1, #0]
   82b12:	3104      	adds	r1, #4
   82b14:	9107      	str	r1, [sp, #28]
   82b16:	f04f 0100 	mov.w	r1, #0
   82b1a:	2500      	movs	r5, #0
   82b1c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82b20:	1c61      	adds	r1, r4, #1
   82b22:	f000 8117 	beq.w	82d54 <_vfiprintf_r+0x4b0>
   82b26:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82b2a:	9102      	str	r1, [sp, #8]
   82b2c:	ea56 0107 	orrs.w	r1, r6, r7
   82b30:	f040 8115 	bne.w	82d5e <_vfiprintf_r+0x4ba>
   82b34:	2c00      	cmp	r4, #0
   82b36:	f040 835b 	bne.w	831f0 <_vfiprintf_r+0x94c>
   82b3a:	2a00      	cmp	r2, #0
   82b3c:	f040 83b6 	bne.w	832ac <_vfiprintf_r+0xa08>
   82b40:	f013 0301 	ands.w	r3, r3, #1
   82b44:	9305      	str	r3, [sp, #20]
   82b46:	f000 8455 	beq.w	833f4 <_vfiprintf_r+0xb50>
   82b4a:	2330      	movs	r3, #48	; 0x30
   82b4c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82b50:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82b54:	9b05      	ldr	r3, [sp, #20]
   82b56:	42a3      	cmp	r3, r4
   82b58:	bfb8      	it	lt
   82b5a:	4623      	movlt	r3, r4
   82b5c:	9301      	str	r3, [sp, #4]
   82b5e:	b10d      	cbz	r5, 82b64 <_vfiprintf_r+0x2c0>
   82b60:	3301      	adds	r3, #1
   82b62:	9301      	str	r3, [sp, #4]
   82b64:	9b02      	ldr	r3, [sp, #8]
   82b66:	f013 0302 	ands.w	r3, r3, #2
   82b6a:	9309      	str	r3, [sp, #36]	; 0x24
   82b6c:	d002      	beq.n	82b74 <_vfiprintf_r+0x2d0>
   82b6e:	9b01      	ldr	r3, [sp, #4]
   82b70:	3302      	adds	r3, #2
   82b72:	9301      	str	r3, [sp, #4]
   82b74:	9b02      	ldr	r3, [sp, #8]
   82b76:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82b7a:	930a      	str	r3, [sp, #40]	; 0x28
   82b7c:	f040 8215 	bne.w	82faa <_vfiprintf_r+0x706>
   82b80:	9b08      	ldr	r3, [sp, #32]
   82b82:	9a01      	ldr	r2, [sp, #4]
   82b84:	1a9d      	subs	r5, r3, r2
   82b86:	2d00      	cmp	r5, #0
   82b88:	f340 820f 	ble.w	82faa <_vfiprintf_r+0x706>
   82b8c:	2d10      	cmp	r5, #16
   82b8e:	f340 8484 	ble.w	8349a <_vfiprintf_r+0xbf6>
   82b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82b94:	46ce      	mov	lr, r9
   82b96:	2710      	movs	r7, #16
   82b98:	46a1      	mov	r9, r4
   82b9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b9c:	4ec5      	ldr	r6, [pc, #788]	; (82eb4 <_vfiprintf_r+0x610>)
   82b9e:	4619      	mov	r1, r3
   82ba0:	9c06      	ldr	r4, [sp, #24]
   82ba2:	e007      	b.n	82bb4 <_vfiprintf_r+0x310>
   82ba4:	f101 0c02 	add.w	ip, r1, #2
   82ba8:	4601      	mov	r1, r0
   82baa:	f10e 0e08 	add.w	lr, lr, #8
   82bae:	3d10      	subs	r5, #16
   82bb0:	2d10      	cmp	r5, #16
   82bb2:	dd11      	ble.n	82bd8 <_vfiprintf_r+0x334>
   82bb4:	1c48      	adds	r0, r1, #1
   82bb6:	3210      	adds	r2, #16
   82bb8:	2807      	cmp	r0, #7
   82bba:	9211      	str	r2, [sp, #68]	; 0x44
   82bbc:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82bc0:	9010      	str	r0, [sp, #64]	; 0x40
   82bc2:	ddef      	ble.n	82ba4 <_vfiprintf_r+0x300>
   82bc4:	2a00      	cmp	r2, #0
   82bc6:	f040 81d9 	bne.w	82f7c <_vfiprintf_r+0x6d8>
   82bca:	3d10      	subs	r5, #16
   82bcc:	2d10      	cmp	r5, #16
   82bce:	4611      	mov	r1, r2
   82bd0:	f04f 0c01 	mov.w	ip, #1
   82bd4:	46d6      	mov	lr, sl
   82bd6:	dced      	bgt.n	82bb4 <_vfiprintf_r+0x310>
   82bd8:	464c      	mov	r4, r9
   82bda:	4661      	mov	r1, ip
   82bdc:	46f1      	mov	r9, lr
   82bde:	442a      	add	r2, r5
   82be0:	2907      	cmp	r1, #7
   82be2:	9211      	str	r2, [sp, #68]	; 0x44
   82be4:	f8c9 6000 	str.w	r6, [r9]
   82be8:	f8c9 5004 	str.w	r5, [r9, #4]
   82bec:	9110      	str	r1, [sp, #64]	; 0x40
   82bee:	f300 82eb 	bgt.w	831c8 <_vfiprintf_r+0x924>
   82bf2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82bf6:	f109 0908 	add.w	r9, r9, #8
   82bfa:	1c48      	adds	r0, r1, #1
   82bfc:	2d00      	cmp	r5, #0
   82bfe:	f040 81dc 	bne.w	82fba <_vfiprintf_r+0x716>
   82c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82c04:	2b00      	cmp	r3, #0
   82c06:	f000 81f6 	beq.w	82ff6 <_vfiprintf_r+0x752>
   82c0a:	2102      	movs	r1, #2
   82c0c:	ab0e      	add	r3, sp, #56	; 0x38
   82c0e:	440a      	add	r2, r1
   82c10:	2807      	cmp	r0, #7
   82c12:	9211      	str	r2, [sp, #68]	; 0x44
   82c14:	9010      	str	r0, [sp, #64]	; 0x40
   82c16:	f8c9 1004 	str.w	r1, [r9, #4]
   82c1a:	f8c9 3000 	str.w	r3, [r9]
   82c1e:	f340 81e6 	ble.w	82fee <_vfiprintf_r+0x74a>
   82c22:	2a00      	cmp	r2, #0
   82c24:	f040 8395 	bne.w	83352 <_vfiprintf_r+0xaae>
   82c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82c2a:	2001      	movs	r0, #1
   82c2c:	2b80      	cmp	r3, #128	; 0x80
   82c2e:	4611      	mov	r1, r2
   82c30:	46d1      	mov	r9, sl
   82c32:	f040 81e4 	bne.w	82ffe <_vfiprintf_r+0x75a>
   82c36:	9b08      	ldr	r3, [sp, #32]
   82c38:	9d01      	ldr	r5, [sp, #4]
   82c3a:	1b5e      	subs	r6, r3, r5
   82c3c:	2e00      	cmp	r6, #0
   82c3e:	f340 81de 	ble.w	82ffe <_vfiprintf_r+0x75a>
   82c42:	2e10      	cmp	r6, #16
   82c44:	f340 843c 	ble.w	834c0 <_vfiprintf_r+0xc1c>
   82c48:	46cc      	mov	ip, r9
   82c4a:	2710      	movs	r7, #16
   82c4c:	46a1      	mov	r9, r4
   82c4e:	4d9a      	ldr	r5, [pc, #616]	; (82eb8 <_vfiprintf_r+0x614>)
   82c50:	9c06      	ldr	r4, [sp, #24]
   82c52:	e007      	b.n	82c64 <_vfiprintf_r+0x3c0>
   82c54:	f101 0e02 	add.w	lr, r1, #2
   82c58:	4601      	mov	r1, r0
   82c5a:	f10c 0c08 	add.w	ip, ip, #8
   82c5e:	3e10      	subs	r6, #16
   82c60:	2e10      	cmp	r6, #16
   82c62:	dd11      	ble.n	82c88 <_vfiprintf_r+0x3e4>
   82c64:	1c48      	adds	r0, r1, #1
   82c66:	3210      	adds	r2, #16
   82c68:	2807      	cmp	r0, #7
   82c6a:	9211      	str	r2, [sp, #68]	; 0x44
   82c6c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82c70:	9010      	str	r0, [sp, #64]	; 0x40
   82c72:	ddef      	ble.n	82c54 <_vfiprintf_r+0x3b0>
   82c74:	2a00      	cmp	r2, #0
   82c76:	f040 829b 	bne.w	831b0 <_vfiprintf_r+0x90c>
   82c7a:	3e10      	subs	r6, #16
   82c7c:	2e10      	cmp	r6, #16
   82c7e:	f04f 0e01 	mov.w	lr, #1
   82c82:	4611      	mov	r1, r2
   82c84:	46d4      	mov	ip, sl
   82c86:	dced      	bgt.n	82c64 <_vfiprintf_r+0x3c0>
   82c88:	464c      	mov	r4, r9
   82c8a:	46e1      	mov	r9, ip
   82c8c:	4432      	add	r2, r6
   82c8e:	f1be 0f07 	cmp.w	lr, #7
   82c92:	9211      	str	r2, [sp, #68]	; 0x44
   82c94:	e889 0060 	stmia.w	r9, {r5, r6}
   82c98:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82c9c:	f300 8366 	bgt.w	8336c <_vfiprintf_r+0xac8>
   82ca0:	f109 0908 	add.w	r9, r9, #8
   82ca4:	f10e 0001 	add.w	r0, lr, #1
   82ca8:	4671      	mov	r1, lr
   82caa:	e1a8      	b.n	82ffe <_vfiprintf_r+0x75a>
   82cac:	9508      	str	r5, [sp, #32]
   82cae:	f013 0220 	ands.w	r2, r3, #32
   82cb2:	f040 8389 	bne.w	833c8 <_vfiprintf_r+0xb24>
   82cb6:	f013 0110 	ands.w	r1, r3, #16
   82cba:	f040 8319 	bne.w	832f0 <_vfiprintf_r+0xa4c>
   82cbe:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82cc2:	f000 8315 	beq.w	832f0 <_vfiprintf_r+0xa4c>
   82cc6:	9807      	ldr	r0, [sp, #28]
   82cc8:	460a      	mov	r2, r1
   82cca:	4601      	mov	r1, r0
   82ccc:	3104      	adds	r1, #4
   82cce:	8806      	ldrh	r6, [r0, #0]
   82cd0:	2700      	movs	r7, #0
   82cd2:	9107      	str	r1, [sp, #28]
   82cd4:	e71f      	b.n	82b16 <_vfiprintf_r+0x272>
   82cd6:	9508      	str	r5, [sp, #32]
   82cd8:	f043 0310 	orr.w	r3, r3, #16
   82cdc:	e7e7      	b.n	82cae <_vfiprintf_r+0x40a>
   82cde:	9508      	str	r5, [sp, #32]
   82ce0:	f043 0310 	orr.w	r3, r3, #16
   82ce4:	e707      	b.n	82af6 <_vfiprintf_r+0x252>
   82ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82cea:	f898 2000 	ldrb.w	r2, [r8]
   82cee:	e64b      	b.n	82988 <_vfiprintf_r+0xe4>
   82cf0:	2500      	movs	r5, #0
   82cf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82cf6:	f818 2b01 	ldrb.w	r2, [r8], #1
   82cfa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82cfe:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82d02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82d06:	2909      	cmp	r1, #9
   82d08:	d9f5      	bls.n	82cf6 <_vfiprintf_r+0x452>
   82d0a:	e63f      	b.n	8298c <_vfiprintf_r+0xe8>
   82d0c:	9508      	str	r5, [sp, #32]
   82d0e:	2800      	cmp	r0, #0
   82d10:	f040 8402 	bne.w	83518 <_vfiprintf_r+0xc74>
   82d14:	f043 0310 	orr.w	r3, r3, #16
   82d18:	069e      	lsls	r6, r3, #26
   82d1a:	f100 833d 	bmi.w	83398 <_vfiprintf_r+0xaf4>
   82d1e:	9907      	ldr	r1, [sp, #28]
   82d20:	06dd      	lsls	r5, r3, #27
   82d22:	460a      	mov	r2, r1
   82d24:	f100 82f0 	bmi.w	83308 <_vfiprintf_r+0xa64>
   82d28:	0658      	lsls	r0, r3, #25
   82d2a:	f140 82ed 	bpl.w	83308 <_vfiprintf_r+0xa64>
   82d2e:	f9b1 6000 	ldrsh.w	r6, [r1]
   82d32:	3204      	adds	r2, #4
   82d34:	17f7      	asrs	r7, r6, #31
   82d36:	4630      	mov	r0, r6
   82d38:	4639      	mov	r1, r7
   82d3a:	9207      	str	r2, [sp, #28]
   82d3c:	2800      	cmp	r0, #0
   82d3e:	f171 0200 	sbcs.w	r2, r1, #0
   82d42:	f2c0 835a 	blt.w	833fa <_vfiprintf_r+0xb56>
   82d46:	1c61      	adds	r1, r4, #1
   82d48:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82d4c:	f04f 0201 	mov.w	r2, #1
   82d50:	f47f aee9 	bne.w	82b26 <_vfiprintf_r+0x282>
   82d54:	ea56 0107 	orrs.w	r1, r6, r7
   82d58:	f000 824b 	beq.w	831f2 <_vfiprintf_r+0x94e>
   82d5c:	9302      	str	r3, [sp, #8]
   82d5e:	2a01      	cmp	r2, #1
   82d60:	f000 828a 	beq.w	83278 <_vfiprintf_r+0x9d4>
   82d64:	2a02      	cmp	r2, #2
   82d66:	f040 825a 	bne.w	8321e <_vfiprintf_r+0x97a>
   82d6a:	46d3      	mov	fp, sl
   82d6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82d6e:	0933      	lsrs	r3, r6, #4
   82d70:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82d74:	0939      	lsrs	r1, r7, #4
   82d76:	f006 020f 	and.w	r2, r6, #15
   82d7a:	460f      	mov	r7, r1
   82d7c:	461e      	mov	r6, r3
   82d7e:	5c83      	ldrb	r3, [r0, r2]
   82d80:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82d84:	ea56 0307 	orrs.w	r3, r6, r7
   82d88:	d1f1      	bne.n	82d6e <_vfiprintf_r+0x4ca>
   82d8a:	ebaa 030b 	sub.w	r3, sl, fp
   82d8e:	9305      	str	r3, [sp, #20]
   82d90:	e6e0      	b.n	82b54 <_vfiprintf_r+0x2b0>
   82d92:	2800      	cmp	r0, #0
   82d94:	f040 83bd 	bne.w	83512 <_vfiprintf_r+0xc6e>
   82d98:	0699      	lsls	r1, r3, #26
   82d9a:	f100 8359 	bmi.w	83450 <_vfiprintf_r+0xbac>
   82d9e:	06da      	lsls	r2, r3, #27
   82da0:	f100 80e5 	bmi.w	82f6e <_vfiprintf_r+0x6ca>
   82da4:	065b      	lsls	r3, r3, #25
   82da6:	f140 80e2 	bpl.w	82f6e <_vfiprintf_r+0x6ca>
   82daa:	9a07      	ldr	r2, [sp, #28]
   82dac:	6813      	ldr	r3, [r2, #0]
   82dae:	3204      	adds	r2, #4
   82db0:	9207      	str	r2, [sp, #28]
   82db2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82db6:	801a      	strh	r2, [r3, #0]
   82db8:	e5b1      	b.n	8291e <_vfiprintf_r+0x7a>
   82dba:	2278      	movs	r2, #120	; 0x78
   82dbc:	2130      	movs	r1, #48	; 0x30
   82dbe:	9508      	str	r5, [sp, #32]
   82dc0:	9d07      	ldr	r5, [sp, #28]
   82dc2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82dc6:	1d2a      	adds	r2, r5, #4
   82dc8:	9207      	str	r2, [sp, #28]
   82dca:	4a3c      	ldr	r2, [pc, #240]	; (82ebc <_vfiprintf_r+0x618>)
   82dcc:	682e      	ldr	r6, [r5, #0]
   82dce:	920b      	str	r2, [sp, #44]	; 0x2c
   82dd0:	f043 0302 	orr.w	r3, r3, #2
   82dd4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82dd8:	2700      	movs	r7, #0
   82dda:	2202      	movs	r2, #2
   82ddc:	e69b      	b.n	82b16 <_vfiprintf_r+0x272>
   82dde:	9508      	str	r5, [sp, #32]
   82de0:	2800      	cmp	r0, #0
   82de2:	d099      	beq.n	82d18 <_vfiprintf_r+0x474>
   82de4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82de8:	e796      	b.n	82d18 <_vfiprintf_r+0x474>
   82dea:	f898 2000 	ldrb.w	r2, [r8]
   82dee:	2e00      	cmp	r6, #0
   82df0:	f47f adca 	bne.w	82988 <_vfiprintf_r+0xe4>
   82df4:	2001      	movs	r0, #1
   82df6:	2620      	movs	r6, #32
   82df8:	e5c6      	b.n	82988 <_vfiprintf_r+0xe4>
   82dfa:	f043 0301 	orr.w	r3, r3, #1
   82dfe:	f898 2000 	ldrb.w	r2, [r8]
   82e02:	e5c1      	b.n	82988 <_vfiprintf_r+0xe4>
   82e04:	9508      	str	r5, [sp, #32]
   82e06:	2800      	cmp	r0, #0
   82e08:	f040 8380 	bne.w	8350c <_vfiprintf_r+0xc68>
   82e0c:	492b      	ldr	r1, [pc, #172]	; (82ebc <_vfiprintf_r+0x618>)
   82e0e:	910b      	str	r1, [sp, #44]	; 0x2c
   82e10:	069f      	lsls	r7, r3, #26
   82e12:	f100 82e5 	bmi.w	833e0 <_vfiprintf_r+0xb3c>
   82e16:	9807      	ldr	r0, [sp, #28]
   82e18:	06de      	lsls	r6, r3, #27
   82e1a:	4601      	mov	r1, r0
   82e1c:	f100 826f 	bmi.w	832fe <_vfiprintf_r+0xa5a>
   82e20:	065d      	lsls	r5, r3, #25
   82e22:	f140 826c 	bpl.w	832fe <_vfiprintf_r+0xa5a>
   82e26:	2700      	movs	r7, #0
   82e28:	3104      	adds	r1, #4
   82e2a:	8806      	ldrh	r6, [r0, #0]
   82e2c:	9107      	str	r1, [sp, #28]
   82e2e:	07d8      	lsls	r0, r3, #31
   82e30:	f140 8220 	bpl.w	83274 <_vfiprintf_r+0x9d0>
   82e34:	ea56 0107 	orrs.w	r1, r6, r7
   82e38:	f000 821c 	beq.w	83274 <_vfiprintf_r+0x9d0>
   82e3c:	2130      	movs	r1, #48	; 0x30
   82e3e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82e42:	f043 0302 	orr.w	r3, r3, #2
   82e46:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82e4a:	2202      	movs	r2, #2
   82e4c:	e663      	b.n	82b16 <_vfiprintf_r+0x272>
   82e4e:	9508      	str	r5, [sp, #32]
   82e50:	2800      	cmp	r0, #0
   82e52:	f040 8355 	bne.w	83500 <_vfiprintf_r+0xc5c>
   82e56:	491a      	ldr	r1, [pc, #104]	; (82ec0 <_vfiprintf_r+0x61c>)
   82e58:	910b      	str	r1, [sp, #44]	; 0x2c
   82e5a:	e7d9      	b.n	82e10 <_vfiprintf_r+0x56c>
   82e5c:	2201      	movs	r2, #1
   82e5e:	9807      	ldr	r0, [sp, #28]
   82e60:	4611      	mov	r1, r2
   82e62:	9201      	str	r2, [sp, #4]
   82e64:	6802      	ldr	r2, [r0, #0]
   82e66:	f04f 0400 	mov.w	r4, #0
   82e6a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82e6e:	4602      	mov	r2, r0
   82e70:	3204      	adds	r2, #4
   82e72:	9508      	str	r5, [sp, #32]
   82e74:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82e78:	9105      	str	r1, [sp, #20]
   82e7a:	9207      	str	r2, [sp, #28]
   82e7c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82e80:	9302      	str	r3, [sp, #8]
   82e82:	2400      	movs	r4, #0
   82e84:	e66e      	b.n	82b64 <_vfiprintf_r+0x2c0>
   82e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82e8a:	f898 2000 	ldrb.w	r2, [r8]
   82e8e:	e57b      	b.n	82988 <_vfiprintf_r+0xe4>
   82e90:	f898 2000 	ldrb.w	r2, [r8]
   82e94:	2a6c      	cmp	r2, #108	; 0x6c
   82e96:	bf03      	ittte	eq
   82e98:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   82e9c:	f043 0320 	orreq.w	r3, r3, #32
   82ea0:	f108 0801 	addeq.w	r8, r8, #1
   82ea4:	f043 0310 	orrne.w	r3, r3, #16
   82ea8:	e56e      	b.n	82988 <_vfiprintf_r+0xe4>
   82eaa:	f898 2000 	ldrb.w	r2, [r8]
   82eae:	2001      	movs	r0, #1
   82eb0:	262b      	movs	r6, #43	; 0x2b
   82eb2:	e569      	b.n	82988 <_vfiprintf_r+0xe4>
   82eb4:	0008633c 	.word	0x0008633c
   82eb8:	0008634c 	.word	0x0008634c
   82ebc:	00086320 	.word	0x00086320
   82ec0:	0008630c 	.word	0x0008630c
   82ec4:	f04f 0200 	mov.w	r2, #0
   82ec8:	9907      	ldr	r1, [sp, #28]
   82eca:	9508      	str	r5, [sp, #32]
   82ecc:	f8d1 b000 	ldr.w	fp, [r1]
   82ed0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82ed4:	1d0d      	adds	r5, r1, #4
   82ed6:	f1bb 0f00 	cmp.w	fp, #0
   82eda:	f000 82e4 	beq.w	834a6 <_vfiprintf_r+0xc02>
   82ede:	1c67      	adds	r7, r4, #1
   82ee0:	f000 82c3 	beq.w	8346a <_vfiprintf_r+0xbc6>
   82ee4:	4622      	mov	r2, r4
   82ee6:	2100      	movs	r1, #0
   82ee8:	4658      	mov	r0, fp
   82eea:	9301      	str	r3, [sp, #4]
   82eec:	f001 fbc6 	bl	8467c <memchr>
   82ef0:	9b01      	ldr	r3, [sp, #4]
   82ef2:	2800      	cmp	r0, #0
   82ef4:	f000 82e8 	beq.w	834c8 <_vfiprintf_r+0xc24>
   82ef8:	eba0 020b 	sub.w	r2, r0, fp
   82efc:	9507      	str	r5, [sp, #28]
   82efe:	9205      	str	r2, [sp, #20]
   82f00:	9302      	str	r3, [sp, #8]
   82f02:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82f06:	2400      	movs	r4, #0
   82f08:	e624      	b.n	82b54 <_vfiprintf_r+0x2b0>
   82f0a:	f898 2000 	ldrb.w	r2, [r8]
   82f0e:	f108 0701 	add.w	r7, r8, #1
   82f12:	2a2a      	cmp	r2, #42	; 0x2a
   82f14:	f000 82e9 	beq.w	834ea <_vfiprintf_r+0xc46>
   82f18:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82f1c:	2909      	cmp	r1, #9
   82f1e:	46b8      	mov	r8, r7
   82f20:	f04f 0400 	mov.w	r4, #0
   82f24:	f63f ad32 	bhi.w	8298c <_vfiprintf_r+0xe8>
   82f28:	f818 2b01 	ldrb.w	r2, [r8], #1
   82f2c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82f30:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82f34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82f38:	2909      	cmp	r1, #9
   82f3a:	d9f5      	bls.n	82f28 <_vfiprintf_r+0x684>
   82f3c:	e526      	b.n	8298c <_vfiprintf_r+0xe8>
   82f3e:	f043 0320 	orr.w	r3, r3, #32
   82f42:	f898 2000 	ldrb.w	r2, [r8]
   82f46:	e51f      	b.n	82988 <_vfiprintf_r+0xe4>
   82f48:	9508      	str	r5, [sp, #32]
   82f4a:	2800      	cmp	r0, #0
   82f4c:	f040 82db 	bne.w	83506 <_vfiprintf_r+0xc62>
   82f50:	2a00      	cmp	r2, #0
   82f52:	f000 80f1 	beq.w	83138 <_vfiprintf_r+0x894>
   82f56:	2101      	movs	r1, #1
   82f58:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82f5c:	f04f 0200 	mov.w	r2, #0
   82f60:	9101      	str	r1, [sp, #4]
   82f62:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82f66:	9105      	str	r1, [sp, #20]
   82f68:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82f6c:	e788      	b.n	82e80 <_vfiprintf_r+0x5dc>
   82f6e:	9a07      	ldr	r2, [sp, #28]
   82f70:	6813      	ldr	r3, [r2, #0]
   82f72:	3204      	adds	r2, #4
   82f74:	9207      	str	r2, [sp, #28]
   82f76:	9a03      	ldr	r2, [sp, #12]
   82f78:	601a      	str	r2, [r3, #0]
   82f7a:	e4d0      	b.n	8291e <_vfiprintf_r+0x7a>
   82f7c:	aa0f      	add	r2, sp, #60	; 0x3c
   82f7e:	9904      	ldr	r1, [sp, #16]
   82f80:	4620      	mov	r0, r4
   82f82:	f7ff fc4f 	bl	82824 <__sprint_r.part.0>
   82f86:	2800      	cmp	r0, #0
   82f88:	f040 8143 	bne.w	83212 <_vfiprintf_r+0x96e>
   82f8c:	9910      	ldr	r1, [sp, #64]	; 0x40
   82f8e:	46d6      	mov	lr, sl
   82f90:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82f92:	f101 0c01 	add.w	ip, r1, #1
   82f96:	e60a      	b.n	82bae <_vfiprintf_r+0x30a>
   82f98:	aa0f      	add	r2, sp, #60	; 0x3c
   82f9a:	9904      	ldr	r1, [sp, #16]
   82f9c:	9806      	ldr	r0, [sp, #24]
   82f9e:	f7ff fc41 	bl	82824 <__sprint_r.part.0>
   82fa2:	2800      	cmp	r0, #0
   82fa4:	f040 8135 	bne.w	83212 <_vfiprintf_r+0x96e>
   82fa8:	46d1      	mov	r9, sl
   82faa:	9910      	ldr	r1, [sp, #64]	; 0x40
   82fac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82fb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fb2:	1c48      	adds	r0, r1, #1
   82fb4:	2d00      	cmp	r5, #0
   82fb6:	f43f ae24 	beq.w	82c02 <_vfiprintf_r+0x35e>
   82fba:	2101      	movs	r1, #1
   82fbc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82fc0:	440a      	add	r2, r1
   82fc2:	2807      	cmp	r0, #7
   82fc4:	9211      	str	r2, [sp, #68]	; 0x44
   82fc6:	9010      	str	r0, [sp, #64]	; 0x40
   82fc8:	f8c9 1004 	str.w	r1, [r9, #4]
   82fcc:	f8c9 5000 	str.w	r5, [r9]
   82fd0:	f340 8109 	ble.w	831e6 <_vfiprintf_r+0x942>
   82fd4:	2a00      	cmp	r2, #0
   82fd6:	f040 81af 	bne.w	83338 <_vfiprintf_r+0xa94>
   82fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82fdc:	2b00      	cmp	r3, #0
   82fde:	f43f ae23 	beq.w	82c28 <_vfiprintf_r+0x384>
   82fe2:	2202      	movs	r2, #2
   82fe4:	4608      	mov	r0, r1
   82fe6:	46d1      	mov	r9, sl
   82fe8:	ab0e      	add	r3, sp, #56	; 0x38
   82fea:	921d      	str	r2, [sp, #116]	; 0x74
   82fec:	931c      	str	r3, [sp, #112]	; 0x70
   82fee:	4601      	mov	r1, r0
   82ff0:	f109 0908 	add.w	r9, r9, #8
   82ff4:	3001      	adds	r0, #1
   82ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82ff8:	2b80      	cmp	r3, #128	; 0x80
   82ffa:	f43f ae1c 	beq.w	82c36 <_vfiprintf_r+0x392>
   82ffe:	9b05      	ldr	r3, [sp, #20]
   83000:	1ae4      	subs	r4, r4, r3
   83002:	2c00      	cmp	r4, #0
   83004:	dd2f      	ble.n	83066 <_vfiprintf_r+0x7c2>
   83006:	2c10      	cmp	r4, #16
   83008:	f340 8220 	ble.w	8344c <_vfiprintf_r+0xba8>
   8300c:	46ce      	mov	lr, r9
   8300e:	2610      	movs	r6, #16
   83010:	4db2      	ldr	r5, [pc, #712]	; (832dc <_vfiprintf_r+0xa38>)
   83012:	9f06      	ldr	r7, [sp, #24]
   83014:	f8dd 9010 	ldr.w	r9, [sp, #16]
   83018:	e006      	b.n	83028 <_vfiprintf_r+0x784>
   8301a:	1c88      	adds	r0, r1, #2
   8301c:	4619      	mov	r1, r3
   8301e:	f10e 0e08 	add.w	lr, lr, #8
   83022:	3c10      	subs	r4, #16
   83024:	2c10      	cmp	r4, #16
   83026:	dd10      	ble.n	8304a <_vfiprintf_r+0x7a6>
   83028:	1c4b      	adds	r3, r1, #1
   8302a:	3210      	adds	r2, #16
   8302c:	2b07      	cmp	r3, #7
   8302e:	9211      	str	r2, [sp, #68]	; 0x44
   83030:	e88e 0060 	stmia.w	lr, {r5, r6}
   83034:	9310      	str	r3, [sp, #64]	; 0x40
   83036:	ddf0      	ble.n	8301a <_vfiprintf_r+0x776>
   83038:	2a00      	cmp	r2, #0
   8303a:	d165      	bne.n	83108 <_vfiprintf_r+0x864>
   8303c:	3c10      	subs	r4, #16
   8303e:	2c10      	cmp	r4, #16
   83040:	f04f 0001 	mov.w	r0, #1
   83044:	4611      	mov	r1, r2
   83046:	46d6      	mov	lr, sl
   83048:	dcee      	bgt.n	83028 <_vfiprintf_r+0x784>
   8304a:	46f1      	mov	r9, lr
   8304c:	4422      	add	r2, r4
   8304e:	2807      	cmp	r0, #7
   83050:	9211      	str	r2, [sp, #68]	; 0x44
   83052:	f8c9 5000 	str.w	r5, [r9]
   83056:	f8c9 4004 	str.w	r4, [r9, #4]
   8305a:	9010      	str	r0, [sp, #64]	; 0x40
   8305c:	f300 8085 	bgt.w	8316a <_vfiprintf_r+0x8c6>
   83060:	f109 0908 	add.w	r9, r9, #8
   83064:	3001      	adds	r0, #1
   83066:	9905      	ldr	r1, [sp, #20]
   83068:	2807      	cmp	r0, #7
   8306a:	440a      	add	r2, r1
   8306c:	9211      	str	r2, [sp, #68]	; 0x44
   8306e:	f8c9 b000 	str.w	fp, [r9]
   83072:	f8c9 1004 	str.w	r1, [r9, #4]
   83076:	9010      	str	r0, [sp, #64]	; 0x40
   83078:	f340 8082 	ble.w	83180 <_vfiprintf_r+0x8dc>
   8307c:	2a00      	cmp	r2, #0
   8307e:	f040 8118 	bne.w	832b2 <_vfiprintf_r+0xa0e>
   83082:	9b02      	ldr	r3, [sp, #8]
   83084:	9210      	str	r2, [sp, #64]	; 0x40
   83086:	0758      	lsls	r0, r3, #29
   83088:	d535      	bpl.n	830f6 <_vfiprintf_r+0x852>
   8308a:	9b08      	ldr	r3, [sp, #32]
   8308c:	9901      	ldr	r1, [sp, #4]
   8308e:	1a5c      	subs	r4, r3, r1
   83090:	2c00      	cmp	r4, #0
   83092:	f340 80e7 	ble.w	83264 <_vfiprintf_r+0x9c0>
   83096:	46d1      	mov	r9, sl
   83098:	2c10      	cmp	r4, #16
   8309a:	f340 820d 	ble.w	834b8 <_vfiprintf_r+0xc14>
   8309e:	2510      	movs	r5, #16
   830a0:	9910      	ldr	r1, [sp, #64]	; 0x40
   830a2:	4e8f      	ldr	r6, [pc, #572]	; (832e0 <_vfiprintf_r+0xa3c>)
   830a4:	9f06      	ldr	r7, [sp, #24]
   830a6:	f8dd b010 	ldr.w	fp, [sp, #16]
   830aa:	e006      	b.n	830ba <_vfiprintf_r+0x816>
   830ac:	1c88      	adds	r0, r1, #2
   830ae:	4619      	mov	r1, r3
   830b0:	f109 0908 	add.w	r9, r9, #8
   830b4:	3c10      	subs	r4, #16
   830b6:	2c10      	cmp	r4, #16
   830b8:	dd11      	ble.n	830de <_vfiprintf_r+0x83a>
   830ba:	1c4b      	adds	r3, r1, #1
   830bc:	3210      	adds	r2, #16
   830be:	2b07      	cmp	r3, #7
   830c0:	9211      	str	r2, [sp, #68]	; 0x44
   830c2:	f8c9 6000 	str.w	r6, [r9]
   830c6:	f8c9 5004 	str.w	r5, [r9, #4]
   830ca:	9310      	str	r3, [sp, #64]	; 0x40
   830cc:	ddee      	ble.n	830ac <_vfiprintf_r+0x808>
   830ce:	bb42      	cbnz	r2, 83122 <_vfiprintf_r+0x87e>
   830d0:	3c10      	subs	r4, #16
   830d2:	2c10      	cmp	r4, #16
   830d4:	f04f 0001 	mov.w	r0, #1
   830d8:	4611      	mov	r1, r2
   830da:	46d1      	mov	r9, sl
   830dc:	dced      	bgt.n	830ba <_vfiprintf_r+0x816>
   830de:	4422      	add	r2, r4
   830e0:	2807      	cmp	r0, #7
   830e2:	9211      	str	r2, [sp, #68]	; 0x44
   830e4:	f8c9 6000 	str.w	r6, [r9]
   830e8:	f8c9 4004 	str.w	r4, [r9, #4]
   830ec:	9010      	str	r0, [sp, #64]	; 0x40
   830ee:	dd51      	ble.n	83194 <_vfiprintf_r+0x8f0>
   830f0:	2a00      	cmp	r2, #0
   830f2:	f040 819a 	bne.w	8342a <_vfiprintf_r+0xb86>
   830f6:	9b03      	ldr	r3, [sp, #12]
   830f8:	9a08      	ldr	r2, [sp, #32]
   830fa:	9901      	ldr	r1, [sp, #4]
   830fc:	428a      	cmp	r2, r1
   830fe:	bfac      	ite	ge
   83100:	189b      	addge	r3, r3, r2
   83102:	185b      	addlt	r3, r3, r1
   83104:	9303      	str	r3, [sp, #12]
   83106:	e04e      	b.n	831a6 <_vfiprintf_r+0x902>
   83108:	aa0f      	add	r2, sp, #60	; 0x3c
   8310a:	4649      	mov	r1, r9
   8310c:	4638      	mov	r0, r7
   8310e:	f7ff fb89 	bl	82824 <__sprint_r.part.0>
   83112:	2800      	cmp	r0, #0
   83114:	f040 813e 	bne.w	83394 <_vfiprintf_r+0xaf0>
   83118:	9910      	ldr	r1, [sp, #64]	; 0x40
   8311a:	46d6      	mov	lr, sl
   8311c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8311e:	1c48      	adds	r0, r1, #1
   83120:	e77f      	b.n	83022 <_vfiprintf_r+0x77e>
   83122:	aa0f      	add	r2, sp, #60	; 0x3c
   83124:	4659      	mov	r1, fp
   83126:	4638      	mov	r0, r7
   83128:	f7ff fb7c 	bl	82824 <__sprint_r.part.0>
   8312c:	b960      	cbnz	r0, 83148 <_vfiprintf_r+0x8a4>
   8312e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83130:	46d1      	mov	r9, sl
   83132:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83134:	1c48      	adds	r0, r1, #1
   83136:	e7bd      	b.n	830b4 <_vfiprintf_r+0x810>
   83138:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8313a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8313e:	2b00      	cmp	r3, #0
   83140:	f040 81ca 	bne.w	834d8 <_vfiprintf_r+0xc34>
   83144:	2300      	movs	r3, #0
   83146:	9310      	str	r3, [sp, #64]	; 0x40
   83148:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8314c:	f013 0f01 	tst.w	r3, #1
   83150:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83154:	d102      	bne.n	8315c <_vfiprintf_r+0x8b8>
   83156:	059a      	lsls	r2, r3, #22
   83158:	f140 80dd 	bpl.w	83316 <_vfiprintf_r+0xa72>
   8315c:	065b      	lsls	r3, r3, #25
   8315e:	f53f acad 	bmi.w	82abc <_vfiprintf_r+0x218>
   83162:	9803      	ldr	r0, [sp, #12]
   83164:	b02d      	add	sp, #180	; 0xb4
   83166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8316a:	2a00      	cmp	r2, #0
   8316c:	f040 8105 	bne.w	8337a <_vfiprintf_r+0xad6>
   83170:	2301      	movs	r3, #1
   83172:	46d1      	mov	r9, sl
   83174:	9a05      	ldr	r2, [sp, #20]
   83176:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8317a:	921d      	str	r2, [sp, #116]	; 0x74
   8317c:	9211      	str	r2, [sp, #68]	; 0x44
   8317e:	9310      	str	r3, [sp, #64]	; 0x40
   83180:	f109 0908 	add.w	r9, r9, #8
   83184:	9b02      	ldr	r3, [sp, #8]
   83186:	0759      	lsls	r1, r3, #29
   83188:	d504      	bpl.n	83194 <_vfiprintf_r+0x8f0>
   8318a:	9b08      	ldr	r3, [sp, #32]
   8318c:	9901      	ldr	r1, [sp, #4]
   8318e:	1a5c      	subs	r4, r3, r1
   83190:	2c00      	cmp	r4, #0
   83192:	dc81      	bgt.n	83098 <_vfiprintf_r+0x7f4>
   83194:	9b03      	ldr	r3, [sp, #12]
   83196:	9908      	ldr	r1, [sp, #32]
   83198:	9801      	ldr	r0, [sp, #4]
   8319a:	4281      	cmp	r1, r0
   8319c:	bfac      	ite	ge
   8319e:	185b      	addge	r3, r3, r1
   831a0:	181b      	addlt	r3, r3, r0
   831a2:	9303      	str	r3, [sp, #12]
   831a4:	bb72      	cbnz	r2, 83204 <_vfiprintf_r+0x960>
   831a6:	2300      	movs	r3, #0
   831a8:	46d1      	mov	r9, sl
   831aa:	9310      	str	r3, [sp, #64]	; 0x40
   831ac:	f7ff bbb7 	b.w	8291e <_vfiprintf_r+0x7a>
   831b0:	aa0f      	add	r2, sp, #60	; 0x3c
   831b2:	9904      	ldr	r1, [sp, #16]
   831b4:	4620      	mov	r0, r4
   831b6:	f7ff fb35 	bl	82824 <__sprint_r.part.0>
   831ba:	bb50      	cbnz	r0, 83212 <_vfiprintf_r+0x96e>
   831bc:	9910      	ldr	r1, [sp, #64]	; 0x40
   831be:	46d4      	mov	ip, sl
   831c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831c2:	f101 0e01 	add.w	lr, r1, #1
   831c6:	e54a      	b.n	82c5e <_vfiprintf_r+0x3ba>
   831c8:	2a00      	cmp	r2, #0
   831ca:	f47f aee5 	bne.w	82f98 <_vfiprintf_r+0x6f4>
   831ce:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   831d2:	2900      	cmp	r1, #0
   831d4:	f000 811a 	beq.w	8340c <_vfiprintf_r+0xb68>
   831d8:	2201      	movs	r2, #1
   831da:	46d1      	mov	r9, sl
   831dc:	4610      	mov	r0, r2
   831de:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   831e2:	921d      	str	r2, [sp, #116]	; 0x74
   831e4:	911c      	str	r1, [sp, #112]	; 0x70
   831e6:	4601      	mov	r1, r0
   831e8:	f109 0908 	add.w	r9, r9, #8
   831ec:	3001      	adds	r0, #1
   831ee:	e508      	b.n	82c02 <_vfiprintf_r+0x35e>
   831f0:	9b02      	ldr	r3, [sp, #8]
   831f2:	2a01      	cmp	r2, #1
   831f4:	f000 8097 	beq.w	83326 <_vfiprintf_r+0xa82>
   831f8:	2a02      	cmp	r2, #2
   831fa:	d10d      	bne.n	83218 <_vfiprintf_r+0x974>
   831fc:	9302      	str	r3, [sp, #8]
   831fe:	2600      	movs	r6, #0
   83200:	2700      	movs	r7, #0
   83202:	e5b2      	b.n	82d6a <_vfiprintf_r+0x4c6>
   83204:	aa0f      	add	r2, sp, #60	; 0x3c
   83206:	9904      	ldr	r1, [sp, #16]
   83208:	9806      	ldr	r0, [sp, #24]
   8320a:	f7ff fb0b 	bl	82824 <__sprint_r.part.0>
   8320e:	2800      	cmp	r0, #0
   83210:	d0c9      	beq.n	831a6 <_vfiprintf_r+0x902>
   83212:	f8dd b010 	ldr.w	fp, [sp, #16]
   83216:	e797      	b.n	83148 <_vfiprintf_r+0x8a4>
   83218:	2600      	movs	r6, #0
   8321a:	2700      	movs	r7, #0
   8321c:	9302      	str	r3, [sp, #8]
   8321e:	4651      	mov	r1, sl
   83220:	e000      	b.n	83224 <_vfiprintf_r+0x980>
   83222:	4659      	mov	r1, fp
   83224:	08f2      	lsrs	r2, r6, #3
   83226:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8322a:	08f8      	lsrs	r0, r7, #3
   8322c:	f006 0307 	and.w	r3, r6, #7
   83230:	4607      	mov	r7, r0
   83232:	4616      	mov	r6, r2
   83234:	3330      	adds	r3, #48	; 0x30
   83236:	ea56 0207 	orrs.w	r2, r6, r7
   8323a:	f801 3c01 	strb.w	r3, [r1, #-1]
   8323e:	f101 3bff 	add.w	fp, r1, #4294967295
   83242:	d1ee      	bne.n	83222 <_vfiprintf_r+0x97e>
   83244:	9a02      	ldr	r2, [sp, #8]
   83246:	07d6      	lsls	r6, r2, #31
   83248:	f57f ad9f 	bpl.w	82d8a <_vfiprintf_r+0x4e6>
   8324c:	2b30      	cmp	r3, #48	; 0x30
   8324e:	f43f ad9c 	beq.w	82d8a <_vfiprintf_r+0x4e6>
   83252:	2330      	movs	r3, #48	; 0x30
   83254:	3902      	subs	r1, #2
   83256:	f80b 3c01 	strb.w	r3, [fp, #-1]
   8325a:	ebaa 0301 	sub.w	r3, sl, r1
   8325e:	9305      	str	r3, [sp, #20]
   83260:	468b      	mov	fp, r1
   83262:	e477      	b.n	82b54 <_vfiprintf_r+0x2b0>
   83264:	9b03      	ldr	r3, [sp, #12]
   83266:	9a08      	ldr	r2, [sp, #32]
   83268:	428a      	cmp	r2, r1
   8326a:	bfac      	ite	ge
   8326c:	189b      	addge	r3, r3, r2
   8326e:	185b      	addlt	r3, r3, r1
   83270:	9303      	str	r3, [sp, #12]
   83272:	e798      	b.n	831a6 <_vfiprintf_r+0x902>
   83274:	2202      	movs	r2, #2
   83276:	e44e      	b.n	82b16 <_vfiprintf_r+0x272>
   83278:	2f00      	cmp	r7, #0
   8327a:	bf08      	it	eq
   8327c:	2e0a      	cmpeq	r6, #10
   8327e:	d351      	bcc.n	83324 <_vfiprintf_r+0xa80>
   83280:	46d3      	mov	fp, sl
   83282:	4630      	mov	r0, r6
   83284:	4639      	mov	r1, r7
   83286:	220a      	movs	r2, #10
   83288:	2300      	movs	r3, #0
   8328a:	f001 fe85 	bl	84f98 <__aeabi_uldivmod>
   8328e:	3230      	adds	r2, #48	; 0x30
   83290:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   83294:	4630      	mov	r0, r6
   83296:	4639      	mov	r1, r7
   83298:	2300      	movs	r3, #0
   8329a:	220a      	movs	r2, #10
   8329c:	f001 fe7c 	bl	84f98 <__aeabi_uldivmod>
   832a0:	4606      	mov	r6, r0
   832a2:	460f      	mov	r7, r1
   832a4:	ea56 0307 	orrs.w	r3, r6, r7
   832a8:	d1eb      	bne.n	83282 <_vfiprintf_r+0x9de>
   832aa:	e56e      	b.n	82d8a <_vfiprintf_r+0x4e6>
   832ac:	9405      	str	r4, [sp, #20]
   832ae:	46d3      	mov	fp, sl
   832b0:	e450      	b.n	82b54 <_vfiprintf_r+0x2b0>
   832b2:	aa0f      	add	r2, sp, #60	; 0x3c
   832b4:	9904      	ldr	r1, [sp, #16]
   832b6:	9806      	ldr	r0, [sp, #24]
   832b8:	f7ff fab4 	bl	82824 <__sprint_r.part.0>
   832bc:	2800      	cmp	r0, #0
   832be:	d1a8      	bne.n	83212 <_vfiprintf_r+0x96e>
   832c0:	46d1      	mov	r9, sl
   832c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   832c4:	e75e      	b.n	83184 <_vfiprintf_r+0x8e0>
   832c6:	aa0f      	add	r2, sp, #60	; 0x3c
   832c8:	9904      	ldr	r1, [sp, #16]
   832ca:	9806      	ldr	r0, [sp, #24]
   832cc:	f7ff faaa 	bl	82824 <__sprint_r.part.0>
   832d0:	2800      	cmp	r0, #0
   832d2:	d19e      	bne.n	83212 <_vfiprintf_r+0x96e>
   832d4:	46d1      	mov	r9, sl
   832d6:	f7ff bbbb 	b.w	82a50 <_vfiprintf_r+0x1ac>
   832da:	bf00      	nop
   832dc:	0008634c 	.word	0x0008634c
   832e0:	0008633c 	.word	0x0008633c
   832e4:	3104      	adds	r1, #4
   832e6:	6816      	ldr	r6, [r2, #0]
   832e8:	2700      	movs	r7, #0
   832ea:	2201      	movs	r2, #1
   832ec:	9107      	str	r1, [sp, #28]
   832ee:	e412      	b.n	82b16 <_vfiprintf_r+0x272>
   832f0:	9807      	ldr	r0, [sp, #28]
   832f2:	2700      	movs	r7, #0
   832f4:	4601      	mov	r1, r0
   832f6:	3104      	adds	r1, #4
   832f8:	6806      	ldr	r6, [r0, #0]
   832fa:	9107      	str	r1, [sp, #28]
   832fc:	e40b      	b.n	82b16 <_vfiprintf_r+0x272>
   832fe:	680e      	ldr	r6, [r1, #0]
   83300:	3104      	adds	r1, #4
   83302:	9107      	str	r1, [sp, #28]
   83304:	2700      	movs	r7, #0
   83306:	e592      	b.n	82e2e <_vfiprintf_r+0x58a>
   83308:	6816      	ldr	r6, [r2, #0]
   8330a:	3204      	adds	r2, #4
   8330c:	17f7      	asrs	r7, r6, #31
   8330e:	9207      	str	r2, [sp, #28]
   83310:	4630      	mov	r0, r6
   83312:	4639      	mov	r1, r7
   83314:	e512      	b.n	82d3c <_vfiprintf_r+0x498>
   83316:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8331a:	f000 fe75 	bl	84008 <__retarget_lock_release_recursive>
   8331e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83322:	e71b      	b.n	8315c <_vfiprintf_r+0x8b8>
   83324:	9b02      	ldr	r3, [sp, #8]
   83326:	9302      	str	r3, [sp, #8]
   83328:	2301      	movs	r3, #1
   8332a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8332e:	3630      	adds	r6, #48	; 0x30
   83330:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   83334:	9305      	str	r3, [sp, #20]
   83336:	e40d      	b.n	82b54 <_vfiprintf_r+0x2b0>
   83338:	aa0f      	add	r2, sp, #60	; 0x3c
   8333a:	9904      	ldr	r1, [sp, #16]
   8333c:	9806      	ldr	r0, [sp, #24]
   8333e:	f7ff fa71 	bl	82824 <__sprint_r.part.0>
   83342:	2800      	cmp	r0, #0
   83344:	f47f af65 	bne.w	83212 <_vfiprintf_r+0x96e>
   83348:	9910      	ldr	r1, [sp, #64]	; 0x40
   8334a:	46d1      	mov	r9, sl
   8334c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8334e:	1c48      	adds	r0, r1, #1
   83350:	e457      	b.n	82c02 <_vfiprintf_r+0x35e>
   83352:	aa0f      	add	r2, sp, #60	; 0x3c
   83354:	9904      	ldr	r1, [sp, #16]
   83356:	9806      	ldr	r0, [sp, #24]
   83358:	f7ff fa64 	bl	82824 <__sprint_r.part.0>
   8335c:	2800      	cmp	r0, #0
   8335e:	f47f af58 	bne.w	83212 <_vfiprintf_r+0x96e>
   83362:	9910      	ldr	r1, [sp, #64]	; 0x40
   83364:	46d1      	mov	r9, sl
   83366:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83368:	1c48      	adds	r0, r1, #1
   8336a:	e644      	b.n	82ff6 <_vfiprintf_r+0x752>
   8336c:	2a00      	cmp	r2, #0
   8336e:	f040 8087 	bne.w	83480 <_vfiprintf_r+0xbdc>
   83372:	2001      	movs	r0, #1
   83374:	4611      	mov	r1, r2
   83376:	46d1      	mov	r9, sl
   83378:	e641      	b.n	82ffe <_vfiprintf_r+0x75a>
   8337a:	aa0f      	add	r2, sp, #60	; 0x3c
   8337c:	9904      	ldr	r1, [sp, #16]
   8337e:	9806      	ldr	r0, [sp, #24]
   83380:	f7ff fa50 	bl	82824 <__sprint_r.part.0>
   83384:	2800      	cmp	r0, #0
   83386:	f47f af44 	bne.w	83212 <_vfiprintf_r+0x96e>
   8338a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8338c:	46d1      	mov	r9, sl
   8338e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83390:	3001      	adds	r0, #1
   83392:	e668      	b.n	83066 <_vfiprintf_r+0x7c2>
   83394:	46cb      	mov	fp, r9
   83396:	e6d7      	b.n	83148 <_vfiprintf_r+0x8a4>
   83398:	9d07      	ldr	r5, [sp, #28]
   8339a:	3507      	adds	r5, #7
   8339c:	f025 0507 	bic.w	r5, r5, #7
   833a0:	f105 0208 	add.w	r2, r5, #8
   833a4:	e9d5 0100 	ldrd	r0, r1, [r5]
   833a8:	9207      	str	r2, [sp, #28]
   833aa:	4606      	mov	r6, r0
   833ac:	460f      	mov	r7, r1
   833ae:	e4c5      	b.n	82d3c <_vfiprintf_r+0x498>
   833b0:	9d07      	ldr	r5, [sp, #28]
   833b2:	3507      	adds	r5, #7
   833b4:	f025 0207 	bic.w	r2, r5, #7
   833b8:	f102 0108 	add.w	r1, r2, #8
   833bc:	e9d2 6700 	ldrd	r6, r7, [r2]
   833c0:	9107      	str	r1, [sp, #28]
   833c2:	2201      	movs	r2, #1
   833c4:	f7ff bba7 	b.w	82b16 <_vfiprintf_r+0x272>
   833c8:	9d07      	ldr	r5, [sp, #28]
   833ca:	3507      	adds	r5, #7
   833cc:	f025 0207 	bic.w	r2, r5, #7
   833d0:	f102 0108 	add.w	r1, r2, #8
   833d4:	e9d2 6700 	ldrd	r6, r7, [r2]
   833d8:	9107      	str	r1, [sp, #28]
   833da:	2200      	movs	r2, #0
   833dc:	f7ff bb9b 	b.w	82b16 <_vfiprintf_r+0x272>
   833e0:	9d07      	ldr	r5, [sp, #28]
   833e2:	3507      	adds	r5, #7
   833e4:	f025 0107 	bic.w	r1, r5, #7
   833e8:	f101 0008 	add.w	r0, r1, #8
   833ec:	9007      	str	r0, [sp, #28]
   833ee:	e9d1 6700 	ldrd	r6, r7, [r1]
   833f2:	e51c      	b.n	82e2e <_vfiprintf_r+0x58a>
   833f4:	46d3      	mov	fp, sl
   833f6:	f7ff bbad 	b.w	82b54 <_vfiprintf_r+0x2b0>
   833fa:	252d      	movs	r5, #45	; 0x2d
   833fc:	4276      	negs	r6, r6
   833fe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83402:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   83406:	2201      	movs	r2, #1
   83408:	f7ff bb8a 	b.w	82b20 <_vfiprintf_r+0x27c>
   8340c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8340e:	b9b3      	cbnz	r3, 8343e <_vfiprintf_r+0xb9a>
   83410:	4611      	mov	r1, r2
   83412:	2001      	movs	r0, #1
   83414:	46d1      	mov	r9, sl
   83416:	e5f2      	b.n	82ffe <_vfiprintf_r+0x75a>
   83418:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8341c:	f000 fdf4 	bl	84008 <__retarget_lock_release_recursive>
   83420:	f04f 33ff 	mov.w	r3, #4294967295
   83424:	9303      	str	r3, [sp, #12]
   83426:	f7ff bb4c 	b.w	82ac2 <_vfiprintf_r+0x21e>
   8342a:	aa0f      	add	r2, sp, #60	; 0x3c
   8342c:	9904      	ldr	r1, [sp, #16]
   8342e:	9806      	ldr	r0, [sp, #24]
   83430:	f7ff f9f8 	bl	82824 <__sprint_r.part.0>
   83434:	2800      	cmp	r0, #0
   83436:	f47f aeec 	bne.w	83212 <_vfiprintf_r+0x96e>
   8343a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8343c:	e6aa      	b.n	83194 <_vfiprintf_r+0x8f0>
   8343e:	2202      	movs	r2, #2
   83440:	ab0e      	add	r3, sp, #56	; 0x38
   83442:	921d      	str	r2, [sp, #116]	; 0x74
   83444:	931c      	str	r3, [sp, #112]	; 0x70
   83446:	2001      	movs	r0, #1
   83448:	46d1      	mov	r9, sl
   8344a:	e5d0      	b.n	82fee <_vfiprintf_r+0x74a>
   8344c:	4d34      	ldr	r5, [pc, #208]	; (83520 <_vfiprintf_r+0xc7c>)
   8344e:	e5fd      	b.n	8304c <_vfiprintf_r+0x7a8>
   83450:	9a07      	ldr	r2, [sp, #28]
   83452:	4613      	mov	r3, r2
   83454:	3304      	adds	r3, #4
   83456:	9307      	str	r3, [sp, #28]
   83458:	9b03      	ldr	r3, [sp, #12]
   8345a:	6811      	ldr	r1, [r2, #0]
   8345c:	17dd      	asrs	r5, r3, #31
   8345e:	461a      	mov	r2, r3
   83460:	462b      	mov	r3, r5
   83462:	e9c1 2300 	strd	r2, r3, [r1]
   83466:	f7ff ba5a 	b.w	8291e <_vfiprintf_r+0x7a>
   8346a:	4658      	mov	r0, fp
   8346c:	9507      	str	r5, [sp, #28]
   8346e:	9302      	str	r3, [sp, #8]
   83470:	f7ff f9aa 	bl	827c8 <strlen>
   83474:	2400      	movs	r4, #0
   83476:	9005      	str	r0, [sp, #20]
   83478:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8347c:	f7ff bb6a 	b.w	82b54 <_vfiprintf_r+0x2b0>
   83480:	aa0f      	add	r2, sp, #60	; 0x3c
   83482:	9904      	ldr	r1, [sp, #16]
   83484:	9806      	ldr	r0, [sp, #24]
   83486:	f7ff f9cd 	bl	82824 <__sprint_r.part.0>
   8348a:	2800      	cmp	r0, #0
   8348c:	f47f aec1 	bne.w	83212 <_vfiprintf_r+0x96e>
   83490:	9910      	ldr	r1, [sp, #64]	; 0x40
   83492:	46d1      	mov	r9, sl
   83494:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83496:	1c48      	adds	r0, r1, #1
   83498:	e5b1      	b.n	82ffe <_vfiprintf_r+0x75a>
   8349a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8349c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8349e:	3101      	adds	r1, #1
   834a0:	4e20      	ldr	r6, [pc, #128]	; (83524 <_vfiprintf_r+0xc80>)
   834a2:	f7ff bb9c 	b.w	82bde <_vfiprintf_r+0x33a>
   834a6:	2c06      	cmp	r4, #6
   834a8:	bf28      	it	cs
   834aa:	2406      	movcs	r4, #6
   834ac:	9507      	str	r5, [sp, #28]
   834ae:	9405      	str	r4, [sp, #20]
   834b0:	9401      	str	r4, [sp, #4]
   834b2:	f8df b074 	ldr.w	fp, [pc, #116]	; 83528 <_vfiprintf_r+0xc84>
   834b6:	e4e3      	b.n	82e80 <_vfiprintf_r+0x5dc>
   834b8:	9810      	ldr	r0, [sp, #64]	; 0x40
   834ba:	4e1a      	ldr	r6, [pc, #104]	; (83524 <_vfiprintf_r+0xc80>)
   834bc:	3001      	adds	r0, #1
   834be:	e60e      	b.n	830de <_vfiprintf_r+0x83a>
   834c0:	4686      	mov	lr, r0
   834c2:	4d17      	ldr	r5, [pc, #92]	; (83520 <_vfiprintf_r+0xc7c>)
   834c4:	f7ff bbe2 	b.w	82c8c <_vfiprintf_r+0x3e8>
   834c8:	9405      	str	r4, [sp, #20]
   834ca:	9507      	str	r5, [sp, #28]
   834cc:	9302      	str	r3, [sp, #8]
   834ce:	4604      	mov	r4, r0
   834d0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   834d4:	f7ff bb3e 	b.w	82b54 <_vfiprintf_r+0x2b0>
   834d8:	9806      	ldr	r0, [sp, #24]
   834da:	aa0f      	add	r2, sp, #60	; 0x3c
   834dc:	4659      	mov	r1, fp
   834de:	f7ff f9a1 	bl	82824 <__sprint_r.part.0>
   834e2:	2800      	cmp	r0, #0
   834e4:	f43f ae2e 	beq.w	83144 <_vfiprintf_r+0x8a0>
   834e8:	e62e      	b.n	83148 <_vfiprintf_r+0x8a4>
   834ea:	9907      	ldr	r1, [sp, #28]
   834ec:	f898 2001 	ldrb.w	r2, [r8, #1]
   834f0:	680c      	ldr	r4, [r1, #0]
   834f2:	3104      	adds	r1, #4
   834f4:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   834f8:	46b8      	mov	r8, r7
   834fa:	9107      	str	r1, [sp, #28]
   834fc:	f7ff ba44 	b.w	82988 <_vfiprintf_r+0xe4>
   83500:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83504:	e4a7      	b.n	82e56 <_vfiprintf_r+0x5b2>
   83506:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8350a:	e521      	b.n	82f50 <_vfiprintf_r+0x6ac>
   8350c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83510:	e47c      	b.n	82e0c <_vfiprintf_r+0x568>
   83512:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83516:	e43f      	b.n	82d98 <_vfiprintf_r+0x4f4>
   83518:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8351c:	f7ff bbfa 	b.w	82d14 <_vfiprintf_r+0x470>
   83520:	0008634c 	.word	0x0008634c
   83524:	0008633c 	.word	0x0008633c
   83528:	00086334 	.word	0x00086334

0008352c <__sbprintf>:
   8352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83530:	460c      	mov	r4, r1
   83532:	f04f 0e00 	mov.w	lr, #0
   83536:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8353a:	4606      	mov	r6, r0
   8353c:	4617      	mov	r7, r2
   8353e:	4698      	mov	r8, r3
   83540:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83542:	89e3      	ldrh	r3, [r4, #14]
   83544:	8989      	ldrh	r1, [r1, #12]
   83546:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8354a:	f021 0102 	bic.w	r1, r1, #2
   8354e:	9219      	str	r2, [sp, #100]	; 0x64
   83550:	f8ad 300e 	strh.w	r3, [sp, #14]
   83554:	69e2      	ldr	r2, [r4, #28]
   83556:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83558:	f8ad 100c 	strh.w	r1, [sp, #12]
   8355c:	a816      	add	r0, sp, #88	; 0x58
   8355e:	a91a      	add	r1, sp, #104	; 0x68
   83560:	f8cd e018 	str.w	lr, [sp, #24]
   83564:	9207      	str	r2, [sp, #28]
   83566:	9309      	str	r3, [sp, #36]	; 0x24
   83568:	9100      	str	r1, [sp, #0]
   8356a:	9104      	str	r1, [sp, #16]
   8356c:	9502      	str	r5, [sp, #8]
   8356e:	9505      	str	r5, [sp, #20]
   83570:	f000 fd44 	bl	83ffc <__retarget_lock_init_recursive>
   83574:	4643      	mov	r3, r8
   83576:	463a      	mov	r2, r7
   83578:	4669      	mov	r1, sp
   8357a:	4630      	mov	r0, r6
   8357c:	f7ff f992 	bl	828a4 <_vfiprintf_r>
   83580:	1e05      	subs	r5, r0, #0
   83582:	db07      	blt.n	83594 <__sbprintf+0x68>
   83584:	4630      	mov	r0, r6
   83586:	4669      	mov	r1, sp
   83588:	f000 f924 	bl	837d4 <_fflush_r>
   8358c:	2800      	cmp	r0, #0
   8358e:	bf18      	it	ne
   83590:	f04f 35ff 	movne.w	r5, #4294967295
   83594:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83598:	065b      	lsls	r3, r3, #25
   8359a:	d503      	bpl.n	835a4 <__sbprintf+0x78>
   8359c:	89a3      	ldrh	r3, [r4, #12]
   8359e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   835a2:	81a3      	strh	r3, [r4, #12]
   835a4:	9816      	ldr	r0, [sp, #88]	; 0x58
   835a6:	f000 fd2b 	bl	84000 <__retarget_lock_close_recursive>
   835aa:	4628      	mov	r0, r5
   835ac:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   835b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000835b4 <__swsetup_r>:
   835b4:	b538      	push	{r3, r4, r5, lr}
   835b6:	4b30      	ldr	r3, [pc, #192]	; (83678 <__swsetup_r+0xc4>)
   835b8:	4605      	mov	r5, r0
   835ba:	6818      	ldr	r0, [r3, #0]
   835bc:	460c      	mov	r4, r1
   835be:	b110      	cbz	r0, 835c6 <__swsetup_r+0x12>
   835c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   835c2:	2b00      	cmp	r3, #0
   835c4:	d038      	beq.n	83638 <__swsetup_r+0x84>
   835c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   835ca:	b293      	uxth	r3, r2
   835cc:	0718      	lsls	r0, r3, #28
   835ce:	d50c      	bpl.n	835ea <__swsetup_r+0x36>
   835d0:	6920      	ldr	r0, [r4, #16]
   835d2:	b1a8      	cbz	r0, 83600 <__swsetup_r+0x4c>
   835d4:	f013 0201 	ands.w	r2, r3, #1
   835d8:	d01e      	beq.n	83618 <__swsetup_r+0x64>
   835da:	2200      	movs	r2, #0
   835dc:	6963      	ldr	r3, [r4, #20]
   835de:	60a2      	str	r2, [r4, #8]
   835e0:	425b      	negs	r3, r3
   835e2:	61a3      	str	r3, [r4, #24]
   835e4:	b1f0      	cbz	r0, 83624 <__swsetup_r+0x70>
   835e6:	2000      	movs	r0, #0
   835e8:	bd38      	pop	{r3, r4, r5, pc}
   835ea:	06d9      	lsls	r1, r3, #27
   835ec:	d53b      	bpl.n	83666 <__swsetup_r+0xb2>
   835ee:	0758      	lsls	r0, r3, #29
   835f0:	d425      	bmi.n	8363e <__swsetup_r+0x8a>
   835f2:	6920      	ldr	r0, [r4, #16]
   835f4:	f042 0308 	orr.w	r3, r2, #8
   835f8:	81a3      	strh	r3, [r4, #12]
   835fa:	b29b      	uxth	r3, r3
   835fc:	2800      	cmp	r0, #0
   835fe:	d1e9      	bne.n	835d4 <__swsetup_r+0x20>
   83600:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83604:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83608:	d0e4      	beq.n	835d4 <__swsetup_r+0x20>
   8360a:	4628      	mov	r0, r5
   8360c:	4621      	mov	r1, r4
   8360e:	f000 fd2b 	bl	84068 <__smakebuf_r>
   83612:	89a3      	ldrh	r3, [r4, #12]
   83614:	6920      	ldr	r0, [r4, #16]
   83616:	e7dd      	b.n	835d4 <__swsetup_r+0x20>
   83618:	0799      	lsls	r1, r3, #30
   8361a:	bf58      	it	pl
   8361c:	6962      	ldrpl	r2, [r4, #20]
   8361e:	60a2      	str	r2, [r4, #8]
   83620:	2800      	cmp	r0, #0
   83622:	d1e0      	bne.n	835e6 <__swsetup_r+0x32>
   83624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83628:	061a      	lsls	r2, r3, #24
   8362a:	d5dd      	bpl.n	835e8 <__swsetup_r+0x34>
   8362c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83630:	81a3      	strh	r3, [r4, #12]
   83632:	f04f 30ff 	mov.w	r0, #4294967295
   83636:	bd38      	pop	{r3, r4, r5, pc}
   83638:	f000 f924 	bl	83884 <__sinit>
   8363c:	e7c3      	b.n	835c6 <__swsetup_r+0x12>
   8363e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83640:	b151      	cbz	r1, 83658 <__swsetup_r+0xa4>
   83642:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83646:	4299      	cmp	r1, r3
   83648:	d004      	beq.n	83654 <__swsetup_r+0xa0>
   8364a:	4628      	mov	r0, r5
   8364c:	f000 fa40 	bl	83ad0 <_free_r>
   83650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83654:	2300      	movs	r3, #0
   83656:	6323      	str	r3, [r4, #48]	; 0x30
   83658:	2300      	movs	r3, #0
   8365a:	6920      	ldr	r0, [r4, #16]
   8365c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   83660:	e884 0009 	stmia.w	r4, {r0, r3}
   83664:	e7c6      	b.n	835f4 <__swsetup_r+0x40>
   83666:	2309      	movs	r3, #9
   83668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8366c:	602b      	str	r3, [r5, #0]
   8366e:	f04f 30ff 	mov.w	r0, #4294967295
   83672:	81a2      	strh	r2, [r4, #12]
   83674:	bd38      	pop	{r3, r4, r5, pc}
   83676:	bf00      	nop
   83678:	200701c4 	.word	0x200701c4

0008367c <register_fini>:
   8367c:	4b02      	ldr	r3, [pc, #8]	; (83688 <register_fini+0xc>)
   8367e:	b113      	cbz	r3, 83686 <register_fini+0xa>
   83680:	4802      	ldr	r0, [pc, #8]	; (8368c <register_fini+0x10>)
   83682:	f000 b805 	b.w	83690 <atexit>
   83686:	4770      	bx	lr
   83688:	00000000 	.word	0x00000000
   8368c:	000838fd 	.word	0x000838fd

00083690 <atexit>:
   83690:	2300      	movs	r3, #0
   83692:	4601      	mov	r1, r0
   83694:	461a      	mov	r2, r3
   83696:	4618      	mov	r0, r3
   83698:	f001 bb56 	b.w	84d48 <__register_exitproc>

0008369c <__sflush_r>:
   8369c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   836a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836a4:	b29a      	uxth	r2, r3
   836a6:	460d      	mov	r5, r1
   836a8:	0711      	lsls	r1, r2, #28
   836aa:	4680      	mov	r8, r0
   836ac:	d43a      	bmi.n	83724 <__sflush_r+0x88>
   836ae:	686a      	ldr	r2, [r5, #4]
   836b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   836b4:	2a00      	cmp	r2, #0
   836b6:	81ab      	strh	r3, [r5, #12]
   836b8:	dd70      	ble.n	8379c <__sflush_r+0x100>
   836ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   836bc:	2c00      	cmp	r4, #0
   836be:	d04a      	beq.n	83756 <__sflush_r+0xba>
   836c0:	2200      	movs	r2, #0
   836c2:	b29b      	uxth	r3, r3
   836c4:	f8d8 6000 	ldr.w	r6, [r8]
   836c8:	f8c8 2000 	str.w	r2, [r8]
   836cc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   836d0:	d068      	beq.n	837a4 <__sflush_r+0x108>
   836d2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   836d4:	075f      	lsls	r7, r3, #29
   836d6:	d505      	bpl.n	836e4 <__sflush_r+0x48>
   836d8:	6869      	ldr	r1, [r5, #4]
   836da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   836dc:	1a52      	subs	r2, r2, r1
   836de:	b10b      	cbz	r3, 836e4 <__sflush_r+0x48>
   836e0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   836e2:	1ad2      	subs	r2, r2, r3
   836e4:	2300      	movs	r3, #0
   836e6:	69e9      	ldr	r1, [r5, #28]
   836e8:	4640      	mov	r0, r8
   836ea:	47a0      	blx	r4
   836ec:	1c44      	adds	r4, r0, #1
   836ee:	d03d      	beq.n	8376c <__sflush_r+0xd0>
   836f0:	2100      	movs	r1, #0
   836f2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   836f6:	692a      	ldr	r2, [r5, #16]
   836f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   836fc:	81ab      	strh	r3, [r5, #12]
   836fe:	04db      	lsls	r3, r3, #19
   83700:	6069      	str	r1, [r5, #4]
   83702:	602a      	str	r2, [r5, #0]
   83704:	d448      	bmi.n	83798 <__sflush_r+0xfc>
   83706:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83708:	f8c8 6000 	str.w	r6, [r8]
   8370c:	b319      	cbz	r1, 83756 <__sflush_r+0xba>
   8370e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83712:	4299      	cmp	r1, r3
   83714:	d002      	beq.n	8371c <__sflush_r+0x80>
   83716:	4640      	mov	r0, r8
   83718:	f000 f9da 	bl	83ad0 <_free_r>
   8371c:	2000      	movs	r0, #0
   8371e:	6328      	str	r0, [r5, #48]	; 0x30
   83720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83724:	692e      	ldr	r6, [r5, #16]
   83726:	b1b6      	cbz	r6, 83756 <__sflush_r+0xba>
   83728:	0791      	lsls	r1, r2, #30
   8372a:	bf18      	it	ne
   8372c:	2300      	movne	r3, #0
   8372e:	682c      	ldr	r4, [r5, #0]
   83730:	bf08      	it	eq
   83732:	696b      	ldreq	r3, [r5, #20]
   83734:	602e      	str	r6, [r5, #0]
   83736:	1ba4      	subs	r4, r4, r6
   83738:	60ab      	str	r3, [r5, #8]
   8373a:	e00a      	b.n	83752 <__sflush_r+0xb6>
   8373c:	4623      	mov	r3, r4
   8373e:	4632      	mov	r2, r6
   83740:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83742:	69e9      	ldr	r1, [r5, #28]
   83744:	4640      	mov	r0, r8
   83746:	47b8      	blx	r7
   83748:	2800      	cmp	r0, #0
   8374a:	eba4 0400 	sub.w	r4, r4, r0
   8374e:	4406      	add	r6, r0
   83750:	dd04      	ble.n	8375c <__sflush_r+0xc0>
   83752:	2c00      	cmp	r4, #0
   83754:	dcf2      	bgt.n	8373c <__sflush_r+0xa0>
   83756:	2000      	movs	r0, #0
   83758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8375c:	89ab      	ldrh	r3, [r5, #12]
   8375e:	f04f 30ff 	mov.w	r0, #4294967295
   83762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83766:	81ab      	strh	r3, [r5, #12]
   83768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8376c:	f8d8 4000 	ldr.w	r4, [r8]
   83770:	2c1d      	cmp	r4, #29
   83772:	d8f3      	bhi.n	8375c <__sflush_r+0xc0>
   83774:	4b16      	ldr	r3, [pc, #88]	; (837d0 <__sflush_r+0x134>)
   83776:	40e3      	lsrs	r3, r4
   83778:	43db      	mvns	r3, r3
   8377a:	f013 0301 	ands.w	r3, r3, #1
   8377e:	d1ed      	bne.n	8375c <__sflush_r+0xc0>
   83780:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83784:	6929      	ldr	r1, [r5, #16]
   83786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8378a:	81aa      	strh	r2, [r5, #12]
   8378c:	04d2      	lsls	r2, r2, #19
   8378e:	606b      	str	r3, [r5, #4]
   83790:	6029      	str	r1, [r5, #0]
   83792:	d5b8      	bpl.n	83706 <__sflush_r+0x6a>
   83794:	2c00      	cmp	r4, #0
   83796:	d1b6      	bne.n	83706 <__sflush_r+0x6a>
   83798:	6528      	str	r0, [r5, #80]	; 0x50
   8379a:	e7b4      	b.n	83706 <__sflush_r+0x6a>
   8379c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8379e:	2a00      	cmp	r2, #0
   837a0:	dc8b      	bgt.n	836ba <__sflush_r+0x1e>
   837a2:	e7d8      	b.n	83756 <__sflush_r+0xba>
   837a4:	2301      	movs	r3, #1
   837a6:	69e9      	ldr	r1, [r5, #28]
   837a8:	4640      	mov	r0, r8
   837aa:	47a0      	blx	r4
   837ac:	1c43      	adds	r3, r0, #1
   837ae:	4602      	mov	r2, r0
   837b0:	d002      	beq.n	837b8 <__sflush_r+0x11c>
   837b2:	89ab      	ldrh	r3, [r5, #12]
   837b4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   837b6:	e78d      	b.n	836d4 <__sflush_r+0x38>
   837b8:	f8d8 3000 	ldr.w	r3, [r8]
   837bc:	2b00      	cmp	r3, #0
   837be:	d0f8      	beq.n	837b2 <__sflush_r+0x116>
   837c0:	2b1d      	cmp	r3, #29
   837c2:	d001      	beq.n	837c8 <__sflush_r+0x12c>
   837c4:	2b16      	cmp	r3, #22
   837c6:	d1c9      	bne.n	8375c <__sflush_r+0xc0>
   837c8:	f8c8 6000 	str.w	r6, [r8]
   837cc:	e7c3      	b.n	83756 <__sflush_r+0xba>
   837ce:	bf00      	nop
   837d0:	20400001 	.word	0x20400001

000837d4 <_fflush_r>:
   837d4:	b538      	push	{r3, r4, r5, lr}
   837d6:	460d      	mov	r5, r1
   837d8:	4604      	mov	r4, r0
   837da:	b108      	cbz	r0, 837e0 <_fflush_r+0xc>
   837dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837de:	b1bb      	cbz	r3, 83810 <_fflush_r+0x3c>
   837e0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   837e4:	b188      	cbz	r0, 8380a <_fflush_r+0x36>
   837e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   837e8:	07db      	lsls	r3, r3, #31
   837ea:	d401      	bmi.n	837f0 <_fflush_r+0x1c>
   837ec:	0581      	lsls	r1, r0, #22
   837ee:	d517      	bpl.n	83820 <_fflush_r+0x4c>
   837f0:	4620      	mov	r0, r4
   837f2:	4629      	mov	r1, r5
   837f4:	f7ff ff52 	bl	8369c <__sflush_r>
   837f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   837fa:	4604      	mov	r4, r0
   837fc:	07da      	lsls	r2, r3, #31
   837fe:	d402      	bmi.n	83806 <_fflush_r+0x32>
   83800:	89ab      	ldrh	r3, [r5, #12]
   83802:	059b      	lsls	r3, r3, #22
   83804:	d507      	bpl.n	83816 <_fflush_r+0x42>
   83806:	4620      	mov	r0, r4
   83808:	bd38      	pop	{r3, r4, r5, pc}
   8380a:	4604      	mov	r4, r0
   8380c:	4620      	mov	r0, r4
   8380e:	bd38      	pop	{r3, r4, r5, pc}
   83810:	f000 f838 	bl	83884 <__sinit>
   83814:	e7e4      	b.n	837e0 <_fflush_r+0xc>
   83816:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83818:	f000 fbf6 	bl	84008 <__retarget_lock_release_recursive>
   8381c:	4620      	mov	r0, r4
   8381e:	bd38      	pop	{r3, r4, r5, pc}
   83820:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83822:	f000 fbef 	bl	84004 <__retarget_lock_acquire_recursive>
   83826:	e7e3      	b.n	837f0 <_fflush_r+0x1c>

00083828 <_cleanup_r>:
   83828:	4901      	ldr	r1, [pc, #4]	; (83830 <_cleanup_r+0x8>)
   8382a:	f000 bbb1 	b.w	83f90 <_fwalk_reent>
   8382e:	bf00      	nop
   83830:	00084e31 	.word	0x00084e31

00083834 <std.isra.0>:
   83834:	2300      	movs	r3, #0
   83836:	b510      	push	{r4, lr}
   83838:	4604      	mov	r4, r0
   8383a:	8181      	strh	r1, [r0, #12]
   8383c:	81c2      	strh	r2, [r0, #14]
   8383e:	6003      	str	r3, [r0, #0]
   83840:	6043      	str	r3, [r0, #4]
   83842:	6083      	str	r3, [r0, #8]
   83844:	6643      	str	r3, [r0, #100]	; 0x64
   83846:	6103      	str	r3, [r0, #16]
   83848:	6143      	str	r3, [r0, #20]
   8384a:	6183      	str	r3, [r0, #24]
   8384c:	4619      	mov	r1, r3
   8384e:	2208      	movs	r2, #8
   83850:	305c      	adds	r0, #92	; 0x5c
   83852:	f7fe fe9b 	bl	8258c <memset>
   83856:	4807      	ldr	r0, [pc, #28]	; (83874 <std.isra.0+0x40>)
   83858:	4907      	ldr	r1, [pc, #28]	; (83878 <std.isra.0+0x44>)
   8385a:	4a08      	ldr	r2, [pc, #32]	; (8387c <std.isra.0+0x48>)
   8385c:	4b08      	ldr	r3, [pc, #32]	; (83880 <std.isra.0+0x4c>)
   8385e:	6220      	str	r0, [r4, #32]
   83860:	61e4      	str	r4, [r4, #28]
   83862:	6261      	str	r1, [r4, #36]	; 0x24
   83864:	62a2      	str	r2, [r4, #40]	; 0x28
   83866:	62e3      	str	r3, [r4, #44]	; 0x2c
   83868:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8386c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83870:	f000 bbc4 	b.w	83ffc <__retarget_lock_init_recursive>
   83874:	00084b79 	.word	0x00084b79
   83878:	00084b9d 	.word	0x00084b9d
   8387c:	00084bd9 	.word	0x00084bd9
   83880:	00084bf9 	.word	0x00084bf9

00083884 <__sinit>:
   83884:	b510      	push	{r4, lr}
   83886:	4604      	mov	r4, r0
   83888:	4814      	ldr	r0, [pc, #80]	; (838dc <__sinit+0x58>)
   8388a:	f000 fbbb 	bl	84004 <__retarget_lock_acquire_recursive>
   8388e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83890:	b9fa      	cbnz	r2, 838d2 <__sinit+0x4e>
   83892:	2003      	movs	r0, #3
   83894:	4912      	ldr	r1, [pc, #72]	; (838e0 <__sinit+0x5c>)
   83896:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8389a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8389e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   838a2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   838a6:	63e1      	str	r1, [r4, #60]	; 0x3c
   838a8:	6860      	ldr	r0, [r4, #4]
   838aa:	2104      	movs	r1, #4
   838ac:	f7ff ffc2 	bl	83834 <std.isra.0>
   838b0:	68a0      	ldr	r0, [r4, #8]
   838b2:	2201      	movs	r2, #1
   838b4:	2109      	movs	r1, #9
   838b6:	f7ff ffbd 	bl	83834 <std.isra.0>
   838ba:	68e0      	ldr	r0, [r4, #12]
   838bc:	2202      	movs	r2, #2
   838be:	2112      	movs	r1, #18
   838c0:	f7ff ffb8 	bl	83834 <std.isra.0>
   838c4:	2301      	movs	r3, #1
   838c6:	4805      	ldr	r0, [pc, #20]	; (838dc <__sinit+0x58>)
   838c8:	63a3      	str	r3, [r4, #56]	; 0x38
   838ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   838ce:	f000 bb9b 	b.w	84008 <__retarget_lock_release_recursive>
   838d2:	4802      	ldr	r0, [pc, #8]	; (838dc <__sinit+0x58>)
   838d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   838d8:	f000 bb96 	b.w	84008 <__retarget_lock_release_recursive>
   838dc:	20071454 	.word	0x20071454
   838e0:	00083829 	.word	0x00083829

000838e4 <__sfp_lock_acquire>:
   838e4:	4801      	ldr	r0, [pc, #4]	; (838ec <__sfp_lock_acquire+0x8>)
   838e6:	f000 bb8d 	b.w	84004 <__retarget_lock_acquire_recursive>
   838ea:	bf00      	nop
   838ec:	20071468 	.word	0x20071468

000838f0 <__sfp_lock_release>:
   838f0:	4801      	ldr	r0, [pc, #4]	; (838f8 <__sfp_lock_release+0x8>)
   838f2:	f000 bb89 	b.w	84008 <__retarget_lock_release_recursive>
   838f6:	bf00      	nop
   838f8:	20071468 	.word	0x20071468

000838fc <__libc_fini_array>:
   838fc:	b538      	push	{r3, r4, r5, lr}
   838fe:	4c0a      	ldr	r4, [pc, #40]	; (83928 <__libc_fini_array+0x2c>)
   83900:	4d0a      	ldr	r5, [pc, #40]	; (8392c <__libc_fini_array+0x30>)
   83902:	1b64      	subs	r4, r4, r5
   83904:	10a4      	asrs	r4, r4, #2
   83906:	d00a      	beq.n	8391e <__libc_fini_array+0x22>
   83908:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8390c:	3b01      	subs	r3, #1
   8390e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83912:	3c01      	subs	r4, #1
   83914:	f855 3904 	ldr.w	r3, [r5], #-4
   83918:	4798      	blx	r3
   8391a:	2c00      	cmp	r4, #0
   8391c:	d1f9      	bne.n	83912 <__libc_fini_array+0x16>
   8391e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83922:	f002 bdaf 	b.w	86484 <_fini>
   83926:	bf00      	nop
   83928:	00086494 	.word	0x00086494
   8392c:	00086490 	.word	0x00086490

00083930 <__fputwc>:
   83930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83934:	b083      	sub	sp, #12
   83936:	4607      	mov	r7, r0
   83938:	4688      	mov	r8, r1
   8393a:	4614      	mov	r4, r2
   8393c:	f000 fb50 	bl	83fe0 <__locale_mb_cur_max>
   83940:	2801      	cmp	r0, #1
   83942:	d033      	beq.n	839ac <__fputwc+0x7c>
   83944:	4642      	mov	r2, r8
   83946:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8394a:	a901      	add	r1, sp, #4
   8394c:	4638      	mov	r0, r7
   8394e:	f001 f9af 	bl	84cb0 <_wcrtomb_r>
   83952:	1c42      	adds	r2, r0, #1
   83954:	4606      	mov	r6, r0
   83956:	d022      	beq.n	8399e <__fputwc+0x6e>
   83958:	b390      	cbz	r0, 839c0 <__fputwc+0x90>
   8395a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8395e:	2500      	movs	r5, #0
   83960:	f10d 0904 	add.w	r9, sp, #4
   83964:	e008      	b.n	83978 <__fputwc+0x48>
   83966:	6823      	ldr	r3, [r4, #0]
   83968:	1c5a      	adds	r2, r3, #1
   8396a:	6022      	str	r2, [r4, #0]
   8396c:	7019      	strb	r1, [r3, #0]
   8396e:	3501      	adds	r5, #1
   83970:	42b5      	cmp	r5, r6
   83972:	d225      	bcs.n	839c0 <__fputwc+0x90>
   83974:	f815 1009 	ldrb.w	r1, [r5, r9]
   83978:	68a3      	ldr	r3, [r4, #8]
   8397a:	3b01      	subs	r3, #1
   8397c:	2b00      	cmp	r3, #0
   8397e:	60a3      	str	r3, [r4, #8]
   83980:	daf1      	bge.n	83966 <__fputwc+0x36>
   83982:	69a2      	ldr	r2, [r4, #24]
   83984:	4293      	cmp	r3, r2
   83986:	db01      	blt.n	8398c <__fputwc+0x5c>
   83988:	290a      	cmp	r1, #10
   8398a:	d1ec      	bne.n	83966 <__fputwc+0x36>
   8398c:	4622      	mov	r2, r4
   8398e:	4638      	mov	r0, r7
   83990:	f001 f936 	bl	84c00 <__swbuf_r>
   83994:	1c43      	adds	r3, r0, #1
   83996:	d1ea      	bne.n	8396e <__fputwc+0x3e>
   83998:	b003      	add	sp, #12
   8399a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8399e:	89a3      	ldrh	r3, [r4, #12]
   839a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839a4:	81a3      	strh	r3, [r4, #12]
   839a6:	b003      	add	sp, #12
   839a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839ac:	f108 33ff 	add.w	r3, r8, #4294967295
   839b0:	2bfe      	cmp	r3, #254	; 0xfe
   839b2:	d8c7      	bhi.n	83944 <__fputwc+0x14>
   839b4:	fa5f f188 	uxtb.w	r1, r8
   839b8:	4606      	mov	r6, r0
   839ba:	f88d 1004 	strb.w	r1, [sp, #4]
   839be:	e7ce      	b.n	8395e <__fputwc+0x2e>
   839c0:	4640      	mov	r0, r8
   839c2:	b003      	add	sp, #12
   839c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000839c8 <_fputwc_r>:
   839c8:	b530      	push	{r4, r5, lr}
   839ca:	6e53      	ldr	r3, [r2, #100]	; 0x64
   839cc:	4614      	mov	r4, r2
   839ce:	f013 0f01 	tst.w	r3, #1
   839d2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   839d6:	b083      	sub	sp, #12
   839d8:	4605      	mov	r5, r0
   839da:	b29a      	uxth	r2, r3
   839dc:	d101      	bne.n	839e2 <_fputwc_r+0x1a>
   839de:	0590      	lsls	r0, r2, #22
   839e0:	d51c      	bpl.n	83a1c <_fputwc_r+0x54>
   839e2:	0490      	lsls	r0, r2, #18
   839e4:	d406      	bmi.n	839f4 <_fputwc_r+0x2c>
   839e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   839e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   839ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   839f0:	81a3      	strh	r3, [r4, #12]
   839f2:	6662      	str	r2, [r4, #100]	; 0x64
   839f4:	4628      	mov	r0, r5
   839f6:	4622      	mov	r2, r4
   839f8:	f7ff ff9a 	bl	83930 <__fputwc>
   839fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   839fe:	4605      	mov	r5, r0
   83a00:	07da      	lsls	r2, r3, #31
   83a02:	d402      	bmi.n	83a0a <_fputwc_r+0x42>
   83a04:	89a3      	ldrh	r3, [r4, #12]
   83a06:	059b      	lsls	r3, r3, #22
   83a08:	d502      	bpl.n	83a10 <_fputwc_r+0x48>
   83a0a:	4628      	mov	r0, r5
   83a0c:	b003      	add	sp, #12
   83a0e:	bd30      	pop	{r4, r5, pc}
   83a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a12:	f000 faf9 	bl	84008 <__retarget_lock_release_recursive>
   83a16:	4628      	mov	r0, r5
   83a18:	b003      	add	sp, #12
   83a1a:	bd30      	pop	{r4, r5, pc}
   83a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a1e:	9101      	str	r1, [sp, #4]
   83a20:	f000 faf0 	bl	84004 <__retarget_lock_acquire_recursive>
   83a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a28:	9901      	ldr	r1, [sp, #4]
   83a2a:	b29a      	uxth	r2, r3
   83a2c:	e7d9      	b.n	839e2 <_fputwc_r+0x1a>
   83a2e:	bf00      	nop

00083a30 <_malloc_trim_r>:
   83a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a32:	460c      	mov	r4, r1
   83a34:	4f23      	ldr	r7, [pc, #140]	; (83ac4 <_malloc_trim_r+0x94>)
   83a36:	4606      	mov	r6, r0
   83a38:	f000 feca 	bl	847d0 <__malloc_lock>
   83a3c:	68bb      	ldr	r3, [r7, #8]
   83a3e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83a42:	685d      	ldr	r5, [r3, #4]
   83a44:	310f      	adds	r1, #15
   83a46:	f025 0503 	bic.w	r5, r5, #3
   83a4a:	4429      	add	r1, r5
   83a4c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83a50:	f021 010f 	bic.w	r1, r1, #15
   83a54:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83a58:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83a5c:	db07      	blt.n	83a6e <_malloc_trim_r+0x3e>
   83a5e:	2100      	movs	r1, #0
   83a60:	4630      	mov	r0, r6
   83a62:	f001 f877 	bl	84b54 <_sbrk_r>
   83a66:	68bb      	ldr	r3, [r7, #8]
   83a68:	442b      	add	r3, r5
   83a6a:	4298      	cmp	r0, r3
   83a6c:	d004      	beq.n	83a78 <_malloc_trim_r+0x48>
   83a6e:	4630      	mov	r0, r6
   83a70:	f000 feb4 	bl	847dc <__malloc_unlock>
   83a74:	2000      	movs	r0, #0
   83a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a78:	4261      	negs	r1, r4
   83a7a:	4630      	mov	r0, r6
   83a7c:	f001 f86a 	bl	84b54 <_sbrk_r>
   83a80:	3001      	adds	r0, #1
   83a82:	d00d      	beq.n	83aa0 <_malloc_trim_r+0x70>
   83a84:	4b10      	ldr	r3, [pc, #64]	; (83ac8 <_malloc_trim_r+0x98>)
   83a86:	68ba      	ldr	r2, [r7, #8]
   83a88:	6819      	ldr	r1, [r3, #0]
   83a8a:	1b2d      	subs	r5, r5, r4
   83a8c:	f045 0501 	orr.w	r5, r5, #1
   83a90:	4630      	mov	r0, r6
   83a92:	1b09      	subs	r1, r1, r4
   83a94:	6055      	str	r5, [r2, #4]
   83a96:	6019      	str	r1, [r3, #0]
   83a98:	f000 fea0 	bl	847dc <__malloc_unlock>
   83a9c:	2001      	movs	r0, #1
   83a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83aa0:	2100      	movs	r1, #0
   83aa2:	4630      	mov	r0, r6
   83aa4:	f001 f856 	bl	84b54 <_sbrk_r>
   83aa8:	68ba      	ldr	r2, [r7, #8]
   83aaa:	1a83      	subs	r3, r0, r2
   83aac:	2b0f      	cmp	r3, #15
   83aae:	ddde      	ble.n	83a6e <_malloc_trim_r+0x3e>
   83ab0:	4c06      	ldr	r4, [pc, #24]	; (83acc <_malloc_trim_r+0x9c>)
   83ab2:	4905      	ldr	r1, [pc, #20]	; (83ac8 <_malloc_trim_r+0x98>)
   83ab4:	6824      	ldr	r4, [r4, #0]
   83ab6:	f043 0301 	orr.w	r3, r3, #1
   83aba:	1b00      	subs	r0, r0, r4
   83abc:	6053      	str	r3, [r2, #4]
   83abe:	6008      	str	r0, [r1, #0]
   83ac0:	e7d5      	b.n	83a6e <_malloc_trim_r+0x3e>
   83ac2:	bf00      	nop
   83ac4:	20070760 	.word	0x20070760
   83ac8:	200713fc 	.word	0x200713fc
   83acc:	20070b68 	.word	0x20070b68

00083ad0 <_free_r>:
   83ad0:	2900      	cmp	r1, #0
   83ad2:	d044      	beq.n	83b5e <_free_r+0x8e>
   83ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ad8:	460d      	mov	r5, r1
   83ada:	4680      	mov	r8, r0
   83adc:	f000 fe78 	bl	847d0 <__malloc_lock>
   83ae0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83ae4:	4969      	ldr	r1, [pc, #420]	; (83c8c <_free_r+0x1bc>)
   83ae6:	f1a5 0408 	sub.w	r4, r5, #8
   83aea:	f027 0301 	bic.w	r3, r7, #1
   83aee:	18e2      	adds	r2, r4, r3
   83af0:	688e      	ldr	r6, [r1, #8]
   83af2:	6850      	ldr	r0, [r2, #4]
   83af4:	42b2      	cmp	r2, r6
   83af6:	f020 0003 	bic.w	r0, r0, #3
   83afa:	d05e      	beq.n	83bba <_free_r+0xea>
   83afc:	07fe      	lsls	r6, r7, #31
   83afe:	6050      	str	r0, [r2, #4]
   83b00:	d40b      	bmi.n	83b1a <_free_r+0x4a>
   83b02:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83b06:	f101 0e08 	add.w	lr, r1, #8
   83b0a:	1be4      	subs	r4, r4, r7
   83b0c:	68a5      	ldr	r5, [r4, #8]
   83b0e:	443b      	add	r3, r7
   83b10:	4575      	cmp	r5, lr
   83b12:	d06d      	beq.n	83bf0 <_free_r+0x120>
   83b14:	68e7      	ldr	r7, [r4, #12]
   83b16:	60ef      	str	r7, [r5, #12]
   83b18:	60bd      	str	r5, [r7, #8]
   83b1a:	1815      	adds	r5, r2, r0
   83b1c:	686d      	ldr	r5, [r5, #4]
   83b1e:	07ed      	lsls	r5, r5, #31
   83b20:	d53e      	bpl.n	83ba0 <_free_r+0xd0>
   83b22:	f043 0201 	orr.w	r2, r3, #1
   83b26:	6062      	str	r2, [r4, #4]
   83b28:	50e3      	str	r3, [r4, r3]
   83b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83b2e:	d217      	bcs.n	83b60 <_free_r+0x90>
   83b30:	2201      	movs	r2, #1
   83b32:	08db      	lsrs	r3, r3, #3
   83b34:	1098      	asrs	r0, r3, #2
   83b36:	684d      	ldr	r5, [r1, #4]
   83b38:	4413      	add	r3, r2
   83b3a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83b3e:	4082      	lsls	r2, r0
   83b40:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83b44:	432a      	orrs	r2, r5
   83b46:	3808      	subs	r0, #8
   83b48:	60e0      	str	r0, [r4, #12]
   83b4a:	60a7      	str	r7, [r4, #8]
   83b4c:	604a      	str	r2, [r1, #4]
   83b4e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83b52:	60fc      	str	r4, [r7, #12]
   83b54:	4640      	mov	r0, r8
   83b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b5a:	f000 be3f 	b.w	847dc <__malloc_unlock>
   83b5e:	4770      	bx	lr
   83b60:	0a5a      	lsrs	r2, r3, #9
   83b62:	2a04      	cmp	r2, #4
   83b64:	d852      	bhi.n	83c0c <_free_r+0x13c>
   83b66:	099a      	lsrs	r2, r3, #6
   83b68:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83b6c:	00ff      	lsls	r7, r7, #3
   83b6e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83b72:	19c8      	adds	r0, r1, r7
   83b74:	59ca      	ldr	r2, [r1, r7]
   83b76:	3808      	subs	r0, #8
   83b78:	4290      	cmp	r0, r2
   83b7a:	d04f      	beq.n	83c1c <_free_r+0x14c>
   83b7c:	6851      	ldr	r1, [r2, #4]
   83b7e:	f021 0103 	bic.w	r1, r1, #3
   83b82:	428b      	cmp	r3, r1
   83b84:	d232      	bcs.n	83bec <_free_r+0x11c>
   83b86:	6892      	ldr	r2, [r2, #8]
   83b88:	4290      	cmp	r0, r2
   83b8a:	d1f7      	bne.n	83b7c <_free_r+0xac>
   83b8c:	68c3      	ldr	r3, [r0, #12]
   83b8e:	60a0      	str	r0, [r4, #8]
   83b90:	60e3      	str	r3, [r4, #12]
   83b92:	609c      	str	r4, [r3, #8]
   83b94:	60c4      	str	r4, [r0, #12]
   83b96:	4640      	mov	r0, r8
   83b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b9c:	f000 be1e 	b.w	847dc <__malloc_unlock>
   83ba0:	6895      	ldr	r5, [r2, #8]
   83ba2:	4f3b      	ldr	r7, [pc, #236]	; (83c90 <_free_r+0x1c0>)
   83ba4:	4403      	add	r3, r0
   83ba6:	42bd      	cmp	r5, r7
   83ba8:	d040      	beq.n	83c2c <_free_r+0x15c>
   83baa:	68d0      	ldr	r0, [r2, #12]
   83bac:	f043 0201 	orr.w	r2, r3, #1
   83bb0:	60e8      	str	r0, [r5, #12]
   83bb2:	6085      	str	r5, [r0, #8]
   83bb4:	6062      	str	r2, [r4, #4]
   83bb6:	50e3      	str	r3, [r4, r3]
   83bb8:	e7b7      	b.n	83b2a <_free_r+0x5a>
   83bba:	07ff      	lsls	r7, r7, #31
   83bbc:	4403      	add	r3, r0
   83bbe:	d407      	bmi.n	83bd0 <_free_r+0x100>
   83bc0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83bc4:	1b64      	subs	r4, r4, r5
   83bc6:	68e2      	ldr	r2, [r4, #12]
   83bc8:	68a0      	ldr	r0, [r4, #8]
   83bca:	442b      	add	r3, r5
   83bcc:	60c2      	str	r2, [r0, #12]
   83bce:	6090      	str	r0, [r2, #8]
   83bd0:	4a30      	ldr	r2, [pc, #192]	; (83c94 <_free_r+0x1c4>)
   83bd2:	f043 0001 	orr.w	r0, r3, #1
   83bd6:	6812      	ldr	r2, [r2, #0]
   83bd8:	6060      	str	r0, [r4, #4]
   83bda:	4293      	cmp	r3, r2
   83bdc:	608c      	str	r4, [r1, #8]
   83bde:	d3b9      	bcc.n	83b54 <_free_r+0x84>
   83be0:	4b2d      	ldr	r3, [pc, #180]	; (83c98 <_free_r+0x1c8>)
   83be2:	4640      	mov	r0, r8
   83be4:	6819      	ldr	r1, [r3, #0]
   83be6:	f7ff ff23 	bl	83a30 <_malloc_trim_r>
   83bea:	e7b3      	b.n	83b54 <_free_r+0x84>
   83bec:	4610      	mov	r0, r2
   83bee:	e7cd      	b.n	83b8c <_free_r+0xbc>
   83bf0:	1811      	adds	r1, r2, r0
   83bf2:	6849      	ldr	r1, [r1, #4]
   83bf4:	07c9      	lsls	r1, r1, #31
   83bf6:	d444      	bmi.n	83c82 <_free_r+0x1b2>
   83bf8:	6891      	ldr	r1, [r2, #8]
   83bfa:	4403      	add	r3, r0
   83bfc:	68d2      	ldr	r2, [r2, #12]
   83bfe:	f043 0001 	orr.w	r0, r3, #1
   83c02:	60ca      	str	r2, [r1, #12]
   83c04:	6091      	str	r1, [r2, #8]
   83c06:	6060      	str	r0, [r4, #4]
   83c08:	50e3      	str	r3, [r4, r3]
   83c0a:	e7a3      	b.n	83b54 <_free_r+0x84>
   83c0c:	2a14      	cmp	r2, #20
   83c0e:	d816      	bhi.n	83c3e <_free_r+0x16e>
   83c10:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83c14:	00ff      	lsls	r7, r7, #3
   83c16:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83c1a:	e7aa      	b.n	83b72 <_free_r+0xa2>
   83c1c:	2301      	movs	r3, #1
   83c1e:	10aa      	asrs	r2, r5, #2
   83c20:	684d      	ldr	r5, [r1, #4]
   83c22:	4093      	lsls	r3, r2
   83c24:	432b      	orrs	r3, r5
   83c26:	604b      	str	r3, [r1, #4]
   83c28:	4603      	mov	r3, r0
   83c2a:	e7b0      	b.n	83b8e <_free_r+0xbe>
   83c2c:	f043 0201 	orr.w	r2, r3, #1
   83c30:	614c      	str	r4, [r1, #20]
   83c32:	610c      	str	r4, [r1, #16]
   83c34:	60e5      	str	r5, [r4, #12]
   83c36:	60a5      	str	r5, [r4, #8]
   83c38:	6062      	str	r2, [r4, #4]
   83c3a:	50e3      	str	r3, [r4, r3]
   83c3c:	e78a      	b.n	83b54 <_free_r+0x84>
   83c3e:	2a54      	cmp	r2, #84	; 0x54
   83c40:	d806      	bhi.n	83c50 <_free_r+0x180>
   83c42:	0b1a      	lsrs	r2, r3, #12
   83c44:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83c48:	00ff      	lsls	r7, r7, #3
   83c4a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83c4e:	e790      	b.n	83b72 <_free_r+0xa2>
   83c50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83c54:	d806      	bhi.n	83c64 <_free_r+0x194>
   83c56:	0bda      	lsrs	r2, r3, #15
   83c58:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83c5c:	00ff      	lsls	r7, r7, #3
   83c5e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83c62:	e786      	b.n	83b72 <_free_r+0xa2>
   83c64:	f240 5054 	movw	r0, #1364	; 0x554
   83c68:	4282      	cmp	r2, r0
   83c6a:	d806      	bhi.n	83c7a <_free_r+0x1aa>
   83c6c:	0c9a      	lsrs	r2, r3, #18
   83c6e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83c72:	00ff      	lsls	r7, r7, #3
   83c74:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83c78:	e77b      	b.n	83b72 <_free_r+0xa2>
   83c7a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83c7e:	257e      	movs	r5, #126	; 0x7e
   83c80:	e777      	b.n	83b72 <_free_r+0xa2>
   83c82:	f043 0101 	orr.w	r1, r3, #1
   83c86:	6061      	str	r1, [r4, #4]
   83c88:	6013      	str	r3, [r2, #0]
   83c8a:	e763      	b.n	83b54 <_free_r+0x84>
   83c8c:	20070760 	.word	0x20070760
   83c90:	20070768 	.word	0x20070768
   83c94:	20070b6c 	.word	0x20070b6c
   83c98:	2007142c 	.word	0x2007142c

00083c9c <__sfvwrite_r>:
   83c9c:	6893      	ldr	r3, [r2, #8]
   83c9e:	2b00      	cmp	r3, #0
   83ca0:	d071      	beq.n	83d86 <__sfvwrite_r+0xea>
   83ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83ca6:	898b      	ldrh	r3, [r1, #12]
   83ca8:	b083      	sub	sp, #12
   83caa:	460c      	mov	r4, r1
   83cac:	0719      	lsls	r1, r3, #28
   83cae:	9000      	str	r0, [sp, #0]
   83cb0:	4616      	mov	r6, r2
   83cb2:	d525      	bpl.n	83d00 <__sfvwrite_r+0x64>
   83cb4:	6922      	ldr	r2, [r4, #16]
   83cb6:	b31a      	cbz	r2, 83d00 <__sfvwrite_r+0x64>
   83cb8:	f013 0002 	ands.w	r0, r3, #2
   83cbc:	6835      	ldr	r5, [r6, #0]
   83cbe:	d02b      	beq.n	83d18 <__sfvwrite_r+0x7c>
   83cc0:	f04f 0900 	mov.w	r9, #0
   83cc4:	46b0      	mov	r8, r6
   83cc6:	464f      	mov	r7, r9
   83cc8:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 83f8c <__sfvwrite_r+0x2f0>
   83ccc:	2f00      	cmp	r7, #0
   83cce:	d055      	beq.n	83d7c <__sfvwrite_r+0xe0>
   83cd0:	4557      	cmp	r7, sl
   83cd2:	463b      	mov	r3, r7
   83cd4:	464a      	mov	r2, r9
   83cd6:	bf28      	it	cs
   83cd8:	4653      	movcs	r3, sl
   83cda:	69e1      	ldr	r1, [r4, #28]
   83cdc:	9800      	ldr	r0, [sp, #0]
   83cde:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83ce0:	47b0      	blx	r6
   83ce2:	2800      	cmp	r0, #0
   83ce4:	dd56      	ble.n	83d94 <__sfvwrite_r+0xf8>
   83ce6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83cea:	4481      	add	r9, r0
   83cec:	1a1b      	subs	r3, r3, r0
   83cee:	1a3f      	subs	r7, r7, r0
   83cf0:	f8c8 3008 	str.w	r3, [r8, #8]
   83cf4:	2b00      	cmp	r3, #0
   83cf6:	d1e9      	bne.n	83ccc <__sfvwrite_r+0x30>
   83cf8:	2000      	movs	r0, #0
   83cfa:	b003      	add	sp, #12
   83cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d00:	4621      	mov	r1, r4
   83d02:	9800      	ldr	r0, [sp, #0]
   83d04:	f7ff fc56 	bl	835b4 <__swsetup_r>
   83d08:	2800      	cmp	r0, #0
   83d0a:	f040 8135 	bne.w	83f78 <__sfvwrite_r+0x2dc>
   83d0e:	89a3      	ldrh	r3, [r4, #12]
   83d10:	6835      	ldr	r5, [r6, #0]
   83d12:	f013 0002 	ands.w	r0, r3, #2
   83d16:	d1d3      	bne.n	83cc0 <__sfvwrite_r+0x24>
   83d18:	f013 0901 	ands.w	r9, r3, #1
   83d1c:	d144      	bne.n	83da8 <__sfvwrite_r+0x10c>
   83d1e:	464f      	mov	r7, r9
   83d20:	9601      	str	r6, [sp, #4]
   83d22:	b337      	cbz	r7, 83d72 <__sfvwrite_r+0xd6>
   83d24:	059a      	lsls	r2, r3, #22
   83d26:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83d2a:	f140 8085 	bpl.w	83e38 <__sfvwrite_r+0x19c>
   83d2e:	4547      	cmp	r7, r8
   83d30:	46c3      	mov	fp, r8
   83d32:	f0c0 80ad 	bcc.w	83e90 <__sfvwrite_r+0x1f4>
   83d36:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83d3a:	f040 80ae 	bne.w	83e9a <__sfvwrite_r+0x1fe>
   83d3e:	46ba      	mov	sl, r7
   83d40:	6820      	ldr	r0, [r4, #0]
   83d42:	465a      	mov	r2, fp
   83d44:	4649      	mov	r1, r9
   83d46:	f000 fcdf 	bl	84708 <memmove>
   83d4a:	68a2      	ldr	r2, [r4, #8]
   83d4c:	6823      	ldr	r3, [r4, #0]
   83d4e:	eba2 0208 	sub.w	r2, r2, r8
   83d52:	445b      	add	r3, fp
   83d54:	60a2      	str	r2, [r4, #8]
   83d56:	6023      	str	r3, [r4, #0]
   83d58:	9a01      	ldr	r2, [sp, #4]
   83d5a:	44d1      	add	r9, sl
   83d5c:	6893      	ldr	r3, [r2, #8]
   83d5e:	eba7 070a 	sub.w	r7, r7, sl
   83d62:	eba3 030a 	sub.w	r3, r3, sl
   83d66:	6093      	str	r3, [r2, #8]
   83d68:	2b00      	cmp	r3, #0
   83d6a:	d0c5      	beq.n	83cf8 <__sfvwrite_r+0x5c>
   83d6c:	89a3      	ldrh	r3, [r4, #12]
   83d6e:	2f00      	cmp	r7, #0
   83d70:	d1d8      	bne.n	83d24 <__sfvwrite_r+0x88>
   83d72:	f8d5 9000 	ldr.w	r9, [r5]
   83d76:	686f      	ldr	r7, [r5, #4]
   83d78:	3508      	adds	r5, #8
   83d7a:	e7d2      	b.n	83d22 <__sfvwrite_r+0x86>
   83d7c:	f8d5 9000 	ldr.w	r9, [r5]
   83d80:	686f      	ldr	r7, [r5, #4]
   83d82:	3508      	adds	r5, #8
   83d84:	e7a2      	b.n	83ccc <__sfvwrite_r+0x30>
   83d86:	2000      	movs	r0, #0
   83d88:	4770      	bx	lr
   83d8a:	4621      	mov	r1, r4
   83d8c:	9800      	ldr	r0, [sp, #0]
   83d8e:	f7ff fd21 	bl	837d4 <_fflush_r>
   83d92:	b378      	cbz	r0, 83df4 <__sfvwrite_r+0x158>
   83d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d98:	f04f 30ff 	mov.w	r0, #4294967295
   83d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83da0:	81a3      	strh	r3, [r4, #12]
   83da2:	b003      	add	sp, #12
   83da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83da8:	4681      	mov	r9, r0
   83daa:	4633      	mov	r3, r6
   83dac:	464e      	mov	r6, r9
   83dae:	46a8      	mov	r8, r5
   83db0:	469a      	mov	sl, r3
   83db2:	464d      	mov	r5, r9
   83db4:	b356      	cbz	r6, 83e0c <__sfvwrite_r+0x170>
   83db6:	2800      	cmp	r0, #0
   83db8:	d032      	beq.n	83e20 <__sfvwrite_r+0x184>
   83dba:	45b1      	cmp	r9, r6
   83dbc:	46cb      	mov	fp, r9
   83dbe:	bf28      	it	cs
   83dc0:	46b3      	movcs	fp, r6
   83dc2:	6820      	ldr	r0, [r4, #0]
   83dc4:	6923      	ldr	r3, [r4, #16]
   83dc6:	465f      	mov	r7, fp
   83dc8:	4298      	cmp	r0, r3
   83dca:	6962      	ldr	r2, [r4, #20]
   83dcc:	d904      	bls.n	83dd8 <__sfvwrite_r+0x13c>
   83dce:	68a3      	ldr	r3, [r4, #8]
   83dd0:	4413      	add	r3, r2
   83dd2:	459b      	cmp	fp, r3
   83dd4:	f300 80a8 	bgt.w	83f28 <__sfvwrite_r+0x28c>
   83dd8:	4593      	cmp	fp, r2
   83dda:	db4d      	blt.n	83e78 <__sfvwrite_r+0x1dc>
   83ddc:	4613      	mov	r3, r2
   83dde:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83de0:	462a      	mov	r2, r5
   83de2:	69e1      	ldr	r1, [r4, #28]
   83de4:	9800      	ldr	r0, [sp, #0]
   83de6:	47b8      	blx	r7
   83de8:	1e07      	subs	r7, r0, #0
   83dea:	ddd3      	ble.n	83d94 <__sfvwrite_r+0xf8>
   83dec:	ebb9 0907 	subs.w	r9, r9, r7
   83df0:	d0cb      	beq.n	83d8a <__sfvwrite_r+0xee>
   83df2:	2001      	movs	r0, #1
   83df4:	f8da 3008 	ldr.w	r3, [sl, #8]
   83df8:	443d      	add	r5, r7
   83dfa:	1bdb      	subs	r3, r3, r7
   83dfc:	1bf6      	subs	r6, r6, r7
   83dfe:	f8ca 3008 	str.w	r3, [sl, #8]
   83e02:	2b00      	cmp	r3, #0
   83e04:	f43f af78 	beq.w	83cf8 <__sfvwrite_r+0x5c>
   83e08:	2e00      	cmp	r6, #0
   83e0a:	d1d4      	bne.n	83db6 <__sfvwrite_r+0x11a>
   83e0c:	f108 0308 	add.w	r3, r8, #8
   83e10:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83e14:	4698      	mov	r8, r3
   83e16:	f853 5c08 	ldr.w	r5, [r3, #-8]
   83e1a:	3308      	adds	r3, #8
   83e1c:	2e00      	cmp	r6, #0
   83e1e:	d0f7      	beq.n	83e10 <__sfvwrite_r+0x174>
   83e20:	4632      	mov	r2, r6
   83e22:	210a      	movs	r1, #10
   83e24:	4628      	mov	r0, r5
   83e26:	f000 fc29 	bl	8467c <memchr>
   83e2a:	2800      	cmp	r0, #0
   83e2c:	f000 80a1 	beq.w	83f72 <__sfvwrite_r+0x2d6>
   83e30:	3001      	adds	r0, #1
   83e32:	eba0 0905 	sub.w	r9, r0, r5
   83e36:	e7c0      	b.n	83dba <__sfvwrite_r+0x11e>
   83e38:	6820      	ldr	r0, [r4, #0]
   83e3a:	6923      	ldr	r3, [r4, #16]
   83e3c:	4298      	cmp	r0, r3
   83e3e:	d802      	bhi.n	83e46 <__sfvwrite_r+0x1aa>
   83e40:	6963      	ldr	r3, [r4, #20]
   83e42:	429f      	cmp	r7, r3
   83e44:	d25d      	bcs.n	83f02 <__sfvwrite_r+0x266>
   83e46:	45b8      	cmp	r8, r7
   83e48:	bf28      	it	cs
   83e4a:	46b8      	movcs	r8, r7
   83e4c:	4649      	mov	r1, r9
   83e4e:	4642      	mov	r2, r8
   83e50:	f000 fc5a 	bl	84708 <memmove>
   83e54:	68a3      	ldr	r3, [r4, #8]
   83e56:	6822      	ldr	r2, [r4, #0]
   83e58:	eba3 0308 	sub.w	r3, r3, r8
   83e5c:	4442      	add	r2, r8
   83e5e:	60a3      	str	r3, [r4, #8]
   83e60:	6022      	str	r2, [r4, #0]
   83e62:	b10b      	cbz	r3, 83e68 <__sfvwrite_r+0x1cc>
   83e64:	46c2      	mov	sl, r8
   83e66:	e777      	b.n	83d58 <__sfvwrite_r+0xbc>
   83e68:	4621      	mov	r1, r4
   83e6a:	9800      	ldr	r0, [sp, #0]
   83e6c:	f7ff fcb2 	bl	837d4 <_fflush_r>
   83e70:	2800      	cmp	r0, #0
   83e72:	d18f      	bne.n	83d94 <__sfvwrite_r+0xf8>
   83e74:	46c2      	mov	sl, r8
   83e76:	e76f      	b.n	83d58 <__sfvwrite_r+0xbc>
   83e78:	465a      	mov	r2, fp
   83e7a:	4629      	mov	r1, r5
   83e7c:	f000 fc44 	bl	84708 <memmove>
   83e80:	68a2      	ldr	r2, [r4, #8]
   83e82:	6823      	ldr	r3, [r4, #0]
   83e84:	eba2 020b 	sub.w	r2, r2, fp
   83e88:	445b      	add	r3, fp
   83e8a:	60a2      	str	r2, [r4, #8]
   83e8c:	6023      	str	r3, [r4, #0]
   83e8e:	e7ad      	b.n	83dec <__sfvwrite_r+0x150>
   83e90:	46b8      	mov	r8, r7
   83e92:	46ba      	mov	sl, r7
   83e94:	46bb      	mov	fp, r7
   83e96:	6820      	ldr	r0, [r4, #0]
   83e98:	e753      	b.n	83d42 <__sfvwrite_r+0xa6>
   83e9a:	6962      	ldr	r2, [r4, #20]
   83e9c:	6820      	ldr	r0, [r4, #0]
   83e9e:	6921      	ldr	r1, [r4, #16]
   83ea0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83ea4:	eba0 0a01 	sub.w	sl, r0, r1
   83ea8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83eac:	f10a 0001 	add.w	r0, sl, #1
   83eb0:	ea4f 0868 	mov.w	r8, r8, asr #1
   83eb4:	4438      	add	r0, r7
   83eb6:	4540      	cmp	r0, r8
   83eb8:	4642      	mov	r2, r8
   83eba:	bf84      	itt	hi
   83ebc:	4680      	movhi	r8, r0
   83ebe:	4642      	movhi	r2, r8
   83ec0:	055b      	lsls	r3, r3, #21
   83ec2:	d544      	bpl.n	83f4e <__sfvwrite_r+0x2b2>
   83ec4:	4611      	mov	r1, r2
   83ec6:	9800      	ldr	r0, [sp, #0]
   83ec8:	f000 f920 	bl	8410c <_malloc_r>
   83ecc:	4683      	mov	fp, r0
   83ece:	2800      	cmp	r0, #0
   83ed0:	d055      	beq.n	83f7e <__sfvwrite_r+0x2e2>
   83ed2:	4652      	mov	r2, sl
   83ed4:	6921      	ldr	r1, [r4, #16]
   83ed6:	f7fe fae3 	bl	824a0 <memcpy>
   83eda:	89a3      	ldrh	r3, [r4, #12]
   83edc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83ee4:	81a3      	strh	r3, [r4, #12]
   83ee6:	eb0b 000a 	add.w	r0, fp, sl
   83eea:	eba8 030a 	sub.w	r3, r8, sl
   83eee:	f8c4 b010 	str.w	fp, [r4, #16]
   83ef2:	f8c4 8014 	str.w	r8, [r4, #20]
   83ef6:	6020      	str	r0, [r4, #0]
   83ef8:	60a3      	str	r3, [r4, #8]
   83efa:	46b8      	mov	r8, r7
   83efc:	46ba      	mov	sl, r7
   83efe:	46bb      	mov	fp, r7
   83f00:	e71f      	b.n	83d42 <__sfvwrite_r+0xa6>
   83f02:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83f06:	42ba      	cmp	r2, r7
   83f08:	bf28      	it	cs
   83f0a:	463a      	movcs	r2, r7
   83f0c:	fb92 f2f3 	sdiv	r2, r2, r3
   83f10:	69e1      	ldr	r1, [r4, #28]
   83f12:	fb03 f302 	mul.w	r3, r3, r2
   83f16:	9800      	ldr	r0, [sp, #0]
   83f18:	464a      	mov	r2, r9
   83f1a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83f1c:	47b0      	blx	r6
   83f1e:	f1b0 0a00 	subs.w	sl, r0, #0
   83f22:	f73f af19 	bgt.w	83d58 <__sfvwrite_r+0xbc>
   83f26:	e735      	b.n	83d94 <__sfvwrite_r+0xf8>
   83f28:	461a      	mov	r2, r3
   83f2a:	4629      	mov	r1, r5
   83f2c:	9301      	str	r3, [sp, #4]
   83f2e:	f000 fbeb 	bl	84708 <memmove>
   83f32:	6822      	ldr	r2, [r4, #0]
   83f34:	9b01      	ldr	r3, [sp, #4]
   83f36:	4621      	mov	r1, r4
   83f38:	441a      	add	r2, r3
   83f3a:	6022      	str	r2, [r4, #0]
   83f3c:	9800      	ldr	r0, [sp, #0]
   83f3e:	f7ff fc49 	bl	837d4 <_fflush_r>
   83f42:	9b01      	ldr	r3, [sp, #4]
   83f44:	2800      	cmp	r0, #0
   83f46:	f47f af25 	bne.w	83d94 <__sfvwrite_r+0xf8>
   83f4a:	461f      	mov	r7, r3
   83f4c:	e74e      	b.n	83dec <__sfvwrite_r+0x150>
   83f4e:	9800      	ldr	r0, [sp, #0]
   83f50:	f000 fc4a 	bl	847e8 <_realloc_r>
   83f54:	4683      	mov	fp, r0
   83f56:	2800      	cmp	r0, #0
   83f58:	d1c5      	bne.n	83ee6 <__sfvwrite_r+0x24a>
   83f5a:	9d00      	ldr	r5, [sp, #0]
   83f5c:	6921      	ldr	r1, [r4, #16]
   83f5e:	4628      	mov	r0, r5
   83f60:	f7ff fdb6 	bl	83ad0 <_free_r>
   83f64:	220c      	movs	r2, #12
   83f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f6a:	602a      	str	r2, [r5, #0]
   83f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83f70:	e712      	b.n	83d98 <__sfvwrite_r+0xfc>
   83f72:	f106 0901 	add.w	r9, r6, #1
   83f76:	e720      	b.n	83dba <__sfvwrite_r+0x11e>
   83f78:	f04f 30ff 	mov.w	r0, #4294967295
   83f7c:	e6bd      	b.n	83cfa <__sfvwrite_r+0x5e>
   83f7e:	220c      	movs	r2, #12
   83f80:	9900      	ldr	r1, [sp, #0]
   83f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f86:	600a      	str	r2, [r1, #0]
   83f88:	e706      	b.n	83d98 <__sfvwrite_r+0xfc>
   83f8a:	bf00      	nop
   83f8c:	7ffffc00 	.word	0x7ffffc00

00083f90 <_fwalk_reent>:
   83f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83f94:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83f98:	d01e      	beq.n	83fd8 <_fwalk_reent+0x48>
   83f9a:	4688      	mov	r8, r1
   83f9c:	4607      	mov	r7, r0
   83f9e:	f04f 0900 	mov.w	r9, #0
   83fa2:	6875      	ldr	r5, [r6, #4]
   83fa4:	68b4      	ldr	r4, [r6, #8]
   83fa6:	3d01      	subs	r5, #1
   83fa8:	d410      	bmi.n	83fcc <_fwalk_reent+0x3c>
   83faa:	89a3      	ldrh	r3, [r4, #12]
   83fac:	3d01      	subs	r5, #1
   83fae:	2b01      	cmp	r3, #1
   83fb0:	d908      	bls.n	83fc4 <_fwalk_reent+0x34>
   83fb2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83fb6:	3301      	adds	r3, #1
   83fb8:	d004      	beq.n	83fc4 <_fwalk_reent+0x34>
   83fba:	4621      	mov	r1, r4
   83fbc:	4638      	mov	r0, r7
   83fbe:	47c0      	blx	r8
   83fc0:	ea49 0900 	orr.w	r9, r9, r0
   83fc4:	1c6b      	adds	r3, r5, #1
   83fc6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83fca:	d1ee      	bne.n	83faa <_fwalk_reent+0x1a>
   83fcc:	6836      	ldr	r6, [r6, #0]
   83fce:	2e00      	cmp	r6, #0
   83fd0:	d1e7      	bne.n	83fa2 <_fwalk_reent+0x12>
   83fd2:	4648      	mov	r0, r9
   83fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83fd8:	46b1      	mov	r9, r6
   83fda:	4648      	mov	r0, r9
   83fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083fe0 <__locale_mb_cur_max>:
   83fe0:	4b04      	ldr	r3, [pc, #16]	; (83ff4 <__locale_mb_cur_max+0x14>)
   83fe2:	4a05      	ldr	r2, [pc, #20]	; (83ff8 <__locale_mb_cur_max+0x18>)
   83fe4:	681b      	ldr	r3, [r3, #0]
   83fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83fe8:	2b00      	cmp	r3, #0
   83fea:	bf08      	it	eq
   83fec:	4613      	moveq	r3, r2
   83fee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83ff2:	4770      	bx	lr
   83ff4:	200701c4 	.word	0x200701c4
   83ff8:	200705f4 	.word	0x200705f4

00083ffc <__retarget_lock_init_recursive>:
   83ffc:	4770      	bx	lr
   83ffe:	bf00      	nop

00084000 <__retarget_lock_close_recursive>:
   84000:	4770      	bx	lr
   84002:	bf00      	nop

00084004 <__retarget_lock_acquire_recursive>:
   84004:	4770      	bx	lr
   84006:	bf00      	nop

00084008 <__retarget_lock_release_recursive>:
   84008:	4770      	bx	lr
   8400a:	bf00      	nop

0008400c <__swhatbuf_r>:
   8400c:	b570      	push	{r4, r5, r6, lr}
   8400e:	460c      	mov	r4, r1
   84010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84014:	b090      	sub	sp, #64	; 0x40
   84016:	2900      	cmp	r1, #0
   84018:	4615      	mov	r5, r2
   8401a:	461e      	mov	r6, r3
   8401c:	db14      	blt.n	84048 <__swhatbuf_r+0x3c>
   8401e:	aa01      	add	r2, sp, #4
   84020:	f000 ff68 	bl	84ef4 <_fstat_r>
   84024:	2800      	cmp	r0, #0
   84026:	db0f      	blt.n	84048 <__swhatbuf_r+0x3c>
   84028:	9a02      	ldr	r2, [sp, #8]
   8402a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8402e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   84032:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   84036:	fab2 f282 	clz	r2, r2
   8403a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8403e:	0952      	lsrs	r2, r2, #5
   84040:	6032      	str	r2, [r6, #0]
   84042:	602b      	str	r3, [r5, #0]
   84044:	b010      	add	sp, #64	; 0x40
   84046:	bd70      	pop	{r4, r5, r6, pc}
   84048:	2300      	movs	r3, #0
   8404a:	89a2      	ldrh	r2, [r4, #12]
   8404c:	6033      	str	r3, [r6, #0]
   8404e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   84052:	d004      	beq.n	8405e <__swhatbuf_r+0x52>
   84054:	2240      	movs	r2, #64	; 0x40
   84056:	4618      	mov	r0, r3
   84058:	602a      	str	r2, [r5, #0]
   8405a:	b010      	add	sp, #64	; 0x40
   8405c:	bd70      	pop	{r4, r5, r6, pc}
   8405e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84062:	602b      	str	r3, [r5, #0]
   84064:	b010      	add	sp, #64	; 0x40
   84066:	bd70      	pop	{r4, r5, r6, pc}

00084068 <__smakebuf_r>:
   84068:	898a      	ldrh	r2, [r1, #12]
   8406a:	460b      	mov	r3, r1
   8406c:	0792      	lsls	r2, r2, #30
   8406e:	d506      	bpl.n	8407e <__smakebuf_r+0x16>
   84070:	2101      	movs	r1, #1
   84072:	f103 0243 	add.w	r2, r3, #67	; 0x43
   84076:	6159      	str	r1, [r3, #20]
   84078:	601a      	str	r2, [r3, #0]
   8407a:	611a      	str	r2, [r3, #16]
   8407c:	4770      	bx	lr
   8407e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84080:	b083      	sub	sp, #12
   84082:	ab01      	add	r3, sp, #4
   84084:	466a      	mov	r2, sp
   84086:	460c      	mov	r4, r1
   84088:	4606      	mov	r6, r0
   8408a:	f7ff ffbf 	bl	8400c <__swhatbuf_r>
   8408e:	9900      	ldr	r1, [sp, #0]
   84090:	4605      	mov	r5, r0
   84092:	4630      	mov	r0, r6
   84094:	f000 f83a 	bl	8410c <_malloc_r>
   84098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8409c:	b1d8      	cbz	r0, 840d6 <__smakebuf_r+0x6e>
   8409e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   840a2:	4f15      	ldr	r7, [pc, #84]	; (840f8 <__smakebuf_r+0x90>)
   840a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   840a8:	63f7      	str	r7, [r6, #60]	; 0x3c
   840aa:	81a3      	strh	r3, [r4, #12]
   840ac:	6020      	str	r0, [r4, #0]
   840ae:	6120      	str	r0, [r4, #16]
   840b0:	6161      	str	r1, [r4, #20]
   840b2:	b91a      	cbnz	r2, 840bc <__smakebuf_r+0x54>
   840b4:	432b      	orrs	r3, r5
   840b6:	81a3      	strh	r3, [r4, #12]
   840b8:	b003      	add	sp, #12
   840ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   840bc:	4630      	mov	r0, r6
   840be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   840c2:	f000 ff2b 	bl	84f1c <_isatty_r>
   840c6:	b1a0      	cbz	r0, 840f2 <__smakebuf_r+0x8a>
   840c8:	89a3      	ldrh	r3, [r4, #12]
   840ca:	f023 0303 	bic.w	r3, r3, #3
   840ce:	f043 0301 	orr.w	r3, r3, #1
   840d2:	b21b      	sxth	r3, r3
   840d4:	e7ee      	b.n	840b4 <__smakebuf_r+0x4c>
   840d6:	059a      	lsls	r2, r3, #22
   840d8:	d4ee      	bmi.n	840b8 <__smakebuf_r+0x50>
   840da:	2101      	movs	r1, #1
   840dc:	f023 0303 	bic.w	r3, r3, #3
   840e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   840e4:	f043 0302 	orr.w	r3, r3, #2
   840e8:	81a3      	strh	r3, [r4, #12]
   840ea:	6161      	str	r1, [r4, #20]
   840ec:	6022      	str	r2, [r4, #0]
   840ee:	6122      	str	r2, [r4, #16]
   840f0:	e7e2      	b.n	840b8 <__smakebuf_r+0x50>
   840f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   840f6:	e7dd      	b.n	840b4 <__smakebuf_r+0x4c>
   840f8:	00083829 	.word	0x00083829

000840fc <malloc>:
   840fc:	4b02      	ldr	r3, [pc, #8]	; (84108 <malloc+0xc>)
   840fe:	4601      	mov	r1, r0
   84100:	6818      	ldr	r0, [r3, #0]
   84102:	f000 b803 	b.w	8410c <_malloc_r>
   84106:	bf00      	nop
   84108:	200701c4 	.word	0x200701c4

0008410c <_malloc_r>:
   8410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84110:	f101 060b 	add.w	r6, r1, #11
   84114:	2e16      	cmp	r6, #22
   84116:	b083      	sub	sp, #12
   84118:	4605      	mov	r5, r0
   8411a:	f240 809e 	bls.w	8425a <_malloc_r+0x14e>
   8411e:	f036 0607 	bics.w	r6, r6, #7
   84122:	f100 80bd 	bmi.w	842a0 <_malloc_r+0x194>
   84126:	42b1      	cmp	r1, r6
   84128:	f200 80ba 	bhi.w	842a0 <_malloc_r+0x194>
   8412c:	f000 fb50 	bl	847d0 <__malloc_lock>
   84130:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84134:	f0c0 8285 	bcc.w	84642 <_malloc_r+0x536>
   84138:	0a73      	lsrs	r3, r6, #9
   8413a:	f000 80b8 	beq.w	842ae <_malloc_r+0x1a2>
   8413e:	2b04      	cmp	r3, #4
   84140:	f200 816c 	bhi.w	8441c <_malloc_r+0x310>
   84144:	09b3      	lsrs	r3, r6, #6
   84146:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8414a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8414e:	00c1      	lsls	r1, r0, #3
   84150:	4fb8      	ldr	r7, [pc, #736]	; (84434 <_malloc_r+0x328>)
   84152:	4439      	add	r1, r7
   84154:	684c      	ldr	r4, [r1, #4]
   84156:	3908      	subs	r1, #8
   84158:	42a1      	cmp	r1, r4
   8415a:	d106      	bne.n	8416a <_malloc_r+0x5e>
   8415c:	e00c      	b.n	84178 <_malloc_r+0x6c>
   8415e:	2a00      	cmp	r2, #0
   84160:	f280 80ab 	bge.w	842ba <_malloc_r+0x1ae>
   84164:	68e4      	ldr	r4, [r4, #12]
   84166:	42a1      	cmp	r1, r4
   84168:	d006      	beq.n	84178 <_malloc_r+0x6c>
   8416a:	6863      	ldr	r3, [r4, #4]
   8416c:	f023 0303 	bic.w	r3, r3, #3
   84170:	1b9a      	subs	r2, r3, r6
   84172:	2a0f      	cmp	r2, #15
   84174:	ddf3      	ble.n	8415e <_malloc_r+0x52>
   84176:	4670      	mov	r0, lr
   84178:	693c      	ldr	r4, [r7, #16]
   8417a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84448 <_malloc_r+0x33c>
   8417e:	4574      	cmp	r4, lr
   84180:	f000 819e 	beq.w	844c0 <_malloc_r+0x3b4>
   84184:	6863      	ldr	r3, [r4, #4]
   84186:	f023 0303 	bic.w	r3, r3, #3
   8418a:	1b9a      	subs	r2, r3, r6
   8418c:	2a0f      	cmp	r2, #15
   8418e:	f300 8183 	bgt.w	84498 <_malloc_r+0x38c>
   84192:	2a00      	cmp	r2, #0
   84194:	f8c7 e014 	str.w	lr, [r7, #20]
   84198:	f8c7 e010 	str.w	lr, [r7, #16]
   8419c:	f280 8091 	bge.w	842c2 <_malloc_r+0x1b6>
   841a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   841a4:	f080 8154 	bcs.w	84450 <_malloc_r+0x344>
   841a8:	2201      	movs	r2, #1
   841aa:	08db      	lsrs	r3, r3, #3
   841ac:	6879      	ldr	r1, [r7, #4]
   841ae:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   841b2:	4413      	add	r3, r2
   841b4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   841b8:	fa02 f20c 	lsl.w	r2, r2, ip
   841bc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   841c0:	430a      	orrs	r2, r1
   841c2:	f1ac 0108 	sub.w	r1, ip, #8
   841c6:	60e1      	str	r1, [r4, #12]
   841c8:	f8c4 8008 	str.w	r8, [r4, #8]
   841cc:	607a      	str	r2, [r7, #4]
   841ce:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   841d2:	f8c8 400c 	str.w	r4, [r8, #12]
   841d6:	2401      	movs	r4, #1
   841d8:	1083      	asrs	r3, r0, #2
   841da:	409c      	lsls	r4, r3
   841dc:	4294      	cmp	r4, r2
   841de:	d87d      	bhi.n	842dc <_malloc_r+0x1d0>
   841e0:	4214      	tst	r4, r2
   841e2:	d106      	bne.n	841f2 <_malloc_r+0xe6>
   841e4:	f020 0003 	bic.w	r0, r0, #3
   841e8:	0064      	lsls	r4, r4, #1
   841ea:	4214      	tst	r4, r2
   841ec:	f100 0004 	add.w	r0, r0, #4
   841f0:	d0fa      	beq.n	841e8 <_malloc_r+0xdc>
   841f2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   841f6:	46cc      	mov	ip, r9
   841f8:	4680      	mov	r8, r0
   841fa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   841fe:	459c      	cmp	ip, r3
   84200:	d107      	bne.n	84212 <_malloc_r+0x106>
   84202:	e15f      	b.n	844c4 <_malloc_r+0x3b8>
   84204:	2a00      	cmp	r2, #0
   84206:	f280 816d 	bge.w	844e4 <_malloc_r+0x3d8>
   8420a:	68db      	ldr	r3, [r3, #12]
   8420c:	459c      	cmp	ip, r3
   8420e:	f000 8159 	beq.w	844c4 <_malloc_r+0x3b8>
   84212:	6859      	ldr	r1, [r3, #4]
   84214:	f021 0103 	bic.w	r1, r1, #3
   84218:	1b8a      	subs	r2, r1, r6
   8421a:	2a0f      	cmp	r2, #15
   8421c:	ddf2      	ble.n	84204 <_malloc_r+0xf8>
   8421e:	68dc      	ldr	r4, [r3, #12]
   84220:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84224:	f046 0801 	orr.w	r8, r6, #1
   84228:	4628      	mov	r0, r5
   8422a:	441e      	add	r6, r3
   8422c:	f042 0501 	orr.w	r5, r2, #1
   84230:	f8c3 8004 	str.w	r8, [r3, #4]
   84234:	f8cc 400c 	str.w	r4, [ip, #12]
   84238:	f8c4 c008 	str.w	ip, [r4, #8]
   8423c:	617e      	str	r6, [r7, #20]
   8423e:	613e      	str	r6, [r7, #16]
   84240:	f8c6 e00c 	str.w	lr, [r6, #12]
   84244:	f8c6 e008 	str.w	lr, [r6, #8]
   84248:	6075      	str	r5, [r6, #4]
   8424a:	505a      	str	r2, [r3, r1]
   8424c:	9300      	str	r3, [sp, #0]
   8424e:	f000 fac5 	bl	847dc <__malloc_unlock>
   84252:	9b00      	ldr	r3, [sp, #0]
   84254:	f103 0408 	add.w	r4, r3, #8
   84258:	e01e      	b.n	84298 <_malloc_r+0x18c>
   8425a:	2910      	cmp	r1, #16
   8425c:	d820      	bhi.n	842a0 <_malloc_r+0x194>
   8425e:	f000 fab7 	bl	847d0 <__malloc_lock>
   84262:	2610      	movs	r6, #16
   84264:	2318      	movs	r3, #24
   84266:	2002      	movs	r0, #2
   84268:	4f72      	ldr	r7, [pc, #456]	; (84434 <_malloc_r+0x328>)
   8426a:	443b      	add	r3, r7
   8426c:	685c      	ldr	r4, [r3, #4]
   8426e:	f1a3 0208 	sub.w	r2, r3, #8
   84272:	4294      	cmp	r4, r2
   84274:	f000 812f 	beq.w	844d6 <_malloc_r+0x3ca>
   84278:	6863      	ldr	r3, [r4, #4]
   8427a:	68e1      	ldr	r1, [r4, #12]
   8427c:	f023 0303 	bic.w	r3, r3, #3
   84280:	4423      	add	r3, r4
   84282:	685a      	ldr	r2, [r3, #4]
   84284:	68a6      	ldr	r6, [r4, #8]
   84286:	f042 0201 	orr.w	r2, r2, #1
   8428a:	60f1      	str	r1, [r6, #12]
   8428c:	4628      	mov	r0, r5
   8428e:	608e      	str	r6, [r1, #8]
   84290:	605a      	str	r2, [r3, #4]
   84292:	f000 faa3 	bl	847dc <__malloc_unlock>
   84296:	3408      	adds	r4, #8
   84298:	4620      	mov	r0, r4
   8429a:	b003      	add	sp, #12
   8429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842a0:	2400      	movs	r4, #0
   842a2:	230c      	movs	r3, #12
   842a4:	4620      	mov	r0, r4
   842a6:	602b      	str	r3, [r5, #0]
   842a8:	b003      	add	sp, #12
   842aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842ae:	2040      	movs	r0, #64	; 0x40
   842b0:	f44f 7100 	mov.w	r1, #512	; 0x200
   842b4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   842b8:	e74a      	b.n	84150 <_malloc_r+0x44>
   842ba:	4423      	add	r3, r4
   842bc:	685a      	ldr	r2, [r3, #4]
   842be:	68e1      	ldr	r1, [r4, #12]
   842c0:	e7e0      	b.n	84284 <_malloc_r+0x178>
   842c2:	4423      	add	r3, r4
   842c4:	685a      	ldr	r2, [r3, #4]
   842c6:	4628      	mov	r0, r5
   842c8:	f042 0201 	orr.w	r2, r2, #1
   842cc:	605a      	str	r2, [r3, #4]
   842ce:	3408      	adds	r4, #8
   842d0:	f000 fa84 	bl	847dc <__malloc_unlock>
   842d4:	4620      	mov	r0, r4
   842d6:	b003      	add	sp, #12
   842d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842dc:	68bc      	ldr	r4, [r7, #8]
   842de:	6863      	ldr	r3, [r4, #4]
   842e0:	f023 0803 	bic.w	r8, r3, #3
   842e4:	45b0      	cmp	r8, r6
   842e6:	d304      	bcc.n	842f2 <_malloc_r+0x1e6>
   842e8:	eba8 0306 	sub.w	r3, r8, r6
   842ec:	2b0f      	cmp	r3, #15
   842ee:	f300 8085 	bgt.w	843fc <_malloc_r+0x2f0>
   842f2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8444c <_malloc_r+0x340>
   842f6:	4b50      	ldr	r3, [pc, #320]	; (84438 <_malloc_r+0x32c>)
   842f8:	f8d9 2000 	ldr.w	r2, [r9]
   842fc:	681b      	ldr	r3, [r3, #0]
   842fe:	3201      	adds	r2, #1
   84300:	4433      	add	r3, r6
   84302:	eb04 0a08 	add.w	sl, r4, r8
   84306:	f000 8154 	beq.w	845b2 <_malloc_r+0x4a6>
   8430a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8430e:	330f      	adds	r3, #15
   84310:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84314:	f02b 0b0f 	bic.w	fp, fp, #15
   84318:	4659      	mov	r1, fp
   8431a:	4628      	mov	r0, r5
   8431c:	f000 fc1a 	bl	84b54 <_sbrk_r>
   84320:	1c41      	adds	r1, r0, #1
   84322:	4602      	mov	r2, r0
   84324:	f000 80fb 	beq.w	8451e <_malloc_r+0x412>
   84328:	4582      	cmp	sl, r0
   8432a:	f200 80f6 	bhi.w	8451a <_malloc_r+0x40e>
   8432e:	4b43      	ldr	r3, [pc, #268]	; (8443c <_malloc_r+0x330>)
   84330:	6819      	ldr	r1, [r3, #0]
   84332:	4459      	add	r1, fp
   84334:	6019      	str	r1, [r3, #0]
   84336:	f000 814c 	beq.w	845d2 <_malloc_r+0x4c6>
   8433a:	f8d9 0000 	ldr.w	r0, [r9]
   8433e:	3001      	adds	r0, #1
   84340:	bf1b      	ittet	ne
   84342:	eba2 0a0a 	subne.w	sl, r2, sl
   84346:	4451      	addne	r1, sl
   84348:	f8c9 2000 	streq.w	r2, [r9]
   8434c:	6019      	strne	r1, [r3, #0]
   8434e:	f012 0107 	ands.w	r1, r2, #7
   84352:	f000 8114 	beq.w	8457e <_malloc_r+0x472>
   84356:	f1c1 0008 	rsb	r0, r1, #8
   8435a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8435e:	4402      	add	r2, r0
   84360:	3108      	adds	r1, #8
   84362:	eb02 090b 	add.w	r9, r2, fp
   84366:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8436a:	eba1 0909 	sub.w	r9, r1, r9
   8436e:	4649      	mov	r1, r9
   84370:	4628      	mov	r0, r5
   84372:	9301      	str	r3, [sp, #4]
   84374:	9200      	str	r2, [sp, #0]
   84376:	f000 fbed 	bl	84b54 <_sbrk_r>
   8437a:	1c43      	adds	r3, r0, #1
   8437c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84380:	f000 8142 	beq.w	84608 <_malloc_r+0x4fc>
   84384:	1a80      	subs	r0, r0, r2
   84386:	4448      	add	r0, r9
   84388:	f040 0001 	orr.w	r0, r0, #1
   8438c:	6819      	ldr	r1, [r3, #0]
   8438e:	42bc      	cmp	r4, r7
   84390:	4449      	add	r1, r9
   84392:	60ba      	str	r2, [r7, #8]
   84394:	6019      	str	r1, [r3, #0]
   84396:	6050      	str	r0, [r2, #4]
   84398:	d017      	beq.n	843ca <_malloc_r+0x2be>
   8439a:	f1b8 0f0f 	cmp.w	r8, #15
   8439e:	f240 80fa 	bls.w	84596 <_malloc_r+0x48a>
   843a2:	f04f 0c05 	mov.w	ip, #5
   843a6:	6862      	ldr	r2, [r4, #4]
   843a8:	f1a8 000c 	sub.w	r0, r8, #12
   843ac:	f020 0007 	bic.w	r0, r0, #7
   843b0:	f002 0201 	and.w	r2, r2, #1
   843b4:	eb04 0e00 	add.w	lr, r4, r0
   843b8:	4302      	orrs	r2, r0
   843ba:	280f      	cmp	r0, #15
   843bc:	6062      	str	r2, [r4, #4]
   843be:	f8ce c004 	str.w	ip, [lr, #4]
   843c2:	f8ce c008 	str.w	ip, [lr, #8]
   843c6:	f200 8116 	bhi.w	845f6 <_malloc_r+0x4ea>
   843ca:	4b1d      	ldr	r3, [pc, #116]	; (84440 <_malloc_r+0x334>)
   843cc:	68bc      	ldr	r4, [r7, #8]
   843ce:	681a      	ldr	r2, [r3, #0]
   843d0:	4291      	cmp	r1, r2
   843d2:	bf88      	it	hi
   843d4:	6019      	strhi	r1, [r3, #0]
   843d6:	4b1b      	ldr	r3, [pc, #108]	; (84444 <_malloc_r+0x338>)
   843d8:	681a      	ldr	r2, [r3, #0]
   843da:	4291      	cmp	r1, r2
   843dc:	6862      	ldr	r2, [r4, #4]
   843de:	bf88      	it	hi
   843e0:	6019      	strhi	r1, [r3, #0]
   843e2:	f022 0203 	bic.w	r2, r2, #3
   843e6:	4296      	cmp	r6, r2
   843e8:	eba2 0306 	sub.w	r3, r2, r6
   843ec:	d801      	bhi.n	843f2 <_malloc_r+0x2e6>
   843ee:	2b0f      	cmp	r3, #15
   843f0:	dc04      	bgt.n	843fc <_malloc_r+0x2f0>
   843f2:	4628      	mov	r0, r5
   843f4:	f000 f9f2 	bl	847dc <__malloc_unlock>
   843f8:	2400      	movs	r4, #0
   843fa:	e74d      	b.n	84298 <_malloc_r+0x18c>
   843fc:	f046 0201 	orr.w	r2, r6, #1
   84400:	f043 0301 	orr.w	r3, r3, #1
   84404:	4426      	add	r6, r4
   84406:	6062      	str	r2, [r4, #4]
   84408:	4628      	mov	r0, r5
   8440a:	60be      	str	r6, [r7, #8]
   8440c:	3408      	adds	r4, #8
   8440e:	6073      	str	r3, [r6, #4]
   84410:	f000 f9e4 	bl	847dc <__malloc_unlock>
   84414:	4620      	mov	r0, r4
   84416:	b003      	add	sp, #12
   84418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8441c:	2b14      	cmp	r3, #20
   8441e:	d970      	bls.n	84502 <_malloc_r+0x3f6>
   84420:	2b54      	cmp	r3, #84	; 0x54
   84422:	f200 80a2 	bhi.w	8456a <_malloc_r+0x45e>
   84426:	0b33      	lsrs	r3, r6, #12
   84428:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8442c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84430:	00c1      	lsls	r1, r0, #3
   84432:	e68d      	b.n	84150 <_malloc_r+0x44>
   84434:	20070760 	.word	0x20070760
   84438:	2007142c 	.word	0x2007142c
   8443c:	200713fc 	.word	0x200713fc
   84440:	20071424 	.word	0x20071424
   84444:	20071428 	.word	0x20071428
   84448:	20070768 	.word	0x20070768
   8444c:	20070b68 	.word	0x20070b68
   84450:	0a5a      	lsrs	r2, r3, #9
   84452:	2a04      	cmp	r2, #4
   84454:	d95b      	bls.n	8450e <_malloc_r+0x402>
   84456:	2a14      	cmp	r2, #20
   84458:	f200 80ae 	bhi.w	845b8 <_malloc_r+0x4ac>
   8445c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84460:	00c9      	lsls	r1, r1, #3
   84462:	325b      	adds	r2, #91	; 0x5b
   84464:	eb07 0c01 	add.w	ip, r7, r1
   84468:	5879      	ldr	r1, [r7, r1]
   8446a:	f1ac 0c08 	sub.w	ip, ip, #8
   8446e:	458c      	cmp	ip, r1
   84470:	f000 8088 	beq.w	84584 <_malloc_r+0x478>
   84474:	684a      	ldr	r2, [r1, #4]
   84476:	f022 0203 	bic.w	r2, r2, #3
   8447a:	4293      	cmp	r3, r2
   8447c:	d273      	bcs.n	84566 <_malloc_r+0x45a>
   8447e:	6889      	ldr	r1, [r1, #8]
   84480:	458c      	cmp	ip, r1
   84482:	d1f7      	bne.n	84474 <_malloc_r+0x368>
   84484:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84488:	687a      	ldr	r2, [r7, #4]
   8448a:	60e3      	str	r3, [r4, #12]
   8448c:	f8c4 c008 	str.w	ip, [r4, #8]
   84490:	609c      	str	r4, [r3, #8]
   84492:	f8cc 400c 	str.w	r4, [ip, #12]
   84496:	e69e      	b.n	841d6 <_malloc_r+0xca>
   84498:	f046 0c01 	orr.w	ip, r6, #1
   8449c:	f042 0101 	orr.w	r1, r2, #1
   844a0:	4426      	add	r6, r4
   844a2:	f8c4 c004 	str.w	ip, [r4, #4]
   844a6:	4628      	mov	r0, r5
   844a8:	617e      	str	r6, [r7, #20]
   844aa:	613e      	str	r6, [r7, #16]
   844ac:	f8c6 e00c 	str.w	lr, [r6, #12]
   844b0:	f8c6 e008 	str.w	lr, [r6, #8]
   844b4:	6071      	str	r1, [r6, #4]
   844b6:	50e2      	str	r2, [r4, r3]
   844b8:	f000 f990 	bl	847dc <__malloc_unlock>
   844bc:	3408      	adds	r4, #8
   844be:	e6eb      	b.n	84298 <_malloc_r+0x18c>
   844c0:	687a      	ldr	r2, [r7, #4]
   844c2:	e688      	b.n	841d6 <_malloc_r+0xca>
   844c4:	f108 0801 	add.w	r8, r8, #1
   844c8:	f018 0f03 	tst.w	r8, #3
   844cc:	f10c 0c08 	add.w	ip, ip, #8
   844d0:	f47f ae93 	bne.w	841fa <_malloc_r+0xee>
   844d4:	e02d      	b.n	84532 <_malloc_r+0x426>
   844d6:	68dc      	ldr	r4, [r3, #12]
   844d8:	42a3      	cmp	r3, r4
   844da:	bf08      	it	eq
   844dc:	3002      	addeq	r0, #2
   844de:	f43f ae4b 	beq.w	84178 <_malloc_r+0x6c>
   844e2:	e6c9      	b.n	84278 <_malloc_r+0x16c>
   844e4:	461c      	mov	r4, r3
   844e6:	4419      	add	r1, r3
   844e8:	684a      	ldr	r2, [r1, #4]
   844ea:	68db      	ldr	r3, [r3, #12]
   844ec:	f854 6f08 	ldr.w	r6, [r4, #8]!
   844f0:	f042 0201 	orr.w	r2, r2, #1
   844f4:	604a      	str	r2, [r1, #4]
   844f6:	4628      	mov	r0, r5
   844f8:	60f3      	str	r3, [r6, #12]
   844fa:	609e      	str	r6, [r3, #8]
   844fc:	f000 f96e 	bl	847dc <__malloc_unlock>
   84500:	e6ca      	b.n	84298 <_malloc_r+0x18c>
   84502:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84506:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8450a:	00c1      	lsls	r1, r0, #3
   8450c:	e620      	b.n	84150 <_malloc_r+0x44>
   8450e:	099a      	lsrs	r2, r3, #6
   84510:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84514:	00c9      	lsls	r1, r1, #3
   84516:	3238      	adds	r2, #56	; 0x38
   84518:	e7a4      	b.n	84464 <_malloc_r+0x358>
   8451a:	42bc      	cmp	r4, r7
   8451c:	d054      	beq.n	845c8 <_malloc_r+0x4bc>
   8451e:	68bc      	ldr	r4, [r7, #8]
   84520:	6862      	ldr	r2, [r4, #4]
   84522:	f022 0203 	bic.w	r2, r2, #3
   84526:	e75e      	b.n	843e6 <_malloc_r+0x2da>
   84528:	f859 3908 	ldr.w	r3, [r9], #-8
   8452c:	4599      	cmp	r9, r3
   8452e:	f040 8086 	bne.w	8463e <_malloc_r+0x532>
   84532:	f010 0f03 	tst.w	r0, #3
   84536:	f100 30ff 	add.w	r0, r0, #4294967295
   8453a:	d1f5      	bne.n	84528 <_malloc_r+0x41c>
   8453c:	687b      	ldr	r3, [r7, #4]
   8453e:	ea23 0304 	bic.w	r3, r3, r4
   84542:	607b      	str	r3, [r7, #4]
   84544:	0064      	lsls	r4, r4, #1
   84546:	429c      	cmp	r4, r3
   84548:	f63f aec8 	bhi.w	842dc <_malloc_r+0x1d0>
   8454c:	2c00      	cmp	r4, #0
   8454e:	f43f aec5 	beq.w	842dc <_malloc_r+0x1d0>
   84552:	421c      	tst	r4, r3
   84554:	4640      	mov	r0, r8
   84556:	f47f ae4c 	bne.w	841f2 <_malloc_r+0xe6>
   8455a:	0064      	lsls	r4, r4, #1
   8455c:	421c      	tst	r4, r3
   8455e:	f100 0004 	add.w	r0, r0, #4
   84562:	d0fa      	beq.n	8455a <_malloc_r+0x44e>
   84564:	e645      	b.n	841f2 <_malloc_r+0xe6>
   84566:	468c      	mov	ip, r1
   84568:	e78c      	b.n	84484 <_malloc_r+0x378>
   8456a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8456e:	d815      	bhi.n	8459c <_malloc_r+0x490>
   84570:	0bf3      	lsrs	r3, r6, #15
   84572:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84576:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8457a:	00c1      	lsls	r1, r0, #3
   8457c:	e5e8      	b.n	84150 <_malloc_r+0x44>
   8457e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84582:	e6ee      	b.n	84362 <_malloc_r+0x256>
   84584:	2101      	movs	r1, #1
   84586:	687b      	ldr	r3, [r7, #4]
   84588:	1092      	asrs	r2, r2, #2
   8458a:	fa01 f202 	lsl.w	r2, r1, r2
   8458e:	431a      	orrs	r2, r3
   84590:	607a      	str	r2, [r7, #4]
   84592:	4663      	mov	r3, ip
   84594:	e779      	b.n	8448a <_malloc_r+0x37e>
   84596:	2301      	movs	r3, #1
   84598:	6053      	str	r3, [r2, #4]
   8459a:	e72a      	b.n	843f2 <_malloc_r+0x2e6>
   8459c:	f240 5254 	movw	r2, #1364	; 0x554
   845a0:	4293      	cmp	r3, r2
   845a2:	d822      	bhi.n	845ea <_malloc_r+0x4de>
   845a4:	0cb3      	lsrs	r3, r6, #18
   845a6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   845aa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   845ae:	00c1      	lsls	r1, r0, #3
   845b0:	e5ce      	b.n	84150 <_malloc_r+0x44>
   845b2:	f103 0b10 	add.w	fp, r3, #16
   845b6:	e6af      	b.n	84318 <_malloc_r+0x20c>
   845b8:	2a54      	cmp	r2, #84	; 0x54
   845ba:	d829      	bhi.n	84610 <_malloc_r+0x504>
   845bc:	0b1a      	lsrs	r2, r3, #12
   845be:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   845c2:	00c9      	lsls	r1, r1, #3
   845c4:	326e      	adds	r2, #110	; 0x6e
   845c6:	e74d      	b.n	84464 <_malloc_r+0x358>
   845c8:	4b20      	ldr	r3, [pc, #128]	; (8464c <_malloc_r+0x540>)
   845ca:	6819      	ldr	r1, [r3, #0]
   845cc:	4459      	add	r1, fp
   845ce:	6019      	str	r1, [r3, #0]
   845d0:	e6b3      	b.n	8433a <_malloc_r+0x22e>
   845d2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   845d6:	2800      	cmp	r0, #0
   845d8:	f47f aeaf 	bne.w	8433a <_malloc_r+0x22e>
   845dc:	eb08 030b 	add.w	r3, r8, fp
   845e0:	68ba      	ldr	r2, [r7, #8]
   845e2:	f043 0301 	orr.w	r3, r3, #1
   845e6:	6053      	str	r3, [r2, #4]
   845e8:	e6ef      	b.n	843ca <_malloc_r+0x2be>
   845ea:	207f      	movs	r0, #127	; 0x7f
   845ec:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   845f0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   845f4:	e5ac      	b.n	84150 <_malloc_r+0x44>
   845f6:	f104 0108 	add.w	r1, r4, #8
   845fa:	4628      	mov	r0, r5
   845fc:	9300      	str	r3, [sp, #0]
   845fe:	f7ff fa67 	bl	83ad0 <_free_r>
   84602:	9b00      	ldr	r3, [sp, #0]
   84604:	6819      	ldr	r1, [r3, #0]
   84606:	e6e0      	b.n	843ca <_malloc_r+0x2be>
   84608:	2001      	movs	r0, #1
   8460a:	f04f 0900 	mov.w	r9, #0
   8460e:	e6bd      	b.n	8438c <_malloc_r+0x280>
   84610:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84614:	d805      	bhi.n	84622 <_malloc_r+0x516>
   84616:	0bda      	lsrs	r2, r3, #15
   84618:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8461c:	00c9      	lsls	r1, r1, #3
   8461e:	3277      	adds	r2, #119	; 0x77
   84620:	e720      	b.n	84464 <_malloc_r+0x358>
   84622:	f240 5154 	movw	r1, #1364	; 0x554
   84626:	428a      	cmp	r2, r1
   84628:	d805      	bhi.n	84636 <_malloc_r+0x52a>
   8462a:	0c9a      	lsrs	r2, r3, #18
   8462c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84630:	00c9      	lsls	r1, r1, #3
   84632:	327c      	adds	r2, #124	; 0x7c
   84634:	e716      	b.n	84464 <_malloc_r+0x358>
   84636:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8463a:	227e      	movs	r2, #126	; 0x7e
   8463c:	e712      	b.n	84464 <_malloc_r+0x358>
   8463e:	687b      	ldr	r3, [r7, #4]
   84640:	e780      	b.n	84544 <_malloc_r+0x438>
   84642:	08f0      	lsrs	r0, r6, #3
   84644:	f106 0308 	add.w	r3, r6, #8
   84648:	e60e      	b.n	84268 <_malloc_r+0x15c>
   8464a:	bf00      	nop
   8464c:	200713fc 	.word	0x200713fc

00084650 <__ascii_mbtowc>:
   84650:	b082      	sub	sp, #8
   84652:	b149      	cbz	r1, 84668 <__ascii_mbtowc+0x18>
   84654:	b15a      	cbz	r2, 8466e <__ascii_mbtowc+0x1e>
   84656:	b16b      	cbz	r3, 84674 <__ascii_mbtowc+0x24>
   84658:	7813      	ldrb	r3, [r2, #0]
   8465a:	600b      	str	r3, [r1, #0]
   8465c:	7812      	ldrb	r2, [r2, #0]
   8465e:	1c10      	adds	r0, r2, #0
   84660:	bf18      	it	ne
   84662:	2001      	movne	r0, #1
   84664:	b002      	add	sp, #8
   84666:	4770      	bx	lr
   84668:	a901      	add	r1, sp, #4
   8466a:	2a00      	cmp	r2, #0
   8466c:	d1f3      	bne.n	84656 <__ascii_mbtowc+0x6>
   8466e:	4610      	mov	r0, r2
   84670:	b002      	add	sp, #8
   84672:	4770      	bx	lr
   84674:	f06f 0001 	mvn.w	r0, #1
   84678:	e7f4      	b.n	84664 <__ascii_mbtowc+0x14>
   8467a:	bf00      	nop

0008467c <memchr>:
   8467c:	0783      	lsls	r3, r0, #30
   8467e:	b470      	push	{r4, r5, r6}
   84680:	b2cd      	uxtb	r5, r1
   84682:	d03d      	beq.n	84700 <memchr+0x84>
   84684:	1e54      	subs	r4, r2, #1
   84686:	b30a      	cbz	r2, 846cc <memchr+0x50>
   84688:	7803      	ldrb	r3, [r0, #0]
   8468a:	42ab      	cmp	r3, r5
   8468c:	d01f      	beq.n	846ce <memchr+0x52>
   8468e:	1c43      	adds	r3, r0, #1
   84690:	e005      	b.n	8469e <memchr+0x22>
   84692:	f114 34ff 	adds.w	r4, r4, #4294967295
   84696:	d319      	bcc.n	846cc <memchr+0x50>
   84698:	7802      	ldrb	r2, [r0, #0]
   8469a:	42aa      	cmp	r2, r5
   8469c:	d017      	beq.n	846ce <memchr+0x52>
   8469e:	f013 0f03 	tst.w	r3, #3
   846a2:	4618      	mov	r0, r3
   846a4:	f103 0301 	add.w	r3, r3, #1
   846a8:	d1f3      	bne.n	84692 <memchr+0x16>
   846aa:	2c03      	cmp	r4, #3
   846ac:	d811      	bhi.n	846d2 <memchr+0x56>
   846ae:	b34c      	cbz	r4, 84704 <memchr+0x88>
   846b0:	7803      	ldrb	r3, [r0, #0]
   846b2:	42ab      	cmp	r3, r5
   846b4:	d00b      	beq.n	846ce <memchr+0x52>
   846b6:	4404      	add	r4, r0
   846b8:	1c43      	adds	r3, r0, #1
   846ba:	e002      	b.n	846c2 <memchr+0x46>
   846bc:	7802      	ldrb	r2, [r0, #0]
   846be:	42aa      	cmp	r2, r5
   846c0:	d005      	beq.n	846ce <memchr+0x52>
   846c2:	429c      	cmp	r4, r3
   846c4:	4618      	mov	r0, r3
   846c6:	f103 0301 	add.w	r3, r3, #1
   846ca:	d1f7      	bne.n	846bc <memchr+0x40>
   846cc:	2000      	movs	r0, #0
   846ce:	bc70      	pop	{r4, r5, r6}
   846d0:	4770      	bx	lr
   846d2:	0209      	lsls	r1, r1, #8
   846d4:	b289      	uxth	r1, r1
   846d6:	4329      	orrs	r1, r5
   846d8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   846dc:	6803      	ldr	r3, [r0, #0]
   846de:	4606      	mov	r6, r0
   846e0:	404b      	eors	r3, r1
   846e2:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   846e6:	ea22 0303 	bic.w	r3, r2, r3
   846ea:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   846ee:	f100 0004 	add.w	r0, r0, #4
   846f2:	d103      	bne.n	846fc <memchr+0x80>
   846f4:	3c04      	subs	r4, #4
   846f6:	2c03      	cmp	r4, #3
   846f8:	d8f0      	bhi.n	846dc <memchr+0x60>
   846fa:	e7d8      	b.n	846ae <memchr+0x32>
   846fc:	4630      	mov	r0, r6
   846fe:	e7d7      	b.n	846b0 <memchr+0x34>
   84700:	4614      	mov	r4, r2
   84702:	e7d2      	b.n	846aa <memchr+0x2e>
   84704:	4620      	mov	r0, r4
   84706:	e7e2      	b.n	846ce <memchr+0x52>

00084708 <memmove>:
   84708:	4288      	cmp	r0, r1
   8470a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8470c:	d90d      	bls.n	8472a <memmove+0x22>
   8470e:	188b      	adds	r3, r1, r2
   84710:	4298      	cmp	r0, r3
   84712:	d20a      	bcs.n	8472a <memmove+0x22>
   84714:	1884      	adds	r4, r0, r2
   84716:	2a00      	cmp	r2, #0
   84718:	d051      	beq.n	847be <memmove+0xb6>
   8471a:	4622      	mov	r2, r4
   8471c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84720:	4299      	cmp	r1, r3
   84722:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84726:	d1f9      	bne.n	8471c <memmove+0x14>
   84728:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8472a:	2a0f      	cmp	r2, #15
   8472c:	d948      	bls.n	847c0 <memmove+0xb8>
   8472e:	ea41 0300 	orr.w	r3, r1, r0
   84732:	079b      	lsls	r3, r3, #30
   84734:	d146      	bne.n	847c4 <memmove+0xbc>
   84736:	4615      	mov	r5, r2
   84738:	f100 0410 	add.w	r4, r0, #16
   8473c:	f101 0310 	add.w	r3, r1, #16
   84740:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84744:	3d10      	subs	r5, #16
   84746:	f844 6c10 	str.w	r6, [r4, #-16]
   8474a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8474e:	2d0f      	cmp	r5, #15
   84750:	f844 6c0c 	str.w	r6, [r4, #-12]
   84754:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84758:	f104 0410 	add.w	r4, r4, #16
   8475c:	f844 6c18 	str.w	r6, [r4, #-24]
   84760:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84764:	f103 0310 	add.w	r3, r3, #16
   84768:	f844 6c14 	str.w	r6, [r4, #-20]
   8476c:	d8e8      	bhi.n	84740 <memmove+0x38>
   8476e:	f1a2 0310 	sub.w	r3, r2, #16
   84772:	f023 030f 	bic.w	r3, r3, #15
   84776:	f002 0e0f 	and.w	lr, r2, #15
   8477a:	3310      	adds	r3, #16
   8477c:	f1be 0f03 	cmp.w	lr, #3
   84780:	4419      	add	r1, r3
   84782:	4403      	add	r3, r0
   84784:	d921      	bls.n	847ca <memmove+0xc2>
   84786:	460e      	mov	r6, r1
   84788:	4674      	mov	r4, lr
   8478a:	1f1d      	subs	r5, r3, #4
   8478c:	f856 7b04 	ldr.w	r7, [r6], #4
   84790:	3c04      	subs	r4, #4
   84792:	2c03      	cmp	r4, #3
   84794:	f845 7f04 	str.w	r7, [r5, #4]!
   84798:	d8f8      	bhi.n	8478c <memmove+0x84>
   8479a:	f1ae 0404 	sub.w	r4, lr, #4
   8479e:	f024 0403 	bic.w	r4, r4, #3
   847a2:	3404      	adds	r4, #4
   847a4:	4421      	add	r1, r4
   847a6:	4423      	add	r3, r4
   847a8:	f002 0203 	and.w	r2, r2, #3
   847ac:	b162      	cbz	r2, 847c8 <memmove+0xc0>
   847ae:	3b01      	subs	r3, #1
   847b0:	440a      	add	r2, r1
   847b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   847b6:	428a      	cmp	r2, r1
   847b8:	f803 4f01 	strb.w	r4, [r3, #1]!
   847bc:	d1f9      	bne.n	847b2 <memmove+0xaa>
   847be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   847c0:	4603      	mov	r3, r0
   847c2:	e7f3      	b.n	847ac <memmove+0xa4>
   847c4:	4603      	mov	r3, r0
   847c6:	e7f2      	b.n	847ae <memmove+0xa6>
   847c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   847ca:	4672      	mov	r2, lr
   847cc:	e7ee      	b.n	847ac <memmove+0xa4>
   847ce:	bf00      	nop

000847d0 <__malloc_lock>:
   847d0:	4801      	ldr	r0, [pc, #4]	; (847d8 <__malloc_lock+0x8>)
   847d2:	f7ff bc17 	b.w	84004 <__retarget_lock_acquire_recursive>
   847d6:	bf00      	nop
   847d8:	20071458 	.word	0x20071458

000847dc <__malloc_unlock>:
   847dc:	4801      	ldr	r0, [pc, #4]	; (847e4 <__malloc_unlock+0x8>)
   847de:	f7ff bc13 	b.w	84008 <__retarget_lock_release_recursive>
   847e2:	bf00      	nop
   847e4:	20071458 	.word	0x20071458

000847e8 <_realloc_r>:
   847e8:	2900      	cmp	r1, #0
   847ea:	f000 8094 	beq.w	84916 <_realloc_r+0x12e>
   847ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   847f2:	460c      	mov	r4, r1
   847f4:	4615      	mov	r5, r2
   847f6:	b083      	sub	sp, #12
   847f8:	4680      	mov	r8, r0
   847fa:	f105 060b 	add.w	r6, r5, #11
   847fe:	f7ff ffe7 	bl	847d0 <__malloc_lock>
   84802:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84806:	2e16      	cmp	r6, #22
   84808:	f02e 0703 	bic.w	r7, lr, #3
   8480c:	f1a4 0908 	sub.w	r9, r4, #8
   84810:	d83c      	bhi.n	8488c <_realloc_r+0xa4>
   84812:	2210      	movs	r2, #16
   84814:	4616      	mov	r6, r2
   84816:	42b5      	cmp	r5, r6
   84818:	d83d      	bhi.n	84896 <_realloc_r+0xae>
   8481a:	4297      	cmp	r7, r2
   8481c:	da43      	bge.n	848a6 <_realloc_r+0xbe>
   8481e:	4bc6      	ldr	r3, [pc, #792]	; (84b38 <_realloc_r+0x350>)
   84820:	eb09 0007 	add.w	r0, r9, r7
   84824:	6899      	ldr	r1, [r3, #8]
   84826:	4288      	cmp	r0, r1
   84828:	f000 80c3 	beq.w	849b2 <_realloc_r+0x1ca>
   8482c:	6843      	ldr	r3, [r0, #4]
   8482e:	f023 0101 	bic.w	r1, r3, #1
   84832:	4401      	add	r1, r0
   84834:	6849      	ldr	r1, [r1, #4]
   84836:	07c9      	lsls	r1, r1, #31
   84838:	d54d      	bpl.n	848d6 <_realloc_r+0xee>
   8483a:	f01e 0f01 	tst.w	lr, #1
   8483e:	f000 809b 	beq.w	84978 <_realloc_r+0x190>
   84842:	4629      	mov	r1, r5
   84844:	4640      	mov	r0, r8
   84846:	f7ff fc61 	bl	8410c <_malloc_r>
   8484a:	4605      	mov	r5, r0
   8484c:	2800      	cmp	r0, #0
   8484e:	d03b      	beq.n	848c8 <_realloc_r+0xe0>
   84850:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84854:	f1a0 0208 	sub.w	r2, r0, #8
   84858:	f023 0301 	bic.w	r3, r3, #1
   8485c:	444b      	add	r3, r9
   8485e:	429a      	cmp	r2, r3
   84860:	f000 812b 	beq.w	84aba <_realloc_r+0x2d2>
   84864:	1f3a      	subs	r2, r7, #4
   84866:	2a24      	cmp	r2, #36	; 0x24
   84868:	f200 8118 	bhi.w	84a9c <_realloc_r+0x2b4>
   8486c:	2a13      	cmp	r2, #19
   8486e:	f200 80eb 	bhi.w	84a48 <_realloc_r+0x260>
   84872:	4603      	mov	r3, r0
   84874:	4622      	mov	r2, r4
   84876:	6811      	ldr	r1, [r2, #0]
   84878:	6019      	str	r1, [r3, #0]
   8487a:	6851      	ldr	r1, [r2, #4]
   8487c:	6059      	str	r1, [r3, #4]
   8487e:	6892      	ldr	r2, [r2, #8]
   84880:	609a      	str	r2, [r3, #8]
   84882:	4621      	mov	r1, r4
   84884:	4640      	mov	r0, r8
   84886:	f7ff f923 	bl	83ad0 <_free_r>
   8488a:	e01d      	b.n	848c8 <_realloc_r+0xe0>
   8488c:	f026 0607 	bic.w	r6, r6, #7
   84890:	2e00      	cmp	r6, #0
   84892:	4632      	mov	r2, r6
   84894:	dabf      	bge.n	84816 <_realloc_r+0x2e>
   84896:	2500      	movs	r5, #0
   84898:	230c      	movs	r3, #12
   8489a:	4628      	mov	r0, r5
   8489c:	f8c8 3000 	str.w	r3, [r8]
   848a0:	b003      	add	sp, #12
   848a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   848a6:	4625      	mov	r5, r4
   848a8:	1bbb      	subs	r3, r7, r6
   848aa:	2b0f      	cmp	r3, #15
   848ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
   848b0:	d81d      	bhi.n	848ee <_realloc_r+0x106>
   848b2:	f002 0201 	and.w	r2, r2, #1
   848b6:	433a      	orrs	r2, r7
   848b8:	eb09 0107 	add.w	r1, r9, r7
   848bc:	f8c9 2004 	str.w	r2, [r9, #4]
   848c0:	684b      	ldr	r3, [r1, #4]
   848c2:	f043 0301 	orr.w	r3, r3, #1
   848c6:	604b      	str	r3, [r1, #4]
   848c8:	4640      	mov	r0, r8
   848ca:	f7ff ff87 	bl	847dc <__malloc_unlock>
   848ce:	4628      	mov	r0, r5
   848d0:	b003      	add	sp, #12
   848d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   848d6:	f023 0303 	bic.w	r3, r3, #3
   848da:	18f9      	adds	r1, r7, r3
   848dc:	4291      	cmp	r1, r2
   848de:	db1d      	blt.n	8491c <_realloc_r+0x134>
   848e0:	68c3      	ldr	r3, [r0, #12]
   848e2:	6882      	ldr	r2, [r0, #8]
   848e4:	4625      	mov	r5, r4
   848e6:	60d3      	str	r3, [r2, #12]
   848e8:	460f      	mov	r7, r1
   848ea:	609a      	str	r2, [r3, #8]
   848ec:	e7dc      	b.n	848a8 <_realloc_r+0xc0>
   848ee:	f002 0201 	and.w	r2, r2, #1
   848f2:	eb09 0106 	add.w	r1, r9, r6
   848f6:	f043 0301 	orr.w	r3, r3, #1
   848fa:	4332      	orrs	r2, r6
   848fc:	f8c9 2004 	str.w	r2, [r9, #4]
   84900:	444f      	add	r7, r9
   84902:	604b      	str	r3, [r1, #4]
   84904:	687b      	ldr	r3, [r7, #4]
   84906:	3108      	adds	r1, #8
   84908:	f043 0301 	orr.w	r3, r3, #1
   8490c:	607b      	str	r3, [r7, #4]
   8490e:	4640      	mov	r0, r8
   84910:	f7ff f8de 	bl	83ad0 <_free_r>
   84914:	e7d8      	b.n	848c8 <_realloc_r+0xe0>
   84916:	4611      	mov	r1, r2
   84918:	f7ff bbf8 	b.w	8410c <_malloc_r>
   8491c:	f01e 0f01 	tst.w	lr, #1
   84920:	d18f      	bne.n	84842 <_realloc_r+0x5a>
   84922:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84926:	eba9 0a01 	sub.w	sl, r9, r1
   8492a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8492e:	f021 0103 	bic.w	r1, r1, #3
   84932:	440b      	add	r3, r1
   84934:	443b      	add	r3, r7
   84936:	4293      	cmp	r3, r2
   84938:	db26      	blt.n	84988 <_realloc_r+0x1a0>
   8493a:	4655      	mov	r5, sl
   8493c:	68c1      	ldr	r1, [r0, #12]
   8493e:	6880      	ldr	r0, [r0, #8]
   84940:	1f3a      	subs	r2, r7, #4
   84942:	60c1      	str	r1, [r0, #12]
   84944:	6088      	str	r0, [r1, #8]
   84946:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8494a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8494e:	2a24      	cmp	r2, #36	; 0x24
   84950:	60c1      	str	r1, [r0, #12]
   84952:	6088      	str	r0, [r1, #8]
   84954:	d826      	bhi.n	849a4 <_realloc_r+0x1bc>
   84956:	2a13      	cmp	r2, #19
   84958:	f240 8081 	bls.w	84a5e <_realloc_r+0x276>
   8495c:	6821      	ldr	r1, [r4, #0]
   8495e:	2a1b      	cmp	r2, #27
   84960:	f8ca 1008 	str.w	r1, [sl, #8]
   84964:	6861      	ldr	r1, [r4, #4]
   84966:	f8ca 100c 	str.w	r1, [sl, #12]
   8496a:	f200 80ad 	bhi.w	84ac8 <_realloc_r+0x2e0>
   8496e:	f104 0008 	add.w	r0, r4, #8
   84972:	f10a 0210 	add.w	r2, sl, #16
   84976:	e074      	b.n	84a62 <_realloc_r+0x27a>
   84978:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8497c:	eba9 0a03 	sub.w	sl, r9, r3
   84980:	f8da 1004 	ldr.w	r1, [sl, #4]
   84984:	f021 0103 	bic.w	r1, r1, #3
   84988:	187b      	adds	r3, r7, r1
   8498a:	4293      	cmp	r3, r2
   8498c:	f6ff af59 	blt.w	84842 <_realloc_r+0x5a>
   84990:	4655      	mov	r5, sl
   84992:	f8da 100c 	ldr.w	r1, [sl, #12]
   84996:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8499a:	1f3a      	subs	r2, r7, #4
   8499c:	2a24      	cmp	r2, #36	; 0x24
   8499e:	60c1      	str	r1, [r0, #12]
   849a0:	6088      	str	r0, [r1, #8]
   849a2:	d9d8      	bls.n	84956 <_realloc_r+0x16e>
   849a4:	4621      	mov	r1, r4
   849a6:	4628      	mov	r0, r5
   849a8:	461f      	mov	r7, r3
   849aa:	46d1      	mov	r9, sl
   849ac:	f7ff feac 	bl	84708 <memmove>
   849b0:	e77a      	b.n	848a8 <_realloc_r+0xc0>
   849b2:	6841      	ldr	r1, [r0, #4]
   849b4:	f106 0010 	add.w	r0, r6, #16
   849b8:	f021 0b03 	bic.w	fp, r1, #3
   849bc:	44bb      	add	fp, r7
   849be:	4583      	cmp	fp, r0
   849c0:	da58      	bge.n	84a74 <_realloc_r+0x28c>
   849c2:	f01e 0f01 	tst.w	lr, #1
   849c6:	f47f af3c 	bne.w	84842 <_realloc_r+0x5a>
   849ca:	f854 1c08 	ldr.w	r1, [r4, #-8]
   849ce:	eba9 0a01 	sub.w	sl, r9, r1
   849d2:	f8da 1004 	ldr.w	r1, [sl, #4]
   849d6:	f021 0103 	bic.w	r1, r1, #3
   849da:	448b      	add	fp, r1
   849dc:	4558      	cmp	r0, fp
   849de:	dcd3      	bgt.n	84988 <_realloc_r+0x1a0>
   849e0:	4655      	mov	r5, sl
   849e2:	f8da 100c 	ldr.w	r1, [sl, #12]
   849e6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   849ea:	1f3a      	subs	r2, r7, #4
   849ec:	2a24      	cmp	r2, #36	; 0x24
   849ee:	60c1      	str	r1, [r0, #12]
   849f0:	6088      	str	r0, [r1, #8]
   849f2:	f200 808d 	bhi.w	84b10 <_realloc_r+0x328>
   849f6:	2a13      	cmp	r2, #19
   849f8:	f240 8087 	bls.w	84b0a <_realloc_r+0x322>
   849fc:	6821      	ldr	r1, [r4, #0]
   849fe:	2a1b      	cmp	r2, #27
   84a00:	f8ca 1008 	str.w	r1, [sl, #8]
   84a04:	6861      	ldr	r1, [r4, #4]
   84a06:	f8ca 100c 	str.w	r1, [sl, #12]
   84a0a:	f200 8088 	bhi.w	84b1e <_realloc_r+0x336>
   84a0e:	f104 0108 	add.w	r1, r4, #8
   84a12:	f10a 0210 	add.w	r2, sl, #16
   84a16:	6808      	ldr	r0, [r1, #0]
   84a18:	6010      	str	r0, [r2, #0]
   84a1a:	6848      	ldr	r0, [r1, #4]
   84a1c:	6050      	str	r0, [r2, #4]
   84a1e:	6889      	ldr	r1, [r1, #8]
   84a20:	6091      	str	r1, [r2, #8]
   84a22:	ebab 0206 	sub.w	r2, fp, r6
   84a26:	eb0a 0106 	add.w	r1, sl, r6
   84a2a:	f042 0201 	orr.w	r2, r2, #1
   84a2e:	6099      	str	r1, [r3, #8]
   84a30:	604a      	str	r2, [r1, #4]
   84a32:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a36:	4640      	mov	r0, r8
   84a38:	f003 0301 	and.w	r3, r3, #1
   84a3c:	431e      	orrs	r6, r3
   84a3e:	f8ca 6004 	str.w	r6, [sl, #4]
   84a42:	f7ff fecb 	bl	847dc <__malloc_unlock>
   84a46:	e742      	b.n	848ce <_realloc_r+0xe6>
   84a48:	6823      	ldr	r3, [r4, #0]
   84a4a:	2a1b      	cmp	r2, #27
   84a4c:	6003      	str	r3, [r0, #0]
   84a4e:	6863      	ldr	r3, [r4, #4]
   84a50:	6043      	str	r3, [r0, #4]
   84a52:	d827      	bhi.n	84aa4 <_realloc_r+0x2bc>
   84a54:	f100 0308 	add.w	r3, r0, #8
   84a58:	f104 0208 	add.w	r2, r4, #8
   84a5c:	e70b      	b.n	84876 <_realloc_r+0x8e>
   84a5e:	4620      	mov	r0, r4
   84a60:	462a      	mov	r2, r5
   84a62:	6801      	ldr	r1, [r0, #0]
   84a64:	461f      	mov	r7, r3
   84a66:	6011      	str	r1, [r2, #0]
   84a68:	6841      	ldr	r1, [r0, #4]
   84a6a:	46d1      	mov	r9, sl
   84a6c:	6051      	str	r1, [r2, #4]
   84a6e:	6883      	ldr	r3, [r0, #8]
   84a70:	6093      	str	r3, [r2, #8]
   84a72:	e719      	b.n	848a8 <_realloc_r+0xc0>
   84a74:	ebab 0b06 	sub.w	fp, fp, r6
   84a78:	eb09 0106 	add.w	r1, r9, r6
   84a7c:	f04b 0201 	orr.w	r2, fp, #1
   84a80:	6099      	str	r1, [r3, #8]
   84a82:	604a      	str	r2, [r1, #4]
   84a84:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84a88:	4640      	mov	r0, r8
   84a8a:	f003 0301 	and.w	r3, r3, #1
   84a8e:	431e      	orrs	r6, r3
   84a90:	f844 6c04 	str.w	r6, [r4, #-4]
   84a94:	f7ff fea2 	bl	847dc <__malloc_unlock>
   84a98:	4625      	mov	r5, r4
   84a9a:	e718      	b.n	848ce <_realloc_r+0xe6>
   84a9c:	4621      	mov	r1, r4
   84a9e:	f7ff fe33 	bl	84708 <memmove>
   84aa2:	e6ee      	b.n	84882 <_realloc_r+0x9a>
   84aa4:	68a3      	ldr	r3, [r4, #8]
   84aa6:	2a24      	cmp	r2, #36	; 0x24
   84aa8:	6083      	str	r3, [r0, #8]
   84aaa:	68e3      	ldr	r3, [r4, #12]
   84aac:	60c3      	str	r3, [r0, #12]
   84aae:	d018      	beq.n	84ae2 <_realloc_r+0x2fa>
   84ab0:	f100 0310 	add.w	r3, r0, #16
   84ab4:	f104 0210 	add.w	r2, r4, #16
   84ab8:	e6dd      	b.n	84876 <_realloc_r+0x8e>
   84aba:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84abe:	4625      	mov	r5, r4
   84ac0:	f023 0303 	bic.w	r3, r3, #3
   84ac4:	441f      	add	r7, r3
   84ac6:	e6ef      	b.n	848a8 <_realloc_r+0xc0>
   84ac8:	68a1      	ldr	r1, [r4, #8]
   84aca:	2a24      	cmp	r2, #36	; 0x24
   84acc:	f8ca 1010 	str.w	r1, [sl, #16]
   84ad0:	68e1      	ldr	r1, [r4, #12]
   84ad2:	f8ca 1014 	str.w	r1, [sl, #20]
   84ad6:	d00d      	beq.n	84af4 <_realloc_r+0x30c>
   84ad8:	f104 0010 	add.w	r0, r4, #16
   84adc:	f10a 0218 	add.w	r2, sl, #24
   84ae0:	e7bf      	b.n	84a62 <_realloc_r+0x27a>
   84ae2:	6922      	ldr	r2, [r4, #16]
   84ae4:	f100 0318 	add.w	r3, r0, #24
   84ae8:	6102      	str	r2, [r0, #16]
   84aea:	6961      	ldr	r1, [r4, #20]
   84aec:	f104 0218 	add.w	r2, r4, #24
   84af0:	6141      	str	r1, [r0, #20]
   84af2:	e6c0      	b.n	84876 <_realloc_r+0x8e>
   84af4:	6922      	ldr	r2, [r4, #16]
   84af6:	f104 0018 	add.w	r0, r4, #24
   84afa:	f8ca 2018 	str.w	r2, [sl, #24]
   84afe:	6961      	ldr	r1, [r4, #20]
   84b00:	f10a 0220 	add.w	r2, sl, #32
   84b04:	f8ca 101c 	str.w	r1, [sl, #28]
   84b08:	e7ab      	b.n	84a62 <_realloc_r+0x27a>
   84b0a:	4621      	mov	r1, r4
   84b0c:	462a      	mov	r2, r5
   84b0e:	e782      	b.n	84a16 <_realloc_r+0x22e>
   84b10:	4621      	mov	r1, r4
   84b12:	4628      	mov	r0, r5
   84b14:	9301      	str	r3, [sp, #4]
   84b16:	f7ff fdf7 	bl	84708 <memmove>
   84b1a:	9b01      	ldr	r3, [sp, #4]
   84b1c:	e781      	b.n	84a22 <_realloc_r+0x23a>
   84b1e:	68a1      	ldr	r1, [r4, #8]
   84b20:	2a24      	cmp	r2, #36	; 0x24
   84b22:	f8ca 1010 	str.w	r1, [sl, #16]
   84b26:	68e1      	ldr	r1, [r4, #12]
   84b28:	f8ca 1014 	str.w	r1, [sl, #20]
   84b2c:	d006      	beq.n	84b3c <_realloc_r+0x354>
   84b2e:	f104 0110 	add.w	r1, r4, #16
   84b32:	f10a 0218 	add.w	r2, sl, #24
   84b36:	e76e      	b.n	84a16 <_realloc_r+0x22e>
   84b38:	20070760 	.word	0x20070760
   84b3c:	6922      	ldr	r2, [r4, #16]
   84b3e:	f104 0118 	add.w	r1, r4, #24
   84b42:	f8ca 2018 	str.w	r2, [sl, #24]
   84b46:	6960      	ldr	r0, [r4, #20]
   84b48:	f10a 0220 	add.w	r2, sl, #32
   84b4c:	f8ca 001c 	str.w	r0, [sl, #28]
   84b50:	e761      	b.n	84a16 <_realloc_r+0x22e>
   84b52:	bf00      	nop

00084b54 <_sbrk_r>:
   84b54:	b538      	push	{r3, r4, r5, lr}
   84b56:	2300      	movs	r3, #0
   84b58:	4c06      	ldr	r4, [pc, #24]	; (84b74 <_sbrk_r+0x20>)
   84b5a:	4605      	mov	r5, r0
   84b5c:	4608      	mov	r0, r1
   84b5e:	6023      	str	r3, [r4, #0]
   84b60:	f7fd fa72 	bl	82048 <_sbrk>
   84b64:	1c43      	adds	r3, r0, #1
   84b66:	d000      	beq.n	84b6a <_sbrk_r+0x16>
   84b68:	bd38      	pop	{r3, r4, r5, pc}
   84b6a:	6823      	ldr	r3, [r4, #0]
   84b6c:	2b00      	cmp	r3, #0
   84b6e:	d0fb      	beq.n	84b68 <_sbrk_r+0x14>
   84b70:	602b      	str	r3, [r5, #0]
   84b72:	bd38      	pop	{r3, r4, r5, pc}
   84b74:	2007146c 	.word	0x2007146c

00084b78 <__sread>:
   84b78:	b510      	push	{r4, lr}
   84b7a:	460c      	mov	r4, r1
   84b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84b80:	f000 f9f4 	bl	84f6c <_read_r>
   84b84:	2800      	cmp	r0, #0
   84b86:	db03      	blt.n	84b90 <__sread+0x18>
   84b88:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84b8a:	4403      	add	r3, r0
   84b8c:	6523      	str	r3, [r4, #80]	; 0x50
   84b8e:	bd10      	pop	{r4, pc}
   84b90:	89a3      	ldrh	r3, [r4, #12]
   84b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84b96:	81a3      	strh	r3, [r4, #12]
   84b98:	bd10      	pop	{r4, pc}
   84b9a:	bf00      	nop

00084b9c <__swrite>:
   84b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ba0:	460c      	mov	r4, r1
   84ba2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84ba6:	461f      	mov	r7, r3
   84ba8:	05cb      	lsls	r3, r1, #23
   84baa:	4616      	mov	r6, r2
   84bac:	4605      	mov	r5, r0
   84bae:	d507      	bpl.n	84bc0 <__swrite+0x24>
   84bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84bb4:	2302      	movs	r3, #2
   84bb6:	2200      	movs	r2, #0
   84bb8:	f000 f9c2 	bl	84f40 <_lseek_r>
   84bbc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84bc0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84bc4:	81a1      	strh	r1, [r4, #12]
   84bc6:	463b      	mov	r3, r7
   84bc8:	4632      	mov	r2, r6
   84bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84bce:	4628      	mov	r0, r5
   84bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84bd4:	f000 b8a2 	b.w	84d1c <_write_r>

00084bd8 <__sseek>:
   84bd8:	b510      	push	{r4, lr}
   84bda:	460c      	mov	r4, r1
   84bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84be0:	f000 f9ae 	bl	84f40 <_lseek_r>
   84be4:	89a3      	ldrh	r3, [r4, #12]
   84be6:	1c42      	adds	r2, r0, #1
   84be8:	bf0e      	itee	eq
   84bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84bf2:	6520      	strne	r0, [r4, #80]	; 0x50
   84bf4:	81a3      	strh	r3, [r4, #12]
   84bf6:	bd10      	pop	{r4, pc}

00084bf8 <__sclose>:
   84bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84bfc:	f000 b906 	b.w	84e0c <_close_r>

00084c00 <__swbuf_r>:
   84c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84c02:	460d      	mov	r5, r1
   84c04:	4614      	mov	r4, r2
   84c06:	4606      	mov	r6, r0
   84c08:	b110      	cbz	r0, 84c10 <__swbuf_r+0x10>
   84c0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84c0c:	2b00      	cmp	r3, #0
   84c0e:	d04b      	beq.n	84ca8 <__swbuf_r+0xa8>
   84c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84c14:	69a3      	ldr	r3, [r4, #24]
   84c16:	b291      	uxth	r1, r2
   84c18:	0708      	lsls	r0, r1, #28
   84c1a:	60a3      	str	r3, [r4, #8]
   84c1c:	d539      	bpl.n	84c92 <__swbuf_r+0x92>
   84c1e:	6923      	ldr	r3, [r4, #16]
   84c20:	2b00      	cmp	r3, #0
   84c22:	d036      	beq.n	84c92 <__swbuf_r+0x92>
   84c24:	b2ed      	uxtb	r5, r5
   84c26:	0489      	lsls	r1, r1, #18
   84c28:	462f      	mov	r7, r5
   84c2a:	d515      	bpl.n	84c58 <__swbuf_r+0x58>
   84c2c:	6822      	ldr	r2, [r4, #0]
   84c2e:	6961      	ldr	r1, [r4, #20]
   84c30:	1ad3      	subs	r3, r2, r3
   84c32:	428b      	cmp	r3, r1
   84c34:	da1c      	bge.n	84c70 <__swbuf_r+0x70>
   84c36:	3301      	adds	r3, #1
   84c38:	68a1      	ldr	r1, [r4, #8]
   84c3a:	1c50      	adds	r0, r2, #1
   84c3c:	3901      	subs	r1, #1
   84c3e:	60a1      	str	r1, [r4, #8]
   84c40:	6020      	str	r0, [r4, #0]
   84c42:	7015      	strb	r5, [r2, #0]
   84c44:	6962      	ldr	r2, [r4, #20]
   84c46:	429a      	cmp	r2, r3
   84c48:	d01a      	beq.n	84c80 <__swbuf_r+0x80>
   84c4a:	89a3      	ldrh	r3, [r4, #12]
   84c4c:	07db      	lsls	r3, r3, #31
   84c4e:	d501      	bpl.n	84c54 <__swbuf_r+0x54>
   84c50:	2d0a      	cmp	r5, #10
   84c52:	d015      	beq.n	84c80 <__swbuf_r+0x80>
   84c54:	4638      	mov	r0, r7
   84c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c58:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84c5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84c5e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84c62:	81a2      	strh	r2, [r4, #12]
   84c64:	6822      	ldr	r2, [r4, #0]
   84c66:	6661      	str	r1, [r4, #100]	; 0x64
   84c68:	6961      	ldr	r1, [r4, #20]
   84c6a:	1ad3      	subs	r3, r2, r3
   84c6c:	428b      	cmp	r3, r1
   84c6e:	dbe2      	blt.n	84c36 <__swbuf_r+0x36>
   84c70:	4621      	mov	r1, r4
   84c72:	4630      	mov	r0, r6
   84c74:	f7fe fdae 	bl	837d4 <_fflush_r>
   84c78:	b940      	cbnz	r0, 84c8c <__swbuf_r+0x8c>
   84c7a:	2301      	movs	r3, #1
   84c7c:	6822      	ldr	r2, [r4, #0]
   84c7e:	e7db      	b.n	84c38 <__swbuf_r+0x38>
   84c80:	4621      	mov	r1, r4
   84c82:	4630      	mov	r0, r6
   84c84:	f7fe fda6 	bl	837d4 <_fflush_r>
   84c88:	2800      	cmp	r0, #0
   84c8a:	d0e3      	beq.n	84c54 <__swbuf_r+0x54>
   84c8c:	f04f 37ff 	mov.w	r7, #4294967295
   84c90:	e7e0      	b.n	84c54 <__swbuf_r+0x54>
   84c92:	4621      	mov	r1, r4
   84c94:	4630      	mov	r0, r6
   84c96:	f7fe fc8d 	bl	835b4 <__swsetup_r>
   84c9a:	2800      	cmp	r0, #0
   84c9c:	d1f6      	bne.n	84c8c <__swbuf_r+0x8c>
   84c9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84ca2:	6923      	ldr	r3, [r4, #16]
   84ca4:	b291      	uxth	r1, r2
   84ca6:	e7bd      	b.n	84c24 <__swbuf_r+0x24>
   84ca8:	f7fe fdec 	bl	83884 <__sinit>
   84cac:	e7b0      	b.n	84c10 <__swbuf_r+0x10>
   84cae:	bf00      	nop

00084cb0 <_wcrtomb_r>:
   84cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   84cb2:	4606      	mov	r6, r0
   84cb4:	b085      	sub	sp, #20
   84cb6:	461f      	mov	r7, r3
   84cb8:	b189      	cbz	r1, 84cde <_wcrtomb_r+0x2e>
   84cba:	4c10      	ldr	r4, [pc, #64]	; (84cfc <_wcrtomb_r+0x4c>)
   84cbc:	4d10      	ldr	r5, [pc, #64]	; (84d00 <_wcrtomb_r+0x50>)
   84cbe:	6824      	ldr	r4, [r4, #0]
   84cc0:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84cc2:	2c00      	cmp	r4, #0
   84cc4:	bf08      	it	eq
   84cc6:	462c      	moveq	r4, r5
   84cc8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84ccc:	47a0      	blx	r4
   84cce:	1c43      	adds	r3, r0, #1
   84cd0:	d103      	bne.n	84cda <_wcrtomb_r+0x2a>
   84cd2:	2200      	movs	r2, #0
   84cd4:	238a      	movs	r3, #138	; 0x8a
   84cd6:	603a      	str	r2, [r7, #0]
   84cd8:	6033      	str	r3, [r6, #0]
   84cda:	b005      	add	sp, #20
   84cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84cde:	460c      	mov	r4, r1
   84ce0:	4a06      	ldr	r2, [pc, #24]	; (84cfc <_wcrtomb_r+0x4c>)
   84ce2:	4d07      	ldr	r5, [pc, #28]	; (84d00 <_wcrtomb_r+0x50>)
   84ce4:	6811      	ldr	r1, [r2, #0]
   84ce6:	4622      	mov	r2, r4
   84ce8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84cea:	a901      	add	r1, sp, #4
   84cec:	2c00      	cmp	r4, #0
   84cee:	bf08      	it	eq
   84cf0:	462c      	moveq	r4, r5
   84cf2:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84cf6:	47a0      	blx	r4
   84cf8:	e7e9      	b.n	84cce <_wcrtomb_r+0x1e>
   84cfa:	bf00      	nop
   84cfc:	200701c4 	.word	0x200701c4
   84d00:	200705f4 	.word	0x200705f4

00084d04 <__ascii_wctomb>:
   84d04:	b119      	cbz	r1, 84d0e <__ascii_wctomb+0xa>
   84d06:	2aff      	cmp	r2, #255	; 0xff
   84d08:	d803      	bhi.n	84d12 <__ascii_wctomb+0xe>
   84d0a:	700a      	strb	r2, [r1, #0]
   84d0c:	2101      	movs	r1, #1
   84d0e:	4608      	mov	r0, r1
   84d10:	4770      	bx	lr
   84d12:	238a      	movs	r3, #138	; 0x8a
   84d14:	f04f 31ff 	mov.w	r1, #4294967295
   84d18:	6003      	str	r3, [r0, #0]
   84d1a:	e7f8      	b.n	84d0e <__ascii_wctomb+0xa>

00084d1c <_write_r>:
   84d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84d1e:	460e      	mov	r6, r1
   84d20:	2500      	movs	r5, #0
   84d22:	4c08      	ldr	r4, [pc, #32]	; (84d44 <_write_r+0x28>)
   84d24:	4611      	mov	r1, r2
   84d26:	4607      	mov	r7, r0
   84d28:	461a      	mov	r2, r3
   84d2a:	4630      	mov	r0, r6
   84d2c:	6025      	str	r5, [r4, #0]
   84d2e:	f7fc fb43 	bl	813b8 <_write>
   84d32:	1c43      	adds	r3, r0, #1
   84d34:	d000      	beq.n	84d38 <_write_r+0x1c>
   84d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84d38:	6823      	ldr	r3, [r4, #0]
   84d3a:	2b00      	cmp	r3, #0
   84d3c:	d0fb      	beq.n	84d36 <_write_r+0x1a>
   84d3e:	603b      	str	r3, [r7, #0]
   84d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84d42:	bf00      	nop
   84d44:	2007146c 	.word	0x2007146c

00084d48 <__register_exitproc>:
   84d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84d4c:	4d2c      	ldr	r5, [pc, #176]	; (84e00 <__register_exitproc+0xb8>)
   84d4e:	4606      	mov	r6, r0
   84d50:	6828      	ldr	r0, [r5, #0]
   84d52:	4698      	mov	r8, r3
   84d54:	460f      	mov	r7, r1
   84d56:	4691      	mov	r9, r2
   84d58:	f7ff f954 	bl	84004 <__retarget_lock_acquire_recursive>
   84d5c:	4b29      	ldr	r3, [pc, #164]	; (84e04 <__register_exitproc+0xbc>)
   84d5e:	681c      	ldr	r4, [r3, #0]
   84d60:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84d64:	2b00      	cmp	r3, #0
   84d66:	d03e      	beq.n	84de6 <__register_exitproc+0x9e>
   84d68:	685a      	ldr	r2, [r3, #4]
   84d6a:	2a1f      	cmp	r2, #31
   84d6c:	dc1c      	bgt.n	84da8 <__register_exitproc+0x60>
   84d6e:	f102 0e01 	add.w	lr, r2, #1
   84d72:	b176      	cbz	r6, 84d92 <__register_exitproc+0x4a>
   84d74:	2101      	movs	r1, #1
   84d76:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84d7a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84d7e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84d82:	4091      	lsls	r1, r2
   84d84:	4308      	orrs	r0, r1
   84d86:	2e02      	cmp	r6, #2
   84d88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84d8c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84d90:	d023      	beq.n	84dda <__register_exitproc+0x92>
   84d92:	3202      	adds	r2, #2
   84d94:	f8c3 e004 	str.w	lr, [r3, #4]
   84d98:	6828      	ldr	r0, [r5, #0]
   84d9a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84d9e:	f7ff f933 	bl	84008 <__retarget_lock_release_recursive>
   84da2:	2000      	movs	r0, #0
   84da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84da8:	4b17      	ldr	r3, [pc, #92]	; (84e08 <__register_exitproc+0xc0>)
   84daa:	b30b      	cbz	r3, 84df0 <__register_exitproc+0xa8>
   84dac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84db0:	f7ff f9a4 	bl	840fc <malloc>
   84db4:	4603      	mov	r3, r0
   84db6:	b1d8      	cbz	r0, 84df0 <__register_exitproc+0xa8>
   84db8:	2000      	movs	r0, #0
   84dba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84dbe:	f04f 0e01 	mov.w	lr, #1
   84dc2:	6058      	str	r0, [r3, #4]
   84dc4:	6019      	str	r1, [r3, #0]
   84dc6:	4602      	mov	r2, r0
   84dc8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84dcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84dd0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84dd4:	2e00      	cmp	r6, #0
   84dd6:	d0dc      	beq.n	84d92 <__register_exitproc+0x4a>
   84dd8:	e7cc      	b.n	84d74 <__register_exitproc+0x2c>
   84dda:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84dde:	4301      	orrs	r1, r0
   84de0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84de4:	e7d5      	b.n	84d92 <__register_exitproc+0x4a>
   84de6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84dea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84dee:	e7bb      	b.n	84d68 <__register_exitproc+0x20>
   84df0:	6828      	ldr	r0, [r5, #0]
   84df2:	f7ff f909 	bl	84008 <__retarget_lock_release_recursive>
   84df6:	f04f 30ff 	mov.w	r0, #4294967295
   84dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84dfe:	bf00      	nop
   84e00:	200705f0 	.word	0x200705f0
   84e04:	00086308 	.word	0x00086308
   84e08:	000840fd 	.word	0x000840fd

00084e0c <_close_r>:
   84e0c:	b538      	push	{r3, r4, r5, lr}
   84e0e:	2300      	movs	r3, #0
   84e10:	4c06      	ldr	r4, [pc, #24]	; (84e2c <_close_r+0x20>)
   84e12:	4605      	mov	r5, r0
   84e14:	4608      	mov	r0, r1
   84e16:	6023      	str	r3, [r4, #0]
   84e18:	f7fd f932 	bl	82080 <_close>
   84e1c:	1c43      	adds	r3, r0, #1
   84e1e:	d000      	beq.n	84e22 <_close_r+0x16>
   84e20:	bd38      	pop	{r3, r4, r5, pc}
   84e22:	6823      	ldr	r3, [r4, #0]
   84e24:	2b00      	cmp	r3, #0
   84e26:	d0fb      	beq.n	84e20 <_close_r+0x14>
   84e28:	602b      	str	r3, [r5, #0]
   84e2a:	bd38      	pop	{r3, r4, r5, pc}
   84e2c:	2007146c 	.word	0x2007146c

00084e30 <_fclose_r>:
   84e30:	b570      	push	{r4, r5, r6, lr}
   84e32:	b159      	cbz	r1, 84e4c <_fclose_r+0x1c>
   84e34:	4605      	mov	r5, r0
   84e36:	460c      	mov	r4, r1
   84e38:	b110      	cbz	r0, 84e40 <_fclose_r+0x10>
   84e3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e3c:	2b00      	cmp	r3, #0
   84e3e:	d03c      	beq.n	84eba <_fclose_r+0x8a>
   84e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84e42:	07d8      	lsls	r0, r3, #31
   84e44:	d505      	bpl.n	84e52 <_fclose_r+0x22>
   84e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84e4a:	b92b      	cbnz	r3, 84e58 <_fclose_r+0x28>
   84e4c:	2600      	movs	r6, #0
   84e4e:	4630      	mov	r0, r6
   84e50:	bd70      	pop	{r4, r5, r6, pc}
   84e52:	89a3      	ldrh	r3, [r4, #12]
   84e54:	0599      	lsls	r1, r3, #22
   84e56:	d53c      	bpl.n	84ed2 <_fclose_r+0xa2>
   84e58:	4621      	mov	r1, r4
   84e5a:	4628      	mov	r0, r5
   84e5c:	f7fe fc1e 	bl	8369c <__sflush_r>
   84e60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84e62:	4606      	mov	r6, r0
   84e64:	b133      	cbz	r3, 84e74 <_fclose_r+0x44>
   84e66:	69e1      	ldr	r1, [r4, #28]
   84e68:	4628      	mov	r0, r5
   84e6a:	4798      	blx	r3
   84e6c:	2800      	cmp	r0, #0
   84e6e:	bfb8      	it	lt
   84e70:	f04f 36ff 	movlt.w	r6, #4294967295
   84e74:	89a3      	ldrh	r3, [r4, #12]
   84e76:	061a      	lsls	r2, r3, #24
   84e78:	d422      	bmi.n	84ec0 <_fclose_r+0x90>
   84e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84e7c:	b141      	cbz	r1, 84e90 <_fclose_r+0x60>
   84e7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84e82:	4299      	cmp	r1, r3
   84e84:	d002      	beq.n	84e8c <_fclose_r+0x5c>
   84e86:	4628      	mov	r0, r5
   84e88:	f7fe fe22 	bl	83ad0 <_free_r>
   84e8c:	2300      	movs	r3, #0
   84e8e:	6323      	str	r3, [r4, #48]	; 0x30
   84e90:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84e92:	b121      	cbz	r1, 84e9e <_fclose_r+0x6e>
   84e94:	4628      	mov	r0, r5
   84e96:	f7fe fe1b 	bl	83ad0 <_free_r>
   84e9a:	2300      	movs	r3, #0
   84e9c:	6463      	str	r3, [r4, #68]	; 0x44
   84e9e:	f7fe fd21 	bl	838e4 <__sfp_lock_acquire>
   84ea2:	2200      	movs	r2, #0
   84ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84ea6:	81a2      	strh	r2, [r4, #12]
   84ea8:	07db      	lsls	r3, r3, #31
   84eaa:	d50e      	bpl.n	84eca <_fclose_r+0x9a>
   84eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84eae:	f7ff f8a7 	bl	84000 <__retarget_lock_close_recursive>
   84eb2:	f7fe fd1d 	bl	838f0 <__sfp_lock_release>
   84eb6:	4630      	mov	r0, r6
   84eb8:	bd70      	pop	{r4, r5, r6, pc}
   84eba:	f7fe fce3 	bl	83884 <__sinit>
   84ebe:	e7bf      	b.n	84e40 <_fclose_r+0x10>
   84ec0:	6921      	ldr	r1, [r4, #16]
   84ec2:	4628      	mov	r0, r5
   84ec4:	f7fe fe04 	bl	83ad0 <_free_r>
   84ec8:	e7d7      	b.n	84e7a <_fclose_r+0x4a>
   84eca:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84ecc:	f7ff f89c 	bl	84008 <__retarget_lock_release_recursive>
   84ed0:	e7ec      	b.n	84eac <_fclose_r+0x7c>
   84ed2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84ed4:	f7ff f896 	bl	84004 <__retarget_lock_acquire_recursive>
   84ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84edc:	2b00      	cmp	r3, #0
   84ede:	d1bb      	bne.n	84e58 <_fclose_r+0x28>
   84ee0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84ee2:	f016 0601 	ands.w	r6, r6, #1
   84ee6:	d1b1      	bne.n	84e4c <_fclose_r+0x1c>
   84ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84eea:	f7ff f88d 	bl	84008 <__retarget_lock_release_recursive>
   84eee:	4630      	mov	r0, r6
   84ef0:	bd70      	pop	{r4, r5, r6, pc}
   84ef2:	bf00      	nop

00084ef4 <_fstat_r>:
   84ef4:	b570      	push	{r4, r5, r6, lr}
   84ef6:	460d      	mov	r5, r1
   84ef8:	2300      	movs	r3, #0
   84efa:	4c07      	ldr	r4, [pc, #28]	; (84f18 <_fstat_r+0x24>)
   84efc:	4606      	mov	r6, r0
   84efe:	4611      	mov	r1, r2
   84f00:	4628      	mov	r0, r5
   84f02:	6023      	str	r3, [r4, #0]
   84f04:	f7fd f8bf 	bl	82086 <_fstat>
   84f08:	1c43      	adds	r3, r0, #1
   84f0a:	d000      	beq.n	84f0e <_fstat_r+0x1a>
   84f0c:	bd70      	pop	{r4, r5, r6, pc}
   84f0e:	6823      	ldr	r3, [r4, #0]
   84f10:	2b00      	cmp	r3, #0
   84f12:	d0fb      	beq.n	84f0c <_fstat_r+0x18>
   84f14:	6033      	str	r3, [r6, #0]
   84f16:	bd70      	pop	{r4, r5, r6, pc}
   84f18:	2007146c 	.word	0x2007146c

00084f1c <_isatty_r>:
   84f1c:	b538      	push	{r3, r4, r5, lr}
   84f1e:	2300      	movs	r3, #0
   84f20:	4c06      	ldr	r4, [pc, #24]	; (84f3c <_isatty_r+0x20>)
   84f22:	4605      	mov	r5, r0
   84f24:	4608      	mov	r0, r1
   84f26:	6023      	str	r3, [r4, #0]
   84f28:	f7fd f8b2 	bl	82090 <_isatty>
   84f2c:	1c43      	adds	r3, r0, #1
   84f2e:	d000      	beq.n	84f32 <_isatty_r+0x16>
   84f30:	bd38      	pop	{r3, r4, r5, pc}
   84f32:	6823      	ldr	r3, [r4, #0]
   84f34:	2b00      	cmp	r3, #0
   84f36:	d0fb      	beq.n	84f30 <_isatty_r+0x14>
   84f38:	602b      	str	r3, [r5, #0]
   84f3a:	bd38      	pop	{r3, r4, r5, pc}
   84f3c:	2007146c 	.word	0x2007146c

00084f40 <_lseek_r>:
   84f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84f42:	460e      	mov	r6, r1
   84f44:	2500      	movs	r5, #0
   84f46:	4c08      	ldr	r4, [pc, #32]	; (84f68 <_lseek_r+0x28>)
   84f48:	4611      	mov	r1, r2
   84f4a:	4607      	mov	r7, r0
   84f4c:	461a      	mov	r2, r3
   84f4e:	4630      	mov	r0, r6
   84f50:	6025      	str	r5, [r4, #0]
   84f52:	f7fd f89f 	bl	82094 <_lseek>
   84f56:	1c43      	adds	r3, r0, #1
   84f58:	d000      	beq.n	84f5c <_lseek_r+0x1c>
   84f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f5c:	6823      	ldr	r3, [r4, #0]
   84f5e:	2b00      	cmp	r3, #0
   84f60:	d0fb      	beq.n	84f5a <_lseek_r+0x1a>
   84f62:	603b      	str	r3, [r7, #0]
   84f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f66:	bf00      	nop
   84f68:	2007146c 	.word	0x2007146c

00084f6c <_read_r>:
   84f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84f6e:	460e      	mov	r6, r1
   84f70:	2500      	movs	r5, #0
   84f72:	4c08      	ldr	r4, [pc, #32]	; (84f94 <_read_r+0x28>)
   84f74:	4611      	mov	r1, r2
   84f76:	4607      	mov	r7, r0
   84f78:	461a      	mov	r2, r3
   84f7a:	4630      	mov	r0, r6
   84f7c:	6025      	str	r5, [r4, #0]
   84f7e:	f7fc f9fd 	bl	8137c <_read>
   84f82:	1c43      	adds	r3, r0, #1
   84f84:	d000      	beq.n	84f88 <_read_r+0x1c>
   84f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f88:	6823      	ldr	r3, [r4, #0]
   84f8a:	2b00      	cmp	r3, #0
   84f8c:	d0fb      	beq.n	84f86 <_read_r+0x1a>
   84f8e:	603b      	str	r3, [r7, #0]
   84f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f92:	bf00      	nop
   84f94:	2007146c 	.word	0x2007146c

00084f98 <__aeabi_uldivmod>:
   84f98:	b953      	cbnz	r3, 84fb0 <__aeabi_uldivmod+0x18>
   84f9a:	b94a      	cbnz	r2, 84fb0 <__aeabi_uldivmod+0x18>
   84f9c:	2900      	cmp	r1, #0
   84f9e:	bf08      	it	eq
   84fa0:	2800      	cmpeq	r0, #0
   84fa2:	bf1c      	itt	ne
   84fa4:	f04f 31ff 	movne.w	r1, #4294967295
   84fa8:	f04f 30ff 	movne.w	r0, #4294967295
   84fac:	f000 b97a 	b.w	852a4 <__aeabi_idiv0>
   84fb0:	f1ad 0c08 	sub.w	ip, sp, #8
   84fb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   84fb8:	f000 f806 	bl	84fc8 <__udivmoddi4>
   84fbc:	f8dd e004 	ldr.w	lr, [sp, #4]
   84fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84fc4:	b004      	add	sp, #16
   84fc6:	4770      	bx	lr

00084fc8 <__udivmoddi4>:
   84fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84fcc:	468c      	mov	ip, r1
   84fce:	460e      	mov	r6, r1
   84fd0:	4604      	mov	r4, r0
   84fd2:	9d08      	ldr	r5, [sp, #32]
   84fd4:	2b00      	cmp	r3, #0
   84fd6:	d150      	bne.n	8507a <__udivmoddi4+0xb2>
   84fd8:	428a      	cmp	r2, r1
   84fda:	4617      	mov	r7, r2
   84fdc:	d96c      	bls.n	850b8 <__udivmoddi4+0xf0>
   84fde:	fab2 fe82 	clz	lr, r2
   84fe2:	f1be 0f00 	cmp.w	lr, #0
   84fe6:	d00b      	beq.n	85000 <__udivmoddi4+0x38>
   84fe8:	f1ce 0c20 	rsb	ip, lr, #32
   84fec:	fa01 f60e 	lsl.w	r6, r1, lr
   84ff0:	fa20 fc0c 	lsr.w	ip, r0, ip
   84ff4:	fa02 f70e 	lsl.w	r7, r2, lr
   84ff8:	ea4c 0c06 	orr.w	ip, ip, r6
   84ffc:	fa00 f40e 	lsl.w	r4, r0, lr
   85000:	0c3a      	lsrs	r2, r7, #16
   85002:	fbbc f9f2 	udiv	r9, ip, r2
   85006:	b2bb      	uxth	r3, r7
   85008:	fb02 cc19 	mls	ip, r2, r9, ip
   8500c:	fb09 fa03 	mul.w	sl, r9, r3
   85010:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85014:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   85018:	45b2      	cmp	sl, r6
   8501a:	d90a      	bls.n	85032 <__udivmoddi4+0x6a>
   8501c:	19f6      	adds	r6, r6, r7
   8501e:	f109 31ff 	add.w	r1, r9, #4294967295
   85022:	f080 8125 	bcs.w	85270 <__udivmoddi4+0x2a8>
   85026:	45b2      	cmp	sl, r6
   85028:	f240 8122 	bls.w	85270 <__udivmoddi4+0x2a8>
   8502c:	f1a9 0902 	sub.w	r9, r9, #2
   85030:	443e      	add	r6, r7
   85032:	eba6 060a 	sub.w	r6, r6, sl
   85036:	fbb6 f0f2 	udiv	r0, r6, r2
   8503a:	fb02 6610 	mls	r6, r2, r0, r6
   8503e:	fb00 f303 	mul.w	r3, r0, r3
   85042:	b2a4      	uxth	r4, r4
   85044:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   85048:	42a3      	cmp	r3, r4
   8504a:	d909      	bls.n	85060 <__udivmoddi4+0x98>
   8504c:	19e4      	adds	r4, r4, r7
   8504e:	f100 32ff 	add.w	r2, r0, #4294967295
   85052:	f080 810b 	bcs.w	8526c <__udivmoddi4+0x2a4>
   85056:	42a3      	cmp	r3, r4
   85058:	f240 8108 	bls.w	8526c <__udivmoddi4+0x2a4>
   8505c:	3802      	subs	r0, #2
   8505e:	443c      	add	r4, r7
   85060:	2100      	movs	r1, #0
   85062:	1ae4      	subs	r4, r4, r3
   85064:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85068:	2d00      	cmp	r5, #0
   8506a:	d062      	beq.n	85132 <__udivmoddi4+0x16a>
   8506c:	2300      	movs	r3, #0
   8506e:	fa24 f40e 	lsr.w	r4, r4, lr
   85072:	602c      	str	r4, [r5, #0]
   85074:	606b      	str	r3, [r5, #4]
   85076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8507a:	428b      	cmp	r3, r1
   8507c:	d907      	bls.n	8508e <__udivmoddi4+0xc6>
   8507e:	2d00      	cmp	r5, #0
   85080:	d055      	beq.n	8512e <__udivmoddi4+0x166>
   85082:	2100      	movs	r1, #0
   85084:	e885 0041 	stmia.w	r5, {r0, r6}
   85088:	4608      	mov	r0, r1
   8508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8508e:	fab3 f183 	clz	r1, r3
   85092:	2900      	cmp	r1, #0
   85094:	f040 808f 	bne.w	851b6 <__udivmoddi4+0x1ee>
   85098:	42b3      	cmp	r3, r6
   8509a:	d302      	bcc.n	850a2 <__udivmoddi4+0xda>
   8509c:	4282      	cmp	r2, r0
   8509e:	f200 80fc 	bhi.w	8529a <__udivmoddi4+0x2d2>
   850a2:	1a84      	subs	r4, r0, r2
   850a4:	eb66 0603 	sbc.w	r6, r6, r3
   850a8:	2001      	movs	r0, #1
   850aa:	46b4      	mov	ip, r6
   850ac:	2d00      	cmp	r5, #0
   850ae:	d040      	beq.n	85132 <__udivmoddi4+0x16a>
   850b0:	e885 1010 	stmia.w	r5, {r4, ip}
   850b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   850b8:	b912      	cbnz	r2, 850c0 <__udivmoddi4+0xf8>
   850ba:	2701      	movs	r7, #1
   850bc:	fbb7 f7f2 	udiv	r7, r7, r2
   850c0:	fab7 fe87 	clz	lr, r7
   850c4:	f1be 0f00 	cmp.w	lr, #0
   850c8:	d135      	bne.n	85136 <__udivmoddi4+0x16e>
   850ca:	2101      	movs	r1, #1
   850cc:	1bf6      	subs	r6, r6, r7
   850ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   850d2:	fa1f f887 	uxth.w	r8, r7
   850d6:	fbb6 f2fc 	udiv	r2, r6, ip
   850da:	fb0c 6612 	mls	r6, ip, r2, r6
   850de:	fb08 f002 	mul.w	r0, r8, r2
   850e2:	0c23      	lsrs	r3, r4, #16
   850e4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   850e8:	42b0      	cmp	r0, r6
   850ea:	d907      	bls.n	850fc <__udivmoddi4+0x134>
   850ec:	19f6      	adds	r6, r6, r7
   850ee:	f102 33ff 	add.w	r3, r2, #4294967295
   850f2:	d202      	bcs.n	850fa <__udivmoddi4+0x132>
   850f4:	42b0      	cmp	r0, r6
   850f6:	f200 80d2 	bhi.w	8529e <__udivmoddi4+0x2d6>
   850fa:	461a      	mov	r2, r3
   850fc:	1a36      	subs	r6, r6, r0
   850fe:	fbb6 f0fc 	udiv	r0, r6, ip
   85102:	fb0c 6610 	mls	r6, ip, r0, r6
   85106:	fb08 f800 	mul.w	r8, r8, r0
   8510a:	b2a3      	uxth	r3, r4
   8510c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   85110:	45a0      	cmp	r8, r4
   85112:	d907      	bls.n	85124 <__udivmoddi4+0x15c>
   85114:	19e4      	adds	r4, r4, r7
   85116:	f100 33ff 	add.w	r3, r0, #4294967295
   8511a:	d202      	bcs.n	85122 <__udivmoddi4+0x15a>
   8511c:	45a0      	cmp	r8, r4
   8511e:	f200 80b9 	bhi.w	85294 <__udivmoddi4+0x2cc>
   85122:	4618      	mov	r0, r3
   85124:	eba4 0408 	sub.w	r4, r4, r8
   85128:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8512c:	e79c      	b.n	85068 <__udivmoddi4+0xa0>
   8512e:	4629      	mov	r1, r5
   85130:	4628      	mov	r0, r5
   85132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85136:	fa07 f70e 	lsl.w	r7, r7, lr
   8513a:	f1ce 0320 	rsb	r3, lr, #32
   8513e:	fa26 f203 	lsr.w	r2, r6, r3
   85142:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85146:	fbb2 f1fc 	udiv	r1, r2, ip
   8514a:	fa1f f887 	uxth.w	r8, r7
   8514e:	fb0c 2211 	mls	r2, ip, r1, r2
   85152:	fa06 f60e 	lsl.w	r6, r6, lr
   85156:	fa20 f303 	lsr.w	r3, r0, r3
   8515a:	fb01 f908 	mul.w	r9, r1, r8
   8515e:	4333      	orrs	r3, r6
   85160:	0c1e      	lsrs	r6, r3, #16
   85162:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   85166:	45b1      	cmp	r9, r6
   85168:	fa00 f40e 	lsl.w	r4, r0, lr
   8516c:	d909      	bls.n	85182 <__udivmoddi4+0x1ba>
   8516e:	19f6      	adds	r6, r6, r7
   85170:	f101 32ff 	add.w	r2, r1, #4294967295
   85174:	f080 808c 	bcs.w	85290 <__udivmoddi4+0x2c8>
   85178:	45b1      	cmp	r9, r6
   8517a:	f240 8089 	bls.w	85290 <__udivmoddi4+0x2c8>
   8517e:	3902      	subs	r1, #2
   85180:	443e      	add	r6, r7
   85182:	eba6 0609 	sub.w	r6, r6, r9
   85186:	fbb6 f0fc 	udiv	r0, r6, ip
   8518a:	fb0c 6210 	mls	r2, ip, r0, r6
   8518e:	fb00 f908 	mul.w	r9, r0, r8
   85192:	b29e      	uxth	r6, r3
   85194:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   85198:	45b1      	cmp	r9, r6
   8519a:	d907      	bls.n	851ac <__udivmoddi4+0x1e4>
   8519c:	19f6      	adds	r6, r6, r7
   8519e:	f100 33ff 	add.w	r3, r0, #4294967295
   851a2:	d271      	bcs.n	85288 <__udivmoddi4+0x2c0>
   851a4:	45b1      	cmp	r9, r6
   851a6:	d96f      	bls.n	85288 <__udivmoddi4+0x2c0>
   851a8:	3802      	subs	r0, #2
   851aa:	443e      	add	r6, r7
   851ac:	eba6 0609 	sub.w	r6, r6, r9
   851b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   851b4:	e78f      	b.n	850d6 <__udivmoddi4+0x10e>
   851b6:	f1c1 0720 	rsb	r7, r1, #32
   851ba:	fa22 f807 	lsr.w	r8, r2, r7
   851be:	408b      	lsls	r3, r1
   851c0:	ea48 0303 	orr.w	r3, r8, r3
   851c4:	fa26 f407 	lsr.w	r4, r6, r7
   851c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   851cc:	fbb4 f9fe 	udiv	r9, r4, lr
   851d0:	fa1f fc83 	uxth.w	ip, r3
   851d4:	fb0e 4419 	mls	r4, lr, r9, r4
   851d8:	408e      	lsls	r6, r1
   851da:	fa20 f807 	lsr.w	r8, r0, r7
   851de:	fb09 fa0c 	mul.w	sl, r9, ip
   851e2:	ea48 0806 	orr.w	r8, r8, r6
   851e6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   851ea:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   851ee:	45a2      	cmp	sl, r4
   851f0:	fa02 f201 	lsl.w	r2, r2, r1
   851f4:	fa00 f601 	lsl.w	r6, r0, r1
   851f8:	d908      	bls.n	8520c <__udivmoddi4+0x244>
   851fa:	18e4      	adds	r4, r4, r3
   851fc:	f109 30ff 	add.w	r0, r9, #4294967295
   85200:	d244      	bcs.n	8528c <__udivmoddi4+0x2c4>
   85202:	45a2      	cmp	sl, r4
   85204:	d942      	bls.n	8528c <__udivmoddi4+0x2c4>
   85206:	f1a9 0902 	sub.w	r9, r9, #2
   8520a:	441c      	add	r4, r3
   8520c:	eba4 040a 	sub.w	r4, r4, sl
   85210:	fbb4 f0fe 	udiv	r0, r4, lr
   85214:	fb0e 4410 	mls	r4, lr, r0, r4
   85218:	fb00 fc0c 	mul.w	ip, r0, ip
   8521c:	fa1f f888 	uxth.w	r8, r8
   85220:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85224:	45a4      	cmp	ip, r4
   85226:	d907      	bls.n	85238 <__udivmoddi4+0x270>
   85228:	18e4      	adds	r4, r4, r3
   8522a:	f100 3eff 	add.w	lr, r0, #4294967295
   8522e:	d229      	bcs.n	85284 <__udivmoddi4+0x2bc>
   85230:	45a4      	cmp	ip, r4
   85232:	d927      	bls.n	85284 <__udivmoddi4+0x2bc>
   85234:	3802      	subs	r0, #2
   85236:	441c      	add	r4, r3
   85238:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8523c:	fba0 8902 	umull	r8, r9, r0, r2
   85240:	eba4 0c0c 	sub.w	ip, r4, ip
   85244:	45cc      	cmp	ip, r9
   85246:	46c2      	mov	sl, r8
   85248:	46ce      	mov	lr, r9
   8524a:	d315      	bcc.n	85278 <__udivmoddi4+0x2b0>
   8524c:	d012      	beq.n	85274 <__udivmoddi4+0x2ac>
   8524e:	b155      	cbz	r5, 85266 <__udivmoddi4+0x29e>
   85250:	ebb6 030a 	subs.w	r3, r6, sl
   85254:	eb6c 060e 	sbc.w	r6, ip, lr
   85258:	fa06 f707 	lsl.w	r7, r6, r7
   8525c:	40cb      	lsrs	r3, r1
   8525e:	431f      	orrs	r7, r3
   85260:	40ce      	lsrs	r6, r1
   85262:	602f      	str	r7, [r5, #0]
   85264:	606e      	str	r6, [r5, #4]
   85266:	2100      	movs	r1, #0
   85268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8526c:	4610      	mov	r0, r2
   8526e:	e6f7      	b.n	85060 <__udivmoddi4+0x98>
   85270:	4689      	mov	r9, r1
   85272:	e6de      	b.n	85032 <__udivmoddi4+0x6a>
   85274:	4546      	cmp	r6, r8
   85276:	d2ea      	bcs.n	8524e <__udivmoddi4+0x286>
   85278:	ebb8 0a02 	subs.w	sl, r8, r2
   8527c:	eb69 0e03 	sbc.w	lr, r9, r3
   85280:	3801      	subs	r0, #1
   85282:	e7e4      	b.n	8524e <__udivmoddi4+0x286>
   85284:	4670      	mov	r0, lr
   85286:	e7d7      	b.n	85238 <__udivmoddi4+0x270>
   85288:	4618      	mov	r0, r3
   8528a:	e78f      	b.n	851ac <__udivmoddi4+0x1e4>
   8528c:	4681      	mov	r9, r0
   8528e:	e7bd      	b.n	8520c <__udivmoddi4+0x244>
   85290:	4611      	mov	r1, r2
   85292:	e776      	b.n	85182 <__udivmoddi4+0x1ba>
   85294:	3802      	subs	r0, #2
   85296:	443c      	add	r4, r7
   85298:	e744      	b.n	85124 <__udivmoddi4+0x15c>
   8529a:	4608      	mov	r0, r1
   8529c:	e706      	b.n	850ac <__udivmoddi4+0xe4>
   8529e:	3a02      	subs	r2, #2
   852a0:	443e      	add	r6, r7
   852a2:	e72b      	b.n	850fc <__udivmoddi4+0x134>

000852a4 <__aeabi_idiv0>:
   852a4:	4770      	bx	lr
   852a6:	bf00      	nop

000852a8 <atmel_logo_small_data>:
   852a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   852b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   852c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   852d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   852e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   852f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85308:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85318:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85328:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85338:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85348:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85358:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85368:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85378:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85388:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85398:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   853a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   853b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   853c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   853d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   853e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   853f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85408:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85418:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85428:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85438:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85448:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85458:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85468:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85478:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85488:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85498:	ffff ffff 7edf 7edf 7edf dff7 ffff ffff     .....~.~.~......
   854a8:	dff7 7edf 7edf dff7 ffff ffff ffff ffff     ...~.~..........
   854b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   854c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   854d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   854e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   854f8:	ffff ffff ffff ffff ffff dff7 7edf 7edf     .............~.~
   85508:	bfef ffff ffff 9fe7 ffff ffff ffff ffff     ................
   85518:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85528:	ffff ffff ffff ffff ffff ffff ffff 1c8e     ................
   85538:	d803 d803 d803 7da6 ffff ffff 7da6 d803     .......}.....}..
   85548:	d803 7da6 ffff ffff ffff ffff ffff ffff     ...}............
   85558:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85568:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85578:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85588:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85598:	ffff ffff ffff febe d803 d803 5b65 ffff     ............e[..
   855a8:	7da6 1a4d bb75 ffff ffff ffff ffff ffff     .}M.u...........
   855b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   855c8:	ffff ffff ffff ffff bdb6 d803 d803 d803     ................
   855d8:	d803 7da6 ffff ffff 7da6 d803 d803 7da6     ...}.....}.....}
   855e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   855f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85608:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85618:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85628:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85638:	ffff febe d803 d803 5b65 ffff 3c96 7b65     ........e[...<e{
   85648:	9b75 ffff ffff ffff ffff ffff ffff ffff     u...............
   85658:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85668:	ffff 3ecf f80b d803 d803 d803 d803 7da6     ...>...........}
   85678:	ffff ffff 7da6 d803 d803 7da6 ffff ffff     .....}.....}....
   85688:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85698:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   856a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   856b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   856c8:	ffff ffff ffff ffff ffff ffff ffff febe     ................
   856d8:	d803 d803 5b65 ffff dff7 7da6 9fe7 ffff     ....e[.....}....
   856e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   856f8:	ffff ffff ffff ffff ffff ffff 9fe7 591c     ...............Y
   85708:	d803 d803 391c d803 d803 7da6 ffff ffff     .....9.....}....
   85718:	7da6 d803 d803 7da6 ffff ffff ffff ffff     .}.....}........
   85728:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85738:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85748:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85758:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85768:	ffff ffff ffff ffff ffff febe d803 d803     ................
   85778:	5b65 ffff ffff ffff ffff ffff ffff ffff     e[..............
   85788:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85798:	ffff ffff ffff dff7 b934 d803 d803 5b5d     ........4.....][
   857a8:	fc85 d803 d803 7da6 ffff 1ec7 bb7d d803     .......}....}...
   857b8:	d803 bb7d febe febe febe 5ed7 ffff ffff     ..}........^....
   857c8:	ffff ffff ffff 5ed7 7da6 7da6 1ecf ffff     .......^.}.}....
   857d8:	ffff ffff ffff bfef bdae 7da6 bdae dff7     ...........}....
   857e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   857f8:	ffff 1ec7 5c9e fc85 3c96 ddbe dff7 ffff     .....\...<......
   85808:	ffff ffff ffff febe d803 d803 5b65 ffff     ............e[..
   85818:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85828:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85838:	ffff 3a55 d803 d803 da3c dff7 fc85 d803     ..U:....<.......
   85848:	d803 7da6 ffff 5924 d803 d803 d803 d803     ...}..$Y........
   85858:	d803 d803 d803 5b65 ffff ffff ffff 3ecf     ......e[.......>
   85868:	b934 d803 d803 d803 d803 992c 1ec7 ffff     4.........,.....
   85878:	db7d f80b d803 d803 d803 f80b db7d ffff     }...........}...
   85888:	ffff ffff ffff ffff ffff ddbe 792c d803     ............,y..
   85898:	d803 d803 d803 d803 391c 5c9e ffff ffff     .........9.\....
   858a8:	ffff febe d803 d803 5b65 ffff ffff ffff     ........e[......
   858b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   858c8:	ffff ffff ffff ffff ffff ffff db7d d803     ............}...
   858d8:	d803 7924 9fe7 ffff fc85 d803 d803 7da6     ..$y...........}
   858e8:	ffff 5924 d803 d803 d803 d803 d803 d803     ..$Y............
   858f8:	d803 5b65 ffff ffff 3ecf f80b d803 d803     ..e[.....>......
   85908:	d803 d803 d803 d803 d803 da3c d803 d803     ..........<.....
   85918:	d803 d803 d803 d803 d803 3a55 ffff ffff     ..........U:....
   85928:	ffff ffff 3c96 d803 d803 d803 d803 d803     .....<..........
   85938:	d803 d803 d803 d803 db7d ffff ffff febe     ........}.......
   85948:	d803 d803 5b65 ffff ffff ffff ffff ffff     ....e[..........
   85958:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85968:	ffff ffff ffff 7d9e d803 d803 f80b 5ed7     .......}.......^
   85978:	ffff ffff fc85 d803 d803 7da6 ffff bb75     ...........}..u.
   85988:	da3c d803 d803 da3c 5b65 5b65 5b65 5c9e     <.....<.e[e[e[.\
   85998:	ffff ffff 792c d803 d803 f80b 3a5d 5b5d     ....,y......]:][
   859a8:	1814 d803 d803 d803 d803 d803 b93c 5b65     ............<.e[
   859b8:	b93c d803 d803 d803 3c96 ffff ffff 1ec7     <........<......
   859c8:	d803 d803 d803 fa44 bdb6 7edf fec6 7b6d     ......D....~..m{
   859d8:	d803 d803 d803 ddbe ffff febe d803 d803     ................
   859e8:	5b65 ffff ffff ffff ffff ffff ffff ffff     e[..............
   859f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85a08:	fec6 d803 d803 d803 ddbe ffff ffff ffff     ................
   85a18:	fc85 d803 d803 7da6 ffff ffff 7da6 d803     .......}.....}..
   85a28:	d803 7da6 ffff ffff ffff ffff ffff bdae     ...}............
   85a38:	d803 d803 3814 5ed7 ffff ffff 9fe7 7924     .....8.^......$y
   85a48:	d803 d803 d803 fc85 ffff ffff ffff fc85     ................
   85a58:	d803 d803 7924 ffff ffff fa4c d803 d803     ....$y....L.....
   85a68:	3a55 ffff ffff ffff ffff ffff dc7d d803     U:..........}...
   85a78:	d803 da44 ffff febe d803 d803 5b65 ffff     ..D.........e[..
   85a88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85a98:	ffff ffff ffff ffff ffff 7edf 3814 d803     ...........~.8..
   85aa8:	d803 db7d 7edf 7edf dff7 ffff fc85 d803     ..}..~.~........
   85ab8:	d803 7da6 ffff ffff 7da6 d803 d803 7da6     ...}.....}.....}
   85ac8:	ffff ffff ffff ffff ffff bb75 d803 d803     ..........u.....
   85ad8:	1c8e ffff ffff ffff ffff 9da6 d803 d803     ................
   85ae8:	591c ffff ffff ffff ffff ffff 591c d803     .Y...........Y..
   85af8:	d803 9fe7 bfef d803 d803 d803 fdbe 7edf     ...............~
   85b08:	7edf 7edf 7edf 7edf 5ed7 d803 d803 d803     .~.~.~.~.^......
   85b18:	bfef febe d803 d803 5b65 ffff ffff ffff     ........e[......
   85b28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85b38:	ffff ffff bfef 792c d803 d803 d803 d803     ......,y........
   85b48:	d803 d803 febe ffff fc85 d803 d803 7da6     ...............}
   85b58:	ffff ffff 7da6 d803 d803 7da6 ffff ffff     .....}.....}....
   85b68:	ffff ffff ffff 5b65 d803 d803 febe ffff     ......e[........
   85b78:	ffff ffff ffff 7edf d803 d803 da44 ffff     .......~....D...
   85b88:	ffff ffff ffff ffff da44 d803 d803 7edf     ........D......~
   85b98:	fec6 d803 d803 d803 d803 d803 d803 d803     ................
   85ba8:	d803 d803 d803 d803 d803 d803 1ec7 febe     ................
   85bb8:	d803 d803 5b65 ffff ffff ffff ffff ffff     ....e[..........
   85bc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85bd8:	fa44 d803 d803 d803 d803 d803 d803 d803     D...............
   85be8:	febe ffff fc85 d803 d803 7da6 ffff ffff     ...........}....
   85bf8:	7da6 d803 d803 7da6 ffff ffff ffff ffff     .}.....}........
   85c08:	ffff 5b65 d803 d803 febe ffff ffff ffff     ..e[............
   85c18:	ffff 7edf d803 d803 da44 ffff ffff ffff     ...~....D.......
   85c28:	ffff ffff da44 d803 d803 7edf febe d803     ....D......~....
   85c38:	d803 d803 d803 d803 d803 d803 d803 d803     ................
   85c48:	d803 d803 d803 d803 febe febe d803 d803     ................
   85c58:	5b65 ffff ffff ffff ffff ffff ffff ffff     e[..............
   85c68:	ffff ffff ffff ffff ffff 7b6d d803 d803     ..........m{....
   85c78:	992c fc85 fc85 fc85 fc85 fc85 7edf ffff     ,............~..
   85c88:	fc85 d803 d803 7da6 ffff ffff 7da6 d803     .......}.....}..
   85c98:	d803 5c9e ffff ffff ffff ffff ffff 5b65     ...\..........e[
   85ca8:	d803 d803 febe ffff ffff ffff ffff 7edf     ...............~
   85cb8:	d803 d803 da44 ffff ffff ffff ffff ffff     ....D...........
   85cc8:	da44 d803 d803 7edf 1ecf d803 d803 f80b     D......~........
   85cd8:	fc85 fc85 fc85 fc85 fc85 fc85 fc85 fc85     ................
   85ce8:	fc85 fc85 7edf fec6 d803 d803 5b65 ffff     .....~......e[..
   85cf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85d08:	ffff ffff 3c8e d803 d803 391c 9fe7 ffff     .....<.....9....
   85d18:	ffff ffff ffff ffff ffff ffff fc85 d803     ................
   85d28:	d803 7da6 ffff ffff bdae d803 d803 5b5d     ...}..........][
   85d38:	ffff ffff ffff ffff ffff 5b65 d803 d803     ..........e[....
   85d48:	febe ffff ffff ffff ffff 7edf d803 d803     ...........~....
   85d58:	da44 ffff ffff ffff ffff ffff da44 d803     D...........D...
   85d68:	d803 7edf dff7 f80b d803 d803 9fe7 ffff     ...~............
   85d78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85d88:	ffff 9fe7 d803 d803 792c ffff ffff ffff     ........,y......
   85d98:	ffff ffff ffff ffff ffff ffff ffff bdb6     ................
   85da8:	d803 d803 f80b 3ecf ffff ffff ffff ffff     .......>........
   85db8:	ffff ffff ffff ffff fc85 d803 d803 7da6     ...............}
   85dc8:	ffff ffff dff7 f80b d803 d803 7d9e ffff     .............}..
   85dd8:	ffff ffff ffff 5b65 d803 d803 febe ffff     ......e[........
   85de8:	ffff ffff ffff 7edf d803 d803 da44 ffff     .......~....D...
   85df8:	ffff ffff ffff ffff da44 d803 d803 7edf     ........D......~
   85e08:	ffff 3a55 d803 d803 1a55 ffff ffff ffff     ..U:....U.......
   85e18:	ffff ffff fec6 fc85 fc85 5c9e ffff ffff     ...........\....
   85e28:	b934 d803 d803 9b6d ffff ffff ffff ffff     4.....m.........
   85e38:	ffff ffff ffff ffff 5ed7 f80b d803 d803     .........^......
   85e48:	bdae ffff ffff ffff ffff ffff ffff ffff     ................
   85e58:	ffff ffff fc85 d803 d803 7da6 ffff ffff     ...........}....
   85e68:	ffff fc85 d803 d803 d803 7924 da44 1c86     ..........$yD...
   85e78:	ffff 5b65 d803 d803 febe ffff ffff ffff     ..e[............
   85e88:	ffff 7edf d803 d803 da44 ffff ffff ffff     ...~....D.......
   85e98:	ffff ffff da44 d803 d803 7edf ffff 5ed7     ....D......~...^
   85ea8:	d803 d803 d803 da3c bdb6 7edf 5ed7 db7d     ......<....~.^}.
   85eb8:	d803 d803 d803 3c96 ffff ffff ddb6 d803     .......<........
   85ec8:	d803 d803 3814 da44 da44 ffff ffff ffff     .....8D.D.......
   85ed8:	ffff 9fe7 591c d803 d803 1c86 ffff ffff     .....Y..........
   85ee8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   85ef8:	fc85 d803 d803 7da6 ffff ffff ffff ffff     .......}........
   85f08:	3a5d d803 d803 d803 d803 5b65 ffff 5b65     ]:........e[..e[
   85f18:	d803 d803 febe ffff ffff ffff ffff 7edf     ...............~
   85f28:	d803 d803 da44 ffff ffff ffff ffff ffff     ....D...........
   85f38:	da44 d803 d803 7edf ffff ffff 5c9e d803     D......~.....\..
   85f48:	d803 d803 d803 d803 d803 d803 d803 d803     ................
   85f58:	3a5d ffff ffff ffff ffff 3c8e d803 d803     ]:.........<....
   85f68:	d803 d803 d803 ffff ffff ffff dff7 b93c     ..............<.
   85f78:	d803 d803 7b65 ffff ffff ffff ffff ffff     ....e{..........
   85f88:	ffff ffff ffff ffff ffff ffff fc85 d803     ................
   85f98:	d803 7da6 ffff ffff ffff ffff ffff 7d9e     ...}...........}
   85fa8:	b934 d803 d803 5b65 ffff 5b65 d803 d803     4.....e[..e[....
   85fb8:	febe ffff ffff ffff ffff 7edf d803 d803     ...........~....
   85fc8:	da44 ffff ffff ffff ffff ffff da44 d803     D...........D...
   85fd8:	d803 7edf ffff ffff ffff fec6 b93c d803     ...~........<...
   85fe8:	d803 d803 d803 d803 5924 5c9e ffff ffff     ........$Y.\....
   85ff8:	ffff ffff ffff ffff fec6 fa4c d803 d803     ..........L.....
   86008:	d803 ffff ffff ffff ffff ffff ffff ffff     ................
   86018:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86028:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86038:	ffff ffff ffff ffff ffff ffff ffff dff7     ................
   86048:	7edf bfef ffff ffff ffff ffff ffff ffff     .~..............
   86058:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86068:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86078:	ffff ffff ffff ffff ffff 7edf bdb6 7da6     ...........~...}
   86088:	9dae 5ed7 ffff ffff ffff ffff ffff ffff     ...^............
   86098:	ffff ffff ffff ffff ffff 7edf 7edf ffff     ...........~.~..
   860a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   860b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   860c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   860d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   860e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   860f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86108:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86118:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86128:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86138:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86148:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86158:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86168:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86178:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86188:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86198:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   861a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   861b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   861c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   861d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   861e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   861f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86208:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86218:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86228:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86238:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86248:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86258:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86268:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   86278:	ffff ffff ffff ffff 6f54 6375 2068 6373     ........Touch sc
   86288:	6572 6e65 7020 6572 7373 6465 0a2e 0000     reen pressed....
   86298:	6854 2065 7375 7265 7420 756f 6863 6465     The user touched
   862a8:	7420 6568 7320 7263 6565 206e 7461 7820      the screen at x
   862b8:	3d20 2520 2064 6e61 2064 2079 203d 6425      = %d and y = %d
   862c8:	0000 0000 6854 7369 6920 2073 7241 7564     ....This is Ardu
   862d8:	6e69 206f 6f43 736e 6c6f 2065 4155 5452     ino Console UART
   862e8:	4120 7070 696c 6163 6974 6e6f 0a2e 0000      Application....
   862f8:	4950 204f 6168 646e 656c 0a2e 0000 0000     PIO handle......

00086308 <_global_impure_ptr>:
   86308:	01c8 2007 3130 3332 3534 3736 3938 4241     ... 0123456789AB
   86318:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
   86328:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
   86338:	296c 0000                                   l)..

0008633c <blanks.7217>:
   8633c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008634c <zeroes.7218>:
   8634c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8635c:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0008636c <_ctype_>:
   8636c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   8637c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   8638c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   8639c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   863ac:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   863bc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   863cc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   863dc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   863ec:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00086470 <_init>:
   86470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86472:	bf00      	nop
   86474:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86476:	bc08      	pop	{r3}
   86478:	469e      	mov	lr, r3
   8647a:	4770      	bx	lr

0008647c <__init_array_start>:
   8647c:	0008367d 	.word	0x0008367d

00086480 <__frame_dummy_init_array_entry>:
   86480:	00080119                                ....

00086484 <_fini>:
   86484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86486:	bf00      	nop
   86488:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8648a:	bc08      	pop	{r3}
   8648c:	469e      	mov	lr, r3
   8648e:	4770      	bx	lr

00086490 <__fini_array_start>:
   86490:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701b4 	.word	0x200701b4

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <membag_list>:
20070138:	00000010 00000005 00000000 00000000     ................
	...
20070150:	00000040 00000002 00000000 00000000     @...............
	...
20070168:	00000080 0000000a 00000000 00000000     ................
	...
20070180:	00000020 00000004 00000000 00000000      ...............
	...
20070198:	00000010 00000002 00000000 00000000     ................
	...

200701b0 <xNextTaskUnblockTime>:
200701b0:	ffffffff                                ....

200701b4 <SystemCoreClock>:
200701b4:	003d0900                                ..=.

200701b8 <atmel_logo_small>:
200701b8:	001a004e 00000002 000852a8              N........R..

200701c4 <_impure_ptr>:
200701c4:	200701c8                                ... 

200701c8 <impure_data>:
200701c8:	00000000 200704b4 2007051c 20070584     ....... ... ... 
	...
20070270:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070280:	0005deec 0000000b 00000000 00000000     ................
	...

200705f0 <__atexit_recursive_mutex>:
200705f0:	20071448                                H.. 

200705f4 <__global_locale>:
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	00000043 00000000 00000000 00000000     C...............
	...
20070674:	00000043 00000000 00000000 00000000     C...............
	...
20070694:	00000043 00000000 00000000 00000000     C...............
	...
200706b4:	00000043 00000000 00000000 00000000     C...............
	...
200706d4:	00084d05 00084651 00000000 0008636c     .M..QF......lc..
200706e4:	00086368 00086304 00086304 00086304     hc...c...c...c..
200706f4:	00086304 00086304 00086304 00086304     .c...c...c...c..
20070704:	00086304 00086304 ffffffff ffffffff     .c...c..........
20070714:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2007073c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070760 <__malloc_av_>:
	...
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 
20070ae8:	20070ae0 20070ae0 20070ae8 20070ae8     ... ... ... ... 
20070af8:	20070af0 20070af0 20070af8 20070af8     ... ... ... ... 
20070b08:	20070b00 20070b00 20070b08 20070b08     ... ... ... ... 
20070b18:	20070b10 20070b10 20070b18 20070b18     ... ... ... ... 
20070b28:	20070b20 20070b20 20070b28 20070b28      ..  .. (.. (.. 
20070b38:	20070b30 20070b30 20070b38 20070b38     0.. 0.. 8.. 8.. 
20070b48:	20070b40 20070b40 20070b48 20070b48     @.. @.. H.. H.. 
20070b58:	20070b50 20070b50 20070b58 20070b58     P.. P.. X.. X.. 

20070b68 <__malloc_sbrk_base>:
20070b68:	ffffffff                                ....

20070b6c <__malloc_trim_threshold>:
20070b6c:	00020000                                ....
