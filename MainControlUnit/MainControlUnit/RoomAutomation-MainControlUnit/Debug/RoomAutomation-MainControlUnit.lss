
RoomAutomation-MainControlUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b2c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000a1c  20070000  00085b2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000918  20070a1c  00086548  00020a1c  2**2
                  ALLOC
  3 .stack        00002004  20071334  00086e60  00020a1c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020a1c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020a45  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002dc06  00000000  00000000  00020a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006819  00000000  00000000  0004e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d5ab  00000000  00000000  00054ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001130  00000000  00000000  00062468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001238  00000000  00000000  00063598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000e7a8  00000000  00000000  000647d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001fc30  00000000  00000000  00072f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072631  00000000  00000000  00092ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000030e4  00000000  00000000  001051dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	38 33 07 20 41 27 08 00 3d 27 08 00 3d 27 08 00     83. A'..='..='..
   80010:	3d 27 08 00 3d 27 08 00 3d 27 08 00 00 00 00 00     ='..='..='......
	...
   8002c:	e9 1f 08 00 3d 27 08 00 00 00 00 00 21 20 08 00     ....='......! ..
   8003c:	5d 20 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ] ..='..='..='..
   8004c:	3d 27 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ='..='..='..='..
   8005c:	3d 27 08 00 3d 27 08 00 3d 27 08 00 00 00 00 00     ='..='..='......
   8006c:	b1 25 08 00 c5 25 08 00 d9 25 08 00 ed 25 08 00     .%...%...%...%..
	...
   80084:	3d 27 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ='..='..='..='..
   80094:	3d 27 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ='..='..='..='..
   800a4:	00 00 00 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ....='..='..='..
   800b4:	3d 27 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ='..='..='..='..
   800c4:	3d 27 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ='..='..='..='..
   800d4:	3d 27 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ='..='..='..='..
   800e4:	3d 27 08 00 3d 27 08 00 3d 27 08 00 3d 27 08 00     ='..='..='..='..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a1c 	.word	0x20070a1c
   80110:	00000000 	.word	0x00000000
   80114:	00085b2c 	.word	0x00085b2c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00085b2c 	.word	0x00085b2c
   80154:	20070a20 	.word	0x20070a20
   80158:	00085b2c 	.word	0x00085b2c
   8015c:	00000000 	.word	0x00000000

00080160 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80160:	4b0b      	ldr	r3, [pc, #44]	; (80190 <ili9341_send_command+0x30>)
   80162:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80166:	635a      	str	r2, [r3, #52]	; 0x34
   80168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8016c:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8016e:	4a09      	ldr	r2, [pc, #36]	; (80194 <ili9341_send_command+0x34>)
   80170:	6913      	ldr	r3, [r2, #16]
		/* Do nothing */
	}
#  endif
#elif defined(CONF_ILI9341_SPI)
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80172:	f413 7f00 	tst.w	r3, #512	; 0x200
   80176:	d0fb      	beq.n	80170 <ili9341_send_command+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80178:	4b06      	ldr	r3, [pc, #24]	; (80194 <ili9341_send_command+0x34>)
   8017a:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8017c:	461a      	mov	r2, r3
   8017e:	6913      	ldr	r3, [r2, #16]
   80180:	f413 7f00 	tst.w	r3, #512	; 0x200
   80184:	d0fb      	beq.n	8017e <ili9341_send_command+0x1e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80186:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8018a:	4b01      	ldr	r3, [pc, #4]	; (80190 <ili9341_send_command+0x30>)
   8018c:	631a      	str	r2, [r3, #48]	; 0x30
   8018e:	4770      	bx	lr
   80190:	400e1200 	.word	0x400e1200
   80194:	40008000 	.word	0x40008000

00080198 <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
   80198:	b510      	push	{r4, lr}
   8019a:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
   8019c:	202a      	movs	r0, #42	; 0x2a
   8019e:	4b35      	ldr	r3, [pc, #212]	; (80274 <ili9341_send_draw_limits+0xdc>)
   801a0:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
   801a2:	4b35      	ldr	r3, [pc, #212]	; (80278 <ili9341_send_draw_limits+0xe0>)
   801a4:	f9b3 1000 	ldrsh.w	r1, [r3]
   801a8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   801ac:	4a33      	ldr	r2, [pc, #204]	; (8027c <ili9341_send_draw_limits+0xe4>)
   801ae:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801b0:	f413 7f00 	tst.w	r3, #512	; 0x200
   801b4:	d0fb      	beq.n	801ae <ili9341_send_draw_limits+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801b6:	4b31      	ldr	r3, [pc, #196]	; (8027c <ili9341_send_draw_limits+0xe4>)
   801b8:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
   801ba:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801bc:	461a      	mov	r2, r3
   801be:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801c0:	f413 7f00 	tst.w	r3, #512	; 0x200
   801c4:	d0fb      	beq.n	801be <ili9341_send_draw_limits+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801c6:	4b2d      	ldr	r3, [pc, #180]	; (8027c <ili9341_send_draw_limits+0xe4>)
   801c8:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   801ca:	b19c      	cbz	r4, 801f4 <ili9341_send_draw_limits+0x5c>
		ili9341_send_byte(limit_end_x >> 8);
   801cc:	4b2c      	ldr	r3, [pc, #176]	; (80280 <ili9341_send_draw_limits+0xe8>)
   801ce:	f9b3 1000 	ldrsh.w	r1, [r3]
   801d2:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801d6:	4a29      	ldr	r2, [pc, #164]	; (8027c <ili9341_send_draw_limits+0xe4>)
   801d8:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801da:	f413 7f00 	tst.w	r3, #512	; 0x200
   801de:	d0fb      	beq.n	801d8 <ili9341_send_draw_limits+0x40>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801e0:	4b26      	ldr	r3, [pc, #152]	; (8027c <ili9341_send_draw_limits+0xe4>)
   801e2:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
   801e4:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801e6:	461a      	mov	r2, r3
   801e8:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801ea:	f413 7f00 	tst.w	r3, #512	; 0x200
   801ee:	d0fb      	beq.n	801e8 <ili9341_send_draw_limits+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801f0:	4b22      	ldr	r3, [pc, #136]	; (8027c <ili9341_send_draw_limits+0xe4>)
   801f2:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801f4:	4a21      	ldr	r2, [pc, #132]	; (8027c <ili9341_send_draw_limits+0xe4>)
   801f6:	6913      	ldr	r3, [r2, #16]
   801f8:	f413 7f00 	tst.w	r3, #512	; 0x200
   801fc:	d0fb      	beq.n	801f6 <ili9341_send_draw_limits+0x5e>
   801fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80202:	4b20      	ldr	r3, [pc, #128]	; (80284 <ili9341_send_draw_limits+0xec>)
   80204:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
   80206:	202b      	movs	r0, #43	; 0x2b
   80208:	4b1a      	ldr	r3, [pc, #104]	; (80274 <ili9341_send_draw_limits+0xdc>)
   8020a:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
   8020c:	4b1e      	ldr	r3, [pc, #120]	; (80288 <ili9341_send_draw_limits+0xf0>)
   8020e:	f9b3 1000 	ldrsh.w	r1, [r3]
   80212:	f3c1 2007 	ubfx	r0, r1, #8, #8
   80216:	4a19      	ldr	r2, [pc, #100]	; (8027c <ili9341_send_draw_limits+0xe4>)
   80218:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8021a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8021e:	d0fb      	beq.n	80218 <ili9341_send_draw_limits+0x80>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80220:	4b16      	ldr	r3, [pc, #88]	; (8027c <ili9341_send_draw_limits+0xe4>)
   80222:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
   80224:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80226:	461a      	mov	r2, r3
   80228:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8022a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8022e:	d0fb      	beq.n	80228 <ili9341_send_draw_limits+0x90>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80230:	4b12      	ldr	r3, [pc, #72]	; (8027c <ili9341_send_draw_limits+0xe4>)
   80232:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   80234:	b19c      	cbz	r4, 8025e <ili9341_send_draw_limits+0xc6>
		ili9341_send_byte(limit_end_y >> 8);
   80236:	4b15      	ldr	r3, [pc, #84]	; (8028c <ili9341_send_draw_limits+0xf4>)
   80238:	f9b3 1000 	ldrsh.w	r1, [r3]
   8023c:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80240:	4a0e      	ldr	r2, [pc, #56]	; (8027c <ili9341_send_draw_limits+0xe4>)
   80242:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80244:	f413 7f00 	tst.w	r3, #512	; 0x200
   80248:	d0fb      	beq.n	80242 <ili9341_send_draw_limits+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8024a:	4b0c      	ldr	r3, [pc, #48]	; (8027c <ili9341_send_draw_limits+0xe4>)
   8024c:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
   8024e:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80250:	461a      	mov	r2, r3
   80252:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80254:	f413 7f00 	tst.w	r3, #512	; 0x200
   80258:	d0fb      	beq.n	80252 <ili9341_send_draw_limits+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8025a:	4b08      	ldr	r3, [pc, #32]	; (8027c <ili9341_send_draw_limits+0xe4>)
   8025c:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8025e:	4a07      	ldr	r2, [pc, #28]	; (8027c <ili9341_send_draw_limits+0xe4>)
   80260:	6913      	ldr	r3, [r2, #16]
   80262:	f413 7f00 	tst.w	r3, #512	; 0x200
   80266:	d0fb      	beq.n	80260 <ili9341_send_draw_limits+0xc8>
   80268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8026c:	4b05      	ldr	r3, [pc, #20]	; (80284 <ili9341_send_draw_limits+0xec>)
   8026e:	631a      	str	r2, [r3, #48]	; 0x30
   80270:	bd10      	pop	{r4, pc}
   80272:	bf00      	nop
   80274:	00080161 	.word	0x00080161
   80278:	20070a3c 	.word	0x20070a3c
   8027c:	40008000 	.word	0x40008000
   80280:	20070a38 	.word	0x20070a38
   80284:	400e1200 	.word	0x400e1200
   80288:	20070a3e 	.word	0x20070a3e
   8028c:	20070a3a 	.word	0x20070a3a

00080290 <ili9341_set_top_left_limit>:
 *
 * \param x The x coordinate of the top left corner
 * \param y The y coordinate of the top left corner
 */
void ili9341_set_top_left_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   80290:	b508      	push	{r3, lr}
	limit_start_x = x;
   80292:	4b04      	ldr	r3, [pc, #16]	; (802a4 <ili9341_set_top_left_limit+0x14>)
   80294:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
   80296:	4b04      	ldr	r3, [pc, #16]	; (802a8 <ili9341_set_top_left_limit+0x18>)
   80298:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(false);
   8029a:	2000      	movs	r0, #0
   8029c:	4b03      	ldr	r3, [pc, #12]	; (802ac <ili9341_set_top_left_limit+0x1c>)
   8029e:	4798      	blx	r3
   802a0:	bd08      	pop	{r3, pc}
   802a2:	bf00      	nop
   802a4:	20070a3c 	.word	0x20070a3c
   802a8:	20070a3e 	.word	0x20070a3e
   802ac:	00080199 	.word	0x00080199

000802b0 <ili9341_set_bottom_right_limit>:
 *
 * \param x The x coordinate of the bottom right corner
 * \param y The y coordinate of the bottom right corner
 */
void ili9341_set_bottom_right_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   802b0:	b508      	push	{r3, lr}
	limit_end_x = x;
   802b2:	4b04      	ldr	r3, [pc, #16]	; (802c4 <ili9341_set_bottom_right_limit+0x14>)
   802b4:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
   802b6:	4b04      	ldr	r3, [pc, #16]	; (802c8 <ili9341_set_bottom_right_limit+0x18>)
   802b8:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(true);
   802ba:	2001      	movs	r0, #1
   802bc:	4b03      	ldr	r3, [pc, #12]	; (802cc <ili9341_set_bottom_right_limit+0x1c>)
   802be:	4798      	blx	r3
   802c0:	bd08      	pop	{r3, pc}
   802c2:	bf00      	nop
   802c4:	20070a38 	.word	0x20070a38
   802c8:	20070a3a 	.word	0x20070a3a
   802cc:	00080199 	.word	0x00080199

000802d0 <ili9341_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
   802d0:	b510      	push	{r4, lr}
	limit_start_x = start_x;
   802d2:	4c06      	ldr	r4, [pc, #24]	; (802ec <ili9341_set_limits+0x1c>)
   802d4:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
   802d6:	4806      	ldr	r0, [pc, #24]	; (802f0 <ili9341_set_limits+0x20>)
   802d8:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
   802da:	4906      	ldr	r1, [pc, #24]	; (802f4 <ili9341_set_limits+0x24>)
   802dc:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
   802de:	4a06      	ldr	r2, [pc, #24]	; (802f8 <ili9341_set_limits+0x28>)
   802e0:	8013      	strh	r3, [r2, #0]

	ili9341_send_draw_limits(true);
   802e2:	2001      	movs	r0, #1
   802e4:	4b05      	ldr	r3, [pc, #20]	; (802fc <ili9341_set_limits+0x2c>)
   802e6:	4798      	blx	r3
   802e8:	bd10      	pop	{r4, pc}
   802ea:	bf00      	nop
   802ec:	20070a3c 	.word	0x20070a3c
   802f0:	20070a3e 	.word	0x20070a3e
   802f4:	20070a38 	.word	0x20070a38
   802f8:	20070a3a 	.word	0x20070a3a
   802fc:	00080199 	.word	0x00080199

00080300 <ili9341_write_gram>:
\endcode
 *
 * \param color The color pixel to write to the screen
 */
void ili9341_write_gram(ili9341_color_t color)
{
   80300:	b510      	push	{r4, lr}
   80302:	4604      	mov	r4, r0
	/* Only 16-bit color supported */
	Assert(sizeof(color) == 2);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   80304:	202c      	movs	r0, #44	; 0x2c
   80306:	4b0e      	ldr	r3, [pc, #56]	; (80340 <ili9341_write_gram+0x40>)
   80308:	4798      	blx	r3
	ili9341_send_byte(color);
   8030a:	b2e1      	uxtb	r1, r4
   8030c:	4a0d      	ldr	r2, [pc, #52]	; (80344 <ili9341_write_gram+0x44>)
   8030e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80310:	f413 7f00 	tst.w	r3, #512	; 0x200
   80314:	d0fb      	beq.n	8030e <ili9341_write_gram+0xe>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80316:	4b0b      	ldr	r3, [pc, #44]	; (80344 <ili9341_write_gram+0x44>)
   80318:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(color >> 8);
   8031a:	0a24      	lsrs	r4, r4, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8031c:	461a      	mov	r2, r3
   8031e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80320:	f413 7f00 	tst.w	r3, #512	; 0x200
   80324:	d0fb      	beq.n	8031e <ili9341_write_gram+0x1e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80326:	4b07      	ldr	r3, [pc, #28]	; (80344 <ili9341_write_gram+0x44>)
   80328:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8032a:	461a      	mov	r2, r3
   8032c:	6913      	ldr	r3, [r2, #16]
   8032e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80332:	d0fb      	beq.n	8032c <ili9341_write_gram+0x2c>
   80334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80338:	4b03      	ldr	r3, [pc, #12]	; (80348 <ili9341_write_gram+0x48>)
   8033a:	631a      	str	r2, [r3, #48]	; 0x30
   8033c:	bd10      	pop	{r4, pc}
   8033e:	bf00      	nop
   80340:	00080161 	.word	0x00080161
   80344:	40008000 	.word	0x40008000
   80348:	400e1200 	.word	0x400e1200

0008034c <ili9341_copy_pixels_to_screen>:
 *
 * \param pixels Pointer to the pixel data
 * \param count Number of pixels to copy to the screen
 */
void ili9341_copy_pixels_to_screen(const ili9341_color_t *pixels, uint32_t count)
{
   8034c:	b570      	push	{r4, r5, r6, lr}
   8034e:	4604      	mov	r4, r0
   80350:	460e      	mov	r6, r1
	const ili9341_color_t *pixel = pixels;

	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   80352:	202c      	movs	r0, #44	; 0x2c
   80354:	4b10      	ldr	r3, [pc, #64]	; (80398 <ili9341_copy_pixels_to_screen+0x4c>)
   80356:	4798      	blx	r3
	pdc_disable_transfer(SPI_DMA, PERIPH_PTCR_TXTEN);
#  elif UC3
	pdca_disable(CONF_ILI9341_PDCA_CHANNEL);
#  endif
#else
	while (count--) {
   80358:	b1a6      	cbz	r6, 80384 <ili9341_copy_pixels_to_screen+0x38>
   8035a:	1e75      	subs	r5, r6, #1
   8035c:	1ea0      	subs	r0, r4, #2
   8035e:	4b0f      	ldr	r3, [pc, #60]	; (8039c <ili9341_copy_pixels_to_screen+0x50>)
		ili9341_send_byte(*pixel);
   80360:	7881      	ldrb	r1, [r0, #2]
   80362:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80364:	f412 7f00 	tst.w	r2, #512	; 0x200
   80368:	d0fb      	beq.n	80362 <ili9341_copy_pixels_to_screen+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8036a:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
   8036c:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   80370:	0a09      	lsrs	r1, r1, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80372:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80374:	f412 7f00 	tst.w	r2, #512	; 0x200
   80378:	d0fb      	beq.n	80372 <ili9341_copy_pixels_to_screen+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8037a:	60d9      	str	r1, [r3, #12]
	while (count--) {
   8037c:	3d01      	subs	r5, #1
   8037e:	f1b5 3fff 	cmp.w	r5, #4294967295
   80382:	d1ed      	bne.n	80360 <ili9341_copy_pixels_to_screen+0x14>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80384:	4a05      	ldr	r2, [pc, #20]	; (8039c <ili9341_copy_pixels_to_screen+0x50>)
   80386:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80388:	f413 7f00 	tst.w	r3, #512	; 0x200
   8038c:	d0fb      	beq.n	80386 <ili9341_copy_pixels_to_screen+0x3a>
   8038e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80392:	4b03      	ldr	r3, [pc, #12]	; (803a0 <ili9341_copy_pixels_to_screen+0x54>)
   80394:	631a      	str	r2, [r3, #48]	; 0x30
   80396:	bd70      	pop	{r4, r5, r6, pc}
   80398:	00080161 	.word	0x00080161
   8039c:	40008000 	.word	0x40008000
   803a0:	400e1200 	.word	0x400e1200

000803a4 <ili9341_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9341_duplicate_pixel(const ili9341_color_t color, uint32_t count)
{
   803a4:	b538      	push	{r3, r4, r5, lr}
   803a6:	4604      	mov	r4, r0
   803a8:	460d      	mov	r5, r1
	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   803aa:	202c      	movs	r0, #44	; 0x2c
   803ac:	4b0f      	ldr	r3, [pc, #60]	; (803ec <ili9341_duplicate_pixel+0x48>)
   803ae:	4798      	blx	r3
	pdc_disable_transfer(SPI_DMA, PERIPH_PTCR_TXTEN);
#  elif UC3
	pdca_disable(CONF_ILI9341_PDCA_CHANNEL);
#  endif
#else
	while (count--) {
   803b0:	b18d      	cbz	r5, 803d6 <ili9341_duplicate_pixel+0x32>
   803b2:	1e69      	subs	r1, r5, #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803b4:	0a25      	lsrs	r5, r4, #8
		ili9341_send_byte(color);
   803b6:	b2e4      	uxtb	r4, r4
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   803b8:	4b0d      	ldr	r3, [pc, #52]	; (803f0 <ili9341_duplicate_pixel+0x4c>)
   803ba:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   803bc:	f412 7f00 	tst.w	r2, #512	; 0x200
   803c0:	d0fb      	beq.n	803ba <ili9341_duplicate_pixel+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803c2:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   803c4:	691a      	ldr	r2, [r3, #16]
   803c6:	f412 7f00 	tst.w	r2, #512	; 0x200
   803ca:	d0fb      	beq.n	803c4 <ili9341_duplicate_pixel+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803cc:	60dd      	str	r5, [r3, #12]
	while (count--) {
   803ce:	3901      	subs	r1, #1
   803d0:	f1b1 3fff 	cmp.w	r1, #4294967295
   803d4:	d1f1      	bne.n	803ba <ili9341_duplicate_pixel+0x16>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   803d6:	4a06      	ldr	r2, [pc, #24]	; (803f0 <ili9341_duplicate_pixel+0x4c>)
   803d8:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   803da:	f413 7f00 	tst.w	r3, #512	; 0x200
   803de:	d0fb      	beq.n	803d8 <ili9341_duplicate_pixel+0x34>
   803e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   803e4:	4b03      	ldr	r3, [pc, #12]	; (803f4 <ili9341_duplicate_pixel+0x50>)
   803e6:	631a      	str	r2, [r3, #48]	; 0x30
   803e8:	bd38      	pop	{r3, r4, r5, pc}
   803ea:	bf00      	nop
   803ec:	00080161 	.word	0x00080161
   803f0:	40008000 	.word	0x40008000
   803f4:	400e1200 	.word	0x400e1200

000803f8 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
   803f8:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
   803fa:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
   803fe:	f000 0301 	and.w	r3, r0, #1
		madctl &= ~(1 << 6);
   80402:	2b00      	cmp	r3, #0
   80404:	bf0c      	ite	eq
   80406:	2448      	moveq	r4, #72	; 0x48
   80408:	2408      	movne	r4, #8
	}

	if (flags & ILI9341_FLIP_Y) {
   8040a:	f010 0f02 	tst.w	r0, #2
		madctl |= 1 << 7;
   8040e:	bf18      	it	ne
   80410:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
   80414:	f010 0f04 	tst.w	r0, #4
		madctl |= 1 << 5;
   80418:	bf18      	it	ne
   8041a:	f044 0420 	orrne.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
   8041e:	2036      	movs	r0, #54	; 0x36
   80420:	4b09      	ldr	r3, [pc, #36]	; (80448 <ili9341_set_orientation+0x50>)
   80422:	4798      	blx	r3
   80424:	4a09      	ldr	r2, [pc, #36]	; (8044c <ili9341_set_orientation+0x54>)
   80426:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80428:	f413 7f00 	tst.w	r3, #512	; 0x200
   8042c:	d0fb      	beq.n	80426 <ili9341_set_orientation+0x2e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8042e:	4b07      	ldr	r3, [pc, #28]	; (8044c <ili9341_set_orientation+0x54>)
   80430:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80432:	461a      	mov	r2, r3
   80434:	6913      	ldr	r3, [r2, #16]
   80436:	f413 7f00 	tst.w	r3, #512	; 0x200
   8043a:	d0fb      	beq.n	80434 <ili9341_set_orientation+0x3c>
   8043c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80440:	4b03      	ldr	r3, [pc, #12]	; (80450 <ili9341_set_orientation+0x58>)
   80442:	631a      	str	r2, [r3, #48]	; 0x30
   80444:	bd10      	pop	{r4, pc}
   80446:	bf00      	nop
   80448:	00080161 	.word	0x00080161
   8044c:	40008000 	.word	0x40008000
   80450:	400e1200 	.word	0x400e1200

00080454 <ili9341_init>:
{
   80454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80458:	b084      	sub	sp, #16
	struct spi_device device = {
   8045a:	2500      	movs	r5, #0
   8045c:	ae04      	add	r6, sp, #16
   8045e:	f846 5d04 	str.w	r5, [r6, #-4]!
	spi_master_init(CONF_ILI9341_SPI);
   80462:	4ca6      	ldr	r4, [pc, #664]	; (806fc <ili9341_init+0x2a8>)
   80464:	4620      	mov	r0, r4
   80466:	4ba6      	ldr	r3, [pc, #664]	; (80700 <ili9341_init+0x2ac>)
   80468:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags,
   8046a:	9500      	str	r5, [sp, #0]
   8046c:	4ba5      	ldr	r3, [pc, #660]	; (80704 <ili9341_init+0x2b0>)
   8046e:	462a      	mov	r2, r5
   80470:	4631      	mov	r1, r6
   80472:	4620      	mov	r0, r4
   80474:	4ea4      	ldr	r6, [pc, #656]	; (80708 <ili9341_init+0x2b4>)
   80476:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80478:	2301      	movs	r3, #1
   8047a:	6023      	str	r3, [r4, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8047c:	60e5      	str	r5, [r4, #12]
   8047e:	f504 2459 	add.w	r4, r4, #888832	; 0xd9000
   80482:	f504 7400 	add.w	r4, r4, #512	; 0x200
   80486:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   8048a:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(10);
   8048c:	f64e 2060 	movw	r0, #60000	; 0xea60
   80490:	4d9e      	ldr	r5, [pc, #632]	; (8070c <ili9341_init+0x2b8>)
   80492:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80494:	6366      	str	r6, [r4, #52]	; 0x34
	delay_ms(10);
   80496:	f64e 2060 	movw	r0, #60000	; 0xea60
   8049a:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8049c:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(150);
   8049e:	f8df 827c 	ldr.w	r8, [pc, #636]	; 8071c <ili9341_init+0x2c8>
   804a2:	4640      	mov	r0, r8
   804a4:	47a8      	blx	r5
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
   804a6:	2011      	movs	r0, #17
   804a8:	4e99      	ldr	r6, [pc, #612]	; (80710 <ili9341_init+0x2bc>)
   804aa:	47b0      	blx	r6
   804ac:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
   804b0:	6327      	str	r7, [r4, #48]	; 0x30
	delay_ms(150);
   804b2:	4640      	mov	r0, r8
   804b4:	47a8      	blx	r5
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
   804b6:	2029      	movs	r0, #41	; 0x29
   804b8:	47b0      	blx	r6
   804ba:	6327      	str	r7, [r4, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
   804bc:	20cd      	movs	r0, #205	; 0xcd
   804be:	47b0      	blx	r6
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804c0:	4a8e      	ldr	r2, [pc, #568]	; (806fc <ili9341_init+0x2a8>)
   804c2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   804c8:	d0fb      	beq.n	804c2 <ili9341_init+0x6e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804ca:	2239      	movs	r2, #57	; 0x39
   804cc:	4b8b      	ldr	r3, [pc, #556]	; (806fc <ili9341_init+0x2a8>)
   804ce:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804d0:	461a      	mov	r2, r3
   804d2:	6913      	ldr	r3, [r2, #16]
   804d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   804d8:	d0fb      	beq.n	804d2 <ili9341_init+0x7e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804da:	222c      	movs	r2, #44	; 0x2c
   804dc:	4b87      	ldr	r3, [pc, #540]	; (806fc <ili9341_init+0x2a8>)
   804de:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804e0:	461a      	mov	r2, r3
   804e2:	6913      	ldr	r3, [r2, #16]
   804e4:	f413 7f00 	tst.w	r3, #512	; 0x200
   804e8:	d0fb      	beq.n	804e2 <ili9341_init+0x8e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804ea:	2200      	movs	r2, #0
   804ec:	4b83      	ldr	r3, [pc, #524]	; (806fc <ili9341_init+0x2a8>)
   804ee:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804f0:	461a      	mov	r2, r3
   804f2:	6913      	ldr	r3, [r2, #16]
   804f4:	f413 7f00 	tst.w	r3, #512	; 0x200
   804f8:	d0fb      	beq.n	804f2 <ili9341_init+0x9e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804fa:	2234      	movs	r2, #52	; 0x34
   804fc:	4b7f      	ldr	r3, [pc, #508]	; (806fc <ili9341_init+0x2a8>)
   804fe:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80500:	461a      	mov	r2, r3
   80502:	6913      	ldr	r3, [r2, #16]
   80504:	f413 7f00 	tst.w	r3, #512	; 0x200
   80508:	d0fb      	beq.n	80502 <ili9341_init+0xae>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8050a:	2202      	movs	r2, #2
   8050c:	4b7b      	ldr	r3, [pc, #492]	; (806fc <ili9341_init+0x2a8>)
   8050e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80510:	461a      	mov	r2, r3
   80512:	6913      	ldr	r3, [r2, #16]
   80514:	f413 7f00 	tst.w	r3, #512	; 0x200
   80518:	d0fb      	beq.n	80512 <ili9341_init+0xbe>
   8051a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8051e:	4b7d      	ldr	r3, [pc, #500]	; (80714 <ili9341_init+0x2c0>)
   80520:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
   80522:	20cf      	movs	r0, #207	; 0xcf
   80524:	4b7a      	ldr	r3, [pc, #488]	; (80710 <ili9341_init+0x2bc>)
   80526:	4798      	blx	r3
   80528:	4a74      	ldr	r2, [pc, #464]	; (806fc <ili9341_init+0x2a8>)
   8052a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8052c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80530:	d0fb      	beq.n	8052a <ili9341_init+0xd6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80532:	2200      	movs	r2, #0
   80534:	4b71      	ldr	r3, [pc, #452]	; (806fc <ili9341_init+0x2a8>)
   80536:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80538:	461a      	mov	r2, r3
   8053a:	6913      	ldr	r3, [r2, #16]
   8053c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80540:	d0fb      	beq.n	8053a <ili9341_init+0xe6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80542:	22aa      	movs	r2, #170	; 0xaa
   80544:	4b6d      	ldr	r3, [pc, #436]	; (806fc <ili9341_init+0x2a8>)
   80546:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80548:	461a      	mov	r2, r3
   8054a:	6913      	ldr	r3, [r2, #16]
   8054c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80550:	d0fb      	beq.n	8054a <ili9341_init+0xf6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80552:	22b0      	movs	r2, #176	; 0xb0
   80554:	4b69      	ldr	r3, [pc, #420]	; (806fc <ili9341_init+0x2a8>)
   80556:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80558:	461a      	mov	r2, r3
   8055a:	6913      	ldr	r3, [r2, #16]
   8055c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80560:	d0fb      	beq.n	8055a <ili9341_init+0x106>
   80562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80566:	4b6b      	ldr	r3, [pc, #428]	; (80714 <ili9341_init+0x2c0>)
   80568:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
   8056a:	20f7      	movs	r0, #247	; 0xf7
   8056c:	4b68      	ldr	r3, [pc, #416]	; (80710 <ili9341_init+0x2bc>)
   8056e:	4798      	blx	r3
   80570:	4a62      	ldr	r2, [pc, #392]	; (806fc <ili9341_init+0x2a8>)
   80572:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80574:	f413 7f00 	tst.w	r3, #512	; 0x200
   80578:	d0fb      	beq.n	80572 <ili9341_init+0x11e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8057a:	2230      	movs	r2, #48	; 0x30
   8057c:	4b5f      	ldr	r3, [pc, #380]	; (806fc <ili9341_init+0x2a8>)
   8057e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80580:	461a      	mov	r2, r3
   80582:	6913      	ldr	r3, [r2, #16]
   80584:	f413 7f00 	tst.w	r3, #512	; 0x200
   80588:	d0fb      	beq.n	80582 <ili9341_init+0x12e>
   8058a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8058e:	4b61      	ldr	r3, [pc, #388]	; (80714 <ili9341_init+0x2c0>)
   80590:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
   80592:	20c0      	movs	r0, #192	; 0xc0
   80594:	4b5e      	ldr	r3, [pc, #376]	; (80710 <ili9341_init+0x2bc>)
   80596:	4798      	blx	r3
   80598:	4a58      	ldr	r2, [pc, #352]	; (806fc <ili9341_init+0x2a8>)
   8059a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8059c:	f413 7f00 	tst.w	r3, #512	; 0x200
   805a0:	d0fb      	beq.n	8059a <ili9341_init+0x146>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805a2:	2225      	movs	r2, #37	; 0x25
   805a4:	4b55      	ldr	r3, [pc, #340]	; (806fc <ili9341_init+0x2a8>)
   805a6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805a8:	461a      	mov	r2, r3
   805aa:	6913      	ldr	r3, [r2, #16]
   805ac:	f413 7f00 	tst.w	r3, #512	; 0x200
   805b0:	d0fb      	beq.n	805aa <ili9341_init+0x156>
   805b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   805b6:	4b57      	ldr	r3, [pc, #348]	; (80714 <ili9341_init+0x2c0>)
   805b8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
   805ba:	20c1      	movs	r0, #193	; 0xc1
   805bc:	4b54      	ldr	r3, [pc, #336]	; (80710 <ili9341_init+0x2bc>)
   805be:	4798      	blx	r3
   805c0:	4a4e      	ldr	r2, [pc, #312]	; (806fc <ili9341_init+0x2a8>)
   805c2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   805c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   805c8:	d0fb      	beq.n	805c2 <ili9341_init+0x16e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805ca:	2211      	movs	r2, #17
   805cc:	4b4b      	ldr	r3, [pc, #300]	; (806fc <ili9341_init+0x2a8>)
   805ce:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805d0:	461a      	mov	r2, r3
   805d2:	6913      	ldr	r3, [r2, #16]
   805d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   805d8:	d0fb      	beq.n	805d2 <ili9341_init+0x17e>
   805da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   805de:	4b4d      	ldr	r3, [pc, #308]	; (80714 <ili9341_init+0x2c0>)
   805e0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
   805e2:	20c5      	movs	r0, #197	; 0xc5
   805e4:	4b4a      	ldr	r3, [pc, #296]	; (80710 <ili9341_init+0x2bc>)
   805e6:	4798      	blx	r3
   805e8:	4a44      	ldr	r2, [pc, #272]	; (806fc <ili9341_init+0x2a8>)
   805ea:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   805ec:	f413 7f00 	tst.w	r3, #512	; 0x200
   805f0:	d0fb      	beq.n	805ea <ili9341_init+0x196>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805f2:	225c      	movs	r2, #92	; 0x5c
   805f4:	4b41      	ldr	r3, [pc, #260]	; (806fc <ili9341_init+0x2a8>)
   805f6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805f8:	461a      	mov	r2, r3
   805fa:	6913      	ldr	r3, [r2, #16]
   805fc:	f413 7f00 	tst.w	r3, #512	; 0x200
   80600:	d0fb      	beq.n	805fa <ili9341_init+0x1a6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80602:	224c      	movs	r2, #76	; 0x4c
   80604:	4b3d      	ldr	r3, [pc, #244]	; (806fc <ili9341_init+0x2a8>)
   80606:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80608:	461a      	mov	r2, r3
   8060a:	6913      	ldr	r3, [r2, #16]
   8060c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80610:	d0fb      	beq.n	8060a <ili9341_init+0x1b6>
   80612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80616:	4b3f      	ldr	r3, [pc, #252]	; (80714 <ili9341_init+0x2c0>)
   80618:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
   8061a:	20c7      	movs	r0, #199	; 0xc7
   8061c:	4b3c      	ldr	r3, [pc, #240]	; (80710 <ili9341_init+0x2bc>)
   8061e:	4798      	blx	r3
   80620:	4a36      	ldr	r2, [pc, #216]	; (806fc <ili9341_init+0x2a8>)
   80622:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80624:	f413 7f00 	tst.w	r3, #512	; 0x200
   80628:	d0fb      	beq.n	80622 <ili9341_init+0x1ce>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8062a:	2294      	movs	r2, #148	; 0x94
   8062c:	4b33      	ldr	r3, [pc, #204]	; (806fc <ili9341_init+0x2a8>)
   8062e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80630:	461a      	mov	r2, r3
   80632:	6913      	ldr	r3, [r2, #16]
   80634:	f413 7f00 	tst.w	r3, #512	; 0x200
   80638:	d0fb      	beq.n	80632 <ili9341_init+0x1de>
   8063a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8063e:	4b35      	ldr	r3, [pc, #212]	; (80714 <ili9341_init+0x2c0>)
   80640:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
   80642:	20e8      	movs	r0, #232	; 0xe8
   80644:	4b32      	ldr	r3, [pc, #200]	; (80710 <ili9341_init+0x2bc>)
   80646:	4798      	blx	r3
   80648:	4a2c      	ldr	r2, [pc, #176]	; (806fc <ili9341_init+0x2a8>)
   8064a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8064c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80650:	d0fb      	beq.n	8064a <ili9341_init+0x1f6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80652:	2285      	movs	r2, #133	; 0x85
   80654:	4b29      	ldr	r3, [pc, #164]	; (806fc <ili9341_init+0x2a8>)
   80656:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80658:	461a      	mov	r2, r3
   8065a:	6913      	ldr	r3, [r2, #16]
   8065c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80660:	d0fb      	beq.n	8065a <ili9341_init+0x206>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80662:	2201      	movs	r2, #1
   80664:	4b25      	ldr	r3, [pc, #148]	; (806fc <ili9341_init+0x2a8>)
   80666:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80668:	461a      	mov	r2, r3
   8066a:	6913      	ldr	r3, [r2, #16]
   8066c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80670:	d0fb      	beq.n	8066a <ili9341_init+0x216>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80672:	2278      	movs	r2, #120	; 0x78
   80674:	4b21      	ldr	r3, [pc, #132]	; (806fc <ili9341_init+0x2a8>)
   80676:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80678:	461a      	mov	r2, r3
   8067a:	6913      	ldr	r3, [r2, #16]
   8067c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80680:	d0fb      	beq.n	8067a <ili9341_init+0x226>
   80682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80686:	4b23      	ldr	r3, [pc, #140]	; (80714 <ili9341_init+0x2c0>)
   80688:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
   8068a:	20ea      	movs	r0, #234	; 0xea
   8068c:	4b20      	ldr	r3, [pc, #128]	; (80710 <ili9341_init+0x2bc>)
   8068e:	4798      	blx	r3
   80690:	4a1a      	ldr	r2, [pc, #104]	; (806fc <ili9341_init+0x2a8>)
   80692:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80694:	f413 7f00 	tst.w	r3, #512	; 0x200
   80698:	d0fb      	beq.n	80692 <ili9341_init+0x23e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8069a:	2200      	movs	r2, #0
   8069c:	4b17      	ldr	r3, [pc, #92]	; (806fc <ili9341_init+0x2a8>)
   8069e:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   806a0:	461a      	mov	r2, r3
   806a2:	6913      	ldr	r3, [r2, #16]
   806a4:	f413 7f00 	tst.w	r3, #512	; 0x200
   806a8:	d0fb      	beq.n	806a2 <ili9341_init+0x24e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   806aa:	2200      	movs	r2, #0
   806ac:	4b13      	ldr	r3, [pc, #76]	; (806fc <ili9341_init+0x2a8>)
   806ae:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   806b0:	461a      	mov	r2, r3
   806b2:	6913      	ldr	r3, [r2, #16]
   806b4:	f413 7f00 	tst.w	r3, #512	; 0x200
   806b8:	d0fb      	beq.n	806b2 <ili9341_init+0x25e>
   806ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806be:	4b15      	ldr	r3, [pc, #84]	; (80714 <ili9341_init+0x2c0>)
   806c0:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
   806c2:	203a      	movs	r0, #58	; 0x3a
   806c4:	4b12      	ldr	r3, [pc, #72]	; (80710 <ili9341_init+0x2bc>)
   806c6:	4798      	blx	r3
   806c8:	4a0c      	ldr	r2, [pc, #48]	; (806fc <ili9341_init+0x2a8>)
   806ca:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   806cc:	f413 7f00 	tst.w	r3, #512	; 0x200
   806d0:	d0fb      	beq.n	806ca <ili9341_init+0x276>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   806d2:	2205      	movs	r2, #5
   806d4:	4b09      	ldr	r3, [pc, #36]	; (806fc <ili9341_init+0x2a8>)
   806d6:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   806d8:	461a      	mov	r2, r3
   806da:	6913      	ldr	r3, [r2, #16]
   806dc:	f413 7f00 	tst.w	r3, #512	; 0x200
   806e0:	d0fb      	beq.n	806da <ili9341_init+0x286>
   806e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806e6:	4b0b      	ldr	r3, [pc, #44]	; (80714 <ili9341_init+0x2c0>)
   806e8:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
   806ea:	2000      	movs	r0, #0
   806ec:	4b0a      	ldr	r3, [pc, #40]	; (80718 <ili9341_init+0x2c4>)
   806ee:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
   806f0:	23f0      	movs	r3, #240	; 0xf0
   806f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   806f6:	2100      	movs	r1, #0
   806f8:	4608      	mov	r0, r1
   806fa:	e011      	b.n	80720 <ili9341_init+0x2cc>
   806fc:	40008000 	.word	0x40008000
   80700:	00080de5 	.word	0x00080de5
   80704:	007a1200 	.word	0x007a1200
   80708:	00080e39 	.word	0x00080e39
   8070c:	20070001 	.word	0x20070001
   80710:	00080161 	.word	0x00080161
   80714:	400e1200 	.word	0x400e1200
   80718:	000803f9 	.word	0x000803f9
   8071c:	000dbba0 	.word	0x000dbba0
   80720:	4c02      	ldr	r4, [pc, #8]	; (8072c <ili9341_init+0x2d8>)
   80722:	47a0      	blx	r4
}
   80724:	b004      	add	sp, #16
   80726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8072a:	bf00      	nop
   8072c:	000802d1 	.word	0x000802d1

00080730 <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
   80730:	b410      	push	{r4}
   80732:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   80736:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
   8073a:	4c0d      	ldr	r4, [pc, #52]	; (80770 <gfx_set_clipping+0x40>)
   8073c:	f9b4 4000 	ldrsh.w	r4, [r4]
   80740:	4294      	cmp	r4, r2
		max_x = gfx_width - 1;
   80742:	bfdc      	itt	le
   80744:	f104 32ff 	addle.w	r2, r4, #4294967295
   80748:	b212      	sxthle	r2, r2
	}

	if (max_y >= gfx_height) {
   8074a:	4c0a      	ldr	r4, [pc, #40]	; (80774 <gfx_set_clipping+0x44>)
   8074c:	f9b4 4000 	ldrsh.w	r4, [r4]
   80750:	429c      	cmp	r4, r3
		max_y = gfx_height - 1;
   80752:	bfdc      	itt	le
   80754:	f104 34ff 	addle.w	r4, r4, #4294967295
   80758:	b223      	sxthle	r3, r4
	}

	gfx_min_x = min_x;
   8075a:	4c07      	ldr	r4, [pc, #28]	; (80778 <gfx_set_clipping+0x48>)
   8075c:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
   8075e:	4807      	ldr	r0, [pc, #28]	; (8077c <gfx_set_clipping+0x4c>)
   80760:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
   80762:	4907      	ldr	r1, [pc, #28]	; (80780 <gfx_set_clipping+0x50>)
   80764:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
   80766:	4a07      	ldr	r2, [pc, #28]	; (80784 <gfx_set_clipping+0x54>)
   80768:	8013      	strh	r3, [r2, #0]
#endif
}
   8076a:	bc10      	pop	{r4}
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop
   80770:	200712f4 	.word	0x200712f4
   80774:	200712fe 	.word	0x200712fe
   80778:	200712f8 	.word	0x200712f8
   8077c:	200712fc 	.word	0x200712fc
   80780:	200712f6 	.word	0x200712f6
   80784:	200712fa 	.word	0x200712fa

00080788 <gfx_get_width>:

gfx_coord_t gfx_get_width(void)
{
	return gfx_width;
}
   80788:	4b01      	ldr	r3, [pc, #4]	; (80790 <gfx_get_width+0x8>)
   8078a:	f9b3 0000 	ldrsh.w	r0, [r3]
   8078e:	4770      	bx	lr
   80790:	200712f4 	.word	0x200712f4

00080794 <gfx_get_height>:

gfx_coord_t gfx_get_height(void)
{
	return gfx_height;
}
   80794:	4b01      	ldr	r3, [pc, #4]	; (8079c <gfx_get_height+0x8>)
   80796:	f9b3 0000 	ldrsh.w	r0, [r3]
   8079a:	4770      	bx	lr
   8079c:	200712fe 	.word	0x200712fe

000807a0 <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
   807a0:	2a00      	cmp	r2, #0
   807a2:	d05c      	beq.n	8085e <gfx_generic_draw_filled_rect+0xbe>
{
   807a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   807a6:	461c      	mov	r4, r3
   807a8:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
   807aa:	2b00      	cmp	r3, #0
   807ac:	d048      	beq.n	80840 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
   807ae:	2a00      	cmp	r2, #0
   807b0:	db47      	blt.n	80842 <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
   807b2:	2c00      	cmp	r4, #0
   807b4:	db4c      	blt.n	80850 <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   807b6:	4b2a      	ldr	r3, [pc, #168]	; (80860 <gfx_generic_draw_filled_rect+0xc0>)
   807b8:	f9b3 6000 	ldrsh.w	r6, [r3]
   807bc:	42b0      	cmp	r0, r6
   807be:	dc3f      	bgt.n	80840 <gfx_generic_draw_filled_rect+0xa0>
   807c0:	4b28      	ldr	r3, [pc, #160]	; (80864 <gfx_generic_draw_filled_rect+0xc4>)
   807c2:	f9b3 7000 	ldrsh.w	r7, [r3]
   807c6:	42b9      	cmp	r1, r7
   807c8:	dc3a      	bgt.n	80840 <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
   807ca:	4b27      	ldr	r3, [pc, #156]	; (80868 <gfx_generic_draw_filled_rect+0xc8>)
   807cc:	f9b3 3000 	ldrsh.w	r3, [r3]
   807d0:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   807d2:	429a      	cmp	r2, r3
   807d4:	dd34      	ble.n	80840 <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
   807d6:	4a25      	ldr	r2, [pc, #148]	; (8086c <gfx_generic_draw_filled_rect+0xcc>)
   807d8:	f9b2 2000 	ldrsh.w	r2, [r2]
   807dc:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
   807e0:	4596      	cmp	lr, r2
   807e2:	dd2d      	ble.n	80840 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
   807e4:	4298      	cmp	r0, r3
   807e6:	da03      	bge.n	807f0 <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
   807e8:	4405      	add	r5, r0
   807ea:	1aed      	subs	r5, r5, r3
   807ec:	b22d      	sxth	r5, r5
		x = gfx_min_x;
   807ee:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
   807f0:	4291      	cmp	r1, r2
   807f2:	da03      	bge.n	807fc <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
   807f4:	440c      	add	r4, r1
   807f6:	1aa4      	subs	r4, r4, r2
   807f8:	b224      	sxth	r4, r4
		y = gfx_min_y;
   807fa:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
   807fc:	fa1f fc80 	uxth.w	ip, r0
   80800:	eb0c 0205 	add.w	r2, ip, r5
   80804:	3a01      	subs	r2, #1
   80806:	b212      	sxth	r2, r2
	y2 = y + height - 1;
   80808:	fa1f fe81 	uxth.w	lr, r1
   8080c:	eb0e 0304 	add.w	r3, lr, r4
   80810:	3b01      	subs	r3, #1
   80812:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
   80814:	4296      	cmp	r6, r2
   80816:	da04      	bge.n	80822 <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
   80818:	1c75      	adds	r5, r6, #1
   8081a:	eba5 050c 	sub.w	r5, r5, ip
   8081e:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
   80820:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
   80822:	429f      	cmp	r7, r3
   80824:	da04      	bge.n	80830 <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
   80826:	1c7c      	adds	r4, r7, #1
   80828:	eba4 040e 	sub.w	r4, r4, lr
   8082c:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
   8082e:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
   80830:	4e0f      	ldr	r6, [pc, #60]	; (80870 <gfx_generic_draw_filled_rect+0xd0>)
   80832:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
   80834:	fb04 f105 	mul.w	r1, r4, r5
   80838:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   8083c:	4b0d      	ldr	r3, [pc, #52]	; (80874 <gfx_generic_draw_filled_rect+0xd4>)
   8083e:	4798      	blx	r3
   80840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
   80842:	b293      	uxth	r3, r2
   80844:	425d      	negs	r5, r3
   80846:	b22d      	sxth	r5, r5
		x -= width - 1;
   80848:	3001      	adds	r0, #1
   8084a:	4418      	add	r0, r3
   8084c:	b200      	sxth	r0, r0
   8084e:	e7b0      	b.n	807b2 <gfx_generic_draw_filled_rect+0x12>
		height = -height;
   80850:	b2a3      	uxth	r3, r4
   80852:	425c      	negs	r4, r3
   80854:	b224      	sxth	r4, r4
		y -= height - 1;
   80856:	3101      	adds	r1, #1
   80858:	4419      	add	r1, r3
   8085a:	b209      	sxth	r1, r1
   8085c:	e7ab      	b.n	807b6 <gfx_generic_draw_filled_rect+0x16>
   8085e:	4770      	bx	lr
   80860:	200712f6 	.word	0x200712f6
   80864:	200712fa 	.word	0x200712fa
   80868:	200712f8 	.word	0x200712f8
   8086c:	200712fc 	.word	0x200712fc
   80870:	000802d1 	.word	0x000802d1
   80874:	000803a5 	.word	0x000803a5

00080878 <gfx_generic_put_bitmap>:

void gfx_generic_put_bitmap(const struct gfx_bitmap *bmp,
		gfx_coord_t map_x, gfx_coord_t map_y,
		gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height)
{
   80878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8087c:	b083      	sub	sp, #12
   8087e:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
   80882:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
   80886:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
#if XMEGA
	gfx_color_t PROGMEM_PTR_T progmem_pixmap;
#endif

	/* Nothing to do if width or height is zero. */
	if ((width == 0) || (height == 0)) {
   8088a:	2c00      	cmp	r4, #0
   8088c:	d068      	beq.n	80960 <gfx_generic_put_bitmap+0xe8>
   8088e:	4688      	mov	r8, r1
   80890:	461f      	mov	r7, r3
   80892:	2e00      	cmp	r6, #0
   80894:	d064      	beq.n	80960 <gfx_generic_put_bitmap+0xe8>
	Assert(width > 0);
	Assert(height > 0);

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   80896:	4b55      	ldr	r3, [pc, #340]	; (809ec <gfx_generic_put_bitmap+0x174>)
   80898:	f9b3 3000 	ldrsh.w	r3, [r3]
   8089c:	42bb      	cmp	r3, r7
   8089e:	db5f      	blt.n	80960 <gfx_generic_put_bitmap+0xe8>
   808a0:	4953      	ldr	r1, [pc, #332]	; (809f0 <gfx_generic_put_bitmap+0x178>)
   808a2:	f9b1 e000 	ldrsh.w	lr, [r1]
   808a6:	45ae      	cmp	lr, r5
   808a8:	db5a      	blt.n	80960 <gfx_generic_put_bitmap+0xe8>
			((x + width) <= gfx_min_x) ||
   808aa:	4952      	ldr	r1, [pc, #328]	; (809f4 <gfx_generic_put_bitmap+0x17c>)
   808ac:	f9b1 1000 	ldrsh.w	r1, [r1]
   808b0:	eb07 0c04 	add.w	ip, r7, r4
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   808b4:	458c      	cmp	ip, r1
   808b6:	dd53      	ble.n	80960 <gfx_generic_put_bitmap+0xe8>
			((y + height) <= gfx_min_y)) {
   808b8:	f8df c150 	ldr.w	ip, [pc, #336]	; 80a0c <gfx_generic_put_bitmap+0x194>
   808bc:	f9bc c000 	ldrsh.w	ip, [ip]
   808c0:	eb05 0906 	add.w	r9, r5, r6
			((x + width) <= gfx_min_x) ||
   808c4:	45e1      	cmp	r9, ip
   808c6:	dd4b      	ble.n	80960 <gfx_generic_put_bitmap+0xe8>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
   808c8:	428f      	cmp	r7, r1
   808ca:	da0c      	bge.n	808e6 <gfx_generic_put_bitmap+0x6e>
		width -= gfx_min_x - x;
   808cc:	b2bf      	uxth	r7, r7
   808ce:	fa1f f981 	uxth.w	r9, r1
   808d2:	eba7 0a09 	sub.w	sl, r7, r9
   808d6:	4454      	add	r4, sl
   808d8:	b224      	sxth	r4, r4
		map_x += gfx_min_x - x;
   808da:	44c8      	add	r8, r9
   808dc:	eba8 0807 	sub.w	r8, r8, r7
   808e0:	fa0f f888 	sxth.w	r8, r8
		x = gfx_min_x;
   808e4:	460f      	mov	r7, r1
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
   808e6:	4565      	cmp	r5, ip
   808e8:	da0a      	bge.n	80900 <gfx_generic_put_bitmap+0x88>
		height -= gfx_min_y - y;
   808ea:	b2ad      	uxth	r5, r5
   808ec:	fa1f f18c 	uxth.w	r1, ip
   808f0:	eba5 0901 	sub.w	r9, r5, r1
   808f4:	444e      	add	r6, r9
   808f6:	b236      	sxth	r6, r6
		map_y += gfx_min_y - y;
   808f8:	440a      	add	r2, r1
   808fa:	1b52      	subs	r2, r2, r5
   808fc:	b212      	sxth	r2, r2
		y = gfx_min_y;
   808fe:	4665      	mov	r5, ip
	}

#endif

	/* Compute bottom right point. */
	x2 = x + width - 1;
   80900:	fa1f fa87 	uxth.w	sl, r7
   80904:	eb0a 0c04 	add.w	ip, sl, r4
   80908:	f10c 3cff 	add.w	ip, ip, #4294967295
   8090c:	fa0f fc8c 	sxth.w	ip, ip
	y2 = y + height - 1;
   80910:	fa1f f985 	uxth.w	r9, r5
   80914:	eb09 0106 	add.w	r1, r9, r6
   80918:	3901      	subs	r1, #1
   8091a:	b209      	sxth	r1, r1

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
   8091c:	4563      	cmp	r3, ip
   8091e:	da04      	bge.n	8092a <gfx_generic_put_bitmap+0xb2>
		x2 = gfx_max_x;
		width = x2 - x + 1;
   80920:	1c5c      	adds	r4, r3, #1
   80922:	eba4 040a 	sub.w	r4, r4, sl
   80926:	b224      	sxth	r4, r4
		x2 = gfx_max_x;
   80928:	469c      	mov	ip, r3
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
   8092a:	458e      	cmp	lr, r1
   8092c:	da05      	bge.n	8093a <gfx_generic_put_bitmap+0xc2>
		y2 = gfx_max_y;
		height = y2 - y + 1;
   8092e:	f10e 0601 	add.w	r6, lr, #1
   80932:	eba6 0609 	sub.w	r6, r6, r9
   80936:	b236      	sxth	r6, r6
		y2 = gfx_max_y;
   80938:	4671      	mov	r1, lr
	}
#endif

	switch (bmp->type) {
   8093a:	7903      	ldrb	r3, [r0, #4]
   8093c:	2b03      	cmp	r3, #3
   8093e:	d80f      	bhi.n	80960 <gfx_generic_put_bitmap+0xe8>
   80940:	e8df f003 	tbb	[pc, r3]
   80944:	11202002 	.word	0x11202002
	case GFX_BITMAP_SOLID:
		gfx_draw_filled_rect(x, y, x2 - x, y2 - y, bmp->data.color);
   80948:	eba1 0309 	sub.w	r3, r1, r9
   8094c:	ebac 020a 	sub.w	r2, ip, sl
   80950:	8901      	ldrh	r1, [r0, #8]
   80952:	9100      	str	r1, [sp, #0]
   80954:	b21b      	sxth	r3, r3
   80956:	b212      	sxth	r2, r2
   80958:	4629      	mov	r1, r5
   8095a:	4638      	mov	r0, r7
   8095c:	4c26      	ldr	r4, [pc, #152]	; (809f8 <gfx_generic_put_bitmap+0x180>)
   8095e:	47a0      	blx	r4
		}

		break;
#endif
	}
}
   80960:	b003      	add	sp, #12
   80962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (gfx_ext_draw_func != NULL) {
   80966:	4b25      	ldr	r3, [pc, #148]	; (809fc <gfx_generic_put_bitmap+0x184>)
   80968:	681c      	ldr	r4, [r3, #0]
   8096a:	2c00      	cmp	r4, #0
   8096c:	d0f8      	beq.n	80960 <gfx_generic_put_bitmap+0xe8>
			gfx_ext_draw_func(bmp, x, y, x2 - x, y2 - y);
   8096e:	ebac 030a 	sub.w	r3, ip, sl
   80972:	eba1 0209 	sub.w	r2, r1, r9
   80976:	b212      	sxth	r2, r2
   80978:	9200      	str	r2, [sp, #0]
   8097a:	b21b      	sxth	r3, r3
   8097c:	462a      	mov	r2, r5
   8097e:	4639      	mov	r1, r7
   80980:	47a0      	blx	r4
   80982:	e7ed      	b.n	80960 <gfx_generic_put_bitmap+0xe8>
	gfx_coord_t map_width = bmp->width;
   80984:	f9b0 a000 	ldrsh.w	sl, [r0]
		pixmap = bmp->data.pixmap;
   80988:	6883      	ldr	r3, [r0, #8]
		pixmap += map_x;
   8098a:	eb03 0b48 	add.w	fp, r3, r8, lsl #1
		if (map_y > 0) {
   8098e:	2a00      	cmp	r2, #0
			pixmap += (uint32_t)map_y * map_width;
   80990:	bfc4      	itt	gt
   80992:	ea4f 034a 	movgt.w	r3, sl, lsl #1
   80996:	fb02 bb03 	mlagt	fp, r2, r3, fp
		gfx_set_bottom_right_limit(x2, y2);
   8099a:	4660      	mov	r0, ip
   8099c:	4b18      	ldr	r3, [pc, #96]	; (80a00 <gfx_generic_put_bitmap+0x188>)
   8099e:	4798      	blx	r3
		if ((map_width == width) && (map_x == 0)) {
   809a0:	4554      	cmp	r4, sl
   809a2:	d015      	beq.n	809d0 <gfx_generic_put_bitmap+0x158>
			while (lines_left > 0) {
   809a4:	2e00      	cmp	r6, #0
   809a6:	dddb      	ble.n	80960 <gfx_generic_put_bitmap+0xe8>
				pixmap += map_width;
   809a8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   809ac:	444e      	add	r6, r9
   809ae:	b236      	sxth	r6, r6
				gfx_set_top_left_limit(x, y);
   809b0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80a04 <gfx_generic_put_bitmap+0x18c>
				gfx_copy_pixels_to_screen(pixmap, width);
   809b4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80a08 <gfx_generic_put_bitmap+0x190>
				gfx_set_top_left_limit(x, y);
   809b8:	4629      	mov	r1, r5
   809ba:	4638      	mov	r0, r7
   809bc:	47c8      	blx	r9
   809be:	3501      	adds	r5, #1
   809c0:	b22d      	sxth	r5, r5
				gfx_copy_pixels_to_screen(pixmap, width);
   809c2:	4621      	mov	r1, r4
   809c4:	4658      	mov	r0, fp
   809c6:	47c0      	blx	r8
				pixmap += map_width;
   809c8:	44d3      	add	fp, sl
			while (lines_left > 0) {
   809ca:	42b5      	cmp	r5, r6
   809cc:	d1f4      	bne.n	809b8 <gfx_generic_put_bitmap+0x140>
   809ce:	e7c7      	b.n	80960 <gfx_generic_put_bitmap+0xe8>
		if ((map_width == width) && (map_x == 0)) {
   809d0:	f1b8 0f00 	cmp.w	r8, #0
   809d4:	d1e6      	bne.n	809a4 <gfx_generic_put_bitmap+0x12c>
			gfx_set_top_left_limit(x, y);
   809d6:	4629      	mov	r1, r5
   809d8:	4638      	mov	r0, r7
   809da:	4b0a      	ldr	r3, [pc, #40]	; (80a04 <gfx_generic_put_bitmap+0x18c>)
   809dc:	4798      	blx	r3
			gfx_copy_pixels_to_screen(pixmap,
   809de:	fb06 f104 	mul.w	r1, r6, r4
   809e2:	4658      	mov	r0, fp
   809e4:	4b08      	ldr	r3, [pc, #32]	; (80a08 <gfx_generic_put_bitmap+0x190>)
   809e6:	4798      	blx	r3
   809e8:	e7ba      	b.n	80960 <gfx_generic_put_bitmap+0xe8>
   809ea:	bf00      	nop
   809ec:	200712f6 	.word	0x200712f6
   809f0:	200712fa 	.word	0x200712fa
   809f4:	200712f8 	.word	0x200712f8
   809f8:	000807a1 	.word	0x000807a1
   809fc:	20070a40 	.word	0x20070a40
   80a00:	000802b1 	.word	0x000802b1
   80a04:	00080291 	.word	0x00080291
   80a08:	0008034d 	.word	0x0008034d
   80a0c:	200712fc 	.word	0x200712fc

00080a10 <gfx_generic_draw_bitmap_tiled>:
{
   80a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a14:	b087      	sub	sp, #28
   80a16:	4681      	mov	r9, r0
   80a18:	4608      	mov	r0, r1
   80a1a:	4611      	mov	r1, r2
   80a1c:	4698      	mov	r8, r3
   80a1e:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   80a22:	9304      	str	r3, [sp, #16]
   80a24:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
   80a28:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
	if (bmp->type == GFX_BITMAP_SOLID) {
   80a2c:	f899 3004 	ldrb.w	r3, [r9, #4]
   80a30:	b1d3      	cbz	r3, 80a68 <gfx_generic_draw_bitmap_tiled+0x58>
	map_width = bmp->width;
   80a32:	f9b9 5000 	ldrsh.w	r5, [r9]
	map_height = bmp->height;
   80a36:	f9b9 7002 	ldrsh.w	r7, [r9, #2]
	while (start_x <= (x1 - map_width)) {
   80a3a:	1b43      	subs	r3, r0, r5
   80a3c:	459b      	cmp	fp, r3
   80a3e:	dc04      	bgt.n	80a4a <gfx_generic_draw_bitmap_tiled+0x3a>
   80a40:	44ab      	add	fp, r5
   80a42:	fa0f fb8b 	sxth.w	fp, fp
   80a46:	459b      	cmp	fp, r3
   80a48:	ddfa      	ble.n	80a40 <gfx_generic_draw_bitmap_tiled+0x30>
	while (start_y <= (y1 - map_height)) {
   80a4a:	1bcb      	subs	r3, r1, r7
   80a4c:	429e      	cmp	r6, r3
   80a4e:	dc03      	bgt.n	80a58 <gfx_generic_draw_bitmap_tiled+0x48>
   80a50:	443e      	add	r6, r7
   80a52:	b236      	sxth	r6, r6
   80a54:	429e      	cmp	r6, r3
   80a56:	ddfb      	ble.n	80a50 <gfx_generic_draw_bitmap_tiled+0x40>
	for (index_y = start_y; index_y <= y2; index_y += map_height) {
   80a58:	9b04      	ldr	r3, [sp, #16]
   80a5a:	42b3      	cmp	r3, r6
   80a5c:	db11      	blt.n	80a82 <gfx_generic_draw_bitmap_tiled+0x72>
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80a5e:	f8cd b014 	str.w	fp, [sp, #20]
			gfx_put_bitmap(bmp, 0, 0, index_x, index_y, map_width,
   80a62:	f8df a054 	ldr.w	sl, [pc, #84]	; 80ab8 <gfx_generic_draw_bitmap_tiled+0xa8>
   80a66:	e021      	b.n	80aac <gfx_generic_draw_bitmap_tiled+0x9c>
		gfx_draw_filled_rect(x1, y1, x2 - x1 + 1, y2 - y1 + 1,
   80a68:	9b04      	ldr	r3, [sp, #16]
   80a6a:	1a9b      	subs	r3, r3, r2
   80a6c:	3301      	adds	r3, #1
   80a6e:	eba8 0200 	sub.w	r2, r8, r0
   80a72:	3201      	adds	r2, #1
   80a74:	f8b9 4008 	ldrh.w	r4, [r9, #8]
   80a78:	9400      	str	r4, [sp, #0]
   80a7a:	b21b      	sxth	r3, r3
   80a7c:	b212      	sxth	r2, r2
   80a7e:	4c0d      	ldr	r4, [pc, #52]	; (80ab4 <gfx_generic_draw_bitmap_tiled+0xa4>)
   80a80:	47a0      	blx	r4
}
   80a82:	b007      	add	sp, #28
   80a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80a88:	9c05      	ldr	r4, [sp, #20]
			gfx_put_bitmap(bmp, 0, 0, index_x, index_y, map_width,
   80a8a:	9702      	str	r7, [sp, #8]
   80a8c:	9501      	str	r5, [sp, #4]
   80a8e:	9600      	str	r6, [sp, #0]
   80a90:	4623      	mov	r3, r4
   80a92:	2200      	movs	r2, #0
   80a94:	4611      	mov	r1, r2
   80a96:	4648      	mov	r0, r9
   80a98:	47d0      	blx	sl
   80a9a:	442c      	add	r4, r5
   80a9c:	b224      	sxth	r4, r4
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80a9e:	45a0      	cmp	r8, r4
   80aa0:	daf3      	bge.n	80a8a <gfx_generic_draw_bitmap_tiled+0x7a>
   80aa2:	443e      	add	r6, r7
   80aa4:	b236      	sxth	r6, r6
	for (index_y = start_y; index_y <= y2; index_y += map_height) {
   80aa6:	9b04      	ldr	r3, [sp, #16]
   80aa8:	429e      	cmp	r6, r3
   80aaa:	dcea      	bgt.n	80a82 <gfx_generic_draw_bitmap_tiled+0x72>
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80aac:	45d8      	cmp	r8, fp
   80aae:	daeb      	bge.n	80a88 <gfx_generic_draw_bitmap_tiled+0x78>
   80ab0:	e7f7      	b.n	80aa2 <gfx_generic_draw_bitmap_tiled+0x92>
   80ab2:	bf00      	nop
   80ab4:	000807a1 	.word	0x000807a1
   80ab8:	00080879 	.word	0x00080879

00080abc <gfx_ili9341_draw_pixel>:

	return color;
}

void gfx_ili9341_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_color_t color)
{
   80abc:	b538      	push	{r3, r4, r5, lr}
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
   80abe:	4c0f      	ldr	r4, [pc, #60]	; (80afc <gfx_ili9341_draw_pixel+0x40>)
   80ac0:	f9b4 4000 	ldrsh.w	r4, [r4]
   80ac4:	4284      	cmp	r4, r0
   80ac6:	dc0e      	bgt.n	80ae6 <gfx_ili9341_draw_pixel+0x2a>
   80ac8:	4b0d      	ldr	r3, [pc, #52]	; (80b00 <gfx_ili9341_draw_pixel+0x44>)
   80aca:	f9b3 3000 	ldrsh.w	r3, [r3]
   80ace:	4283      	cmp	r3, r0
   80ad0:	db09      	blt.n	80ae6 <gfx_ili9341_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
   80ad2:	4b0c      	ldr	r3, [pc, #48]	; (80b04 <gfx_ili9341_draw_pixel+0x48>)
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
   80ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
   80ad8:	428b      	cmp	r3, r1
   80ada:	dc04      	bgt.n	80ae6 <gfx_ili9341_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
   80adc:	4b0a      	ldr	r3, [pc, #40]	; (80b08 <gfx_ili9341_draw_pixel+0x4c>)
   80ade:	f9b3 3000 	ldrsh.w	r3, [r3]
   80ae2:	428b      	cmp	r3, r1
   80ae4:	da00      	bge.n	80ae8 <gfx_ili9341_draw_pixel+0x2c>
   80ae6:	bd38      	pop	{r3, r4, r5, pc}
   80ae8:	4614      	mov	r4, r2
		return;
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
   80aea:	460b      	mov	r3, r1
   80aec:	4602      	mov	r2, r0
   80aee:	4d07      	ldr	r5, [pc, #28]	; (80b0c <gfx_ili9341_draw_pixel+0x50>)
   80af0:	47a8      	blx	r5
	ili9341_write_gram(color);
   80af2:	4620      	mov	r0, r4
   80af4:	4b06      	ldr	r3, [pc, #24]	; (80b10 <gfx_ili9341_draw_pixel+0x54>)
   80af6:	4798      	blx	r3
   80af8:	e7f5      	b.n	80ae6 <gfx_ili9341_draw_pixel+0x2a>
   80afa:	bf00      	nop
   80afc:	200712f8 	.word	0x200712f8
   80b00:	200712f6 	.word	0x200712f6
   80b04:	200712fc 	.word	0x200712fc
   80b08:	200712fa 	.word	0x200712fa
   80b0c:	000802d1 	.word	0x000802d1
   80b10:	00080301 	.word	0x00080301

00080b14 <gfx_ili9341_init>:
	gfx_set_top_left_limit(x, y);
	ili9341_write_gram(color);
}

void gfx_ili9341_init(void)
{
   80b14:	b570      	push	{r4, r5, r6, lr}
   80b16:	b082      	sub	sp, #8
	/* initialize globals */
	gfx_width = ILI9341_DEFAULT_WIDTH;
   80b18:	4c0f      	ldr	r4, [pc, #60]	; (80b58 <gfx_ili9341_init+0x44>)
   80b1a:	f44f 73a0 	mov.w	r3, #320	; 0x140
   80b1e:	8023      	strh	r3, [r4, #0]
	gfx_height = ILI9341_DEFAULT_HEIGHT;
   80b20:	4d0e      	ldr	r5, [pc, #56]	; (80b5c <gfx_ili9341_init+0x48>)
   80b22:	23f0      	movs	r3, #240	; 0xf0
   80b24:	802b      	strh	r3, [r5, #0]

	ili9341_init();
   80b26:	4b0e      	ldr	r3, [pc, #56]	; (80b60 <gfx_ili9341_init+0x4c>)
   80b28:	4798      	blx	r3
   80b2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80b2e:	4b0d      	ldr	r3, [pc, #52]	; (80b64 <gfx_ili9341_init+0x50>)
   80b30:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
   80b32:	f9b5 3000 	ldrsh.w	r3, [r5]
   80b36:	f9b4 2000 	ldrsh.w	r2, [r4]
   80b3a:	2100      	movs	r1, #0
   80b3c:	4608      	mov	r0, r1
   80b3e:	4e0a      	ldr	r6, [pc, #40]	; (80b68 <gfx_ili9341_init+0x54>)
   80b40:	47b0      	blx	r6

	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height,
   80b42:	f9b5 3000 	ldrsh.w	r3, [r5]
   80b46:	f9b4 2000 	ldrsh.w	r2, [r4]
   80b4a:	2000      	movs	r0, #0
   80b4c:	9000      	str	r0, [sp, #0]
   80b4e:	4601      	mov	r1, r0
   80b50:	4c06      	ldr	r4, [pc, #24]	; (80b6c <gfx_ili9341_init+0x58>)
   80b52:	47a0      	blx	r4
			GFX_COLOR_BLACK);
}
   80b54:	b002      	add	sp, #8
   80b56:	bd70      	pop	{r4, r5, r6, pc}
   80b58:	200712f4 	.word	0x200712f4
   80b5c:	200712fe 	.word	0x200712fe
   80b60:	00080455 	.word	0x00080455
   80b64:	400e1200 	.word	0x400e1200
   80b68:	00080731 	.word	0x00080731
   80b6c:	000807a1 	.word	0x000807a1

00080b70 <gfx_draw_char>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
   80b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b74:	b085      	sub	sp, #20
   80b76:	4604      	mov	r4, r0
   80b78:	460f      	mov	r7, r1
   80b7a:	4691      	mov	r9, r2
   80b7c:	469a      	mov	sl, r3
   80b7e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   80b82:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   80b86:	9302      	str	r3, [sp, #8]
	if (bg_color != GFX_COLOR_TRANSPARENT) {
   80b88:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   80b8c:	4299      	cmp	r1, r3
   80b8e:	d008      	beq.n	80ba2 <gfx_draw_char+0x32>
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
   80b90:	f89a 3009 	ldrb.w	r3, [sl, #9]
   80b94:	f89a 2008 	ldrb.w	r2, [sl, #8]
   80b98:	9100      	str	r1, [sp, #0]
   80b9a:	4649      	mov	r1, r9
   80b9c:	4638      	mov	r0, r7
   80b9e:	4d26      	ldr	r5, [pc, #152]	; (80c38 <gfx_draw_char+0xc8>)
   80ba0:	47a8      	blx	r5
	}

	switch (font->type) {
   80ba2:	f89a 3000 	ldrb.w	r3, [sl]
   80ba6:	b113      	cbz	r3, 80bae <gfx_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
   80ba8:	b005      	add	sp, #20
   80baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   80bae:	f89a 3008 	ldrb.w	r3, [sl, #8]
   80bb2:	08da      	lsrs	r2, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   80bb4:	f013 0f07 	tst.w	r3, #7
		char_row_size++;
   80bb8:	bf18      	it	ne
   80bba:	3201      	addne	r2, #1
	glyph_data_offset = char_row_size * font->height *
   80bbc:	f89a 3009 	ldrb.w	r3, [sl, #9]
			((uint8_t)ch - font->first_char);
   80bc0:	f89a 800a 	ldrb.w	r8, [sl, #10]
   80bc4:	eba4 0808 	sub.w	r8, r4, r8
	glyph_data_offset = char_row_size * font->height *
   80bc8:	fb08 f803 	mul.w	r8, r8, r3
   80bcc:	fb08 f802 	mul.w	r8, r8, r2
	glyph_data = font->data.progmem + glyph_data_offset;
   80bd0:	fa1f f888 	uxth.w	r8, r8
   80bd4:	f8da 2004 	ldr.w	r2, [sl, #4]
   80bd8:	4490      	add	r8, r2
   80bda:	3b01      	subs	r3, #1
   80bdc:	b2db      	uxtb	r3, r3
   80bde:	f109 0201 	add.w	r2, r9, #1
   80be2:	4413      	add	r3, r2
   80be4:	b29b      	uxth	r3, r3
   80be6:	9303      	str	r3, [sp, #12]
				gfx_draw_pixel(inc_x, inc_y, color);
   80be8:	f8df b050 	ldr.w	fp, [pc, #80]	; 80c3c <gfx_draw_char+0xcc>
   80bec:	e01c      	b.n	80c28 <gfx_draw_char+0xb8>
			glyph_byte <<= 1;
   80bee:	0064      	lsls	r4, r4, #1
   80bf0:	b2e4      	uxtb	r4, r4
   80bf2:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
   80bf4:	b2eb      	uxtb	r3, r5
   80bf6:	429e      	cmp	r6, r3
   80bf8:	d90d      	bls.n	80c16 <gfx_draw_char+0xa6>
   80bfa:	19e8      	adds	r0, r5, r7
   80bfc:	b200      	sxth	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   80bfe:	f015 0f07 	tst.w	r5, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   80c02:	bf08      	it	eq
   80c04:	f818 4b01 	ldrbeq.w	r4, [r8], #1
			if ((glyph_byte & 0x80)) {
   80c08:	f014 0f80 	tst.w	r4, #128	; 0x80
   80c0c:	d0ef      	beq.n	80bee <gfx_draw_char+0x7e>
				gfx_draw_pixel(inc_x, inc_y, color);
   80c0e:	9a02      	ldr	r2, [sp, #8]
   80c10:	4649      	mov	r1, r9
   80c12:	47d8      	blx	fp
   80c14:	e7eb      	b.n	80bee <gfx_draw_char+0x7e>
   80c16:	f109 0901 	add.w	r9, r9, #1
   80c1a:	fa1f f389 	uxth.w	r3, r9
		inc_y += 1;
   80c1e:	fa0f f983 	sxth.w	r9, r3
	} while (rows_left > 0);
   80c22:	9a03      	ldr	r2, [sp, #12]
   80c24:	429a      	cmp	r2, r3
   80c26:	d0bf      	beq.n	80ba8 <gfx_draw_char+0x38>
		uint8_t pixelsToDraw = font->width;
   80c28:	f89a 6008 	ldrb.w	r6, [sl, #8]
		for (i = 0; i < pixelsToDraw; i++) {
   80c2c:	2e00      	cmp	r6, #0
   80c2e:	d0f2      	beq.n	80c16 <gfx_draw_char+0xa6>
   80c30:	2500      	movs	r5, #0
   80c32:	462c      	mov	r4, r5
   80c34:	e7e1      	b.n	80bfa <gfx_draw_char+0x8a>
   80c36:	bf00      	nop
   80c38:	000807a1 	.word	0x000807a1
   80c3c:	00080abd 	.word	0x00080abd

00080c40 <gfx_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
   80c40:	b5f0      	push	{r4, r5, r6, r7, lr}
	gfx_coord_t font_width = font->width;
   80c42:	7a0f      	ldrb	r7, [r1, #8]
	gfx_coord_t font_height = font->height;
   80c44:	f891 e009 	ldrb.w	lr, [r1, #9]
   80c48:	fa0f f58e 	sxth.w	r5, lr

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
	gfx_coord_t x = 0;
   80c4c:	2100      	movs	r1, #0
	gfx_coord_t max_width = 1;
   80c4e:	2601      	movs	r6, #1

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
   80c50:	468c      	mov	ip, r1
   80c52:	e005      	b.n	80c60 <gfx_get_string_bounding_box+0x20>
			max_height += font_height;
   80c54:	4475      	add	r5, lr
   80c56:	b22d      	sxth	r5, r5
			x = 0;
   80c58:	4661      	mov	r1, ip
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
   80c5a:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   80c5e:	b154      	cbz	r4, 80c76 <gfx_get_string_bounding_box+0x36>
		if (*str == '\n') {
   80c60:	7804      	ldrb	r4, [r0, #0]
   80c62:	2c0a      	cmp	r4, #10
   80c64:	d0f6      	beq.n	80c54 <gfx_get_string_bounding_box+0x14>
		} else if (*str == '\r') {
   80c66:	2c0d      	cmp	r4, #13
   80c68:	d0f7      	beq.n	80c5a <gfx_get_string_bounding_box+0x1a>
			x += font_width;
   80c6a:	4439      	add	r1, r7
   80c6c:	b209      	sxth	r1, r1
   80c6e:	428e      	cmp	r6, r1
   80c70:	bfb8      	it	lt
   80c72:	460e      	movlt	r6, r1
   80c74:	e7f1      	b.n	80c5a <gfx_get_string_bounding_box+0x1a>

	/* Return values through references */
	*width = max_width;
   80c76:	8016      	strh	r6, [r2, #0]
	*height = max_height;
   80c78:	801d      	strh	r5, [r3, #0]
   80c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080c7c <gfx_draw_string_aligned>:
{
   80c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c80:	b087      	sub	sp, #28
   80c82:	4606      	mov	r6, r0
   80c84:	9103      	str	r1, [sp, #12]
   80c86:	4690      	mov	r8, r2
   80c88:	461f      	mov	r7, r3
   80c8a:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
   80c8e:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
   80c92:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
   80c96:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   80c9a:	9302      	str	r3, [sp, #8]
	gfx_get_string_bounding_box(str, font, &bounding_x, &bounding_y);
   80c9c:	ab05      	add	r3, sp, #20
   80c9e:	f10d 0216 	add.w	r2, sp, #22
   80ca2:	4639      	mov	r1, r7
   80ca4:	4d44      	ldr	r5, [pc, #272]	; (80db8 <gfx_draw_string_aligned+0x13c>)
   80ca6:	47a8      	blx	r5
	if (text_pos & TEXT_POS_CENTER_Y) {
   80ca8:	f014 0f02 	tst.w	r4, #2
   80cac:	d019      	beq.n	80ce2 <gfx_draw_string_aligned+0x66>
		y -= bounding_y / 2;
   80cae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   80cb2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80cb6:	eba8 0863 	sub.w	r8, r8, r3, asr #1
   80cba:	fa0f f888 	sxth.w	r8, r8
	if (text_pos & TEXT_POS_CENTER_X) {
   80cbe:	f014 0f10 	tst.w	r4, #16
   80cc2:	d018      	beq.n	80cf6 <gfx_draw_string_aligned+0x7a>
		x -= bounding_x / 2;
   80cc4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   80cc8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80ccc:	9a03      	ldr	r2, [sp, #12]
   80cce:	eba2 0363 	sub.w	r3, r2, r3, asr #1
   80cd2:	b21b      	sxth	r3, r3
   80cd4:	9303      	str	r3, [sp, #12]
	while (*str != '\0') {
   80cd6:	7833      	ldrb	r3, [r6, #0]
   80cd8:	2b00      	cmp	r3, #0
   80cda:	d06a      	beq.n	80db2 <gfx_draw_string_aligned+0x136>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
   80cdc:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80dbc <gfx_draw_string_aligned+0x140>
   80ce0:	e064      	b.n	80dac <gfx_draw_string_aligned+0x130>
	} else if (text_pos & TEXT_POS_BOTTOM) {
   80ce2:	f014 0f04 	tst.w	r4, #4
   80ce6:	d0ea      	beq.n	80cbe <gfx_draw_string_aligned+0x42>
		y -= bounding_y;
   80ce8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   80cec:	eba8 0803 	sub.w	r8, r8, r3
   80cf0:	fa0f f888 	sxth.w	r8, r8
   80cf4:	e7e3      	b.n	80cbe <gfx_draw_string_aligned+0x42>
	} else if (text_pos & TEXT_POS_RIGHT) {
   80cf6:	f014 0f20 	tst.w	r4, #32
   80cfa:	d0ec      	beq.n	80cd6 <gfx_draw_string_aligned+0x5a>
		x -= bounding_x;
   80cfc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   80d00:	9a03      	ldr	r2, [sp, #12]
   80d02:	1ad3      	subs	r3, r2, r3
   80d04:	b21b      	sxth	r3, r3
   80d06:	9303      	str	r3, [sp, #12]
   80d08:	e7e5      	b.n	80cd6 <gfx_draw_string_aligned+0x5a>
				str++;
   80d0a:	3501      	adds	r5, #1
		if (text_align == TEXT_ALIGN_CENTER) {
   80d0c:	9a02      	ldr	r2, [sp, #8]
   80d0e:	2a02      	cmp	r2, #2
   80d10:	d014      	beq.n	80d3c <gfx_draw_string_aligned+0xc0>
		} else if (text_align == TEXT_ALIGN_RIGHT) {
   80d12:	9a02      	ldr	r2, [sp, #8]
   80d14:	2a01      	cmp	r2, #1
   80d16:	d021      	beq.n	80d5c <gfx_draw_string_aligned+0xe0>
		gfx_coord_t curr_line_x = x;
   80d18:	9c03      	ldr	r4, [sp, #12]
   80d1a:	464b      	mov	r3, r9
   80d1c:	46a9      	mov	r9, r5
   80d1e:	461d      	mov	r5, r3
   80d20:	e029      	b.n	80d76 <gfx_draw_string_aligned+0xfa>
		} while (*(++str) != '\0');
   80d22:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   80d26:	2a00      	cmp	r2, #0
   80d28:	d0f0      	beq.n	80d0c <gfx_draw_string_aligned+0x90>
			if (*str == '\n') {
   80d2a:	782a      	ldrb	r2, [r5, #0]
   80d2c:	2a0a      	cmp	r2, #10
   80d2e:	d0ec      	beq.n	80d0a <gfx_draw_string_aligned+0x8e>
			} else if (*str != '\r') {
   80d30:	2a0d      	cmp	r2, #13
   80d32:	d0f6      	beq.n	80d22 <gfx_draw_string_aligned+0xa6>
				curr_line_width += font->width;
   80d34:	7a3a      	ldrb	r2, [r7, #8]
   80d36:	4413      	add	r3, r2
   80d38:	b21b      	sxth	r3, r3
   80d3a:	e7f2      	b.n	80d22 <gfx_draw_string_aligned+0xa6>
			curr_line_x += (bounding_x / 2) - (curr_line_width / 2);
   80d3c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   80d40:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   80d44:	9a03      	ldr	r2, [sp, #12]
   80d46:	eb02 0464 	add.w	r4, r2, r4, asr #1
   80d4a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80d4e:	eba4 0463 	sub.w	r4, r4, r3, asr #1
   80d52:	b224      	sxth	r4, r4
   80d54:	464b      	mov	r3, r9
   80d56:	46a9      	mov	r9, r5
   80d58:	461d      	mov	r5, r3
   80d5a:	e00c      	b.n	80d76 <gfx_draw_string_aligned+0xfa>
			curr_line_x += bounding_x - curr_line_width;
   80d5c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
   80d60:	9a03      	ldr	r2, [sp, #12]
   80d62:	4414      	add	r4, r2
   80d64:	1ae4      	subs	r4, r4, r3
   80d66:	b224      	sxth	r4, r4
   80d68:	464b      	mov	r3, r9
   80d6a:	46a9      	mov	r9, r5
   80d6c:	461d      	mov	r5, r3
   80d6e:	e002      	b.n	80d76 <gfx_draw_string_aligned+0xfa>
		} while (*(++curr_line_text) != '\0');
   80d70:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   80d74:	b17b      	cbz	r3, 80d96 <gfx_draw_string_aligned+0x11a>
			if (*curr_line_text == '\n') {
   80d76:	7830      	ldrb	r0, [r6, #0]
   80d78:	280a      	cmp	r0, #10
   80d7a:	d00c      	beq.n	80d96 <gfx_draw_string_aligned+0x11a>
			} else if (*curr_line_text != '\r') {
   80d7c:	280d      	cmp	r0, #13
   80d7e:	d0f7      	beq.n	80d70 <gfx_draw_string_aligned+0xf4>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
   80d80:	f8cd a004 	str.w	sl, [sp, #4]
   80d84:	9500      	str	r5, [sp, #0]
   80d86:	463b      	mov	r3, r7
   80d88:	4642      	mov	r2, r8
   80d8a:	4621      	mov	r1, r4
   80d8c:	47d8      	blx	fp
				curr_line_x += font->width;
   80d8e:	7a3b      	ldrb	r3, [r7, #8]
   80d90:	441c      	add	r4, r3
   80d92:	b224      	sxth	r4, r4
   80d94:	e7ec      	b.n	80d70 <gfx_draw_string_aligned+0xf4>
   80d96:	462b      	mov	r3, r5
   80d98:	464d      	mov	r5, r9
   80d9a:	4699      	mov	r9, r3
		y += font->height + 1;
   80d9c:	7a7b      	ldrb	r3, [r7, #9]
   80d9e:	3301      	adds	r3, #1
   80da0:	4498      	add	r8, r3
   80da2:	fa0f f888 	sxth.w	r8, r8
	while (*str != '\0') {
   80da6:	782b      	ldrb	r3, [r5, #0]
   80da8:	b11b      	cbz	r3, 80db2 <gfx_draw_string_aligned+0x136>
   80daa:	462e      	mov	r6, r5
   80dac:	4635      	mov	r5, r6
   80dae:	2300      	movs	r3, #0
   80db0:	e7bb      	b.n	80d2a <gfx_draw_string_aligned+0xae>
}
   80db2:	b007      	add	sp, #28
   80db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80db8:	00080c41 	.word	0x00080c41
   80dbc:	00080b71 	.word	0x00080b71

00080dc0 <gfx_draw_string>:
{
   80dc0:	b510      	push	{r4, lr}
   80dc2:	b084      	sub	sp, #16
	gfx_draw_string_aligned(str, x, y, font, bg_color, text_color,
   80dc4:	2400      	movs	r4, #0
   80dc6:	9403      	str	r4, [sp, #12]
   80dc8:	2408      	movs	r4, #8
   80dca:	9402      	str	r4, [sp, #8]
   80dcc:	f8bd 401c 	ldrh.w	r4, [sp, #28]
   80dd0:	9401      	str	r4, [sp, #4]
   80dd2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   80dd6:	9400      	str	r4, [sp, #0]
   80dd8:	4c01      	ldr	r4, [pc, #4]	; (80de0 <gfx_draw_string+0x20>)
   80dda:	47a0      	blx	r4
}
   80ddc:	b004      	add	sp, #16
   80dde:	bd10      	pop	{r4, pc}
   80de0:	00080c7d 	.word	0x00080c7d

00080de4 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
   80de4:	b510      	push	{r4, lr}
   80de6:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
   80de8:	4b10      	ldr	r3, [pc, #64]	; (80e2c <spi_master_init+0x48>)
   80dea:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80dec:	2380      	movs	r3, #128	; 0x80
   80dee:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80df0:	6863      	ldr	r3, [r4, #4]
   80df2:	f043 0301 	orr.w	r3, r3, #1
   80df6:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80df8:	6863      	ldr	r3, [r4, #4]
   80dfa:	f043 0310 	orr.w	r3, r3, #16
   80dfe:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80e00:	6863      	ldr	r3, [r4, #4]
   80e02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80e06:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
   80e08:	2100      	movs	r1, #0
   80e0a:	4620      	mov	r0, r4
   80e0c:	4b08      	ldr	r3, [pc, #32]	; (80e30 <spi_master_init+0x4c>)
   80e0e:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
   80e10:	6863      	ldr	r3, [r4, #4]
   80e12:	f023 0302 	bic.w	r3, r3, #2
   80e16:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80e18:	6863      	ldr	r3, [r4, #4]
   80e1a:	f023 0304 	bic.w	r3, r3, #4
   80e1e:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
   80e20:	2100      	movs	r1, #0
   80e22:	4620      	mov	r0, r4
   80e24:	4b03      	ldr	r3, [pc, #12]	; (80e34 <spi_master_init+0x50>)
   80e26:	4798      	blx	r3
   80e28:	bd10      	pop	{r4, pc}
   80e2a:	bf00      	nop
   80e2c:	00081df1 	.word	0x00081df1
   80e30:	00081e0d 	.word	0x00081e0d
   80e34:	00081e23 	.word	0x00081e23

00080e38 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
   80e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e3c:	4604      	mov	r4, r0
   80e3e:	460d      	mov	r5, r1
   80e40:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
   80e42:	4915      	ldr	r1, [pc, #84]	; (80e98 <spi_master_setup_device+0x60>)
   80e44:	4618      	mov	r0, r3
   80e46:	4b15      	ldr	r3, [pc, #84]	; (80e9c <spi_master_setup_device+0x64>)
   80e48:	4798      	blx	r3
   80e4a:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
   80e4c:	2300      	movs	r3, #0
   80e4e:	461a      	mov	r2, r3
   80e50:	6829      	ldr	r1, [r5, #0]
   80e52:	4620      	mov	r0, r4
   80e54:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80eb4 <spi_master_setup_device+0x7c>
   80e58:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
   80e5a:	2208      	movs	r2, #8
   80e5c:	6829      	ldr	r1, [r5, #0]
   80e5e:	4620      	mov	r0, r4
   80e60:	4b0f      	ldr	r3, [pc, #60]	; (80ea0 <spi_master_setup_device+0x68>)
   80e62:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
   80e64:	b2fa      	uxtb	r2, r7
   80e66:	6829      	ldr	r1, [r5, #0]
   80e68:	4620      	mov	r0, r4
   80e6a:	4b0e      	ldr	r3, [pc, #56]	; (80ea4 <spi_master_setup_device+0x6c>)
   80e6c:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
   80e6e:	2208      	movs	r2, #8
   80e70:	6829      	ldr	r1, [r5, #0]
   80e72:	4620      	mov	r0, r4
   80e74:	4b0c      	ldr	r3, [pc, #48]	; (80ea8 <spi_master_setup_device+0x70>)
   80e76:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
   80e78:	0872      	lsrs	r2, r6, #1
   80e7a:	6829      	ldr	r1, [r5, #0]
   80e7c:	4620      	mov	r0, r4
   80e7e:	4b0b      	ldr	r3, [pc, #44]	; (80eac <spi_master_setup_device+0x74>)
   80e80:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
   80e82:	f086 0201 	eor.w	r2, r6, #1
   80e86:	f002 0201 	and.w	r2, r2, #1
   80e8a:	6829      	ldr	r1, [r5, #0]
   80e8c:	4620      	mov	r0, r4
   80e8e:	4b08      	ldr	r3, [pc, #32]	; (80eb0 <spi_master_setup_device+0x78>)
   80e90:	4798      	blx	r3
   80e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e96:	bf00      	nop
   80e98:	0501bd00 	.word	0x0501bd00
   80e9c:	00081ecb 	.word	0x00081ecb
   80ea0:	00081eb7 	.word	0x00081eb7
   80ea4:	00081ee1 	.word	0x00081ee1
   80ea8:	00081e71 	.word	0x00081e71
   80eac:	00081e35 	.word	0x00081e35
   80eb0:	00081e53 	.word	0x00081e53
   80eb4:	00081f07 	.word	0x00081f07

00080eb8 <win_is_visible>:
 *
 * \retval true \a win is visible.
 * \retval false \a win is not visible.
 */
static bool win_is_visible(const struct win_window *win)
{
   80eb8:	4603      	mov	r3, r0
	/* Move up the window tree, search for unmapped windows. */
	do {
		/* Return false once an unmapped window is found. */
		if (!win->is_mapped) {
   80eba:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
   80ebe:	b110      	cbz	r0, 80ec6 <win_is_visible+0xe>
			return false;
		}

		win = win->parent;
   80ec0:	699b      	ldr	r3, [r3, #24]
	} while (win != NULL);
   80ec2:	2b00      	cmp	r3, #0
   80ec4:	d1f9      	bne.n	80eba <win_is_visible+0x2>
	/*
	 * If we arrived here, all windows were mapped, ergo visible on
	 * screen, although maybe covered by other windows.
	 */
	return true;
}
   80ec6:	4770      	bx	lr

00080ec8 <win_unlink>:
 * \param  win  Window to be unlinked from parent.
 */
static void win_unlink(struct win_window *win)
{
	/* If we are the only child, slightly easier handling. */
	if (win->next_sibling == win) {
   80ec8:	6a03      	ldr	r3, [r0, #32]
   80eca:	4298      	cmp	r0, r3
   80ecc:	d00f      	beq.n	80eee <win_unlink+0x26>
		win->parent->top_child = NULL;
	} else {
		/* If we are the top child, set the next child as new top. */
		if (win->parent->top_child == win) {
   80ece:	6982      	ldr	r2, [r0, #24]
   80ed0:	6a51      	ldr	r1, [r2, #36]	; 0x24
   80ed2:	4288      	cmp	r0, r1
			win->parent->top_child = win->next_sibling;
   80ed4:	bf08      	it	eq
   80ed6:	6253      	streq	r3, [r2, #36]	; 0x24
		}

		/* Remove ourselves from the linked list of children. */
		win->next_sibling->prev_sibling = win->prev_sibling;
   80ed8:	6a03      	ldr	r3, [r0, #32]
   80eda:	69c2      	ldr	r2, [r0, #28]
   80edc:	61da      	str	r2, [r3, #28]
		win->prev_sibling->next_sibling = win->next_sibling;
   80ede:	69c3      	ldr	r3, [r0, #28]
   80ee0:	6a02      	ldr	r2, [r0, #32]
   80ee2:	621a      	str	r2, [r3, #32]
	}

	/* Clean up, for consistency. */
	win->parent = NULL;
   80ee4:	2300      	movs	r3, #0
   80ee6:	6183      	str	r3, [r0, #24]
	win->next_sibling = NULL;
   80ee8:	6203      	str	r3, [r0, #32]
	win->prev_sibling = NULL;
   80eea:	61c3      	str	r3, [r0, #28]
   80eec:	4770      	bx	lr
		win->parent->top_child = NULL;
   80eee:	6983      	ldr	r3, [r0, #24]
   80ef0:	2200      	movs	r2, #0
   80ef2:	625a      	str	r2, [r3, #36]	; 0x24
   80ef4:	e7f6      	b.n	80ee4 <win_unlink+0x1c>

00080ef6 <win_add_top_child>:
 */
static void win_add_top_child(struct win_window *parent,
		struct win_window *child)
{
	/* If we are the first child, slightly easier handling. */
	if (parent->top_child == NULL) {
   80ef6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   80ef8:	b14b      	cbz	r3, 80f0e <win_add_top_child+0x18>
		/* We are the only child, so point to self. */
		child->next_sibling = child;
		child->prev_sibling = child;
	} else {
		/* Insert ourselves into the linked list at the top position. */
		child->next_sibling = parent->top_child;
   80efa:	620b      	str	r3, [r1, #32]
		child->prev_sibling = parent->top_child->prev_sibling;
   80efc:	6a42      	ldr	r2, [r0, #36]	; 0x24
   80efe:	69d2      	ldr	r2, [r2, #28]
   80f00:	61ca      	str	r2, [r1, #28]

		child->next_sibling->prev_sibling = child;
   80f02:	61d9      	str	r1, [r3, #28]
		child->prev_sibling->next_sibling = child;
   80f04:	69cb      	ldr	r3, [r1, #28]
   80f06:	6219      	str	r1, [r3, #32]
	}

	/* Parent-child link, putting child at top of Z stack. */
	parent->top_child = child;
   80f08:	6241      	str	r1, [r0, #36]	; 0x24
	child->parent = parent;
   80f0a:	6188      	str	r0, [r1, #24]
   80f0c:	4770      	bx	lr
		child->next_sibling = child;
   80f0e:	6209      	str	r1, [r1, #32]
		child->prev_sibling = child;
   80f10:	61c9      	str	r1, [r1, #28]
   80f12:	e7f9      	b.n	80f08 <win_add_top_child+0x12>

00080f14 <win_handle_event>:
 * \retval false No event handler present or event handler doesn't
 *      accept event.
 */
static bool win_handle_event(struct win_window *win,
		enum win_event_type type, const void *data)
{
   80f14:	b508      	push	{r3, lr}
	win_event_handler_t handler = win->attributes.event_handler;
   80f16:	68c3      	ldr	r3, [r0, #12]

	if (handler) {
   80f18:	b10b      	cbz	r3, 80f1e <win_handle_event+0xa>
		return handler(win, type, data);
   80f1a:	4798      	blx	r3
   80f1c:	bd08      	pop	{r3, pc}
	} else {
		return false;
   80f1e:	2000      	movs	r0, #0
	}
}
   80f20:	bd08      	pop	{r3, pc}
	...

00080f24 <win_queue_event>:
 * the queue, no extra work items will be added.
 *
 * \param  event  Event to add to the queue.
 */
static void win_queue_event(const struct win_event *event)
{
   80f24:	b4f0      	push	{r4, r5, r6, r7}
   80f26:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80f28:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80f2c:	fab3 f383 	clz	r3, r3
   80f30:	095b      	lsrs	r3, r3, #5
   80f32:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   80f34:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80f36:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80f3a:	2200      	movs	r2, #0
   80f3c:	4b16      	ldr	r3, [pc, #88]	; (80f98 <win_queue_event+0x74>)
   80f3e:	701a      	strb	r2, [r3, #0]
	return flags;
   80f40:	9f01      	ldr	r7, [sp, #4]
	 * different contexts.
	 */
	iflags = cpu_irq_save();

	/* Drop event if queue is full. */
	if (win_event_queue.free == 0) {
   80f42:	4b16      	ldr	r3, [pc, #88]	; (80f9c <win_queue_event+0x78>)
   80f44:	7c1c      	ldrb	r4, [r3, #16]
   80f46:	b96c      	cbnz	r4, 80f64 <win_queue_event+0x40>
		++win_num_dropped_events;
   80f48:	4a15      	ldr	r2, [pc, #84]	; (80fa0 <win_queue_event+0x7c>)
   80f4a:	6813      	ldr	r3, [r2, #0]
   80f4c:	3301      	adds	r3, #1
   80f4e:	6013      	str	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80f50:	b12f      	cbz	r7, 80f5e <win_queue_event+0x3a>
		cpu_irq_enable();
   80f52:	2201      	movs	r2, #1
   80f54:	4b10      	ldr	r3, [pc, #64]	; (80f98 <win_queue_event+0x74>)
   80f56:	701a      	strb	r2, [r3, #0]
   80f58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80f5c:	b662      	cpsie	i
		--(win_event_queue.free);
		++(win_event_queue.used);
	}

	cpu_irq_restore(iflags);
}
   80f5e:	b002      	add	sp, #8
   80f60:	bcf0      	pop	{r4, r5, r6, r7}
   80f62:	4770      	bx	lr
		if (win_event_queue.back == win_event_queue.end) {
   80f64:	4a0d      	ldr	r2, [pc, #52]	; (80f9c <win_queue_event+0x78>)
   80f66:	68d3      	ldr	r3, [r2, #12]
   80f68:	6852      	ldr	r2, [r2, #4]
   80f6a:	4293      	cmp	r3, r2
   80f6c:	d00f      	beq.n	80f8e <win_queue_event+0x6a>
			++(win_event_queue.back);
   80f6e:	3310      	adds	r3, #16
   80f70:	4a0a      	ldr	r2, [pc, #40]	; (80f9c <win_queue_event+0x78>)
   80f72:	60d3      	str	r3, [r2, #12]
		*(win_event_queue.back) = *event;
   80f74:	4e09      	ldr	r6, [pc, #36]	; (80f9c <win_queue_event+0x78>)
   80f76:	68f5      	ldr	r5, [r6, #12]
   80f78:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   80f7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		win_event_queue.back->timestamp = 0;
   80f7e:	2300      	movs	r3, #0
   80f80:	802b      	strh	r3, [r5, #0]
		--(win_event_queue.free);
   80f82:	3c01      	subs	r4, #1
   80f84:	7434      	strb	r4, [r6, #16]
		++(win_event_queue.used);
   80f86:	7c73      	ldrb	r3, [r6, #17]
   80f88:	3301      	adds	r3, #1
   80f8a:	7473      	strb	r3, [r6, #17]
   80f8c:	e7e0      	b.n	80f50 <win_queue_event+0x2c>
			win_event_queue.back = win_event_queue.start;
   80f8e:	4b03      	ldr	r3, [pc, #12]	; (80f9c <win_queue_event+0x78>)
   80f90:	681a      	ldr	r2, [r3, #0]
   80f92:	60da      	str	r2, [r3, #12]
   80f94:	e7ee      	b.n	80f74 <win_queue_event+0x50>
   80f96:	bf00      	nop
   80f98:	200701c0 	.word	0x200701c0
   80f9c:	20070a44 	.word	0x20070a44
   80fa0:	20070ba0 	.word	0x20070ba0

00080fa4 <win_draw_contents>:
{
   80fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80fa6:	b085      	sub	sp, #20
   80fa8:	4605      	mov	r5, r0
   80faa:	460e      	mov	r6, r1
	gfx_set_clipping(clip->NW.x, clip->NW.y, clip->SE.x, clip->SE.y);
   80fac:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
   80fb0:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   80fb4:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   80fb8:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
   80fbc:	4c15      	ldr	r4, [pc, #84]	; (81014 <win_draw_contents+0x70>)
   80fbe:	47a0      	blx	r4
	if (win->attributes.background) {
   80fc0:	68a8      	ldr	r0, [r5, #8]
   80fc2:	b180      	cbz	r0, 80fe6 <win_draw_contents+0x42>
		gfx_draw_bitmap_tiled(win->attributes.background, clip->NW.x,
   80fc4:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
   80fc8:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
   80fcc:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   80fd0:	f9b6 4002 	ldrsh.w	r4, [r6, #2]
   80fd4:	9402      	str	r4, [sp, #8]
   80fd6:	f9b6 4000 	ldrsh.w	r4, [r6]
   80fda:	9401      	str	r4, [sp, #4]
   80fdc:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
   80fe0:	9400      	str	r4, [sp, #0]
   80fe2:	4c0d      	ldr	r4, [pc, #52]	; (81018 <win_draw_contents+0x74>)
   80fe4:	47a0      	blx	r4
	win_handle_event(win, WIN_EVENT_DRAW, clip);
   80fe6:	4632      	mov	r2, r6
   80fe8:	2107      	movs	r1, #7
   80fea:	4628      	mov	r0, r5
   80fec:	4b0b      	ldr	r3, [pc, #44]	; (8101c <win_draw_contents+0x78>)
   80fee:	4798      	blx	r3
	child = win->top_child;
   80ff0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	if (child != NULL) {
   80ff2:	b16c      	cbz	r4, 81010 <win_draw_contents+0x6c>
				win_draw_child(child, clip);
   80ff4:	4f0a      	ldr	r7, [pc, #40]	; (81020 <win_draw_contents+0x7c>)
   80ff6:	e002      	b.n	80ffe <win_draw_contents+0x5a>
		} while (child != win->top_child);
   80ff8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   80ffa:	429c      	cmp	r4, r3
   80ffc:	d008      	beq.n	81010 <win_draw_contents+0x6c>
			child = child->prev_sibling;
   80ffe:	69e4      	ldr	r4, [r4, #28]
			if (child->is_mapped) {
   81000:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   81004:	2b00      	cmp	r3, #0
   81006:	d0f7      	beq.n	80ff8 <win_draw_contents+0x54>
				win_draw_child(child, clip);
   81008:	4631      	mov	r1, r6
   8100a:	4620      	mov	r0, r4
   8100c:	47b8      	blx	r7
   8100e:	e7f3      	b.n	80ff8 <win_draw_contents+0x54>
}
   81010:	b005      	add	sp, #20
   81012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81014:	00080731 	.word	0x00080731
   81018:	00080a11 	.word	0x00080a11
   8101c:	00080f15 	.word	0x00080f15
   81020:	00081025 	.word	0x00081025

00081024 <win_draw_child>:
{
   81024:	b5f0      	push	{r4, r5, r6, r7, lr}
   81026:	b085      	sub	sp, #20
	clip.SE.x = child->attributes.area.pos.x
   81028:	8804      	ldrh	r4, [r0, #0]
			+ child->attributes.area.size.x - 1;
   8102a:	8882      	ldrh	r2, [r0, #4]
	clip.SE.y = child->attributes.area.pos.y
   8102c:	8846      	ldrh	r6, [r0, #2]
			+ child->attributes.area.size.y - 1;
   8102e:	88c3      	ldrh	r3, [r0, #6]
	clip.origin.x += parent_clip->origin.x;
   81030:	880f      	ldrh	r7, [r1, #0]
   81032:	19e5      	adds	r5, r4, r7
   81034:	b22d      	sxth	r5, r5
   81036:	f8ad 5004 	strh.w	r5, [sp, #4]
	clip.NW.x += parent_clip->origin.x;
   8103a:	f8ad 5008 	strh.w	r5, [sp, #8]
	clip.SE.x += parent_clip->origin.x;
   8103e:	3f01      	subs	r7, #1
   81040:	443c      	add	r4, r7
   81042:	4414      	add	r4, r2
   81044:	b222      	sxth	r2, r4
   81046:	f8ad 200c 	strh.w	r2, [sp, #12]
	clip.origin.y += parent_clip->origin.y;
   8104a:	884f      	ldrh	r7, [r1, #2]
   8104c:	19f4      	adds	r4, r6, r7
   8104e:	b224      	sxth	r4, r4
   81050:	f8ad 4006 	strh.w	r4, [sp, #6]
	clip.NW.y += parent_clip->origin.y;
   81054:	f8ad 400a 	strh.w	r4, [sp, #10]
	clip.SE.y += parent_clip->origin.y;
   81058:	3f01      	subs	r7, #1
   8105a:	443e      	add	r6, r7
   8105c:	4433      	add	r3, r6
   8105e:	b21b      	sxth	r3, r3
   81060:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (clip.NW.x < parent_clip->NW.x) {
   81064:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
   81068:	42b5      	cmp	r5, r6
		clip.NW.x = parent_clip->NW.x;
   8106a:	bfb8      	it	lt
   8106c:	f8ad 6008 	strhlt.w	r6, [sp, #8]
	if (clip.NW.y < parent_clip->NW.y) {
   81070:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
   81074:	42ac      	cmp	r4, r5
		clip.NW.y = parent_clip->NW.y;
   81076:	bfb8      	it	lt
   81078:	f8ad 500a 	strhlt.w	r5, [sp, #10]
	if (clip.SE.x > parent_clip->SE.x) {
   8107c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
   81080:	42a2      	cmp	r2, r4
		clip.SE.x = parent_clip->SE.x;
   81082:	bfc8      	it	gt
   81084:	f8ad 400c 	strhgt.w	r4, [sp, #12]
	if (clip.SE.y > parent_clip->SE.y) {
   81088:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
   8108c:	4293      	cmp	r3, r2
		clip.SE.y = parent_clip->SE.y;
   8108e:	bfc8      	it	gt
   81090:	f8ad 200e 	strhgt.w	r2, [sp, #14]
	if ((clip.NW.x > clip.SE.x) || (clip.NW.y > clip.SE.y)) {
   81094:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   81098:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   8109c:	429a      	cmp	r2, r3
   8109e:	dc05      	bgt.n	810ac <win_draw_child+0x88>
   810a0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
   810a4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
   810a8:	429a      	cmp	r2, r3
   810aa:	dd01      	ble.n	810b0 <win_draw_child+0x8c>
}
   810ac:	b005      	add	sp, #20
   810ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	win_draw_contents(child, &clip);
   810b0:	a901      	add	r1, sp, #4
   810b2:	4b01      	ldr	r3, [pc, #4]	; (810b8 <win_draw_child+0x94>)
   810b4:	4798      	blx	r3
   810b6:	e7f9      	b.n	810ac <win_draw_child+0x88>
   810b8:	00080fa5 	.word	0x00080fa5

000810bc <win_destroy_children>:
{
   810bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct win_window *child = win->top_child;
   810c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
	if (child != NULL) {
   810c2:	b1ac      	cbz	r4, 810f0 <win_destroy_children+0x34>
   810c4:	4606      	mov	r6, r0
			win_handle_event(child, WIN_EVENT_DESTROY, NULL);
   810c6:	f04f 0900 	mov.w	r9, #0
   810ca:	f8df 802c 	ldr.w	r8, [pc, #44]	; 810f8 <win_destroy_children+0x3c>
			membag_free(child);
   810ce:	4f09      	ldr	r7, [pc, #36]	; (810f4 <win_destroy_children+0x38>)
			win_destroy_children(child);
   810d0:	4620      	mov	r0, r4
   810d2:	f7ff fff3 	bl	810bc <win_destroy_children>
			win_handle_event(child, WIN_EVENT_DESTROY, NULL);
   810d6:	464a      	mov	r2, r9
   810d8:	2109      	movs	r1, #9
   810da:	4620      	mov	r0, r4
   810dc:	47c0      	blx	r8
			next_sibling = child->next_sibling;
   810de:	6a25      	ldr	r5, [r4, #32]
			membag_free(child);
   810e0:	4620      	mov	r0, r4
   810e2:	47b8      	blx	r7
			child = next_sibling;
   810e4:	462c      	mov	r4, r5
		} while (child != win->top_child);
   810e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   810e8:	429d      	cmp	r5, r3
   810ea:	d1f1      	bne.n	810d0 <win_destroy_children+0x14>
		win->top_child = NULL;
   810ec:	2300      	movs	r3, #0
   810ee:	6273      	str	r3, [r6, #36]	; 0x24
   810f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   810f4:	00081d19 	.word	0x00081d19
   810f8:	00080f15 	.word	0x00080f15

000810fc <win_init>:
{
   810fc:	b570      	push	{r4, r5, r6, lr}
	win_root.attributes.area.size.x = gfx_get_width();
   810fe:	4e10      	ldr	r6, [pc, #64]	; (81140 <win_init+0x44>)
   81100:	47b0      	blx	r6
   81102:	4c10      	ldr	r4, [pc, #64]	; (81144 <win_init+0x48>)
   81104:	80a0      	strh	r0, [r4, #4]
	win_root.attributes.area.size.y = gfx_get_height();
   81106:	4d10      	ldr	r5, [pc, #64]	; (81148 <win_init+0x4c>)
   81108:	47a8      	blx	r5
   8110a:	80e0      	strh	r0, [r4, #6]
	win_root.attributes.background = &win_root_background;
   8110c:	4b0f      	ldr	r3, [pc, #60]	; (8114c <win_init+0x50>)
   8110e:	60a3      	str	r3, [r4, #8]
	win_event_queue.free = WIN_EVENT_QUEUE_SIZE;
   81110:	4a0f      	ldr	r2, [pc, #60]	; (81150 <win_init+0x54>)
   81112:	230a      	movs	r3, #10
   81114:	7413      	strb	r3, [r2, #16]
	win_event_queue.start = win_event_queue_buffer;
   81116:	4b0f      	ldr	r3, [pc, #60]	; (81154 <win_init+0x58>)
   81118:	6013      	str	r3, [r2, #0]
	win_event_queue.front = win_event_queue_buffer;
   8111a:	6093      	str	r3, [r2, #8]
	win_event_queue.end = &win_event_queue_buffer[WIN_EVENT_QUEUE_SIZE - 1];
   8111c:	3390      	adds	r3, #144	; 0x90
   8111e:	6053      	str	r3, [r2, #4]
		= &win_event_queue_buffer[WIN_EVENT_QUEUE_SIZE - 1];
   81120:	60d3      	str	r3, [r2, #12]
	win_keyboard_focus = &win_root;
   81122:	4b0d      	ldr	r3, [pc, #52]	; (81158 <win_init+0x5c>)
   81124:	601c      	str	r4, [r3, #0]
	win_last_pointer_pos.x = gfx_get_width() / 2;
   81126:	47b0      	blx	r6
   81128:	4c0c      	ldr	r4, [pc, #48]	; (8115c <win_init+0x60>)
   8112a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   8112e:	1040      	asrs	r0, r0, #1
   81130:	8020      	strh	r0, [r4, #0]
	win_last_pointer_pos.y = gfx_get_height() / 2;
   81132:	47a8      	blx	r5
   81134:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   81138:	1040      	asrs	r0, r0, #1
   8113a:	8060      	strh	r0, [r4, #2]
   8113c:	bd70      	pop	{r4, r5, r6, pc}
   8113e:	bf00      	nop
   81140:	00080789 	.word	0x00080789
   81144:	20070ba8 	.word	0x20070ba8
   81148:	00080795 	.word	0x00080795
   8114c:	20070bd4 	.word	0x20070bd4
   81150:	20070a44 	.word	0x20070a44
   81154:	20070af8 	.word	0x20070af8
   81158:	20070b98 	.word	0x20070b98
   8115c:	20070b9c 	.word	0x20070b9c

00081160 <win_get_root>:
}
   81160:	4800      	ldr	r0, [pc, #0]	; (81164 <win_get_root+0x4>)
   81162:	4770      	bx	lr
   81164:	20070ba8 	.word	0x20070ba8

00081168 <win_get_attributes>:
}
   81168:	4770      	bx	lr

0008116a <win_get_area>:
}
   8116a:	4770      	bx	lr

0008116c <win_get_custom_data>:
}
   8116c:	6940      	ldr	r0, [r0, #20]
   8116e:	4770      	bx	lr

00081170 <win_create>:
{
   81170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81172:	4607      	mov	r7, r0
   81174:	460c      	mov	r4, r1
	win = membag_alloc(sizeof(struct win_window));
   81176:	202c      	movs	r0, #44	; 0x2c
   81178:	4b0a      	ldr	r3, [pc, #40]	; (811a4 <win_create+0x34>)
   8117a:	4798      	blx	r3
	if (!win) {
   8117c:	4606      	mov	r6, r0
   8117e:	b170      	cbz	r0, 8119e <win_create+0x2e>
	win->attributes = *attributes;
   81180:	4605      	mov	r5, r0
   81182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   81184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   81186:	e894 0003 	ldmia.w	r4, {r0, r1}
   8118a:	e885 0003 	stmia.w	r5, {r0, r1}
	win->is_mapped = false;
   8118e:	2300      	movs	r3, #0
   81190:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	win->top_child = NULL;
   81194:	6273      	str	r3, [r6, #36]	; 0x24
	win_add_top_child(parent, win);
   81196:	4631      	mov	r1, r6
   81198:	4638      	mov	r0, r7
   8119a:	4b03      	ldr	r3, [pc, #12]	; (811a8 <win_create+0x38>)
   8119c:	4798      	blx	r3
}
   8119e:	4630      	mov	r0, r6
   811a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   811a2:	bf00      	nop
   811a4:	00081c99 	.word	0x00081c99
   811a8:	00080ef7 	.word	0x00080ef7

000811ac <win_queue_command_event>:
{
   811ac:	b500      	push	{lr}
   811ae:	b085      	sub	sp, #20
	w_event.type = WIN_EVENT_COMMAND;
   811b0:	2302      	movs	r3, #2
   811b2:	f88d 3002 	strb.w	r3, [sp, #2]
	w_event.command = *event;
   811b6:	c807      	ldmia	r0, {r0, r1, r2}
   811b8:	ab04      	add	r3, sp, #16
   811ba:	e903 0007 	stmdb	r3, {r0, r1, r2}
	win_queue_event(&w_event);
   811be:	4668      	mov	r0, sp
   811c0:	4b02      	ldr	r3, [pc, #8]	; (811cc <win_queue_command_event+0x20>)
   811c2:	4798      	blx	r3
}
   811c4:	b005      	add	sp, #20
   811c6:	f85d fb04 	ldr.w	pc, [sp], #4
   811ca:	bf00      	nop
   811cc:	00080f25 	.word	0x00080f25

000811d0 <win_grab_pointer>:
	win_pointer_grabber = win;
   811d0:	4b01      	ldr	r3, [pc, #4]	; (811d8 <win_grab_pointer+0x8>)
   811d2:	6018      	str	r0, [r3, #0]
   811d4:	4770      	bx	lr
   811d6:	bf00      	nop
   811d8:	20070ba4 	.word	0x20070ba4

000811dc <win_is_inside_clip>:
	return (clip->NW.x <= point->x) &&
   811dc:	f9b1 3000 	ldrsh.w	r3, [r1]
	       (point->x <= clip->SE.x) &&
   811e0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   811e4:	429a      	cmp	r2, r3
   811e6:	dc10      	bgt.n	8120a <win_is_inside_clip+0x2e>
	       (clip->NW.y <= point->y) &&
   811e8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
	return (clip->NW.x <= point->x) &&
   811ec:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   811f0:	4291      	cmp	r1, r2
   811f2:	dc0c      	bgt.n	8120e <win_is_inside_clip+0x32>
	       (clip->NW.y <= point->y) &&
   811f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   811f8:	4299      	cmp	r1, r3
   811fa:	db0a      	blt.n	81212 <win_is_inside_clip+0x36>
	       (point->x <= clip->SE.x) &&
   811fc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   81200:	4290      	cmp	r0, r2
   81202:	bfb4      	ite	lt
   81204:	2000      	movlt	r0, #0
   81206:	2001      	movge	r0, #1
   81208:	4770      	bx	lr
   8120a:	2000      	movs	r0, #0
   8120c:	4770      	bx	lr
   8120e:	2000      	movs	r0, #0
   81210:	4770      	bx	lr
   81212:	2000      	movs	r0, #0
}
   81214:	4770      	bx	lr

00081216 <win_compute_union>:
{
   81216:	b410      	push	{r4}
	expand_left = area->pos.x - merge->pos.x;
   81218:	f9b1 2000 	ldrsh.w	r2, [r1]
   8121c:	8803      	ldrh	r3, [r0, #0]
   8121e:	1a9b      	subs	r3, r3, r2
   81220:	b29b      	uxth	r3, r3
	if (expand_left > 0) {
   81222:	b21c      	sxth	r4, r3
   81224:	2c00      	cmp	r4, #0
   81226:	dd03      	ble.n	81230 <win_compute_union+0x1a>
		area->pos.x -= expand_left;
   81228:	8002      	strh	r2, [r0, #0]
		area->size.x += expand_left;
   8122a:	8882      	ldrh	r2, [r0, #4]
   8122c:	4413      	add	r3, r2
   8122e:	8083      	strh	r3, [r0, #4]
	expand_top = area->pos.y - merge->pos.y;
   81230:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   81234:	8843      	ldrh	r3, [r0, #2]
   81236:	1a9b      	subs	r3, r3, r2
   81238:	b29b      	uxth	r3, r3
	if (expand_top > 0) {
   8123a:	b21c      	sxth	r4, r3
   8123c:	2c00      	cmp	r4, #0
   8123e:	dd03      	ble.n	81248 <win_compute_union+0x32>
		area->pos.y -= expand_top;
   81240:	8042      	strh	r2, [r0, #2]
		area->size.y += expand_top;
   81242:	88c2      	ldrh	r2, [r0, #6]
   81244:	4413      	add	r3, r2
   81246:	80c3      	strh	r3, [r0, #6]
   81248:	880b      	ldrh	r3, [r1, #0]
   8124a:	888a      	ldrh	r2, [r1, #4]
   8124c:	4413      	add	r3, r2
   8124e:	8802      	ldrh	r2, [r0, #0]
   81250:	1a9b      	subs	r3, r3, r2
   81252:	b29b      	uxth	r3, r3
			- (area->pos.x + area->size.x);
   81254:	8882      	ldrh	r2, [r0, #4]
   81256:	1a9a      	subs	r2, r3, r2
	if (expand_width > 0) {
   81258:	b212      	sxth	r2, r2
   8125a:	2a00      	cmp	r2, #0
		area->size.x += expand_width;
   8125c:	bfc8      	it	gt
   8125e:	8083      	strhgt	r3, [r0, #4]
   81260:	884b      	ldrh	r3, [r1, #2]
   81262:	88ca      	ldrh	r2, [r1, #6]
   81264:	4413      	add	r3, r2
   81266:	8842      	ldrh	r2, [r0, #2]
   81268:	1a9b      	subs	r3, r3, r2
   8126a:	b29b      	uxth	r3, r3
			- (area->pos.y + area->size.y);
   8126c:	88c2      	ldrh	r2, [r0, #6]
   8126e:	1a9a      	subs	r2, r3, r2
	if (expand_height > 0) {
   81270:	b212      	sxth	r2, r2
   81272:	2a00      	cmp	r2, #0
		area->size.y += expand_height;
   81274:	bfc8      	it	gt
   81276:	80c3      	strhgt	r3, [r0, #6]
}
   81278:	bc10      	pop	{r4}
   8127a:	4770      	bx	lr

0008127c <win_compute_intersection>:
{
   8127c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const gfx_coord_t right_x = area->pos.x + area->size.x - 1;
   8127e:	f9b1 4000 	ldrsh.w	r4, [r1]
	if (clip->SE.x < area->pos.x) {
   81282:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   81286:	42ac      	cmp	r4, r5
   81288:	dc26      	bgt.n	812d8 <win_compute_intersection+0x5c>
	const gfx_coord_t bottom_y = area->pos.y + area->size.y - 1;
   8128a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
	if (clip->SE.y < area->pos.y) {
   8128e:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
   81292:	42b2      	cmp	r2, r6
   81294:	dc22      	bgt.n	812dc <win_compute_intersection+0x60>
	const gfx_coord_t right_x = area->pos.x + area->size.x - 1;
   81296:	888b      	ldrh	r3, [r1, #4]
   81298:	4423      	add	r3, r4
   8129a:	3b01      	subs	r3, #1
   8129c:	b21b      	sxth	r3, r3
	if (clip->NW.x > right_x) {
   8129e:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
   812a2:	42bb      	cmp	r3, r7
   812a4:	db1c      	blt.n	812e0 <win_compute_intersection+0x64>
	const gfx_coord_t bottom_y = area->pos.y + area->size.y - 1;
   812a6:	f8b1 e006 	ldrh.w	lr, [r1, #6]
   812aa:	4472      	add	r2, lr
   812ac:	3a01      	subs	r2, #1
   812ae:	b212      	sxth	r2, r2
	if (clip->NW.y > bottom_y) {
   812b0:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
   812b4:	4572      	cmp	r2, lr
   812b6:	db15      	blt.n	812e4 <win_compute_intersection+0x68>
	if (clip->NW.x < area->pos.x) {
   812b8:	42bc      	cmp	r4, r7
		clip->NW.x = area->pos.x;
   812ba:	bfc8      	it	gt
   812bc:	8084      	strhgt	r4, [r0, #4]
	if (clip->NW.y < area->pos.y) {
   812be:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
   812c2:	458e      	cmp	lr, r1
		clip->NW.y = area->pos.y;
   812c4:	bfb8      	it	lt
   812c6:	80c1      	strhlt	r1, [r0, #6]
	if (clip->SE.x > right_x) {
   812c8:	42ab      	cmp	r3, r5
		clip->SE.x = right_x;
   812ca:	bfb8      	it	lt
   812cc:	8103      	strhlt	r3, [r0, #8]
	if (clip->SE.y > bottom_y) {
   812ce:	42b2      	cmp	r2, r6
   812d0:	da0a      	bge.n	812e8 <win_compute_intersection+0x6c>
		clip->SE.y = bottom_y;
   812d2:	8142      	strh	r2, [r0, #10]
	return true;
   812d4:	2001      	movs	r0, #1
   812d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   812d8:	2000      	movs	r0, #0
   812da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   812dc:	2000      	movs	r0, #0
   812de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   812e0:	2000      	movs	r0, #0
   812e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   812e4:	2000      	movs	r0, #0
   812e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   812e8:	2001      	movs	r0, #1
}
   812ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000812ec <win_compute_clipping>:
{
   812ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   812f0:	4605      	mov	r5, r0
   812f2:	4614      	mov	r4, r2
	clip->origin = win->attributes.area.pos;
   812f4:	6800      	ldr	r0, [r0, #0]
   812f6:	6010      	str	r0, [r2, #0]
	clip->NW = win->attributes.area.pos;
   812f8:	6828      	ldr	r0, [r5, #0]
   812fa:	6050      	str	r0, [r2, #4]
			+ win->attributes.area.size.x - 1;
   812fc:	882b      	ldrh	r3, [r5, #0]
   812fe:	88aa      	ldrh	r2, [r5, #4]
   81300:	4413      	add	r3, r2
   81302:	3b01      	subs	r3, #1
	clip->SE.x = win->attributes.area.pos.x
   81304:	8123      	strh	r3, [r4, #8]
			+ win->attributes.area.size.y - 1;
   81306:	886b      	ldrh	r3, [r5, #2]
   81308:	88ea      	ldrh	r2, [r5, #6]
   8130a:	4413      	add	r3, r2
   8130c:	3b01      	subs	r3, #1
	clip->SE.y = win->attributes.area.pos.y
   8130e:	8163      	strh	r3, [r4, #10]
	if (!win_compute_intersection(clip, dirty_area)) {
   81310:	4620      	mov	r0, r4
   81312:	4b2b      	ldr	r3, [pc, #172]	; (813c0 <win_compute_clipping+0xd4>)
   81314:	4798      	blx	r3
   81316:	4607      	mov	r7, r0
   81318:	2800      	cmp	r0, #0
   8131a:	d04c      	beq.n	813b6 <win_compute_clipping+0xca>
	while (win != &win_root) {
   8131c:	4b29      	ldr	r3, [pc, #164]	; (813c4 <win_compute_clipping+0xd8>)
   8131e:	429d      	cmp	r5, r3
   81320:	d049      	beq.n	813b6 <win_compute_clipping+0xca>
			clip->NW.x = 0;
   81322:	f04f 0e00 	mov.w	lr, #0
	while (win != &win_root) {
   81326:	461e      	mov	r6, r3
		win = win->parent;
   81328:	69ad      	ldr	r5, [r5, #24]
		if (clip->NW.x < 0) {
   8132a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   8132e:	2b00      	cmp	r3, #0
			clip->NW.x = 0;
   81330:	bfb8      	it	lt
   81332:	f8a4 e004 	strhlt.w	lr, [r4, #4]
		if (clip->NW.y < 0) {
   81336:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   8133a:	2b00      	cmp	r3, #0
			clip->NW.y = 0;
   8133c:	bfb8      	it	lt
   8133e:	f8a4 e006 	strhlt.w	lr, [r4, #6]
		if (clip->SE.x >= win->attributes.area.size.x) {
   81342:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   81346:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   8134a:	429a      	cmp	r2, r3
			clip->SE.x = win->attributes.area.size.x - 1;
   8134c:	bfa4      	itt	ge
   8134e:	f103 33ff 	addge.w	r3, r3, #4294967295
   81352:	8123      	strhge	r3, [r4, #8]
		if (clip->SE.y >= win->attributes.area.size.y) {
   81354:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   81358:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   8135c:	429a      	cmp	r2, r3
			clip->SE.y = win->attributes.area.size.y - 1;
   8135e:	bfa4      	itt	ge
   81360:	f103 33ff 	addge.w	r3, r3, #4294967295
   81364:	8163      	strhge	r3, [r4, #10]
		if ((clip->NW.x > clip->SE.x) || (clip->NW.y > clip->SE.y)) {
   81366:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   8136a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   8136e:	429a      	cmp	r2, r3
   81370:	dc20      	bgt.n	813b4 <win_compute_clipping+0xc8>
   81372:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   81376:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   8137a:	4288      	cmp	r0, r1
   8137c:	dc1e      	bgt.n	813bc <win_compute_clipping+0xd0>
		clip->origin.x += win->attributes.area.pos.x;
   8137e:	f8b4 c000 	ldrh.w	ip, [r4]
   81382:	f8b5 8000 	ldrh.w	r8, [r5]
   81386:	44c4      	add	ip, r8
   81388:	f8a4 c000 	strh.w	ip, [r4]
		clip->NW.x += win->attributes.area.pos.x;
   8138c:	f8b5 c000 	ldrh.w	ip, [r5]
   81390:	4462      	add	r2, ip
   81392:	80a2      	strh	r2, [r4, #4]
		clip->SE.x += win->attributes.area.pos.x;
   81394:	882a      	ldrh	r2, [r5, #0]
   81396:	4413      	add	r3, r2
   81398:	8123      	strh	r3, [r4, #8]
		clip->origin.y += win->attributes.area.pos.y;
   8139a:	8863      	ldrh	r3, [r4, #2]
   8139c:	886a      	ldrh	r2, [r5, #2]
   8139e:	4413      	add	r3, r2
   813a0:	8063      	strh	r3, [r4, #2]
		clip->NW.y += win->attributes.area.pos.y;
   813a2:	886b      	ldrh	r3, [r5, #2]
   813a4:	4418      	add	r0, r3
   813a6:	80e0      	strh	r0, [r4, #6]
		clip->SE.y += win->attributes.area.pos.y;
   813a8:	886b      	ldrh	r3, [r5, #2]
   813aa:	4419      	add	r1, r3
   813ac:	8161      	strh	r1, [r4, #10]
	while (win != &win_root) {
   813ae:	42b5      	cmp	r5, r6
   813b0:	d1ba      	bne.n	81328 <win_compute_clipping+0x3c>
   813b2:	e000      	b.n	813b6 <win_compute_clipping+0xca>
			return false;
   813b4:	2700      	movs	r7, #0
}
   813b6:	4638      	mov	r0, r7
   813b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
   813bc:	2700      	movs	r7, #0
   813be:	e7fa      	b.n	813b6 <win_compute_clipping+0xca>
   813c0:	0008127d 	.word	0x0008127d
   813c4:	20070ba8 	.word	0x20070ba8

000813c8 <win_draw>:
{
   813c8:	b570      	push	{r4, r5, r6, lr}
   813ca:	b084      	sub	sp, #16
   813cc:	4604      	mov	r4, r0
   813ce:	460d      	mov	r5, r1
	if (!win_compute_clipping(win, dirty_area, &clip)) {
   813d0:	aa01      	add	r2, sp, #4
   813d2:	4b1a      	ldr	r3, [pc, #104]	; (8143c <win_draw+0x74>)
   813d4:	4798      	blx	r3
   813d6:	b198      	cbz	r0, 81400 <win_draw+0x38>
	if (win->parent && (win->attributes.behavior
   813d8:	69a3      	ldr	r3, [r4, #24]
   813da:	b11b      	cbz	r3, 813e4 <win_draw+0x1c>
   813dc:	7c23      	ldrb	r3, [r4, #16]
   813de:	f013 0f02 	tst.w	r3, #2
   813e2:	d109      	bne.n	813f8 <win_draw+0x30>
	win_draw_contents(win, &clip);
   813e4:	a901      	add	r1, sp, #4
   813e6:	4620      	mov	r0, r4
   813e8:	4b15      	ldr	r3, [pc, #84]	; (81440 <win_draw+0x78>)
   813ea:	4798      	blx	r3
	while (win != &win_root) {
   813ec:	4b15      	ldr	r3, [pc, #84]	; (81444 <win_draw+0x7c>)
   813ee:	429c      	cmp	r4, r3
   813f0:	d006      	beq.n	81400 <win_draw+0x38>
				win_draw_child(win, &clip);
   813f2:	4d15      	ldr	r5, [pc, #84]	; (81448 <win_draw+0x80>)
	while (win != &win_root) {
   813f4:	461e      	mov	r6, r3
   813f6:	e008      	b.n	8140a <win_draw+0x42>
		win_draw_parent(win, dirty_area);
   813f8:	4629      	mov	r1, r5
   813fa:	4620      	mov	r0, r4
   813fc:	4b13      	ldr	r3, [pc, #76]	; (8144c <win_draw+0x84>)
   813fe:	4798      	blx	r3
}
   81400:	b004      	add	sp, #16
   81402:	bd70      	pop	{r4, r5, r6, pc}
		while (win != win->parent->top_child) {
   81404:	461c      	mov	r4, r3
	while (win != &win_root) {
   81406:	42b3      	cmp	r3, r6
   81408:	d0fa      	beq.n	81400 <win_draw+0x38>
		clip.origin.x -= win->attributes.area.pos.x;
   8140a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   8140e:	8822      	ldrh	r2, [r4, #0]
   81410:	1a9b      	subs	r3, r3, r2
   81412:	f8ad 3004 	strh.w	r3, [sp, #4]
		clip.origin.y -= win->attributes.area.pos.y;
   81416:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   8141a:	8862      	ldrh	r2, [r4, #2]
   8141c:	1a9b      	subs	r3, r3, r2
   8141e:	f8ad 3006 	strh.w	r3, [sp, #6]
		while (win != win->parent->top_child) {
   81422:	69a3      	ldr	r3, [r4, #24]
   81424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   81426:	4294      	cmp	r4, r2
   81428:	d0ec      	beq.n	81404 <win_draw+0x3c>
			win = win->prev_sibling;
   8142a:	69e4      	ldr	r4, [r4, #28]
			if (win->is_mapped) {
   8142c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   81430:	2b00      	cmp	r3, #0
   81432:	d0f6      	beq.n	81422 <win_draw+0x5a>
				win_draw_child(win, &clip);
   81434:	a901      	add	r1, sp, #4
   81436:	4620      	mov	r0, r4
   81438:	47a8      	blx	r5
   8143a:	e7f2      	b.n	81422 <win_draw+0x5a>
   8143c:	000812ed 	.word	0x000812ed
   81440:	00080fa5 	.word	0x00080fa5
   81444:	20070ba8 	.word	0x20070ba8
   81448:	00081025 	.word	0x00081025
   8144c:	00081451 	.word	0x00081451

00081450 <win_draw_parent>:
{
   81450:	b510      	push	{r4, lr}
   81452:	b082      	sub	sp, #8
   81454:	4602      	mov	r2, r0
	struct win_area area = *dirty_area;
   81456:	466b      	mov	r3, sp
   81458:	6808      	ldr	r0, [r1, #0]
   8145a:	6849      	ldr	r1, [r1, #4]
   8145c:	c303      	stmia	r3!, {r0, r1}
	if (win_translate_area_to_parent(&area, child->parent)) {
   8145e:	6990      	ldr	r0, [r2, #24]
	if (area->pos.x < 0) {
   81460:	f9bd 3000 	ldrsh.w	r3, [sp]
   81464:	2b00      	cmp	r3, #0
   81466:	db30      	blt.n	814ca <win_draw_parent+0x7a>
	if (area->pos.y < 0) {
   81468:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   8146c:	2b00      	cmp	r3, #0
   8146e:	db35      	blt.n	814dc <win_draw_parent+0x8c>
	if ((area->pos.x + area->size.x) > parent_area->size.x) {
   81470:	f9bd 2000 	ldrsh.w	r2, [sp]
   81474:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   81478:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   8147c:	4413      	add	r3, r2
   8147e:	428b      	cmp	r3, r1
		area->size.x = parent_area->size.x - area->pos.x;
   81480:	bfc4      	itt	gt
   81482:	1a89      	subgt	r1, r1, r2
   81484:	f8ad 1004 	strhgt.w	r1, [sp, #4]
	if ((area->pos.y + area->size.y) > parent_area->size.y) {
   81488:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   8148c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
   81490:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
   81494:	4419      	add	r1, r3
   81496:	42a1      	cmp	r1, r4
		area->size.y = parent_area->size.y - area->pos.y;
   81498:	bfc4      	itt	gt
   8149a:	1ae4      	subgt	r4, r4, r3
   8149c:	f8ad 4006 	strhgt.w	r4, [sp, #6]
	if ((area->size.x <= 0) || (area->size.y <= 0)) {
   814a0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   814a4:	2900      	cmp	r1, #0
   814a6:	dd0e      	ble.n	814c6 <win_draw_parent+0x76>
   814a8:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
   814ac:	2900      	cmp	r1, #0
   814ae:	dd0a      	ble.n	814c6 <win_draw_parent+0x76>
	area->pos.x += parent_area->pos.x;
   814b0:	8801      	ldrh	r1, [r0, #0]
   814b2:	440a      	add	r2, r1
   814b4:	f8ad 2000 	strh.w	r2, [sp]
	area->pos.y += parent_area->pos.y;
   814b8:	8842      	ldrh	r2, [r0, #2]
   814ba:	4413      	add	r3, r2
   814bc:	f8ad 3002 	strh.w	r3, [sp, #2]
		win_draw(child->parent, &area);
   814c0:	4669      	mov	r1, sp
   814c2:	4b0b      	ldr	r3, [pc, #44]	; (814f0 <win_draw_parent+0xa0>)
   814c4:	4798      	blx	r3
}
   814c6:	b002      	add	sp, #8
   814c8:	bd10      	pop	{r4, pc}
		area->size.x += area->pos.x;
   814ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   814ce:	4413      	add	r3, r2
   814d0:	f8ad 3004 	strh.w	r3, [sp, #4]
		area->pos.x = 0;
   814d4:	2300      	movs	r3, #0
   814d6:	f8ad 3000 	strh.w	r3, [sp]
   814da:	e7c5      	b.n	81468 <win_draw_parent+0x18>
		area->size.y += area->pos.y;
   814dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   814e0:	4413      	add	r3, r2
   814e2:	f8ad 3006 	strh.w	r3, [sp, #6]
		area->pos.y = 0;
   814e6:	2300      	movs	r3, #0
   814e8:	f8ad 3002 	strh.w	r3, [sp, #2]
   814ec:	e7c0      	b.n	81470 <win_draw_parent+0x20>
   814ee:	bf00      	nop
   814f0:	000813c9 	.word	0x000813c9

000814f4 <win_hide>:
	if (!win->is_mapped) {
   814f4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   814f8:	2b00      	cmp	r3, #0
   814fa:	d02e      	beq.n	8155a <win_hide+0x66>
{
   814fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   814fe:	b083      	sub	sp, #12
   81500:	4604      	mov	r4, r0
	if (win == &win_root) {
   81502:	4b16      	ldr	r3, [pc, #88]	; (8155c <win_hide+0x68>)
   81504:	4298      	cmp	r0, r3
   81506:	d007      	beq.n	81518 <win_hide+0x24>
		if (win_is_visible(win)) {
   81508:	4b15      	ldr	r3, [pc, #84]	; (81560 <win_hide+0x6c>)
   8150a:	4798      	blx	r3
   8150c:	b9e8      	cbnz	r0, 8154a <win_hide+0x56>
			win->is_mapped = false;
   8150e:	2300      	movs	r3, #0
   81510:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   81514:	b003      	add	sp, #12
   81516:	bdf0      	pop	{r4, r5, r6, r7, pc}
		win->is_mapped = false;
   81518:	2400      	movs	r4, #0
   8151a:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
		gfx_set_clipping(0, 0, gfx_get_width(), gfx_get_height());
   8151e:	4e11      	ldr	r6, [pc, #68]	; (81564 <win_hide+0x70>)
   81520:	47b0      	blx	r6
   81522:	4607      	mov	r7, r0
   81524:	4d10      	ldr	r5, [pc, #64]	; (81568 <win_hide+0x74>)
   81526:	47a8      	blx	r5
   81528:	4603      	mov	r3, r0
   8152a:	463a      	mov	r2, r7
   8152c:	4621      	mov	r1, r4
   8152e:	4620      	mov	r0, r4
   81530:	4f0e      	ldr	r7, [pc, #56]	; (8156c <win_hide+0x78>)
   81532:	47b8      	blx	r7
		gfx_draw_filled_rect(0, 0, gfx_get_width(), gfx_get_height(),
   81534:	47b0      	blx	r6
   81536:	4606      	mov	r6, r0
   81538:	47a8      	blx	r5
   8153a:	9400      	str	r4, [sp, #0]
   8153c:	4603      	mov	r3, r0
   8153e:	4632      	mov	r2, r6
   81540:	4621      	mov	r1, r4
   81542:	4620      	mov	r0, r4
   81544:	4c0a      	ldr	r4, [pc, #40]	; (81570 <win_hide+0x7c>)
   81546:	47a0      	blx	r4
   81548:	e7e4      	b.n	81514 <win_hide+0x20>
			win->is_mapped = false;
   8154a:	2300      	movs	r3, #0
   8154c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			win_draw_parent(win, &win->attributes.area);
   81550:	4621      	mov	r1, r4
   81552:	4620      	mov	r0, r4
   81554:	4b07      	ldr	r3, [pc, #28]	; (81574 <win_hide+0x80>)
   81556:	4798      	blx	r3
   81558:	e7dc      	b.n	81514 <win_hide+0x20>
   8155a:	4770      	bx	lr
   8155c:	20070ba8 	.word	0x20070ba8
   81560:	00080eb9 	.word	0x00080eb9
   81564:	00080789 	.word	0x00080789
   81568:	00080795 	.word	0x00080795
   8156c:	00080731 	.word	0x00080731
   81570:	000807a1 	.word	0x000807a1
   81574:	00081451 	.word	0x00081451

00081578 <win_destroy>:
{
   81578:	b510      	push	{r4, lr}
   8157a:	4604      	mov	r4, r0
	if (win->is_mapped) {
   8157c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   81580:	b973      	cbnz	r3, 815a0 <win_destroy+0x28>
	win_unlink(win);
   81582:	4620      	mov	r0, r4
   81584:	4b08      	ldr	r3, [pc, #32]	; (815a8 <win_destroy+0x30>)
   81586:	4798      	blx	r3
	win_destroy_children(win);
   81588:	4620      	mov	r0, r4
   8158a:	4b08      	ldr	r3, [pc, #32]	; (815ac <win_destroy+0x34>)
   8158c:	4798      	blx	r3
	win_handle_event(win, WIN_EVENT_DESTROY, NULL);
   8158e:	2200      	movs	r2, #0
   81590:	2109      	movs	r1, #9
   81592:	4620      	mov	r0, r4
   81594:	4b06      	ldr	r3, [pc, #24]	; (815b0 <win_destroy+0x38>)
   81596:	4798      	blx	r3
	membag_free(win);
   81598:	4620      	mov	r0, r4
   8159a:	4b06      	ldr	r3, [pc, #24]	; (815b4 <win_destroy+0x3c>)
   8159c:	4798      	blx	r3
   8159e:	bd10      	pop	{r4, pc}
		win_hide(win);
   815a0:	4b05      	ldr	r3, [pc, #20]	; (815b8 <win_destroy+0x40>)
   815a2:	4798      	blx	r3
   815a4:	e7ed      	b.n	81582 <win_destroy+0xa>
   815a6:	bf00      	nop
   815a8:	00080ec9 	.word	0x00080ec9
   815ac:	000810bd 	.word	0x000810bd
   815b0:	00080f15 	.word	0x00080f15
   815b4:	00081d19 	.word	0x00081d19
   815b8:	000814f5 	.word	0x000814f5

000815bc <win_set_area>:
{
   815bc:	b570      	push	{r4, r5, r6, lr}
   815be:	b084      	sub	sp, #16
   815c0:	4604      	mov	r4, r0
   815c2:	460d      	mov	r5, r1
   815c4:	f88d 2007 	strb.w	r2, [sp, #7]
	dirty_area = win->attributes.area;
   815c8:	c803      	ldmia	r0, {r0, r1}
   815ca:	ab04      	add	r3, sp, #16
   815cc:	e903 0003 	stmdb	r3, {r0, r1}
	if (attribute_mask & WIN_ATTR_POSITION) {
   815d0:	f012 0f01 	tst.w	r2, #1
   815d4:	d129      	bne.n	8162a <win_set_area+0x6e>
	bool exposed_areas = false;
   815d6:	2600      	movs	r6, #0
	if (attribute_mask & WIN_ATTR_SIZE) {
   815d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   815dc:	f013 0f02 	tst.w	r3, #2
   815e0:	d012      	beq.n	81608 <win_set_area+0x4c>
		if ((new_area->size.x < win->attributes.area.size.x) ||
   815e2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   815e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   815ea:	429a      	cmp	r2, r3
   815ec:	db25      	blt.n	8163a <win_set_area+0x7e>
   815ee:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
   815f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
			exposed_areas = true;
   815f6:	429a      	cmp	r2, r3
   815f8:	bfb8      	it	lt
   815fa:	2601      	movlt	r6, #1
		win->attributes.area.size = new_area->size;
   815fc:	6868      	ldr	r0, [r5, #4]
   815fe:	6060      	str	r0, [r4, #4]
		win_compute_union(&dirty_area, new_area);
   81600:	4629      	mov	r1, r5
   81602:	a802      	add	r0, sp, #8
   81604:	4b10      	ldr	r3, [pc, #64]	; (81648 <win_set_area+0x8c>)
   81606:	4798      	blx	r3
	win_handle_event(win, WIN_EVENT_ATTRIBUTES, &attribute_mask);
   81608:	f10d 0207 	add.w	r2, sp, #7
   8160c:	2108      	movs	r1, #8
   8160e:	4620      	mov	r0, r4
   81610:	4b0e      	ldr	r3, [pc, #56]	; (8164c <win_set_area+0x90>)
   81612:	4798      	blx	r3
	if (win_is_visible(win)) {
   81614:	4620      	mov	r0, r4
   81616:	4b0e      	ldr	r3, [pc, #56]	; (81650 <win_set_area+0x94>)
   81618:	4798      	blx	r3
   8161a:	b120      	cbz	r0, 81626 <win_set_area+0x6a>
		if (exposed_areas) {
   8161c:	b97e      	cbnz	r6, 8163e <win_set_area+0x82>
			win_draw(win, &dirty_area);
   8161e:	a902      	add	r1, sp, #8
   81620:	4620      	mov	r0, r4
   81622:	4b0c      	ldr	r3, [pc, #48]	; (81654 <win_set_area+0x98>)
   81624:	4798      	blx	r3
}
   81626:	b004      	add	sp, #16
   81628:	bd70      	pop	{r4, r5, r6, pc}
		win->attributes.area.pos = new_area->pos;
   8162a:	6828      	ldr	r0, [r5, #0]
   8162c:	6020      	str	r0, [r4, #0]
		win_compute_union(&dirty_area, new_area);
   8162e:	4629      	mov	r1, r5
   81630:	a802      	add	r0, sp, #8
   81632:	4b05      	ldr	r3, [pc, #20]	; (81648 <win_set_area+0x8c>)
   81634:	4798      	blx	r3
		exposed_areas = true;
   81636:	2601      	movs	r6, #1
   81638:	e7ce      	b.n	815d8 <win_set_area+0x1c>
			exposed_areas = true;
   8163a:	2601      	movs	r6, #1
   8163c:	e7de      	b.n	815fc <win_set_area+0x40>
			win_draw_parent(win, &dirty_area);
   8163e:	a902      	add	r1, sp, #8
   81640:	4620      	mov	r0, r4
   81642:	4b05      	ldr	r3, [pc, #20]	; (81658 <win_set_area+0x9c>)
   81644:	4798      	blx	r3
   81646:	e7ee      	b.n	81626 <win_set_area+0x6a>
   81648:	00081217 	.word	0x00081217
   8164c:	00080f15 	.word	0x00080f15
   81650:	00080eb9 	.word	0x00080eb9
   81654:	000813c9 	.word	0x000813c9
   81658:	00081451 	.word	0x00081451

0008165c <win_set_attributes>:
{
   8165c:	b530      	push	{r4, r5, lr}
   8165e:	b085      	sub	sp, #20
   81660:	4604      	mov	r4, r0
   81662:	460b      	mov	r3, r1
   81664:	f88d 2007 	strb.w	r2, [sp, #7]
	dirty_area = win->attributes.area;
   81668:	c803      	ldmia	r0, {r0, r1}
   8166a:	ad04      	add	r5, sp, #16
   8166c:	e905 0003 	stmdb	r5, {r0, r1}
	if (attribute_mask & WIN_ATTR_BACKGROUND) {
   81670:	f012 0f04 	tst.w	r2, #4
		win->attributes.background = new_attributes->background;
   81674:	bf1d      	ittte	ne
   81676:	6899      	ldrne	r1, [r3, #8]
   81678:	60a1      	strne	r1, [r4, #8]
		needs_redraw = true;
   8167a:	2501      	movne	r5, #1
	bool needs_redraw = false;
   8167c:	2500      	moveq	r5, #0
	if (attribute_mask & WIN_ATTR_EVENTHANDLER) {
   8167e:	f012 0f08 	tst.w	r2, #8
		win->attributes.event_handler = new_attributes->event_handler;
   81682:	bf1c      	itt	ne
   81684:	68d9      	ldrne	r1, [r3, #12]
   81686:	60e1      	strne	r1, [r4, #12]
	if (attribute_mask & WIN_ATTR_BEHAVIOR) {
   81688:	f012 0f10 	tst.w	r2, #16
		win->attributes.behavior = new_attributes->behavior;
   8168c:	bf1c      	itt	ne
   8168e:	7c19      	ldrbne	r1, [r3, #16]
   81690:	7421      	strbne	r1, [r4, #16]
	if (attribute_mask & WIN_ATTR_CUSTOM) {
   81692:	f012 0f20 	tst.w	r2, #32
		win->attributes.custom = new_attributes->custom;
   81696:	bf1c      	itt	ne
   81698:	6959      	ldrne	r1, [r3, #20]
   8169a:	6161      	strne	r1, [r4, #20]
	if (attribute_mask & (WIN_ATTR_POSITION | WIN_ATTR_SIZE)) {
   8169c:	f012 0f03 	tst.w	r2, #3
   816a0:	d10f      	bne.n	816c2 <win_set_attributes+0x66>
		win_handle_event(win, WIN_EVENT_ATTRIBUTES, &attribute_mask);
   816a2:	f10d 0207 	add.w	r2, sp, #7
   816a6:	2108      	movs	r1, #8
   816a8:	4620      	mov	r0, r4
   816aa:	4b09      	ldr	r3, [pc, #36]	; (816d0 <win_set_attributes+0x74>)
   816ac:	4798      	blx	r3
		if (needs_redraw && win_is_visible(win)) {
   816ae:	b165      	cbz	r5, 816ca <win_set_attributes+0x6e>
   816b0:	4620      	mov	r0, r4
   816b2:	4b08      	ldr	r3, [pc, #32]	; (816d4 <win_set_attributes+0x78>)
   816b4:	4798      	blx	r3
   816b6:	b140      	cbz	r0, 816ca <win_set_attributes+0x6e>
			win_draw(win, &dirty_area);
   816b8:	a902      	add	r1, sp, #8
   816ba:	4620      	mov	r0, r4
   816bc:	4b06      	ldr	r3, [pc, #24]	; (816d8 <win_set_attributes+0x7c>)
   816be:	4798      	blx	r3
}
   816c0:	e003      	b.n	816ca <win_set_attributes+0x6e>
		win_set_area(win, &(new_attributes->area), attribute_mask);
   816c2:	4619      	mov	r1, r3
   816c4:	4620      	mov	r0, r4
   816c6:	4b05      	ldr	r3, [pc, #20]	; (816dc <win_set_attributes+0x80>)
   816c8:	4798      	blx	r3
}
   816ca:	b005      	add	sp, #20
   816cc:	bd30      	pop	{r4, r5, pc}
   816ce:	bf00      	nop
   816d0:	00080f15 	.word	0x00080f15
   816d4:	00080eb9 	.word	0x00080eb9
   816d8:	000813c9 	.word	0x000813c9
   816dc:	000815bd 	.word	0x000815bd

000816e0 <win_redraw>:
{
   816e0:	b510      	push	{r4, lr}
   816e2:	4604      	mov	r4, r0
	if (win_is_visible(win)) {
   816e4:	4b04      	ldr	r3, [pc, #16]	; (816f8 <win_redraw+0x18>)
   816e6:	4798      	blx	r3
   816e8:	b900      	cbnz	r0, 816ec <win_redraw+0xc>
   816ea:	bd10      	pop	{r4, pc}
		win_draw(win, dirty_area);
   816ec:	4621      	mov	r1, r4
   816ee:	4620      	mov	r0, r4
   816f0:	4b02      	ldr	r3, [pc, #8]	; (816fc <win_redraw+0x1c>)
   816f2:	4798      	blx	r3
}
   816f4:	e7f9      	b.n	816ea <win_redraw+0xa>
   816f6:	bf00      	nop
   816f8:	00080eb9 	.word	0x00080eb9
   816fc:	000813c9 	.word	0x000813c9

00081700 <win_show>:
{
   81700:	b508      	push	{r3, lr}
	if (win->is_mapped) {
   81702:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   81706:	b103      	cbz	r3, 8170a <win_show+0xa>
   81708:	bd08      	pop	{r3, pc}
	win->is_mapped = true;
   8170a:	2301      	movs	r3, #1
   8170c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	win_redraw(win);
   81710:	4b01      	ldr	r3, [pc, #4]	; (81718 <win_show+0x18>)
   81712:	4798      	blx	r3
   81714:	e7f8      	b.n	81708 <win_show+0x8>
   81716:	bf00      	nop
   81718:	000816e1 	.word	0x000816e1

0008171c <win_is_inside_window>:
{
   8171c:	b510      	push	{r4, lr}
   8171e:	b084      	sub	sp, #16
   81720:	460c      	mov	r4, r1
	win_compute_clipping(win, &win->attributes.area, &clip);
   81722:	aa01      	add	r2, sp, #4
   81724:	4601      	mov	r1, r0
   81726:	4b04      	ldr	r3, [pc, #16]	; (81738 <win_is_inside_window+0x1c>)
   81728:	4798      	blx	r3
	return win_is_inside_clip(&clip, point);
   8172a:	4621      	mov	r1, r4
   8172c:	a801      	add	r0, sp, #4
   8172e:	4b03      	ldr	r3, [pc, #12]	; (8173c <win_is_inside_window+0x20>)
   81730:	4798      	blx	r3
}
   81732:	b004      	add	sp, #16
   81734:	bd10      	pop	{r4, pc}
   81736:	bf00      	nop
   81738:	000812ed 	.word	0x000812ed
   8173c:	000811dd 	.word	0x000811dd

00081740 <wtk_rescale_value>:
	Assert(from_scale > 0);
	Assert(value <= from_scale);

	new_value = value;
	new_value *= to_scale;
	new_value /= from_scale;
   81740:	fb02 f000 	mul.w	r0, r2, r0
   81744:	fb90 f0f1 	sdiv	r0, r0, r1

	return new_value;
}
   81748:	b2c0      	uxtb	r0, r0
   8174a:	4770      	bx	lr

0008174c <wtk_copy_string>:
{
	Assert(dest);
	Assert(source);

	/* Copy characters, including zero-terminator. */
	while (*source != '\0') {
   8174c:	780b      	ldrb	r3, [r1, #0]
   8174e:	b12b      	cbz	r3, 8175c <wtk_copy_string+0x10>
		*dest = *source;
   81750:	f800 3b01 	strb.w	r3, [r0], #1
	while (*source != '\0') {
   81754:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   81758:	2b00      	cmp	r3, #0
   8175a:	d1f9      	bne.n	81750 <wtk_copy_string+0x4>
		++dest;
		++source;
	}

	/* Copy the terminating zero. */
	*dest = *source;
   8175c:	2300      	movs	r3, #0
   8175e:	7003      	strb	r3, [r0, #0]
   81760:	4770      	bx	lr
	...

00081764 <wtk_basic_frame_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_basic_frame_handler(struct win_window *win,
		enum win_event_type type, const void *data)
{
   81764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81766:	4606      	mov	r6, r0
   81768:	460c      	mov	r4, r1
   8176a:	4617      	mov	r7, r2
	/* Custom data for windows of a widget points back to the widget itself. */
	struct wtk_basic_frame *frame;
	bool should_destroy;
	struct win_clip_region const *clip;

	frame = win_get_custom_data(win);
   8176c:	4b1d      	ldr	r3, [pc, #116]	; (817e4 <wtk_basic_frame_handler+0x80>)
   8176e:	4798      	blx	r3
   81770:	4605      	mov	r5, r0

	switch (type) {
   81772:	2c09      	cmp	r4, #9
   81774:	d806      	bhi.n	81784 <wtk_basic_frame_handler+0x20>
   81776:	e8df f004 	tbb	[pc, r4]
   8177a:	052d      	.short	0x052d
   8177c:	0505051c 	.word	0x0505051c
   81780:	13050705 	.word	0x13050705
		 */
		return false;

	default:
		/* Reject unknown event types. */
		return false;
   81784:	2400      	movs	r4, #0
   81786:	e026      	b.n	817d6 <wtk_basic_frame_handler+0x72>
		if (win == frame->win) {
   81788:	6803      	ldr	r3, [r0, #0]
   8178a:	429e      	cmp	r6, r3
   8178c:	d001      	beq.n	81792 <wtk_basic_frame_handler+0x2e>
		return true;
   8178e:	2401      	movs	r4, #1
   81790:	e021      	b.n	817d6 <wtk_basic_frame_handler+0x72>
			if (frame->draw_handler) {
   81792:	68c3      	ldr	r3, [r0, #12]
   81794:	b30b      	cbz	r3, 817da <wtk_basic_frame_handler+0x76>
				frame->draw_handler(win, clip);
   81796:	4639      	mov	r1, r7
   81798:	4630      	mov	r0, r6
   8179a:	4798      	blx	r3
		return true;
   8179c:	2401      	movs	r4, #1
   8179e:	e01a      	b.n	817d6 <wtk_basic_frame_handler+0x72>
		if (win == frame->win) {
   817a0:	6803      	ldr	r3, [r0, #0]
   817a2:	429e      	cmp	r6, r3
		return true;
   817a4:	bf18      	it	ne
   817a6:	2401      	movne	r4, #1
		if (win == frame->win) {
   817a8:	d115      	bne.n	817d6 <wtk_basic_frame_handler+0x72>
			membag_free(frame);
   817aa:	4b0f      	ldr	r3, [pc, #60]	; (817e8 <wtk_basic_frame_handler+0x84>)
   817ac:	4798      	blx	r3
		return true;
   817ae:	2401      	movs	r4, #1
   817b0:	e011      	b.n	817d6 <wtk_basic_frame_handler+0x72>
		if (win == frame->win) {
   817b2:	6803      	ldr	r3, [r0, #0]
   817b4:	429e      	cmp	r6, r3
   817b6:	d001      	beq.n	817bc <wtk_basic_frame_handler+0x58>
		return false;
   817b8:	2400      	movs	r4, #0
   817ba:	e00c      	b.n	817d6 <wtk_basic_frame_handler+0x72>
			if (frame->frame_handler) {
   817bc:	6843      	ldr	r3, [r0, #4]
   817be:	b173      	cbz	r3, 817de <wtk_basic_frame_handler+0x7a>
				should_destroy = frame->frame_handler(frame,
   817c0:	4639      	mov	r1, r7
   817c2:	4798      	blx	r3
				if (should_destroy) {
   817c4:	4604      	mov	r4, r0
   817c6:	b908      	cbnz	r0, 817cc <wtk_basic_frame_handler+0x68>
				return true;
   817c8:	2401      	movs	r4, #1
   817ca:	e004      	b.n	817d6 <wtk_basic_frame_handler+0x72>
					win_destroy(frame->win);
   817cc:	6828      	ldr	r0, [r5, #0]
   817ce:	4b07      	ldr	r3, [pc, #28]	; (817ec <wtk_basic_frame_handler+0x88>)
   817d0:	4798      	blx	r3
   817d2:	e000      	b.n	817d6 <wtk_basic_frame_handler+0x72>
		return true;
   817d4:	2401      	movs	r4, #1
	}
}
   817d6:	4620      	mov	r0, r4
   817d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
   817da:	2401      	movs	r4, #1
   817dc:	e7fb      	b.n	817d6 <wtk_basic_frame_handler+0x72>
		return false;
   817de:	2400      	movs	r4, #0
   817e0:	e7f9      	b.n	817d6 <wtk_basic_frame_handler+0x72>
   817e2:	bf00      	nop
   817e4:	0008116d 	.word	0x0008116d
   817e8:	00081d19 	.word	0x00081d19
   817ec:	00081579 	.word	0x00081579

000817f0 <wtk_basic_frame_as_child>:
}
   817f0:	6800      	ldr	r0, [r0, #0]
   817f2:	4770      	bx	lr

000817f4 <wtk_basic_frame_create>:
struct wtk_basic_frame *wtk_basic_frame_create(struct win_window *parent,
		const struct win_area *area, struct gfx_bitmap *background,
		wtk_basic_frame_draw_handler_t draw_handler,
		wtk_basic_frame_command_handler_t frame_handler,
		void *custom_data)
{
   817f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   817f8:	b086      	sub	sp, #24
   817fa:	4607      	mov	r7, r0
   817fc:	460d      	mov	r5, r1
   817fe:	4616      	mov	r6, r2
   81800:	4698      	mov	r8, r3

	Assert(area);
	Assert(parent);

	/* Allocate memory for frame control data. */
	basic_frame = membag_alloc(sizeof(struct wtk_basic_frame));
   81802:	2010      	movs	r0, #16
   81804:	4b15      	ldr	r3, [pc, #84]	; (8185c <wtk_basic_frame_create+0x68>)
   81806:	4798      	blx	r3
	if (!basic_frame) {
   81808:	4604      	mov	r4, r0
   8180a:	b1b8      	cbz	r0, 8183c <wtk_basic_frame_create+0x48>
		goto outofmem_basic_frame;
	}

	/* Set window attributes */
	basic_frame->frame_handler = frame_handler;
   8180c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8180e:	6043      	str	r3, [r0, #4]
	basic_frame->custom_data = custom_data;
   81810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81812:	6083      	str	r3, [r0, #8]
	basic_frame->draw_handler = draw_handler;
   81814:	f8c0 800c 	str.w	r8, [r0, #12]

	/* Copy area info */
	attr.area = *area;
   81818:	466b      	mov	r3, sp
   8181a:	6828      	ldr	r0, [r5, #0]
   8181c:	6869      	ldr	r1, [r5, #4]
   8181e:	c303      	stmia	r3!, {r0, r1}
	attr.event_handler = wtk_basic_frame_handler;
   81820:	4b0f      	ldr	r3, [pc, #60]	; (81860 <wtk_basic_frame_create+0x6c>)
   81822:	9303      	str	r3, [sp, #12]
	attr.custom = basic_frame;
   81824:	9405      	str	r4, [sp, #20]

	/* Set background for window */
	if (background) {
   81826:	b16e      	cbz	r6, 81844 <wtk_basic_frame_create+0x50>
		attr.background = background;
   81828:	9602      	str	r6, [sp, #8]
		attr.behavior = 0;
   8182a:	2300      	movs	r3, #0
   8182c:	f88d 3010 	strb.w	r3, [sp, #16]
		attr.background = NULL;
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
	}

	/* Create the window */
	basic_frame->win = win_create(parent, &attr);
   81830:	4669      	mov	r1, sp
   81832:	4638      	mov	r0, r7
   81834:	4b0b      	ldr	r3, [pc, #44]	; (81864 <wtk_basic_frame_create+0x70>)
   81836:	4798      	blx	r3
   81838:	6020      	str	r0, [r4, #0]
	if (!basic_frame->win) {
   8183a:	b148      	cbz	r0, 81850 <wtk_basic_frame_create+0x5c>
outofmem_win:
	membag_free(basic_frame);

outofmem_basic_frame:
	return NULL;
}
   8183c:	4620      	mov	r0, r4
   8183e:	b006      	add	sp, #24
   81840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr.background = NULL;
   81844:	2300      	movs	r3, #0
   81846:	9302      	str	r3, [sp, #8]
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
   81848:	2302      	movs	r3, #2
   8184a:	f88d 3010 	strb.w	r3, [sp, #16]
   8184e:	e7ef      	b.n	81830 <wtk_basic_frame_create+0x3c>
	membag_free(basic_frame);
   81850:	4620      	mov	r0, r4
   81852:	4b05      	ldr	r3, [pc, #20]	; (81868 <wtk_basic_frame_create+0x74>)
   81854:	4798      	blx	r3
	return NULL;
   81856:	2400      	movs	r4, #0
   81858:	e7f0      	b.n	8183c <wtk_basic_frame_create+0x48>
   8185a:	bf00      	nop
   8185c:	00081c99 	.word	0x00081c99
   81860:	00081765 	.word	0x00081765
   81864:	00081171 	.word	0x00081171
   81868:	00081d19 	.word	0x00081d19

0008186c <wtk_button_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_button_handler(struct win_window *win,
		enum win_event_type type, void const *data)
{
   8186c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81870:	b08b      	sub	sp, #44	; 0x2c
   81872:	4607      	mov	r7, r0
   81874:	460e      	mov	r6, r1
   81876:	4614      	mov	r4, r2
	/* Custom data for windows of a widget points back to the widget itself. */
	struct wtk_button *button
   81878:	4b59      	ldr	r3, [pc, #356]	; (819e0 <wtk_button_handler+0x174>)
   8187a:	4798      	blx	r3
   8187c:	4605      	mov	r5, r0
		= (struct wtk_button *)win_get_custom_data(win);

	switch (type) {
   8187e:	2e07      	cmp	r6, #7
   81880:	d006      	beq.n	81890 <wtk_button_handler+0x24>
   81882:	2e09      	cmp	r6, #9
   81884:	f000 80a5 	beq.w	819d2 <wtk_button_handler+0x166>
   81888:	2e00      	cmp	r6, #0
   8188a:	d070      	beq.n	8196e <wtk_button_handler+0x102>
		return true;
	}

	default:
		/* Reject unknown event types. */
		return false;
   8188c:	2400      	movs	r4, #0
   8188e:	e06a      	b.n	81966 <wtk_button_handler+0xfa>
		struct win_area const *area = win_get_area(win);
   81890:	4638      	mov	r0, r7
   81892:	4b54      	ldr	r3, [pc, #336]	; (819e4 <wtk_button_handler+0x178>)
   81894:	4798      	blx	r3
   81896:	4607      	mov	r7, r0
		switch (button->state) {
   81898:	7b2b      	ldrb	r3, [r5, #12]
			caption_color = WTK_BUTTON_CAPTION_COLOR;
   8189a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8189e:	f241 0184 	movw	r1, #4228	; 0x1084
   818a2:	2b01      	cmp	r3, #1
   818a4:	bf18      	it	ne
   818a6:	4611      	movne	r1, r2
   818a8:	9105      	str	r1, [sp, #20]
   818aa:	f241 0284 	movw	r2, #4228	; 0x1084
   818ae:	f64f 76ff 	movw	r6, #65535	; 0xffff
   818b2:	2b01      	cmp	r3, #1
   818b4:	bf18      	it	ne
   818b6:	4616      	movne	r6, r2
		gfx_draw_filled_rect(clip->origin.x, clip->origin.y,
   818b8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   818bc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   818c0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   818c4:	f9b4 0000 	ldrsh.w	r0, [r4]
   818c8:	9600      	str	r6, [sp, #0]
   818ca:	f8df 8138 	ldr.w	r8, [pc, #312]	; 81a04 <wtk_button_handler+0x198>
   818ce:	47c0      	blx	r8
		gfx_draw_rect(clip->origin.x, clip->origin.y,
   818d0:	f9b4 6000 	ldrsh.w	r6, [r4]
   818d4:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   818d8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
   818dc:	f9b7 b006 	ldrsh.w	fp, [r7, #6]
/*! Generic implementation of gfx_draw_horizontal_line(). */
__always_inline static void gfx_generic_draw_horizontal_line(
		gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
		gfx_color_t color)
{
	gfx_draw_filled_rect(x, y, length, 1, color);
   818e0:	f04f 0a00 	mov.w	sl, #0
   818e4:	f8cd a000 	str.w	sl, [sp]
   818e8:	2301      	movs	r3, #1
   818ea:	9104      	str	r1, [sp, #16]
   818ec:	460a      	mov	r2, r1
   818ee:	4649      	mov	r1, r9
   818f0:	4630      	mov	r0, r6
   818f2:	47c0      	blx	r8
__always_inline static void gfx_generic_draw_rect(gfx_coord_t x,
		gfx_coord_t y, gfx_coord_t width, gfx_coord_t height,
		gfx_color_t color)
{
	gfx_draw_horizontal_line(x, y, width, color);
	gfx_draw_horizontal_line(x, y + height - 1, width, color);
   818f4:	f109 31ff 	add.w	r1, r9, #4294967295
   818f8:	4459      	add	r1, fp
	gfx_draw_filled_rect(x, y, length, 1, color);
   818fa:	f8cd a000 	str.w	sl, [sp]
   818fe:	2301      	movs	r3, #1
   81900:	9a04      	ldr	r2, [sp, #16]
   81902:	b209      	sxth	r1, r1
   81904:	4630      	mov	r0, r6
   81906:	47c0      	blx	r8
	gfx_draw_filled_rect(x, y, 1, length, color);
   81908:	f8cd a000 	str.w	sl, [sp]
   8190c:	465b      	mov	r3, fp
   8190e:	2201      	movs	r2, #1
   81910:	4649      	mov	r1, r9
   81912:	4630      	mov	r0, r6
   81914:	47c0      	blx	r8
	gfx_draw_vertical_line(x, y, height, color);
	gfx_draw_vertical_line(x + width - 1, y, height, color);
   81916:	1e70      	subs	r0, r6, #1
   81918:	9904      	ldr	r1, [sp, #16]
   8191a:	4408      	add	r0, r1
	gfx_draw_filled_rect(x, y, 1, length, color);
   8191c:	f8cd a000 	str.w	sl, [sp]
   81920:	465b      	mov	r3, fp
   81922:	2201      	movs	r2, #1
   81924:	4649      	mov	r1, r9
   81926:	b200      	sxth	r0, r0
   81928:	47c0      	blx	r8
				clip->origin.y + (area->size.y / 2),
   8192a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8192e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   81932:	8863      	ldrh	r3, [r4, #2]
   81934:	eb03 0262 	add.w	r2, r3, r2, asr #1
				clip->origin.x + (area->size.x / 2),
   81938:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
   8193c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   81940:	8823      	ldrh	r3, [r4, #0]
   81942:	eb03 0161 	add.w	r1, r3, r1, asr #1
		gfx_draw_string_aligned(button->caption,
   81946:	6868      	ldr	r0, [r5, #4]
   81948:	2302      	movs	r3, #2
   8194a:	9303      	str	r3, [sp, #12]
   8194c:	2312      	movs	r3, #18
   8194e:	9302      	str	r3, [sp, #8]
   81950:	9b05      	ldr	r3, [sp, #20]
   81952:	9301      	str	r3, [sp, #4]
   81954:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   81958:	9300      	str	r3, [sp, #0]
   8195a:	4b23      	ldr	r3, [pc, #140]	; (819e8 <wtk_button_handler+0x17c>)
   8195c:	b212      	sxth	r2, r2
   8195e:	b209      	sxth	r1, r1
   81960:	4c22      	ldr	r4, [pc, #136]	; (819ec <wtk_button_handler+0x180>)
   81962:	47a0      	blx	r4
		return true;
   81964:	2401      	movs	r4, #1
	}
}
   81966:	4620      	mov	r0, r4
   81968:	b00b      	add	sp, #44	; 0x2c
   8196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (event->type) {
   8196e:	7ae3      	ldrb	r3, [r4, #11]
   81970:	b11b      	cbz	r3, 8197a <wtk_button_handler+0x10e>
   81972:	2b02      	cmp	r3, #2
   81974:	d00e      	beq.n	81994 <wtk_button_handler+0x128>
		return true;
   81976:	2401      	movs	r4, #1
   81978:	e7f5      	b.n	81966 <wtk_button_handler+0xfa>
			if (button->state == WTK_BUTTON_NORMAL) {
   8197a:	7b03      	ldrb	r3, [r0, #12]
   8197c:	b10b      	cbz	r3, 81982 <wtk_button_handler+0x116>
		return true;
   8197e:	2401      	movs	r4, #1
   81980:	e7f1      	b.n	81966 <wtk_button_handler+0xfa>
				win_grab_pointer(button->container);
   81982:	6800      	ldr	r0, [r0, #0]
   81984:	4b1a      	ldr	r3, [pc, #104]	; (819f0 <wtk_button_handler+0x184>)
   81986:	4798      	blx	r3
				button->state = WTK_BUTTON_PRESSED;
   81988:	2401      	movs	r4, #1
   8198a:	732c      	strb	r4, [r5, #12]
				win_redraw(button->container);
   8198c:	6828      	ldr	r0, [r5, #0]
   8198e:	4b19      	ldr	r3, [pc, #100]	; (819f4 <wtk_button_handler+0x188>)
   81990:	4798      	blx	r3
   81992:	e7e8      	b.n	81966 <wtk_button_handler+0xfa>
			if (button->state == WTK_BUTTON_PRESSED) {
   81994:	7b03      	ldrb	r3, [r0, #12]
   81996:	2b01      	cmp	r3, #1
   81998:	d001      	beq.n	8199e <wtk_button_handler+0x132>
		return true;
   8199a:	2401      	movs	r4, #1
   8199c:	e7e3      	b.n	81966 <wtk_button_handler+0xfa>
				win_grab_pointer(NULL);
   8199e:	2000      	movs	r0, #0
   819a0:	4b13      	ldr	r3, [pc, #76]	; (819f0 <wtk_button_handler+0x184>)
   819a2:	4798      	blx	r3
				button->state = WTK_BUTTON_NORMAL;
   819a4:	2300      	movs	r3, #0
   819a6:	732b      	strb	r3, [r5, #12]
				win_redraw(button->container);
   819a8:	6828      	ldr	r0, [r5, #0]
   819aa:	4b12      	ldr	r3, [pc, #72]	; (819f4 <wtk_button_handler+0x188>)
   819ac:	4798      	blx	r3
				bool isInside = win_is_inside_window
   819ae:	4621      	mov	r1, r4
   819b0:	6828      	ldr	r0, [r5, #0]
   819b2:	4b11      	ldr	r3, [pc, #68]	; (819f8 <wtk_button_handler+0x18c>)
   819b4:	4798      	blx	r3
				if (isInside) {
   819b6:	4604      	mov	r4, r0
   819b8:	b908      	cbnz	r0, 819be <wtk_button_handler+0x152>
		return true;
   819ba:	2401      	movs	r4, #1
   819bc:	e7d3      	b.n	81966 <wtk_button_handler+0xfa>
					command.sender = button->
   819be:	682b      	ldr	r3, [r5, #0]
   819c0:	9307      	str	r3, [sp, #28]
						= button->
   819c2:	682b      	ldr	r3, [r5, #0]
   819c4:	9308      	str	r3, [sp, #32]
					command.data = button->
   819c6:	68ab      	ldr	r3, [r5, #8]
   819c8:	9309      	str	r3, [sp, #36]	; 0x24
					win_queue_command_event
   819ca:	a807      	add	r0, sp, #28
   819cc:	4b0b      	ldr	r3, [pc, #44]	; (819fc <wtk_button_handler+0x190>)
   819ce:	4798      	blx	r3
   819d0:	e7c9      	b.n	81966 <wtk_button_handler+0xfa>
		membag_free(button->caption);
   819d2:	6840      	ldr	r0, [r0, #4]
   819d4:	4c0a      	ldr	r4, [pc, #40]	; (81a00 <wtk_button_handler+0x194>)
   819d6:	47a0      	blx	r4
		membag_free(button);
   819d8:	4628      	mov	r0, r5
   819da:	47a0      	blx	r4
		return true;
   819dc:	2401      	movs	r4, #1
   819de:	e7c2      	b.n	81966 <wtk_button_handler+0xfa>
   819e0:	0008116d 	.word	0x0008116d
   819e4:	0008116b 	.word	0x0008116b
   819e8:	20070138 	.word	0x20070138
   819ec:	00080c7d 	.word	0x00080c7d
   819f0:	000811d1 	.word	0x000811d1
   819f4:	000816e1 	.word	0x000816e1
   819f8:	0008171d 	.word	0x0008171d
   819fc:	000811ad 	.word	0x000811ad
   81a00:	00081d19 	.word	0x00081d19
   81a04:	000807a1 	.word	0x000807a1

00081a08 <wtk_button_as_child>:
}
   81a08:	6800      	ldr	r0, [r0, #0]
   81a0a:	4770      	bx	lr

00081a0c <wtk_button_create>:
 * \return Pointer to button, or NULL if failed.
 */
struct wtk_button *wtk_button_create(struct win_window *parent,
		struct win_area const *area,
		char const *caption, win_command_t command_data)
{
   81a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81a10:	b086      	sub	sp, #24
   81a12:	4607      	mov	r7, r0
   81a14:	460e      	mov	r6, r1
   81a16:	4615      	mov	r5, r2
   81a18:	4698      	mov	r8, r3
	Assert(area);
	Assert(caption);
	Assert(parent);

	/* Allocate memory for button control data. */
	button = membag_alloc(sizeof(struct wtk_button));
   81a1a:	2010      	movs	r0, #16
   81a1c:	4b17      	ldr	r3, [pc, #92]	; (81a7c <wtk_button_create+0x70>)
   81a1e:	4798      	blx	r3
	if (!button) {
   81a20:	4604      	mov	r4, r0
   81a22:	b1f8      	cbz	r0, 81a64 <wtk_button_create+0x58>
		goto outofmem_button;
	}

	button->state = WTK_BUTTON_NORMAL;
   81a24:	2300      	movs	r3, #0
   81a26:	7303      	strb	r3, [r0, #12]
	button->command = command_data;
   81a28:	f8c0 8008 	str.w	r8, [r0, #8]

	/* Allocate memory for caption string, and copy text. */
	button->caption = membag_alloc((strlen(caption) + 1) * sizeof(char));
   81a2c:	4628      	mov	r0, r5
   81a2e:	4b14      	ldr	r3, [pc, #80]	; (81a80 <wtk_button_create+0x74>)
   81a30:	4798      	blx	r3
   81a32:	3001      	adds	r0, #1
   81a34:	4b11      	ldr	r3, [pc, #68]	; (81a7c <wtk_button_create+0x70>)
   81a36:	4798      	blx	r3
   81a38:	6060      	str	r0, [r4, #4]
	if (!button->caption) {
   81a3a:	b1d0      	cbz	r0, 81a72 <wtk_button_create+0x66>
		goto outofmem_caption;
	}

	wtk_copy_string(button->caption, caption);
   81a3c:	4629      	mov	r1, r5
   81a3e:	4b11      	ldr	r3, [pc, #68]	; (81a84 <wtk_button_create+0x78>)
   81a40:	4798      	blx	r3

	/* Handling information. */
	attr.event_handler = wtk_button_handler;
   81a42:	4b11      	ldr	r3, [pc, #68]	; (81a88 <wtk_button_create+0x7c>)
   81a44:	9303      	str	r3, [sp, #12]
	attr.custom = button;
   81a46:	9405      	str	r4, [sp, #20]

	/* Prepare container frame. */
	attr.area = *area;
   81a48:	466b      	mov	r3, sp
   81a4a:	6830      	ldr	r0, [r6, #0]
   81a4c:	6871      	ldr	r1, [r6, #4]
   81a4e:	c303      	stmia	r3!, {r0, r1}
	attr.background = NULL;
   81a50:	2300      	movs	r3, #0
   81a52:	9302      	str	r3, [sp, #8]
	attr.behavior = 0x00;
   81a54:	f88d 3010 	strb.w	r3, [sp, #16]

	button->container = win_create(parent, &attr);
   81a58:	4669      	mov	r1, sp
   81a5a:	4638      	mov	r0, r7
   81a5c:	4b0b      	ldr	r3, [pc, #44]	; (81a8c <wtk_button_create+0x80>)
   81a5e:	4798      	blx	r3
   81a60:	6020      	str	r0, [r4, #0]
	if (!button->container) {
   81a62:	b118      	cbz	r0, 81a6c <wtk_button_create+0x60>
outofmem_caption:
	membag_free(button);

outofmem_button:
	return NULL;
}
   81a64:	4620      	mov	r0, r4
   81a66:	b006      	add	sp, #24
   81a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	membag_free(button->caption);
   81a6c:	6860      	ldr	r0, [r4, #4]
   81a6e:	4b08      	ldr	r3, [pc, #32]	; (81a90 <wtk_button_create+0x84>)
   81a70:	4798      	blx	r3
	membag_free(button);
   81a72:	4620      	mov	r0, r4
   81a74:	4b06      	ldr	r3, [pc, #24]	; (81a90 <wtk_button_create+0x84>)
   81a76:	4798      	blx	r3
	return NULL;
   81a78:	2400      	movs	r4, #0
   81a7a:	e7f3      	b.n	81a64 <wtk_button_create+0x58>
   81a7c:	00081c99 	.word	0x00081c99
   81a80:	00083089 	.word	0x00083089
   81a84:	0008174d 	.word	0x0008174d
   81a88:	0008186d 	.word	0x0008186d
   81a8c:	00081171 	.word	0x00081171
   81a90:	00081d19 	.word	0x00081d19

00081a94 <wtk_label_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_label_handler(struct win_window *win,
		enum win_event_type type, void const *data)
{
   81a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81a98:	b085      	sub	sp, #20
   81a9a:	4607      	mov	r7, r0
   81a9c:	460d      	mov	r5, r1
   81a9e:	4616      	mov	r6, r2
	/* Custom data for windows of a widget points back to the widget itself. */
	struct wtk_label *label = (struct wtk_label *)win_get_custom_data(win);
   81aa0:	4b22      	ldr	r3, [pc, #136]	; (81b2c <wtk_label_handler+0x98>)
   81aa2:	4798      	blx	r3
   81aa4:	4604      	mov	r4, r0

	switch (type) {
   81aa6:	2d07      	cmp	r5, #7
   81aa8:	d003      	beq.n	81ab2 <wtk_label_handler+0x1e>
   81aaa:	2d09      	cmp	r5, #9
   81aac:	d033      	beq.n	81b16 <wtk_label_handler+0x82>
		 */
		return true;

	default:
		/* Reject unknown event types. */
		return false;
   81aae:	2500      	movs	r5, #0
   81ab0:	e037      	b.n	81b22 <wtk_label_handler+0x8e>
		struct win_area const *area = win_get_area(win);
   81ab2:	4638      	mov	r0, r7
   81ab4:	4b1e      	ldr	r3, [pc, #120]	; (81b30 <wtk_label_handler+0x9c>)
   81ab6:	4798      	blx	r3
   81ab8:	4607      	mov	r7, r0
		if (label->align_right == false) {
   81aba:	7a25      	ldrb	r5, [r4, #8]
   81abc:	b975      	cbnz	r5, 81adc <wtk_label_handler+0x48>
			gfx_draw_string(label->caption,
   81abe:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
   81ac2:	f9b6 1000 	ldrsh.w	r1, [r6]
   81ac6:	6860      	ldr	r0, [r4, #4]
   81ac8:	8963      	ldrh	r3, [r4, #10]
   81aca:	9301      	str	r3, [sp, #4]
   81acc:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   81ad0:	9300      	str	r3, [sp, #0]
   81ad2:	4b18      	ldr	r3, [pc, #96]	; (81b34 <wtk_label_handler+0xa0>)
   81ad4:	4c18      	ldr	r4, [pc, #96]	; (81b38 <wtk_label_handler+0xa4>)
   81ad6:	47a0      	blx	r4
		return true;
   81ad8:	2501      	movs	r5, #1
   81ada:	e022      	b.n	81b22 <wtk_label_handler+0x8e>
			gfx_get_string_bounding_box(label->caption,
   81adc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 81b34 <wtk_label_handler+0xa0>
   81ae0:	f10d 030e 	add.w	r3, sp, #14
   81ae4:	aa03      	add	r2, sp, #12
   81ae6:	4641      	mov	r1, r8
   81ae8:	6860      	ldr	r0, [r4, #4]
   81aea:	f8df 9054 	ldr.w	r9, [pc, #84]	; 81b40 <wtk_label_handler+0xac>
   81aee:	47c8      	blx	r9
			gfx_draw_string(label->caption,
   81af0:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
					clip->origin.x + area->size.x -
   81af4:	8831      	ldrh	r1, [r6, #0]
   81af6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81afa:	1ac9      	subs	r1, r1, r3
   81afc:	88bb      	ldrh	r3, [r7, #4]
   81afe:	4419      	add	r1, r3
			gfx_draw_string(label->caption,
   81b00:	6860      	ldr	r0, [r4, #4]
   81b02:	8963      	ldrh	r3, [r4, #10]
   81b04:	9301      	str	r3, [sp, #4]
   81b06:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   81b0a:	9300      	str	r3, [sp, #0]
   81b0c:	4643      	mov	r3, r8
   81b0e:	b209      	sxth	r1, r1
   81b10:	4c09      	ldr	r4, [pc, #36]	; (81b38 <wtk_label_handler+0xa4>)
   81b12:	47a0      	blx	r4
   81b14:	e005      	b.n	81b22 <wtk_label_handler+0x8e>
		membag_free(label->caption);
   81b16:	6840      	ldr	r0, [r0, #4]
   81b18:	4d08      	ldr	r5, [pc, #32]	; (81b3c <wtk_label_handler+0xa8>)
   81b1a:	47a8      	blx	r5
		membag_free(label);
   81b1c:	4620      	mov	r0, r4
   81b1e:	47a8      	blx	r5
		return true;
   81b20:	2501      	movs	r5, #1
	}
}
   81b22:	4628      	mov	r0, r5
   81b24:	b005      	add	sp, #20
   81b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81b2a:	bf00      	nop
   81b2c:	0008116d 	.word	0x0008116d
   81b30:	0008116b 	.word	0x0008116b
   81b34:	20070138 	.word	0x20070138
   81b38:	00080dc1 	.word	0x00080dc1
   81b3c:	00081d19 	.word	0x00081d19
   81b40:	00080c41 	.word	0x00080c41

00081b44 <wtk_label_as_child>:
}
   81b44:	6800      	ldr	r0, [r0, #0]
   81b46:	4770      	bx	lr

00081b48 <wtk_label_size_hint>:
 *
 * \retval size   Suggested size for the widget
 * \param caption Pointer to caption string to use for widget.
 */
void wtk_label_size_hint(struct win_point *size, const char *caption)
{
   81b48:	b510      	push	{r4, lr}
   81b4a:	4602      	mov	r2, r0
   81b4c:	4608      	mov	r0, r1
	Assert(size);
	Assert(caption);

	gfx_get_string_bounding_box(caption, &sysfont, &size->x, &size->y);
   81b4e:	1c93      	adds	r3, r2, #2
   81b50:	4901      	ldr	r1, [pc, #4]	; (81b58 <wtk_label_size_hint+0x10>)
   81b52:	4c02      	ldr	r4, [pc, #8]	; (81b5c <wtk_label_size_hint+0x14>)
   81b54:	47a0      	blx	r4
   81b56:	bd10      	pop	{r4, pc}
   81b58:	20070138 	.word	0x20070138
   81b5c:	00080c41 	.word	0x00080c41

00081b60 <wtk_label_create>:
 */
struct wtk_label *wtk_label_create(struct win_window *parent,
		struct win_area const *area, char const *caption,
		gfx_color_t text_color, struct gfx_bitmap *background,
		bool align_right)
{
   81b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81b64:	b087      	sub	sp, #28
   81b66:	4680      	mov	r8, r0
   81b68:	460e      	mov	r6, r1
   81b6a:	4615      	mov	r5, r2
   81b6c:	4699      	mov	r9, r3
   81b6e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	Assert(area);
	Assert(caption);
	Assert(parent);

	/* Allocate memory for label control data. */
	label = membag_alloc(sizeof(struct wtk_label));
   81b70:	200c      	movs	r0, #12
   81b72:	4b1c      	ldr	r3, [pc, #112]	; (81be4 <wtk_label_create+0x84>)
   81b74:	4798      	blx	r3
	if (!label) {
   81b76:	4604      	mov	r4, r0
   81b78:	b308      	cbz	r0, 81bbe <wtk_label_create+0x5e>
		goto outofmem_label;
	}

	label->text_color = text_color;
   81b7a:	f8a0 900a 	strh.w	r9, [r0, #10]
	label->align_right = align_right;
   81b7e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   81b82:	7203      	strb	r3, [r0, #8]

	/* Allocate memory for caption string, and copy text. */
	label->caption = membag_alloc((strlen(caption) + 1) * sizeof(char));
   81b84:	4628      	mov	r0, r5
   81b86:	4b18      	ldr	r3, [pc, #96]	; (81be8 <wtk_label_create+0x88>)
   81b88:	4798      	blx	r3
   81b8a:	3001      	adds	r0, #1
   81b8c:	4b15      	ldr	r3, [pc, #84]	; (81be4 <wtk_label_create+0x84>)
   81b8e:	4798      	blx	r3
   81b90:	6060      	str	r0, [r4, #4]
	if (!label->caption) {
   81b92:	b308      	cbz	r0, 81bd8 <wtk_label_create+0x78>
		goto outofmem_caption;
	}

	wtk_copy_string(label->caption, caption);
   81b94:	4629      	mov	r1, r5
   81b96:	4b15      	ldr	r3, [pc, #84]	; (81bec <wtk_label_create+0x8c>)
   81b98:	4798      	blx	r3
	
	/* Handling information. */
	attr.event_handler = wtk_label_handler;
   81b9a:	4b15      	ldr	r3, [pc, #84]	; (81bf0 <wtk_label_create+0x90>)
   81b9c:	9303      	str	r3, [sp, #12]
	attr.custom = label;
   81b9e:	9405      	str	r4, [sp, #20]

	/* Prepare container frame. */
	attr.area = *area;
   81ba0:	466b      	mov	r3, sp
   81ba2:	6830      	ldr	r0, [r6, #0]
   81ba4:	6871      	ldr	r1, [r6, #4]
   81ba6:	c303      	stmia	r3!, {r0, r1}
	
	/* Set background for label. */
	if (background) {
   81ba8:	b16f      	cbz	r7, 81bc6 <wtk_label_create+0x66>
		attr.background = background;
   81baa:	9702      	str	r7, [sp, #8]
		attr.behavior = 0;
   81bac:	2300      	movs	r3, #0
   81bae:	f88d 3010 	strb.w	r3, [sp, #16]
	} else {
		attr.background = NULL;
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
	}
	
	label->container = win_create(parent, &attr);
   81bb2:	4669      	mov	r1, sp
   81bb4:	4640      	mov	r0, r8
   81bb6:	4b0f      	ldr	r3, [pc, #60]	; (81bf4 <wtk_label_create+0x94>)
   81bb8:	4798      	blx	r3
   81bba:	6020      	str	r0, [r4, #0]
	if (!label->container) {
   81bbc:	b148      	cbz	r0, 81bd2 <wtk_label_create+0x72>
outofmem_caption:
	membag_free(label);

outofmem_label:
	return NULL;
}
   81bbe:	4620      	mov	r0, r4
   81bc0:	b007      	add	sp, #28
   81bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		attr.background = NULL;
   81bc6:	2300      	movs	r3, #0
   81bc8:	9302      	str	r3, [sp, #8]
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
   81bca:	2302      	movs	r3, #2
   81bcc:	f88d 3010 	strb.w	r3, [sp, #16]
   81bd0:	e7ef      	b.n	81bb2 <wtk_label_create+0x52>
	membag_free(label->caption);
   81bd2:	6860      	ldr	r0, [r4, #4]
   81bd4:	4b08      	ldr	r3, [pc, #32]	; (81bf8 <wtk_label_create+0x98>)
   81bd6:	4798      	blx	r3
	membag_free(label);
   81bd8:	4620      	mov	r0, r4
   81bda:	4b07      	ldr	r3, [pc, #28]	; (81bf8 <wtk_label_create+0x98>)
   81bdc:	4798      	blx	r3
	return NULL;
   81bde:	2400      	movs	r4, #0
   81be0:	e7ed      	b.n	81bbe <wtk_label_create+0x5e>
   81be2:	bf00      	nop
   81be4:	00081c99 	.word	0x00081c99
   81be8:	00083089 	.word	0x00083089
   81bec:	0008174d 	.word	0x0008174d
   81bf0:	00081a95 	.word	0x00081a95
   81bf4:	00081171 	.word	0x00081171
   81bf8:	00081d19 	.word	0x00081d19

00081bfc <wtk_progress_bar_set_value>:
 * \param value New value for the progress bar.
 *
 * \return True if progress bar's value was changed.
 */
bool wtk_progress_bar_set_value(struct wtk_progress_bar *bar, uint8_t value)
{
   81bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct win_area const *area;

	Assert(bar);
	Assert(value <= bar->maximum);

	if (value != bar->value) {
   81bfe:	7943      	ldrb	r3, [r0, #5]
   81c00:	428b      	cmp	r3, r1
   81c02:	d01d      	beq.n	81c40 <wtk_progress_bar_set_value+0x44>
   81c04:	4604      	mov	r4, r0
   81c06:	460d      	mov	r5, r1
		bar->value = value;
   81c08:	7161      	strb	r1, [r4, #5]
		option = bar->option;
   81c0a:	79c6      	ldrb	r6, [r0, #7]
		maximum = bar->maximum;
   81c0c:	7907      	ldrb	r7, [r0, #4]
		area = win_get_area(bar->container);
   81c0e:	6800      	ldr	r0, [r0, #0]
   81c10:	4b0c      	ldr	r3, [pc, #48]	; (81c44 <wtk_progress_bar_set_value+0x48>)
   81c12:	4798      	blx	r3

		/* Get length of progress bar from window. */
		if (option & WTK_PROGRESS_BAR_VERTICAL) {
   81c14:	f016 0f01 	tst.w	r6, #1
			length = area->size.y;
   81c18:	bf14      	ite	ne
   81c1a:	7982      	ldrbne	r2, [r0, #6]
		} else {
			length = area->size.x;
   81c1c:	7902      	ldrbeq	r2, [r0, #4]
		}

		length -= 2;
   81c1e:	3a02      	subs	r2, #2
   81c20:	b2d2      	uxtb	r2, r2

		if (option & WTK_PROGRESS_BAR_INVERT) {
   81c22:	f016 0f02 	tst.w	r6, #2
			value = maximum - value;
   81c26:	bf1c      	itt	ne
   81c28:	1b7d      	subne	r5, r7, r5
   81c2a:	b2ed      	uxtbne	r5, r5
		}

		bar->position = wtk_rescale_value(value, maximum, length);
   81c2c:	4639      	mov	r1, r7
   81c2e:	4628      	mov	r0, r5
   81c30:	4b05      	ldr	r3, [pc, #20]	; (81c48 <wtk_progress_bar_set_value+0x4c>)
   81c32:	4798      	blx	r3
   81c34:	71a0      	strb	r0, [r4, #6]
		win_redraw(bar->container);
   81c36:	6820      	ldr	r0, [r4, #0]
   81c38:	4b04      	ldr	r3, [pc, #16]	; (81c4c <wtk_progress_bar_set_value+0x50>)
   81c3a:	4798      	blx	r3

		return true;
   81c3c:	2001      	movs	r0, #1
   81c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		return false;
   81c40:	2000      	movs	r0, #0
	}
}
   81c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81c44:	0008116b 	.word	0x0008116b
   81c48:	00081741 	.word	0x00081741
   81c4c:	000816e1 	.word	0x000816e1

00081c50 <wtk_slider_get_value>:
 */
uint8_t wtk_slider_get_value(struct wtk_slider const *slider)
{
	Assert(slider);

	if (slider->option & WTK_SLIDER_INVERT) {
   81c50:	7b03      	ldrb	r3, [r0, #12]
   81c52:	f013 0f08 	tst.w	r3, #8
   81c56:	d101      	bne.n	81c5c <wtk_slider_get_value+0xc>
		return slider->maximum - slider->value;
	} else {
		return slider->value;
   81c58:	7a80      	ldrb	r0, [r0, #10]
	}
}
   81c5a:	4770      	bx	lr
		return slider->maximum - slider->value;
   81c5c:	7a43      	ldrb	r3, [r0, #9]
   81c5e:	7a80      	ldrb	r0, [r0, #10]
   81c60:	1a18      	subs	r0, r3, r0
   81c62:	b2c0      	uxtb	r0, r0
   81c64:	4770      	bx	lr
	...

00081c68 <membag_init>:
 * This function sets up the membags, allocates memory from the memory pool, and
 * initializes them. Any existing allocations are destroyed and all memory pools
 * reset to their initial states.
 */
void membag_init(void)
{
   81c68:	b430      	push	{r4, r5}
	uint8_t i;
	uintptr_t poolptr;

	poolptr = (uintptr_t)membag_pool;
   81c6a:	4a09      	ldr	r2, [pc, #36]	; (81c90 <membag_init+0x28>)
   81c6c:	4b09      	ldr	r3, [pc, #36]	; (81c94 <membag_init+0x2c>)
   81c6e:	f103 0578 	add.w	r5, r3, #120	; 0x78
				membag_list[i].num_blocks);
		membag_list[i].end = poolptr;
		membag_list[i].blocks_free = membag_list[i].num_blocks;

		/* Mark all blocks as free. */
		membag_list[i].allocated = 0;
   81c72:	2400      	movs	r4, #0
		membag_list[i].start = poolptr;
   81c74:	609a      	str	r2, [r3, #8]
				membag_list[i].num_blocks);
   81c76:	6859      	ldr	r1, [r3, #4]
		poolptr += (membag_list[i].block_size *
   81c78:	6818      	ldr	r0, [r3, #0]
   81c7a:	fb00 2201 	mla	r2, r0, r1, r2
		membag_list[i].end = poolptr;
   81c7e:	60da      	str	r2, [r3, #12]
		membag_list[i].blocks_free = membag_list[i].num_blocks;
   81c80:	7519      	strb	r1, [r3, #20]
		membag_list[i].allocated = 0;
   81c82:	611c      	str	r4, [r3, #16]
   81c84:	3318      	adds	r3, #24
	for (i = 0; i < ARRAY_LEN(membag_list); i++) {
   81c86:	42ab      	cmp	r3, r5
   81c88:	d1f4      	bne.n	81c74 <membag_init+0xc>
	}
}
   81c8a:	bc30      	pop	{r4, r5}
   81c8c:	4770      	bx	lr
   81c8e:	bf00      	nop
   81c90:	20070be0 	.word	0x20070be0
   81c94:	20070144 	.word	0x20070144

00081c98 <membag_alloc>:
 *
 * \return Pointer to the start of an allocated block if one was found in the
 *         Membag pool, NULL if no suitable block was found.
 */
void *membag_alloc(const size_t size)
{
   81c98:	b4f0      	push	{r4, r5, r6, r7}
   81c9a:	4b1e      	ldr	r3, [pc, #120]	; (81d14 <membag_alloc+0x7c>)
   81c9c:	f103 0478 	add.w	r4, r3, #120	; 0x78
	uint8_t i;
	struct membag *smallest_bag = NULL;
   81ca0:	2500      	movs	r5, #0
   81ca2:	e003      	b.n	81cac <membag_alloc+0x14>
		}

		if (membag_list[i].block_size >= size) {
			if (!smallest_bag ||
					(smallest_bag->block_size > membag_list[i].block_size)) {
				smallest_bag = &membag_list[i];
   81ca4:	461d      	mov	r5, r3
   81ca6:	3318      	adds	r3, #24
	for (i = 0; i < ARRAY_LEN(membag_list); i++) {
   81ca8:	429c      	cmp	r4, r3
   81caa:	d00c      	beq.n	81cc6 <membag_alloc+0x2e>
		if (membag_list[i].blocks_free == 0) {
   81cac:	7d1a      	ldrb	r2, [r3, #20]
   81cae:	2a00      	cmp	r2, #0
   81cb0:	d0f9      	beq.n	81ca6 <membag_alloc+0xe>
		if (membag_list[i].block_size >= size) {
   81cb2:	681a      	ldr	r2, [r3, #0]
   81cb4:	4282      	cmp	r2, r0
   81cb6:	d3f6      	bcc.n	81ca6 <membag_alloc+0xe>
			if (!smallest_bag ||
   81cb8:	2d00      	cmp	r5, #0
   81cba:	d0f3      	beq.n	81ca4 <membag_alloc+0xc>
   81cbc:	682e      	ldr	r6, [r5, #0]
				smallest_bag = &membag_list[i];
   81cbe:	42b2      	cmp	r2, r6
   81cc0:	bf38      	it	cc
   81cc2:	461d      	movcc	r5, r3
   81cc4:	e7ef      	b.n	81ca6 <membag_alloc+0xe>
	}

	/* We return the first available block in the bag that has one, and if
	 * there is none, we return NULL.
	 */
	if (smallest_bag) {
   81cc6:	b30d      	cbz	r5, 81d0c <membag_alloc+0x74>
		/* We know that there is a free block within the membag's
		 * memory, and we simply return the first one available.
		 */
		p = smallest_bag->start;
   81cc8:	68a8      	ldr	r0, [r5, #8]

		for (i = 0; i < smallest_bag->num_blocks; i++) {
   81cca:	6869      	ldr	r1, [r5, #4]
   81ccc:	b301      	cbz	r1, 81d10 <membag_alloc+0x78>
			/* Check the allocation byte to see whether the block is
			 * in use. */
			if (!(smallest_bag->allocated & ((uint32_t)1 << i))) {
   81cce:	692c      	ldr	r4, [r5, #16]
   81cd0:	f014 0f01 	tst.w	r4, #1
   81cd4:	d016      	beq.n	81d04 <membag_alloc+0x6c>
				smallest_bag->blocks_free--;

				return (void *)(p);
			}

			p += smallest_bag->block_size;
   81cd6:	682e      	ldr	r6, [r5, #0]
   81cd8:	2300      	movs	r3, #0
   81cda:	4430      	add	r0, r6
		for (i = 0; i < smallest_bag->num_blocks; i++) {
   81cdc:	3301      	adds	r3, #1
   81cde:	b2db      	uxtb	r3, r3
   81ce0:	428b      	cmp	r3, r1
   81ce2:	d211      	bcs.n	81d08 <membag_alloc+0x70>
			if (!(smallest_bag->allocated & ((uint32_t)1 << i))) {
   81ce4:	461f      	mov	r7, r3
   81ce6:	fa24 f203 	lsr.w	r2, r4, r3
   81cea:	f012 0f01 	tst.w	r2, #1
   81cee:	d1f4      	bne.n	81cda <membag_alloc+0x42>
				smallest_bag->allocated |= ((uint32_t)1 << i);
   81cf0:	2301      	movs	r3, #1
   81cf2:	fa03 f707 	lsl.w	r7, r3, r7
   81cf6:	433c      	orrs	r4, r7
   81cf8:	612c      	str	r4, [r5, #16]
				smallest_bag->blocks_free--;
   81cfa:	7d2b      	ldrb	r3, [r5, #20]
   81cfc:	3b01      	subs	r3, #1
   81cfe:	752b      	strb	r3, [r5, #20]
		}
	}

	/* There is no available memory. Return NULL. */
	return NULL;
}
   81d00:	bcf0      	pop	{r4, r5, r6, r7}
   81d02:	4770      	bx	lr
			if (!(smallest_bag->allocated & ((uint32_t)1 << i))) {
   81d04:	2700      	movs	r7, #0
   81d06:	e7f3      	b.n	81cf0 <membag_alloc+0x58>
	return NULL;
   81d08:	2000      	movs	r0, #0
   81d0a:	e7f9      	b.n	81d00 <membag_alloc+0x68>
   81d0c:	2000      	movs	r0, #0
   81d0e:	e7f7      	b.n	81d00 <membag_alloc+0x68>
   81d10:	2000      	movs	r0, #0
   81d12:	e7f5      	b.n	81d00 <membag_alloc+0x68>
   81d14:	20070144 	.word	0x20070144

00081d18 <membag_free>:
 *       allocation request may take a variable amount of cycles to complete.
 *
 * \param ptr Pointer to an allocated memory block to free
 */
void membag_free(const void *ptr)
{
   81d18:	b4f0      	push	{r4, r5, r6, r7}
   81d1a:	4a11      	ldr	r2, [pc, #68]	; (81d60 <membag_free+0x48>)
	uint8_t i;
	uintptr_t p = (uintptr_t)ptr;
   81d1c:	2300      	movs	r3, #0
   81d1e:	e003      	b.n	81d28 <membag_free+0x10>
   81d20:	3301      	adds	r3, #1
   81d22:	3218      	adds	r2, #24
	uint8_t block_index;

	for (i = 0; i < ARRAY_LEN(membag_list); i++) {
   81d24:	2b05      	cmp	r3, #5
   81d26:	d019      	beq.n	81d5c <membag_free+0x44>
		if (p >= membag_list[i].start && p < membag_list[i].end) {
   81d28:	6891      	ldr	r1, [r2, #8]
   81d2a:	4288      	cmp	r0, r1
   81d2c:	d3f8      	bcc.n	81d20 <membag_free+0x8>
   81d2e:	68d5      	ldr	r5, [r2, #12]
   81d30:	42a8      	cmp	r0, r5
   81d32:	d2f5      	bcs.n	81d20 <membag_free+0x8>
			block_index = (p - membag_list[i].start) / membag_list[i].block_size;
			
			/* Mark the memory as free. */
			membag_list[i].allocated &= ~((uint32_t)1 << block_index);
   81d34:	4a0a      	ldr	r2, [pc, #40]	; (81d60 <membag_free+0x48>)
   81d36:	005d      	lsls	r5, r3, #1
   81d38:	18ee      	adds	r6, r5, r3
   81d3a:	00f6      	lsls	r6, r6, #3
   81d3c:	1997      	adds	r7, r2, r6
			block_index = (p - membag_list[i].start) / membag_list[i].block_size;
   81d3e:	1a43      	subs	r3, r0, r1
   81d40:	5991      	ldr	r1, [r2, r6]
   81d42:	fbb3 f3f1 	udiv	r3, r3, r1
			membag_list[i].allocated &= ~((uint32_t)1 << block_index);
   81d46:	b2db      	uxtb	r3, r3
   81d48:	2101      	movs	r1, #1
   81d4a:	fa01 f303 	lsl.w	r3, r1, r3
   81d4e:	6939      	ldr	r1, [r7, #16]
   81d50:	ea21 0103 	bic.w	r1, r1, r3
   81d54:	6139      	str	r1, [r7, #16]
			membag_list[i].blocks_free++;
   81d56:	7d3b      	ldrb	r3, [r7, #20]
   81d58:	3301      	adds	r3, #1
   81d5a:	753b      	strb	r3, [r7, #20]

			return;
		}
	}
}
   81d5c:	bcf0      	pop	{r4, r5, r6, r7}
   81d5e:	4770      	bx	lr
   81d60:	20070144 	.word	0x20070144

00081d64 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   81d68:	b980      	cbnz	r0, 81d8c <_read+0x28>
   81d6a:	460c      	mov	r4, r1
   81d6c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   81d6e:	2a00      	cmp	r2, #0
   81d70:	dd0f      	ble.n	81d92 <_read+0x2e>
   81d72:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   81d74:	4e08      	ldr	r6, [pc, #32]	; (81d98 <_read+0x34>)
   81d76:	4d09      	ldr	r5, [pc, #36]	; (81d9c <_read+0x38>)
   81d78:	6830      	ldr	r0, [r6, #0]
   81d7a:	4621      	mov	r1, r4
   81d7c:	682b      	ldr	r3, [r5, #0]
   81d7e:	4798      	blx	r3
		ptr++;
   81d80:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   81d82:	42bc      	cmp	r4, r7
   81d84:	d1f8      	bne.n	81d78 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   81d86:	4640      	mov	r0, r8
   81d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81d8c:	f04f 38ff 	mov.w	r8, #4294967295
   81d90:	e7f9      	b.n	81d86 <_read+0x22>
	for (; len > 0; --len) {
   81d92:	4680      	mov	r8, r0
   81d94:	e7f7      	b.n	81d86 <_read+0x22>
   81d96:	bf00      	nop
   81d98:	20071308 	.word	0x20071308
   81d9c:	20071300 	.word	0x20071300

00081da0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81da0:	3801      	subs	r0, #1
   81da2:	2802      	cmp	r0, #2
   81da4:	d815      	bhi.n	81dd2 <_write+0x32>
{
   81da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81daa:	460e      	mov	r6, r1
   81dac:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   81dae:	b19a      	cbz	r2, 81dd8 <_write+0x38>
   81db0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81db2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81dec <_write+0x4c>
   81db6:	4f0c      	ldr	r7, [pc, #48]	; (81de8 <_write+0x48>)
   81db8:	f8d8 0000 	ldr.w	r0, [r8]
   81dbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   81dc0:	683b      	ldr	r3, [r7, #0]
   81dc2:	4798      	blx	r3
   81dc4:	2800      	cmp	r0, #0
   81dc6:	db0a      	blt.n	81dde <_write+0x3e>
   81dc8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   81dca:	3c01      	subs	r4, #1
   81dcc:	d1f4      	bne.n	81db8 <_write+0x18>
   81dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81dd2:	f04f 30ff 	mov.w	r0, #4294967295
   81dd6:	4770      	bx	lr
	for (; len != 0; --len) {
   81dd8:	4610      	mov	r0, r2
   81dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   81dde:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   81de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81de6:	bf00      	nop
   81de8:	20071304 	.word	0x20071304
   81dec:	20071308 	.word	0x20071308

00081df0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   81df0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   81df2:	4b04      	ldr	r3, [pc, #16]	; (81e04 <spi_enable_clock+0x14>)
   81df4:	4298      	cmp	r0, r3
   81df6:	d000      	beq.n	81dfa <spi_enable_clock+0xa>
   81df8:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81dfa:	2018      	movs	r0, #24
   81dfc:	4b02      	ldr	r3, [pc, #8]	; (81e08 <spi_enable_clock+0x18>)
   81dfe:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   81e00:	e7fa      	b.n	81df8 <spi_enable_clock+0x8>
   81e02:	bf00      	nop
   81e04:	40008000 	.word	0x40008000
   81e08:	000826e9 	.word	0x000826e9

00081e0c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   81e0c:	6843      	ldr	r3, [r0, #4]
   81e0e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   81e12:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   81e14:	6843      	ldr	r3, [r0, #4]
   81e16:	0409      	lsls	r1, r1, #16
   81e18:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   81e1c:	4319      	orrs	r1, r3
   81e1e:	6041      	str	r1, [r0, #4]
   81e20:	4770      	bx	lr

00081e22 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   81e22:	6843      	ldr	r3, [r0, #4]
   81e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81e28:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   81e2a:	6843      	ldr	r3, [r0, #4]
   81e2c:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   81e30:	6041      	str	r1, [r0, #4]
   81e32:	4770      	bx	lr

00081e34 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   81e34:	b932      	cbnz	r2, 81e44 <spi_set_clock_polarity+0x10>
   81e36:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   81e3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81e3c:	f023 0301 	bic.w	r3, r3, #1
   81e40:	6303      	str	r3, [r0, #48]	; 0x30
   81e42:	4770      	bx	lr
   81e44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   81e48:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81e4a:	f043 0301 	orr.w	r3, r3, #1
   81e4e:	6303      	str	r3, [r0, #48]	; 0x30
   81e50:	4770      	bx	lr

00081e52 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   81e52:	b932      	cbnz	r2, 81e62 <spi_set_clock_phase+0x10>
   81e54:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   81e58:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81e5a:	f023 0302 	bic.w	r3, r3, #2
   81e5e:	6303      	str	r3, [r0, #48]	; 0x30
   81e60:	4770      	bx	lr
   81e62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   81e66:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81e68:	f043 0302 	orr.w	r3, r3, #2
   81e6c:	6303      	str	r3, [r0, #48]	; 0x30
   81e6e:	4770      	bx	lr

00081e70 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   81e70:	2a04      	cmp	r2, #4
   81e72:	d003      	beq.n	81e7c <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   81e74:	b16a      	cbz	r2, 81e92 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   81e76:	2a08      	cmp	r2, #8
   81e78:	d016      	beq.n	81ea8 <spi_configure_cs_behavior+0x38>
   81e7a:	4770      	bx	lr
   81e7c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   81e80:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81e82:	f023 0308 	bic.w	r3, r3, #8
   81e86:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   81e88:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81e8a:	f043 0304 	orr.w	r3, r3, #4
   81e8e:	6303      	str	r3, [r0, #48]	; 0x30
   81e90:	4770      	bx	lr
   81e92:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   81e96:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81e98:	f023 0308 	bic.w	r3, r3, #8
   81e9c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   81e9e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81ea0:	f023 0304 	bic.w	r3, r3, #4
   81ea4:	6303      	str	r3, [r0, #48]	; 0x30
   81ea6:	4770      	bx	lr
   81ea8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   81eac:	6b03      	ldr	r3, [r0, #48]	; 0x30
   81eae:	f043 0308 	orr.w	r3, r3, #8
   81eb2:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   81eb4:	e7e1      	b.n	81e7a <spi_configure_cs_behavior+0xa>

00081eb6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   81eb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   81eba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   81ec0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   81ec2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81ec4:	431a      	orrs	r2, r3
   81ec6:	630a      	str	r2, [r1, #48]	; 0x30
   81ec8:	4770      	bx	lr

00081eca <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   81eca:	1e43      	subs	r3, r0, #1
   81ecc:	4419      	add	r1, r3
   81ece:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   81ed2:	1e43      	subs	r3, r0, #1
   81ed4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   81ed6:	bf94      	ite	ls
   81ed8:	b200      	sxthls	r0, r0
		return -1;
   81eda:	f04f 30ff 	movhi.w	r0, #4294967295
}
   81ede:	4770      	bx	lr

00081ee0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
   81ee0:	b172      	cbz	r2, 81f00 <spi_set_baudrate_div+0x20>
{
   81ee2:	b410      	push	{r4}
   81ee4:	4614      	mov	r4, r2
   81ee6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   81eea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81eec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   81ef0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   81ef2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   81ef4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   81ef8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   81efa:	2000      	movs	r0, #0
}
   81efc:	bc10      	pop	{r4}
   81efe:	4770      	bx	lr
        return -1;
   81f00:	f04f 30ff 	mov.w	r0, #4294967295
   81f04:	4770      	bx	lr

00081f06 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   81f06:	b410      	push	{r4}
   81f08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   81f0c:	6b08      	ldr	r0, [r1, #48]	; 0x30
   81f0e:	b280      	uxth	r0, r0
   81f10:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   81f12:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   81f14:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   81f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   81f1c:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   81f1e:	bc10      	pop	{r4}
   81f20:	4770      	bx	lr

00081f22 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81f22:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81f24:	23ac      	movs	r3, #172	; 0xac
   81f26:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81f28:	680b      	ldr	r3, [r1, #0]
   81f2a:	684a      	ldr	r2, [r1, #4]
   81f2c:	fbb3 f3f2 	udiv	r3, r3, r2
   81f30:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81f32:	1e5c      	subs	r4, r3, #1
   81f34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81f38:	4294      	cmp	r4, r2
   81f3a:	d80b      	bhi.n	81f54 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   81f3c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81f3e:	688b      	ldr	r3, [r1, #8]
   81f40:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81f42:	f240 2302 	movw	r3, #514	; 0x202
   81f46:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81f4a:	2350      	movs	r3, #80	; 0x50
   81f4c:	6003      	str	r3, [r0, #0]

	return 0;
   81f4e:	2000      	movs	r0, #0
}
   81f50:	bc10      	pop	{r4}
   81f52:	4770      	bx	lr
		return 1;
   81f54:	2001      	movs	r0, #1
   81f56:	e7fb      	b.n	81f50 <uart_init+0x2e>

00081f58 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81f58:	6943      	ldr	r3, [r0, #20]
   81f5a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81f5e:	bf1a      	itte	ne
   81f60:	61c1      	strne	r1, [r0, #28]
	return 0;
   81f62:	2000      	movne	r0, #0
		return 1;
   81f64:	2001      	moveq	r0, #1
}
   81f66:	4770      	bx	lr

00081f68 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81f68:	6943      	ldr	r3, [r0, #20]
   81f6a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81f6e:	bf1d      	ittte	ne
   81f70:	6983      	ldrne	r3, [r0, #24]
   81f72:	700b      	strbne	r3, [r1, #0]
	return 0;
   81f74:	2000      	movne	r0, #0
		return 1;
   81f76:	2001      	moveq	r0, #1
}
   81f78:	4770      	bx	lr

00081f7a <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81f7a:	6943      	ldr	r3, [r0, #20]
   81f7c:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81f80:	bf1d      	ittte	ne
   81f82:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81f86:	61c1      	strne	r1, [r0, #28]
	return 0;
   81f88:	2000      	movne	r0, #0
		return 1;
   81f8a:	2001      	moveq	r0, #1
}
   81f8c:	4770      	bx	lr

00081f8e <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81f8e:	6943      	ldr	r3, [r0, #20]
   81f90:	f013 0f01 	tst.w	r3, #1
   81f94:	d005      	beq.n	81fa2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81f96:	6983      	ldr	r3, [r0, #24]
   81f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81f9c:	600b      	str	r3, [r1, #0]

	return 0;
   81f9e:	2000      	movs	r0, #0
   81fa0:	4770      	bx	lr
		return 1;
   81fa2:	2001      	movs	r0, #1
}
   81fa4:	4770      	bx	lr

00081fa6 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81fa6:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81fa8:	685a      	ldr	r2, [r3, #4]
   81faa:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81fac:	6842      	ldr	r2, [r0, #4]
   81fae:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81fb0:	685a      	ldr	r2, [r3, #4]
   81fb2:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   81fb4:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81fb6:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81fb8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81fba:	6803      	ldr	r3, [r0, #0]
   81fbc:	3301      	adds	r3, #1
   81fbe:	6003      	str	r3, [r0, #0]
   81fc0:	4770      	bx	lr

00081fc2 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81fc2:	6843      	ldr	r3, [r0, #4]
   81fc4:	6882      	ldr	r2, [r0, #8]
   81fc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81fc8:	6883      	ldr	r3, [r0, #8]
   81fca:	6842      	ldr	r2, [r0, #4]
   81fcc:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81fce:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81fd0:	685a      	ldr	r2, [r3, #4]
   81fd2:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81fd4:	bf04      	itt	eq
   81fd6:	6882      	ldreq	r2, [r0, #8]
   81fd8:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81fda:	2200      	movs	r2, #0
   81fdc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81fde:	681a      	ldr	r2, [r3, #0]
   81fe0:	3a01      	subs	r2, #1
   81fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81fe4:	6818      	ldr	r0, [r3, #0]
}
   81fe6:	4770      	bx	lr

00081fe8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81fe8:	4b06      	ldr	r3, [pc, #24]	; (82004 <pxCurrentTCBConst2>)
   81fea:	6819      	ldr	r1, [r3, #0]
   81fec:	6808      	ldr	r0, [r1, #0]
   81fee:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81ff2:	f380 8809 	msr	PSP, r0
   81ff6:	f04f 0000 	mov.w	r0, #0
   81ffa:	f380 8811 	msr	BASEPRI, r0
   81ffe:	f04e 0e0d 	orr.w	lr, lr, #13
   82002:	4770      	bx	lr

00082004 <pxCurrentTCBConst2>:
   82004:	200711b0 	.word	0x200711b0

00082008 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82008:	f3ef 8011 	mrs	r0, BASEPRI
   8200c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82010:	f381 8811 	msr	BASEPRI, r1
   82014:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   82016:	2000      	movs	r0, #0

00082018 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   82018:	f380 8811 	msr	BASEPRI, r0
   8201c:	4770      	bx	lr
	...

00082020 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   82020:	f3ef 8009 	mrs	r0, PSP
   82024:	4b0c      	ldr	r3, [pc, #48]	; (82058 <pxCurrentTCBConst>)
   82026:	681a      	ldr	r2, [r3, #0]
   82028:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8202c:	6010      	str	r0, [r2, #0]
   8202e:	e92d 4008 	stmdb	sp!, {r3, lr}
   82032:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82036:	f380 8811 	msr	BASEPRI, r0
   8203a:	f000 f8b9 	bl	821b0 <vTaskSwitchContext>
   8203e:	f04f 0000 	mov.w	r0, #0
   82042:	f380 8811 	msr	BASEPRI, r0
   82046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8204a:	6819      	ldr	r1, [r3, #0]
   8204c:	6808      	ldr	r0, [r1, #0]
   8204e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82052:	f380 8809 	msr	PSP, r0
   82056:	4770      	bx	lr

00082058 <pxCurrentTCBConst>:
   82058:	200711b0 	.word	0x200711b0

0008205c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8205c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8205e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82062:	4b05      	ldr	r3, [pc, #20]	; (82078 <SysTick_Handler+0x1c>)
   82064:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   82066:	4b05      	ldr	r3, [pc, #20]	; (8207c <SysTick_Handler+0x20>)
   82068:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8206a:	4b05      	ldr	r3, [pc, #20]	; (82080 <SysTick_Handler+0x24>)
   8206c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8206e:	2000      	movs	r0, #0
   82070:	4b04      	ldr	r3, [pc, #16]	; (82084 <SysTick_Handler+0x28>)
   82072:	4798      	blx	r3
   82074:	bd08      	pop	{r3, pc}
   82076:	bf00      	nop
   82078:	e000ed04 	.word	0xe000ed04
   8207c:	00082009 	.word	0x00082009
   82080:	00082089 	.word	0x00082089
   82084:	00082019 	.word	0x00082019

00082088 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82088:	4b3d      	ldr	r3, [pc, #244]	; (82180 <vTaskIncrementTick+0xf8>)
   8208a:	681b      	ldr	r3, [r3, #0]
   8208c:	2b00      	cmp	r3, #0
   8208e:	d16f      	bne.n	82170 <vTaskIncrementTick+0xe8>
{
   82090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   82094:	4b3b      	ldr	r3, [pc, #236]	; (82184 <vTaskIncrementTick+0xfc>)
   82096:	681a      	ldr	r2, [r3, #0]
   82098:	3201      	adds	r2, #1
   8209a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8209c:	681b      	ldr	r3, [r3, #0]
   8209e:	b9ab      	cbnz	r3, 820cc <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   820a0:	4b39      	ldr	r3, [pc, #228]	; (82188 <vTaskIncrementTick+0x100>)
   820a2:	681b      	ldr	r3, [r3, #0]
   820a4:	681b      	ldr	r3, [r3, #0]
   820a6:	2b00      	cmp	r3, #0
   820a8:	d128      	bne.n	820fc <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   820aa:	4b37      	ldr	r3, [pc, #220]	; (82188 <vTaskIncrementTick+0x100>)
   820ac:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   820ae:	4a37      	ldr	r2, [pc, #220]	; (8218c <vTaskIncrementTick+0x104>)
   820b0:	6810      	ldr	r0, [r2, #0]
   820b2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   820b4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   820b6:	4936      	ldr	r1, [pc, #216]	; (82190 <vTaskIncrementTick+0x108>)
   820b8:	680a      	ldr	r2, [r1, #0]
   820ba:	3201      	adds	r2, #1
   820bc:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   820be:	681b      	ldr	r3, [r3, #0]
   820c0:	681b      	ldr	r3, [r3, #0]
   820c2:	b9fb      	cbnz	r3, 82104 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   820c4:	f04f 32ff 	mov.w	r2, #4294967295
   820c8:	4b32      	ldr	r3, [pc, #200]	; (82194 <vTaskIncrementTick+0x10c>)
   820ca:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   820cc:	4b2d      	ldr	r3, [pc, #180]	; (82184 <vTaskIncrementTick+0xfc>)
   820ce:	681a      	ldr	r2, [r3, #0]
   820d0:	4b30      	ldr	r3, [pc, #192]	; (82194 <vTaskIncrementTick+0x10c>)
   820d2:	681b      	ldr	r3, [r3, #0]
   820d4:	429a      	cmp	r2, r3
   820d6:	d350      	bcc.n	8217a <vTaskIncrementTick+0xf2>
   820d8:	4b2b      	ldr	r3, [pc, #172]	; (82188 <vTaskIncrementTick+0x100>)
   820da:	681b      	ldr	r3, [r3, #0]
   820dc:	681b      	ldr	r3, [r3, #0]
   820de:	b1cb      	cbz	r3, 82114 <vTaskIncrementTick+0x8c>
   820e0:	4b29      	ldr	r3, [pc, #164]	; (82188 <vTaskIncrementTick+0x100>)
   820e2:	681b      	ldr	r3, [r3, #0]
   820e4:	68db      	ldr	r3, [r3, #12]
   820e6:	68dc      	ldr	r4, [r3, #12]
   820e8:	6863      	ldr	r3, [r4, #4]
   820ea:	4a26      	ldr	r2, [pc, #152]	; (82184 <vTaskIncrementTick+0xfc>)
   820ec:	6812      	ldr	r2, [r2, #0]
   820ee:	4293      	cmp	r3, r2
   820f0:	d816      	bhi.n	82120 <vTaskIncrementTick+0x98>
   820f2:	4e29      	ldr	r6, [pc, #164]	; (82198 <vTaskIncrementTick+0x110>)
   820f4:	4f29      	ldr	r7, [pc, #164]	; (8219c <vTaskIncrementTick+0x114>)
   820f6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 821ac <vTaskIncrementTick+0x124>
   820fa:	e02f      	b.n	8215c <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   820fc:	4b28      	ldr	r3, [pc, #160]	; (821a0 <vTaskIncrementTick+0x118>)
   820fe:	4798      	blx	r3
   82100:	bf00      	nop
   82102:	e7fd      	b.n	82100 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82104:	4b20      	ldr	r3, [pc, #128]	; (82188 <vTaskIncrementTick+0x100>)
   82106:	681b      	ldr	r3, [r3, #0]
   82108:	68db      	ldr	r3, [r3, #12]
   8210a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8210c:	685a      	ldr	r2, [r3, #4]
   8210e:	4b21      	ldr	r3, [pc, #132]	; (82194 <vTaskIncrementTick+0x10c>)
   82110:	601a      	str	r2, [r3, #0]
   82112:	e7db      	b.n	820cc <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   82114:	f04f 32ff 	mov.w	r2, #4294967295
   82118:	4b1e      	ldr	r3, [pc, #120]	; (82194 <vTaskIncrementTick+0x10c>)
   8211a:	601a      	str	r2, [r3, #0]
   8211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82120:	4a1c      	ldr	r2, [pc, #112]	; (82194 <vTaskIncrementTick+0x10c>)
   82122:	6013      	str	r3, [r2, #0]
   82124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82128:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8212a:	683b      	ldr	r3, [r7, #0]
   8212c:	4298      	cmp	r0, r3
   8212e:	bf88      	it	hi
   82130:	6038      	strhi	r0, [r7, #0]
   82132:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82136:	4629      	mov	r1, r5
   82138:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8213c:	4b19      	ldr	r3, [pc, #100]	; (821a4 <vTaskIncrementTick+0x11c>)
   8213e:	4798      	blx	r3
   82140:	4b11      	ldr	r3, [pc, #68]	; (82188 <vTaskIncrementTick+0x100>)
   82142:	681b      	ldr	r3, [r3, #0]
   82144:	681b      	ldr	r3, [r3, #0]
   82146:	2b00      	cmp	r3, #0
   82148:	d0e4      	beq.n	82114 <vTaskIncrementTick+0x8c>
   8214a:	4b0f      	ldr	r3, [pc, #60]	; (82188 <vTaskIncrementTick+0x100>)
   8214c:	681b      	ldr	r3, [r3, #0]
   8214e:	68db      	ldr	r3, [r3, #12]
   82150:	68dc      	ldr	r4, [r3, #12]
   82152:	6863      	ldr	r3, [r4, #4]
   82154:	4a0b      	ldr	r2, [pc, #44]	; (82184 <vTaskIncrementTick+0xfc>)
   82156:	6812      	ldr	r2, [r2, #0]
   82158:	4293      	cmp	r3, r2
   8215a:	d8e1      	bhi.n	82120 <vTaskIncrementTick+0x98>
   8215c:	1d25      	adds	r5, r4, #4
   8215e:	4628      	mov	r0, r5
   82160:	47b0      	blx	r6
   82162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   82164:	2b00      	cmp	r3, #0
   82166:	d0df      	beq.n	82128 <vTaskIncrementTick+0xa0>
   82168:	f104 0018 	add.w	r0, r4, #24
   8216c:	47b0      	blx	r6
   8216e:	e7db      	b.n	82128 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   82170:	4a0d      	ldr	r2, [pc, #52]	; (821a8 <vTaskIncrementTick+0x120>)
   82172:	6813      	ldr	r3, [r2, #0]
   82174:	3301      	adds	r3, #1
   82176:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   82178:	4770      	bx	lr
   8217a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8217e:	bf00      	nop
   82180:	20071224 	.word	0x20071224
   82184:	20071234 	.word	0x20071234
   82188:	200711b4 	.word	0x200711b4
   8218c:	200711b8 	.word	0x200711b8
   82190:	20071230 	.word	0x20071230
   82194:	200701bc 	.word	0x200701bc
   82198:	00081fc3 	.word	0x00081fc3
   8219c:	20071228 	.word	0x20071228
   821a0:	00082009 	.word	0x00082009
   821a4:	00081fa7 	.word	0x00081fa7
   821a8:	20071220 	.word	0x20071220
   821ac:	200711bc 	.word	0x200711bc

000821b0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   821b0:	4b21      	ldr	r3, [pc, #132]	; (82238 <vTaskSwitchContext+0x88>)
   821b2:	681b      	ldr	r3, [r3, #0]
   821b4:	b9eb      	cbnz	r3, 821f2 <vTaskSwitchContext+0x42>
{
   821b6:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   821b8:	4b20      	ldr	r3, [pc, #128]	; (8223c <vTaskSwitchContext+0x8c>)
   821ba:	681b      	ldr	r3, [r3, #0]
   821bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821c0:	009b      	lsls	r3, r3, #2
   821c2:	4a1f      	ldr	r2, [pc, #124]	; (82240 <vTaskSwitchContext+0x90>)
   821c4:	58d3      	ldr	r3, [r2, r3]
   821c6:	b9c3      	cbnz	r3, 821fa <vTaskSwitchContext+0x4a>
   821c8:	4b1c      	ldr	r3, [pc, #112]	; (8223c <vTaskSwitchContext+0x8c>)
   821ca:	681b      	ldr	r3, [r3, #0]
   821cc:	b16b      	cbz	r3, 821ea <vTaskSwitchContext+0x3a>
   821ce:	4a1b      	ldr	r2, [pc, #108]	; (8223c <vTaskSwitchContext+0x8c>)
   821d0:	491b      	ldr	r1, [pc, #108]	; (82240 <vTaskSwitchContext+0x90>)
   821d2:	6813      	ldr	r3, [r2, #0]
   821d4:	3b01      	subs	r3, #1
   821d6:	6013      	str	r3, [r2, #0]
   821d8:	6813      	ldr	r3, [r2, #0]
   821da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   821e2:	b953      	cbnz	r3, 821fa <vTaskSwitchContext+0x4a>
   821e4:	6813      	ldr	r3, [r2, #0]
   821e6:	2b00      	cmp	r3, #0
   821e8:	d1f3      	bne.n	821d2 <vTaskSwitchContext+0x22>
   821ea:	4b16      	ldr	r3, [pc, #88]	; (82244 <vTaskSwitchContext+0x94>)
   821ec:	4798      	blx	r3
   821ee:	bf00      	nop
   821f0:	e7fd      	b.n	821ee <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   821f2:	2201      	movs	r2, #1
   821f4:	4b14      	ldr	r3, [pc, #80]	; (82248 <vTaskSwitchContext+0x98>)
   821f6:	601a      	str	r2, [r3, #0]
   821f8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   821fa:	4b10      	ldr	r3, [pc, #64]	; (8223c <vTaskSwitchContext+0x8c>)
   821fc:	681b      	ldr	r3, [r3, #0]
   821fe:	4a10      	ldr	r2, [pc, #64]	; (82240 <vTaskSwitchContext+0x90>)
   82200:	0099      	lsls	r1, r3, #2
   82202:	18c8      	adds	r0, r1, r3
   82204:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   82208:	6844      	ldr	r4, [r0, #4]
   8220a:	6864      	ldr	r4, [r4, #4]
   8220c:	6044      	str	r4, [r0, #4]
   8220e:	4419      	add	r1, r3
   82210:	4602      	mov	r2, r0
   82212:	3208      	adds	r2, #8
   82214:	4294      	cmp	r4, r2
   82216:	d009      	beq.n	8222c <vTaskSwitchContext+0x7c>
   82218:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8221c:	4a08      	ldr	r2, [pc, #32]	; (82240 <vTaskSwitchContext+0x90>)
   8221e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82222:	685b      	ldr	r3, [r3, #4]
   82224:	68da      	ldr	r2, [r3, #12]
   82226:	4b09      	ldr	r3, [pc, #36]	; (8224c <vTaskSwitchContext+0x9c>)
   82228:	601a      	str	r2, [r3, #0]
   8222a:	bd10      	pop	{r4, pc}
   8222c:	6860      	ldr	r0, [r4, #4]
   8222e:	4a04      	ldr	r2, [pc, #16]	; (82240 <vTaskSwitchContext+0x90>)
   82230:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   82234:	6050      	str	r0, [r2, #4]
   82236:	e7ef      	b.n	82218 <vTaskSwitchContext+0x68>
   82238:	20071224 	.word	0x20071224
   8223c:	20071228 	.word	0x20071228
   82240:	200711bc 	.word	0x200711bc
   82244:	00082009 	.word	0x00082009
   82248:	2007122c 	.word	0x2007122c
   8224c:	200711b0 	.word	0x200711b0

00082250 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82250:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82252:	480e      	ldr	r0, [pc, #56]	; (8228c <sysclk_init+0x3c>)
   82254:	4b0e      	ldr	r3, [pc, #56]	; (82290 <sysclk_init+0x40>)
   82256:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82258:	213e      	movs	r1, #62	; 0x3e
   8225a:	2000      	movs	r0, #0
   8225c:	4b0d      	ldr	r3, [pc, #52]	; (82294 <sysclk_init+0x44>)
   8225e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82260:	4c0d      	ldr	r4, [pc, #52]	; (82298 <sysclk_init+0x48>)
   82262:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82264:	2800      	cmp	r0, #0
   82266:	d0fc      	beq.n	82262 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82268:	4b0c      	ldr	r3, [pc, #48]	; (8229c <sysclk_init+0x4c>)
   8226a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8226c:	4a0c      	ldr	r2, [pc, #48]	; (822a0 <sysclk_init+0x50>)
   8226e:	4b0d      	ldr	r3, [pc, #52]	; (822a4 <sysclk_init+0x54>)
   82270:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82272:	4c0d      	ldr	r4, [pc, #52]	; (822a8 <sysclk_init+0x58>)
   82274:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82276:	2800      	cmp	r0, #0
   82278:	d0fc      	beq.n	82274 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8227a:	2010      	movs	r0, #16
   8227c:	4b0b      	ldr	r3, [pc, #44]	; (822ac <sysclk_init+0x5c>)
   8227e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82280:	4b0b      	ldr	r3, [pc, #44]	; (822b0 <sysclk_init+0x60>)
   82282:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82284:	4801      	ldr	r0, [pc, #4]	; (8228c <sysclk_init+0x3c>)
   82286:	4b02      	ldr	r3, [pc, #8]	; (82290 <sysclk_init+0x40>)
   82288:	4798      	blx	r3
   8228a:	bd10      	pop	{r4, pc}
   8228c:	0501bd00 	.word	0x0501bd00
   82290:	200700b1 	.word	0x200700b1
   82294:	00082665 	.word	0x00082665
   82298:	000826b9 	.word	0x000826b9
   8229c:	000826c9 	.word	0x000826c9
   822a0:	200d3f01 	.word	0x200d3f01
   822a4:	400e0600 	.word	0x400e0600
   822a8:	000826d9 	.word	0x000826d9
   822ac:	00082601 	.word	0x00082601
   822b0:	000827d9 	.word	0x000827d9

000822b4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   822b4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   822b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   822ba:	4b1e      	ldr	r3, [pc, #120]	; (82334 <board_init+0x80>)
   822bc:	605a      	str	r2, [r3, #4]
   822be:	200b      	movs	r0, #11
   822c0:	4c1d      	ldr	r4, [pc, #116]	; (82338 <board_init+0x84>)
   822c2:	47a0      	blx	r4
   822c4:	200c      	movs	r0, #12
   822c6:	47a0      	blx	r4
   822c8:	200d      	movs	r0, #13
   822ca:	47a0      	blx	r4
   822cc:	200e      	movs	r0, #14
   822ce:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   822d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   822d4:	203b      	movs	r0, #59	; 0x3b
   822d6:	4c19      	ldr	r4, [pc, #100]	; (8233c <board_init+0x88>)
   822d8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   822da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   822de:	2055      	movs	r0, #85	; 0x55
   822e0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   822e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   822e6:	2056      	movs	r0, #86	; 0x56
   822e8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   822ea:	4915      	ldr	r1, [pc, #84]	; (82340 <board_init+0x8c>)
   822ec:	2068      	movs	r0, #104	; 0x68
   822ee:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   822f0:	4914      	ldr	r1, [pc, #80]	; (82344 <board_init+0x90>)
   822f2:	205c      	movs	r0, #92	; 0x5c
   822f4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   822f6:	4a14      	ldr	r2, [pc, #80]	; (82348 <board_init+0x94>)
   822f8:	f44f 7140 	mov.w	r1, #768	; 0x300
   822fc:	4813      	ldr	r0, [pc, #76]	; (8234c <board_init+0x98>)
   822fe:	4b14      	ldr	r3, [pc, #80]	; (82350 <board_init+0x9c>)
   82300:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   82302:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82306:	2019      	movs	r0, #25
   82308:	47a0      	blx	r4
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   8230a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8230e:	201a      	movs	r0, #26
   82310:	47a0      	blx	r4
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   82312:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82316:	201b      	movs	r0, #27
   82318:	47a0      	blx	r4
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   8231a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8231e:	201c      	movs	r0, #28
   82320:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82322:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82326:	202b      	movs	r0, #43	; 0x2b
   82328:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8232a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8232e:	202a      	movs	r0, #42	; 0x2a
   82330:	47a0      	blx	r4
   82332:	bd10      	pop	{r4, pc}
   82334:	400e1a50 	.word	0x400e1a50
   82338:	000826e9 	.word	0x000826e9
   8233c:	000823f5 	.word	0x000823f5
   82340:	28000079 	.word	0x28000079
   82344:	28000001 	.word	0x28000001
   82348:	08000001 	.word	0x08000001
   8234c:	400e0e00 	.word	0x400e0e00
   82350:	000824c5 	.word	0x000824c5

00082354 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82354:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82356:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8235a:	d016      	beq.n	8238a <pio_set_peripheral+0x36>
   8235c:	d80b      	bhi.n	82376 <pio_set_peripheral+0x22>
   8235e:	b149      	cbz	r1, 82374 <pio_set_peripheral+0x20>
   82360:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82364:	d105      	bne.n	82372 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82366:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82368:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8236a:	400b      	ands	r3, r1
   8236c:	ea23 0302 	bic.w	r3, r3, r2
   82370:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82372:	6042      	str	r2, [r0, #4]
   82374:	4770      	bx	lr
	switch (ul_type) {
   82376:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8237a:	d0fb      	beq.n	82374 <pio_set_peripheral+0x20>
   8237c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82380:	d0f8      	beq.n	82374 <pio_set_peripheral+0x20>
   82382:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82386:	d1f4      	bne.n	82372 <pio_set_peripheral+0x1e>
   82388:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8238a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8238c:	4313      	orrs	r3, r2
   8238e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82390:	e7ef      	b.n	82372 <pio_set_peripheral+0x1e>

00082392 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82392:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82394:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82398:	bf14      	ite	ne
   8239a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8239c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8239e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   823a2:	bf14      	ite	ne
   823a4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   823a6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   823a8:	f012 0f02 	tst.w	r2, #2
   823ac:	d107      	bne.n	823be <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   823ae:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   823b2:	bf18      	it	ne
   823b4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   823b8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   823ba:	6001      	str	r1, [r0, #0]
   823bc:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   823be:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   823c2:	e7f9      	b.n	823b8 <pio_set_input+0x26>

000823c4 <pio_set_output>:
{
   823c4:	b410      	push	{r4}
   823c6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   823c8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   823ca:	b944      	cbnz	r4, 823de <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   823cc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   823ce:	b143      	cbz	r3, 823e2 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   823d0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   823d2:	b942      	cbnz	r2, 823e6 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   823d4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   823d6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   823d8:	6001      	str	r1, [r0, #0]
}
   823da:	bc10      	pop	{r4}
   823dc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   823de:	6641      	str	r1, [r0, #100]	; 0x64
   823e0:	e7f5      	b.n	823ce <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   823e2:	6541      	str	r1, [r0, #84]	; 0x54
   823e4:	e7f5      	b.n	823d2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   823e6:	6301      	str	r1, [r0, #48]	; 0x30
   823e8:	e7f5      	b.n	823d6 <pio_set_output+0x12>

000823ea <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   823ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   823ec:	4770      	bx	lr

000823ee <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   823ee:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   823f0:	4770      	bx	lr
	...

000823f4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   823f4:	b570      	push	{r4, r5, r6, lr}
   823f6:	b082      	sub	sp, #8
   823f8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   823fa:	0943      	lsrs	r3, r0, #5
   823fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82400:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82404:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82406:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8240a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8240e:	d031      	beq.n	82474 <pio_configure_pin+0x80>
   82410:	d816      	bhi.n	82440 <pio_configure_pin+0x4c>
   82412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82416:	d01b      	beq.n	82450 <pio_configure_pin+0x5c>
   82418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8241c:	d116      	bne.n	8244c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8241e:	f000 001f 	and.w	r0, r0, #31
   82422:	2601      	movs	r6, #1
   82424:	4086      	lsls	r6, r0
   82426:	4632      	mov	r2, r6
   82428:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8242c:	4620      	mov	r0, r4
   8242e:	4b22      	ldr	r3, [pc, #136]	; (824b8 <pio_configure_pin+0xc4>)
   82430:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82432:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82436:	bf14      	ite	ne
   82438:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8243a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8243c:	2001      	movs	r0, #1
   8243e:	e017      	b.n	82470 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82440:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82444:	d021      	beq.n	8248a <pio_configure_pin+0x96>
   82446:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8244a:	d01e      	beq.n	8248a <pio_configure_pin+0x96>
		return 0;
   8244c:	2000      	movs	r0, #0
   8244e:	e00f      	b.n	82470 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82450:	f000 001f 	and.w	r0, r0, #31
   82454:	2601      	movs	r6, #1
   82456:	4086      	lsls	r6, r0
   82458:	4632      	mov	r2, r6
   8245a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8245e:	4620      	mov	r0, r4
   82460:	4b15      	ldr	r3, [pc, #84]	; (824b8 <pio_configure_pin+0xc4>)
   82462:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82464:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82468:	bf14      	ite	ne
   8246a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8246c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8246e:	2001      	movs	r0, #1
}
   82470:	b002      	add	sp, #8
   82472:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82474:	f000 011f 	and.w	r1, r0, #31
   82478:	2601      	movs	r6, #1
   8247a:	462a      	mov	r2, r5
   8247c:	fa06 f101 	lsl.w	r1, r6, r1
   82480:	4620      	mov	r0, r4
   82482:	4b0e      	ldr	r3, [pc, #56]	; (824bc <pio_configure_pin+0xc8>)
   82484:	4798      	blx	r3
	return 1;
   82486:	4630      	mov	r0, r6
		break;
   82488:	e7f2      	b.n	82470 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8248a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8248e:	f000 011f 	and.w	r1, r0, #31
   82492:	2601      	movs	r6, #1
   82494:	ea05 0306 	and.w	r3, r5, r6
   82498:	9300      	str	r3, [sp, #0]
   8249a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8249e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   824a2:	bf14      	ite	ne
   824a4:	2200      	movne	r2, #0
   824a6:	2201      	moveq	r2, #1
   824a8:	fa06 f101 	lsl.w	r1, r6, r1
   824ac:	4620      	mov	r0, r4
   824ae:	4c04      	ldr	r4, [pc, #16]	; (824c0 <pio_configure_pin+0xcc>)
   824b0:	47a0      	blx	r4
	return 1;
   824b2:	4630      	mov	r0, r6
		break;
   824b4:	e7dc      	b.n	82470 <pio_configure_pin+0x7c>
   824b6:	bf00      	nop
   824b8:	00082355 	.word	0x00082355
   824bc:	00082393 	.word	0x00082393
   824c0:	000823c5 	.word	0x000823c5

000824c4 <pio_configure_pin_group>:
{
   824c4:	b570      	push	{r4, r5, r6, lr}
   824c6:	b082      	sub	sp, #8
   824c8:	4605      	mov	r5, r0
   824ca:	460e      	mov	r6, r1
   824cc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   824ce:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   824d2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   824d6:	d027      	beq.n	82528 <pio_configure_pin_group+0x64>
   824d8:	d811      	bhi.n	824fe <pio_configure_pin_group+0x3a>
   824da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   824de:	d016      	beq.n	8250e <pio_configure_pin_group+0x4a>
   824e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   824e4:	d111      	bne.n	8250a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   824e6:	460a      	mov	r2, r1
   824e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   824ec:	4b19      	ldr	r3, [pc, #100]	; (82554 <pio_configure_pin_group+0x90>)
   824ee:	4798      	blx	r3
	if (ul_pull_up_enable) {
   824f0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   824f4:	bf14      	ite	ne
   824f6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   824f8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   824fa:	2001      	movs	r0, #1
   824fc:	e012      	b.n	82524 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   824fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82502:	d015      	beq.n	82530 <pio_configure_pin_group+0x6c>
   82504:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82508:	d012      	beq.n	82530 <pio_configure_pin_group+0x6c>
		return 0;
   8250a:	2000      	movs	r0, #0
   8250c:	e00a      	b.n	82524 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8250e:	460a      	mov	r2, r1
   82510:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82514:	4b0f      	ldr	r3, [pc, #60]	; (82554 <pio_configure_pin_group+0x90>)
   82516:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82518:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8251c:	bf14      	ite	ne
   8251e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82520:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82522:	2001      	movs	r0, #1
}
   82524:	b002      	add	sp, #8
   82526:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82528:	4b0b      	ldr	r3, [pc, #44]	; (82558 <pio_configure_pin_group+0x94>)
   8252a:	4798      	blx	r3
	return 1;
   8252c:	2001      	movs	r0, #1
		break;
   8252e:	e7f9      	b.n	82524 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82530:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82534:	f004 0301 	and.w	r3, r4, #1
   82538:	9300      	str	r3, [sp, #0]
   8253a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8253e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82542:	bf14      	ite	ne
   82544:	2200      	movne	r2, #0
   82546:	2201      	moveq	r2, #1
   82548:	4631      	mov	r1, r6
   8254a:	4628      	mov	r0, r5
   8254c:	4c03      	ldr	r4, [pc, #12]	; (8255c <pio_configure_pin_group+0x98>)
   8254e:	47a0      	blx	r4
	return 1;
   82550:	2001      	movs	r0, #1
		break;
   82552:	e7e7      	b.n	82524 <pio_configure_pin_group+0x60>
   82554:	00082355 	.word	0x00082355
   82558:	00082393 	.word	0x00082393
   8255c:	000823c5 	.word	0x000823c5

00082560 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82564:	4604      	mov	r4, r0
   82566:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82568:	4b0e      	ldr	r3, [pc, #56]	; (825a4 <pio_handler_process+0x44>)
   8256a:	4798      	blx	r3
   8256c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8256e:	4620      	mov	r0, r4
   82570:	4b0d      	ldr	r3, [pc, #52]	; (825a8 <pio_handler_process+0x48>)
   82572:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82574:	4005      	ands	r5, r0
   82576:	d013      	beq.n	825a0 <pio_handler_process+0x40>
   82578:	4c0c      	ldr	r4, [pc, #48]	; (825ac <pio_handler_process+0x4c>)
   8257a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8257e:	e003      	b.n	82588 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82580:	42b4      	cmp	r4, r6
   82582:	d00d      	beq.n	825a0 <pio_handler_process+0x40>
   82584:	3410      	adds	r4, #16
		while (status != 0) {
   82586:	b15d      	cbz	r5, 825a0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82588:	6820      	ldr	r0, [r4, #0]
   8258a:	4540      	cmp	r0, r8
   8258c:	d1f8      	bne.n	82580 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8258e:	6861      	ldr	r1, [r4, #4]
   82590:	4229      	tst	r1, r5
   82592:	d0f5      	beq.n	82580 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82594:	68e3      	ldr	r3, [r4, #12]
   82596:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82598:	6863      	ldr	r3, [r4, #4]
   8259a:	ea25 0503 	bic.w	r5, r5, r3
   8259e:	e7ef      	b.n	82580 <pio_handler_process+0x20>
   825a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825a4:	000823eb 	.word	0x000823eb
   825a8:	000823ef 	.word	0x000823ef
   825ac:	20071238 	.word	0x20071238

000825b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   825b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   825b2:	210b      	movs	r1, #11
   825b4:	4801      	ldr	r0, [pc, #4]	; (825bc <PIOA_Handler+0xc>)
   825b6:	4b02      	ldr	r3, [pc, #8]	; (825c0 <PIOA_Handler+0x10>)
   825b8:	4798      	blx	r3
   825ba:	bd08      	pop	{r3, pc}
   825bc:	400e0e00 	.word	0x400e0e00
   825c0:	00082561 	.word	0x00082561

000825c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   825c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   825c6:	210c      	movs	r1, #12
   825c8:	4801      	ldr	r0, [pc, #4]	; (825d0 <PIOB_Handler+0xc>)
   825ca:	4b02      	ldr	r3, [pc, #8]	; (825d4 <PIOB_Handler+0x10>)
   825cc:	4798      	blx	r3
   825ce:	bd08      	pop	{r3, pc}
   825d0:	400e1000 	.word	0x400e1000
   825d4:	00082561 	.word	0x00082561

000825d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   825d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   825da:	210d      	movs	r1, #13
   825dc:	4801      	ldr	r0, [pc, #4]	; (825e4 <PIOC_Handler+0xc>)
   825de:	4b02      	ldr	r3, [pc, #8]	; (825e8 <PIOC_Handler+0x10>)
   825e0:	4798      	blx	r3
   825e2:	bd08      	pop	{r3, pc}
   825e4:	400e1200 	.word	0x400e1200
   825e8:	00082561 	.word	0x00082561

000825ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   825ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   825ee:	210e      	movs	r1, #14
   825f0:	4801      	ldr	r0, [pc, #4]	; (825f8 <PIOD_Handler+0xc>)
   825f2:	4b02      	ldr	r3, [pc, #8]	; (825fc <PIOD_Handler+0x10>)
   825f4:	4798      	blx	r3
   825f6:	bd08      	pop	{r3, pc}
   825f8:	400e1400 	.word	0x400e1400
   825fc:	00082561 	.word	0x00082561

00082600 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82600:	4a17      	ldr	r2, [pc, #92]	; (82660 <pmc_switch_mck_to_pllack+0x60>)
   82602:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82608:	4318      	orrs	r0, r3
   8260a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8260c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8260e:	f013 0f08 	tst.w	r3, #8
   82612:	d10a      	bne.n	8262a <pmc_switch_mck_to_pllack+0x2a>
   82614:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82618:	4911      	ldr	r1, [pc, #68]	; (82660 <pmc_switch_mck_to_pllack+0x60>)
   8261a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8261c:	f012 0f08 	tst.w	r2, #8
   82620:	d103      	bne.n	8262a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82622:	3b01      	subs	r3, #1
   82624:	d1f9      	bne.n	8261a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82626:	2001      	movs	r0, #1
   82628:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8262a:	4a0d      	ldr	r2, [pc, #52]	; (82660 <pmc_switch_mck_to_pllack+0x60>)
   8262c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8262e:	f023 0303 	bic.w	r3, r3, #3
   82632:	f043 0302 	orr.w	r3, r3, #2
   82636:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82638:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8263a:	f013 0f08 	tst.w	r3, #8
   8263e:	d10a      	bne.n	82656 <pmc_switch_mck_to_pllack+0x56>
   82640:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82644:	4906      	ldr	r1, [pc, #24]	; (82660 <pmc_switch_mck_to_pllack+0x60>)
   82646:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82648:	f012 0f08 	tst.w	r2, #8
   8264c:	d105      	bne.n	8265a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8264e:	3b01      	subs	r3, #1
   82650:	d1f9      	bne.n	82646 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82652:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82654:	4770      	bx	lr
	return 0;
   82656:	2000      	movs	r0, #0
   82658:	4770      	bx	lr
   8265a:	2000      	movs	r0, #0
   8265c:	4770      	bx	lr
   8265e:	bf00      	nop
   82660:	400e0600 	.word	0x400e0600

00082664 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82664:	b9c8      	cbnz	r0, 8269a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82666:	4a11      	ldr	r2, [pc, #68]	; (826ac <pmc_switch_mainck_to_xtal+0x48>)
   82668:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8266a:	0209      	lsls	r1, r1, #8
   8266c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8266e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82672:	f023 0303 	bic.w	r3, r3, #3
   82676:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8267a:	f043 0301 	orr.w	r3, r3, #1
   8267e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82680:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82682:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82684:	f013 0f01 	tst.w	r3, #1
   82688:	d0fb      	beq.n	82682 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8268a:	4a08      	ldr	r2, [pc, #32]	; (826ac <pmc_switch_mainck_to_xtal+0x48>)
   8268c:	6a13      	ldr	r3, [r2, #32]
   8268e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82696:	6213      	str	r3, [r2, #32]
   82698:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8269a:	4904      	ldr	r1, [pc, #16]	; (826ac <pmc_switch_mainck_to_xtal+0x48>)
   8269c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8269e:	4a04      	ldr	r2, [pc, #16]	; (826b0 <pmc_switch_mainck_to_xtal+0x4c>)
   826a0:	401a      	ands	r2, r3
   826a2:	4b04      	ldr	r3, [pc, #16]	; (826b4 <pmc_switch_mainck_to_xtal+0x50>)
   826a4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   826a6:	620b      	str	r3, [r1, #32]
   826a8:	4770      	bx	lr
   826aa:	bf00      	nop
   826ac:	400e0600 	.word	0x400e0600
   826b0:	fec8fffc 	.word	0xfec8fffc
   826b4:	01370002 	.word	0x01370002

000826b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   826b8:	4b02      	ldr	r3, [pc, #8]	; (826c4 <pmc_osc_is_ready_mainck+0xc>)
   826ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   826bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   826c0:	4770      	bx	lr
   826c2:	bf00      	nop
   826c4:	400e0600 	.word	0x400e0600

000826c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   826c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   826cc:	4b01      	ldr	r3, [pc, #4]	; (826d4 <pmc_disable_pllack+0xc>)
   826ce:	629a      	str	r2, [r3, #40]	; 0x28
   826d0:	4770      	bx	lr
   826d2:	bf00      	nop
   826d4:	400e0600 	.word	0x400e0600

000826d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   826d8:	4b02      	ldr	r3, [pc, #8]	; (826e4 <pmc_is_locked_pllack+0xc>)
   826da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   826dc:	f000 0002 	and.w	r0, r0, #2
   826e0:	4770      	bx	lr
   826e2:	bf00      	nop
   826e4:	400e0600 	.word	0x400e0600

000826e8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   826e8:	282c      	cmp	r0, #44	; 0x2c
   826ea:	d81e      	bhi.n	8272a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   826ec:	281f      	cmp	r0, #31
   826ee:	d80c      	bhi.n	8270a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   826f0:	4b11      	ldr	r3, [pc, #68]	; (82738 <pmc_enable_periph_clk+0x50>)
   826f2:	699a      	ldr	r2, [r3, #24]
   826f4:	2301      	movs	r3, #1
   826f6:	4083      	lsls	r3, r0
   826f8:	4393      	bics	r3, r2
   826fa:	d018      	beq.n	8272e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   826fc:	2301      	movs	r3, #1
   826fe:	fa03 f000 	lsl.w	r0, r3, r0
   82702:	4b0d      	ldr	r3, [pc, #52]	; (82738 <pmc_enable_periph_clk+0x50>)
   82704:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82706:	2000      	movs	r0, #0
   82708:	4770      	bx	lr
		ul_id -= 32;
   8270a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8270c:	4b0a      	ldr	r3, [pc, #40]	; (82738 <pmc_enable_periph_clk+0x50>)
   8270e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82712:	2301      	movs	r3, #1
   82714:	4083      	lsls	r3, r0
   82716:	4393      	bics	r3, r2
   82718:	d00b      	beq.n	82732 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8271a:	2301      	movs	r3, #1
   8271c:	fa03 f000 	lsl.w	r0, r3, r0
   82720:	4b05      	ldr	r3, [pc, #20]	; (82738 <pmc_enable_periph_clk+0x50>)
   82722:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   82726:	2000      	movs	r0, #0
   82728:	4770      	bx	lr
		return 1;
   8272a:	2001      	movs	r0, #1
   8272c:	4770      	bx	lr
	return 0;
   8272e:	2000      	movs	r0, #0
   82730:	4770      	bx	lr
   82732:	2000      	movs	r0, #0
}
   82734:	4770      	bx	lr
   82736:	bf00      	nop
   82738:	400e0600 	.word	0x400e0600

0008273c <Dummy_Handler>:
int Dummy_Handler(void)
{
	while (1) {
		return 1;
	}
}
   8273c:	2001      	movs	r0, #1
   8273e:	4770      	bx	lr

00082740 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82740:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82742:	4b1c      	ldr	r3, [pc, #112]	; (827b4 <Reset_Handler+0x74>)
   82744:	4a1c      	ldr	r2, [pc, #112]	; (827b8 <Reset_Handler+0x78>)
   82746:	429a      	cmp	r2, r3
   82748:	d010      	beq.n	8276c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8274a:	4b1c      	ldr	r3, [pc, #112]	; (827bc <Reset_Handler+0x7c>)
   8274c:	4a19      	ldr	r2, [pc, #100]	; (827b4 <Reset_Handler+0x74>)
   8274e:	429a      	cmp	r2, r3
   82750:	d20c      	bcs.n	8276c <Reset_Handler+0x2c>
   82752:	3b01      	subs	r3, #1
   82754:	1a9b      	subs	r3, r3, r2
   82756:	f023 0303 	bic.w	r3, r3, #3
   8275a:	3304      	adds	r3, #4
   8275c:	4413      	add	r3, r2
   8275e:	4916      	ldr	r1, [pc, #88]	; (827b8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82760:	f851 0b04 	ldr.w	r0, [r1], #4
   82764:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82768:	429a      	cmp	r2, r3
   8276a:	d1f9      	bne.n	82760 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8276c:	4b14      	ldr	r3, [pc, #80]	; (827c0 <Reset_Handler+0x80>)
   8276e:	4a15      	ldr	r2, [pc, #84]	; (827c4 <Reset_Handler+0x84>)
   82770:	429a      	cmp	r2, r3
   82772:	d20a      	bcs.n	8278a <Reset_Handler+0x4a>
   82774:	3b01      	subs	r3, #1
   82776:	1a9b      	subs	r3, r3, r2
   82778:	f023 0303 	bic.w	r3, r3, #3
   8277c:	3304      	adds	r3, #4
   8277e:	4413      	add	r3, r2
		*pDest++ = 0;
   82780:	2100      	movs	r1, #0
   82782:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82786:	4293      	cmp	r3, r2
   82788:	d1fb      	bne.n	82782 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8278a:	4b0f      	ldr	r3, [pc, #60]	; (827c8 <Reset_Handler+0x88>)
   8278c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82790:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82794:	490d      	ldr	r1, [pc, #52]	; (827cc <Reset_Handler+0x8c>)
   82796:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82798:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8279c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   827a0:	d203      	bcs.n	827aa <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   827a2:	688b      	ldr	r3, [r1, #8]
   827a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   827a8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   827aa:	4b09      	ldr	r3, [pc, #36]	; (827d0 <Reset_Handler+0x90>)
   827ac:	4798      	blx	r3

	/* Branch to main function */
	main();
   827ae:	4b09      	ldr	r3, [pc, #36]	; (827d4 <Reset_Handler+0x94>)
   827b0:	4798      	blx	r3
   827b2:	e7fe      	b.n	827b2 <Reset_Handler+0x72>
   827b4:	20070000 	.word	0x20070000
   827b8:	00085b2c 	.word	0x00085b2c
   827bc:	20070a1c 	.word	0x20070a1c
   827c0:	20071334 	.word	0x20071334
   827c4:	20070a1c 	.word	0x20070a1c
   827c8:	00080000 	.word	0x00080000
   827cc:	e000ed00 	.word	0xe000ed00
   827d0:	00082dfd 	.word	0x00082dfd
   827d4:	00082db1 	.word	0x00082db1

000827d8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   827d8:	4b3d      	ldr	r3, [pc, #244]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   827da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   827dc:	f003 0303 	and.w	r3, r3, #3
   827e0:	2b03      	cmp	r3, #3
   827e2:	d80e      	bhi.n	82802 <SystemCoreClockUpdate+0x2a>
   827e4:	e8df f003 	tbb	[pc, r3]
   827e8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   827ec:	4b39      	ldr	r3, [pc, #228]	; (828d4 <SystemCoreClockUpdate+0xfc>)
   827ee:	695b      	ldr	r3, [r3, #20]
   827f0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   827f4:	bf14      	ite	ne
   827f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   827fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   827fe:	4b36      	ldr	r3, [pc, #216]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82800:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82802:	4b33      	ldr	r3, [pc, #204]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   82804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82806:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8280a:	2b70      	cmp	r3, #112	; 0x70
   8280c:	d057      	beq.n	828be <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8280e:	4b30      	ldr	r3, [pc, #192]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   82810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82812:	4931      	ldr	r1, [pc, #196]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82814:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82818:	680b      	ldr	r3, [r1, #0]
   8281a:	40d3      	lsrs	r3, r2
   8281c:	600b      	str	r3, [r1, #0]
   8281e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82820:	4b2b      	ldr	r3, [pc, #172]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   82822:	6a1b      	ldr	r3, [r3, #32]
   82824:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82828:	d003      	beq.n	82832 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8282a:	4a2c      	ldr	r2, [pc, #176]	; (828dc <SystemCoreClockUpdate+0x104>)
   8282c:	4b2a      	ldr	r3, [pc, #168]	; (828d8 <SystemCoreClockUpdate+0x100>)
   8282e:	601a      	str	r2, [r3, #0]
   82830:	e7e7      	b.n	82802 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82832:	4a2b      	ldr	r2, [pc, #172]	; (828e0 <SystemCoreClockUpdate+0x108>)
   82834:	4b28      	ldr	r3, [pc, #160]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82836:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82838:	4b25      	ldr	r3, [pc, #148]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   8283a:	6a1b      	ldr	r3, [r3, #32]
   8283c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82840:	2b10      	cmp	r3, #16
   82842:	d005      	beq.n	82850 <SystemCoreClockUpdate+0x78>
   82844:	2b20      	cmp	r3, #32
   82846:	d1dc      	bne.n	82802 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82848:	4a24      	ldr	r2, [pc, #144]	; (828dc <SystemCoreClockUpdate+0x104>)
   8284a:	4b23      	ldr	r3, [pc, #140]	; (828d8 <SystemCoreClockUpdate+0x100>)
   8284c:	601a      	str	r2, [r3, #0]
				break;
   8284e:	e7d8      	b.n	82802 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82850:	4a24      	ldr	r2, [pc, #144]	; (828e4 <SystemCoreClockUpdate+0x10c>)
   82852:	4b21      	ldr	r3, [pc, #132]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82854:	601a      	str	r2, [r3, #0]
				break;
   82856:	e7d4      	b.n	82802 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82858:	4b1d      	ldr	r3, [pc, #116]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   8285a:	6a1b      	ldr	r3, [r3, #32]
   8285c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82860:	d00c      	beq.n	8287c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82862:	4a1e      	ldr	r2, [pc, #120]	; (828dc <SystemCoreClockUpdate+0x104>)
   82864:	4b1c      	ldr	r3, [pc, #112]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82866:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82868:	4b19      	ldr	r3, [pc, #100]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   8286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8286c:	f003 0303 	and.w	r3, r3, #3
   82870:	2b02      	cmp	r3, #2
   82872:	d016      	beq.n	828a2 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82874:	4a1c      	ldr	r2, [pc, #112]	; (828e8 <SystemCoreClockUpdate+0x110>)
   82876:	4b18      	ldr	r3, [pc, #96]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82878:	601a      	str	r2, [r3, #0]
   8287a:	e7c2      	b.n	82802 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8287c:	4a18      	ldr	r2, [pc, #96]	; (828e0 <SystemCoreClockUpdate+0x108>)
   8287e:	4b16      	ldr	r3, [pc, #88]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82880:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82882:	4b13      	ldr	r3, [pc, #76]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   82884:	6a1b      	ldr	r3, [r3, #32]
   82886:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8288a:	2b10      	cmp	r3, #16
   8288c:	d005      	beq.n	8289a <SystemCoreClockUpdate+0xc2>
   8288e:	2b20      	cmp	r3, #32
   82890:	d1ea      	bne.n	82868 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82892:	4a12      	ldr	r2, [pc, #72]	; (828dc <SystemCoreClockUpdate+0x104>)
   82894:	4b10      	ldr	r3, [pc, #64]	; (828d8 <SystemCoreClockUpdate+0x100>)
   82896:	601a      	str	r2, [r3, #0]
				break;
   82898:	e7e6      	b.n	82868 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8289a:	4a12      	ldr	r2, [pc, #72]	; (828e4 <SystemCoreClockUpdate+0x10c>)
   8289c:	4b0e      	ldr	r3, [pc, #56]	; (828d8 <SystemCoreClockUpdate+0x100>)
   8289e:	601a      	str	r2, [r3, #0]
				break;
   828a0:	e7e2      	b.n	82868 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   828a2:	4a0b      	ldr	r2, [pc, #44]	; (828d0 <SystemCoreClockUpdate+0xf8>)
   828a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   828a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   828a8:	480b      	ldr	r0, [pc, #44]	; (828d8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   828aa:	f3c1 410a 	ubfx	r1, r1, #16, #11
   828ae:	6803      	ldr	r3, [r0, #0]
   828b0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   828b4:	b2d2      	uxtb	r2, r2
   828b6:	fbb3 f3f2 	udiv	r3, r3, r2
   828ba:	6003      	str	r3, [r0, #0]
   828bc:	e7a1      	b.n	82802 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   828be:	4a06      	ldr	r2, [pc, #24]	; (828d8 <SystemCoreClockUpdate+0x100>)
   828c0:	6813      	ldr	r3, [r2, #0]
   828c2:	490a      	ldr	r1, [pc, #40]	; (828ec <SystemCoreClockUpdate+0x114>)
   828c4:	fba1 1303 	umull	r1, r3, r1, r3
   828c8:	085b      	lsrs	r3, r3, #1
   828ca:	6013      	str	r3, [r2, #0]
   828cc:	4770      	bx	lr
   828ce:	bf00      	nop
   828d0:	400e0600 	.word	0x400e0600
   828d4:	400e1a10 	.word	0x400e1a10
   828d8:	200701c4 	.word	0x200701c4
   828dc:	00b71b00 	.word	0x00b71b00
   828e0:	003d0900 	.word	0x003d0900
   828e4:	007a1200 	.word	0x007a1200
   828e8:	0e4e1c00 	.word	0x0e4e1c00
   828ec:	aaaaaaab 	.word	0xaaaaaaab

000828f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   828f0:	4b0a      	ldr	r3, [pc, #40]	; (8291c <_sbrk+0x2c>)
   828f2:	681b      	ldr	r3, [r3, #0]
   828f4:	b153      	cbz	r3, 8290c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   828f6:	4b09      	ldr	r3, [pc, #36]	; (8291c <_sbrk+0x2c>)
   828f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   828fa:	181a      	adds	r2, r3, r0
   828fc:	4908      	ldr	r1, [pc, #32]	; (82920 <_sbrk+0x30>)
   828fe:	4291      	cmp	r1, r2
   82900:	db08      	blt.n	82914 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82902:	4610      	mov	r0, r2
   82904:	4a05      	ldr	r2, [pc, #20]	; (8291c <_sbrk+0x2c>)
   82906:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82908:	4618      	mov	r0, r3
   8290a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8290c:	4a05      	ldr	r2, [pc, #20]	; (82924 <_sbrk+0x34>)
   8290e:	4b03      	ldr	r3, [pc, #12]	; (8291c <_sbrk+0x2c>)
   82910:	601a      	str	r2, [r3, #0]
   82912:	e7f0      	b.n	828f6 <_sbrk+0x6>
		return (caddr_t) -1;	
   82914:	f04f 30ff 	mov.w	r0, #4294967295
}
   82918:	4770      	bx	lr
   8291a:	bf00      	nop
   8291c:	200712a8 	.word	0x200712a8
   82920:	20087ffc 	.word	0x20087ffc
   82924:	20073338 	.word	0x20073338

00082928 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82928:	f04f 30ff 	mov.w	r0, #4294967295
   8292c:	4770      	bx	lr

0008292e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8292e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82932:	604b      	str	r3, [r1, #4]

	return 0;
}
   82934:	2000      	movs	r0, #0
   82936:	4770      	bx	lr

00082938 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82938:	2000      	movs	r0, #0
   8293a:	4770      	bx	lr

0008293c <LCD_init_pins>:

enum showPage pagetoshow = MainPage;

//Initialize LCD PINS
void LCD_init_pins()
{
   8293c:	b570      	push	{r4, r5, r6, lr}
			//GPIOS INITIALIZATION AS OUTPUT FOR DC/RESET/LED <- Will go into the function to init my connections
			pmc_enable_periph_clk(ID_PIOC);
   8293e:	200d      	movs	r0, #13
   82940:	4e19      	ldr	r6, [pc, #100]	; (829a8 <LCD_init_pins+0x6c>)
   82942:	47b0      	blx	r6
			pmc_enable_periph_clk(ID_PIOA);
   82944:	200b      	movs	r0, #11
   82946:	47b0      	blx	r6
			
			gpio_configure_pin(PIO_PC23_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   82948:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8294c:	2057      	movs	r0, #87	; 0x57
   8294e:	4c17      	ldr	r4, [pc, #92]	; (829ac <LCD_init_pins+0x70>)
   82950:	47a0      	blx	r4
			gpio_configure_pin(PIO_PC24_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   82952:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82956:	2058      	movs	r0, #88	; 0x58
   82958:	47a0      	blx	r4
			gpio_configure_pin(PIO_PC25_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   8295a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8295e:	2059      	movs	r0, #89	; 0x59
   82960:	47a0      	blx	r4
			gpio_configure_pin(PIO_PC28_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   82962:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82966:	205c      	movs	r0, #92	; 0x5c
   82968:	47a0      	blx	r4
			
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA25A_SPI0_MISO);
   8296a:	4d11      	ldr	r5, [pc, #68]	; (829b0 <LCD_init_pins+0x74>)
   8296c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   82970:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82974:	4628      	mov	r0, r5
   82976:	4c0f      	ldr	r4, [pc, #60]	; (829b4 <LCD_init_pins+0x78>)
   82978:	47a0      	blx	r4
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA26A_SPI0_MOSI);
   8297a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8297e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82982:	4628      	mov	r0, r5
   82984:	47a0      	blx	r4
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA27A_SPI0_SPCK);
   82986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8298a:	4611      	mov	r1, r2
   8298c:	4628      	mov	r0, r5
   8298e:	47a0      	blx	r4
			pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA28A_SPI0_NPCS0);
   82990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82994:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82998:	4628      	mov	r0, r5
   8299a:	47a0      	blx	r4
			
			pmc_enable_periph_clk(ID_SPI0);
   8299c:	2018      	movs	r0, #24
   8299e:	47b0      	blx	r6
			
			
			spi_master_init(SPI0);
   829a0:	4805      	ldr	r0, [pc, #20]	; (829b8 <LCD_init_pins+0x7c>)
   829a2:	4b06      	ldr	r3, [pc, #24]	; (829bc <LCD_init_pins+0x80>)
   829a4:	4798      	blx	r3
   829a6:	bd70      	pop	{r4, r5, r6, pc}
   829a8:	000826e9 	.word	0x000826e9
   829ac:	000823f5 	.word	0x000823f5
   829b0:	400e0e00 	.word	0x400e0e00
   829b4:	00082355 	.word	0x00082355
   829b8:	40008000 	.word	0x40008000
   829bc:	00080de5 	.word	0x00080de5

000829c0 <LCD_init_functions>:
}

//Initialize all the necessary libraries and functions

void LCD_init_functions()
{
   829c0:	b508      	push	{r3, lr}
		 membag_init();
   829c2:	4b04      	ldr	r3, [pc, #16]	; (829d4 <LCD_init_functions+0x14>)
   829c4:	4798      	blx	r3
		 
		 ili9341_init();
   829c6:	4b04      	ldr	r3, [pc, #16]	; (829d8 <LCD_init_functions+0x18>)
   829c8:	4798      	blx	r3
		 
		 gfx_init();
   829ca:	4b04      	ldr	r3, [pc, #16]	; (829dc <LCD_init_functions+0x1c>)
   829cc:	4798      	blx	r3
		
		 win_init();
   829ce:	4b04      	ldr	r3, [pc, #16]	; (829e0 <LCD_init_functions+0x20>)
   829d0:	4798      	blx	r3
   829d2:	bd08      	pop	{r3, pc}
   829d4:	00081c69 	.word	0x00081c69
   829d8:	00080455 	.word	0x00080455
   829dc:	00080b15 	.word	0x00080b15
   829e0:	000810fd 	.word	0x000810fd

000829e4 <LCD_setup_window>:
}

//we need a base window

void LCD_setup_window()
{
   829e4:	b570      	push	{r4, r5, r6, lr}
   829e6:	b086      	sub	sp, #24
		struct win_attributes root_attr;
		struct win_window *win_root;

		win_root = win_get_root();
   829e8:	4b0c      	ldr	r3, [pc, #48]	; (82a1c <LCD_setup_window+0x38>)
   829ea:	4798      	blx	r3
   829ec:	4606      	mov	r6, r0
		root_attr = *win_get_attributes(win_root);
   829ee:	4b0c      	ldr	r3, [pc, #48]	; (82a20 <LCD_setup_window+0x3c>)
   829f0:	4798      	blx	r3
   829f2:	466c      	mov	r4, sp
   829f4:	4605      	mov	r5, r0
   829f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   829f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   829fa:	e895 0003 	ldmia.w	r5, {r0, r1}
   829fe:	e884 0003 	stmia.w	r4, {r0, r1}
		root_attr.background = &atmel_logo_small;
   82a02:	4b08      	ldr	r3, [pc, #32]	; (82a24 <LCD_setup_window+0x40>)
   82a04:	9302      	str	r3, [sp, #8]
		win_set_attributes(win_root, &root_attr, WIN_ATTR_BACKGROUND);
   82a06:	2204      	movs	r2, #4
   82a08:	4669      	mov	r1, sp
   82a0a:	4630      	mov	r0, r6
   82a0c:	4b06      	ldr	r3, [pc, #24]	; (82a28 <LCD_setup_window+0x44>)
   82a0e:	4798      	blx	r3

		win_show(win_root);
   82a10:	4630      	mov	r0, r6
   82a12:	4b06      	ldr	r3, [pc, #24]	; (82a2c <LCD_setup_window+0x48>)
   82a14:	4798      	blx	r3
	
}
   82a16:	b006      	add	sp, #24
   82a18:	bd70      	pop	{r4, r5, r6, pc}
   82a1a:	bf00      	nop
   82a1c:	00081161 	.word	0x00081161
   82a20:	00081169 	.word	0x00081169
   82a24:	200701c8 	.word	0x200701c8
   82a28:	0008165d 	.word	0x0008165d
   82a2c:	00081701 	.word	0x00081701

00082a30 <LCD_task_function>:



//Add the task function for LCD Task
void LCD_task_function()
{
   82a30:	b508      	push	{r3, lr}
	
	
	while(1)
	{
		if (updatedisplay)
   82a32:	4c0b      	ldr	r4, [pc, #44]	; (82a60 <LCD_task_function+0x30>)
		{
			switch (pagetoshow)
   82a34:	4d0b      	ldr	r5, [pc, #44]	; (82a64 <LCD_task_function+0x34>)
				LCDpages_mainpage();
				updatedisplay = false;
				break;
				
				case DoorDevicePage:
				LCDpages_doordevicepage();
   82a36:	4e0c      	ldr	r6, [pc, #48]	; (82a68 <LCD_task_function+0x38>)
   82a38:	e003      	b.n	82a42 <LCD_task_function+0x12>
				LCDpages_mainpage();
   82a3a:	4b0c      	ldr	r3, [pc, #48]	; (82a6c <LCD_task_function+0x3c>)
   82a3c:	4798      	blx	r3
				updatedisplay = false;
   82a3e:	2300      	movs	r3, #0
   82a40:	7023      	strb	r3, [r4, #0]
		if (updatedisplay)
   82a42:	7823      	ldrb	r3, [r4, #0]
			switch (pagetoshow)
   82a44:	782a      	ldrb	r2, [r5, #0]
		if (updatedisplay)
   82a46:	2b00      	cmp	r3, #0
   82a48:	d0fd      	beq.n	82a46 <LCD_task_function+0x16>
			switch (pagetoshow)
   82a4a:	2a01      	cmp	r2, #1
   82a4c:	d006      	beq.n	82a5c <LCD_task_function+0x2c>
   82a4e:	2a00      	cmp	r2, #0
   82a50:	d0f3      	beq.n	82a3a <LCD_task_function+0xa>
   82a52:	2a02      	cmp	r2, #2
   82a54:	d1f7      	bne.n	82a46 <LCD_task_function+0x16>
				break;
				
				case SensorDevicePage:
				LCDpages_sensordevicepage();
   82a56:	4b06      	ldr	r3, [pc, #24]	; (82a70 <LCD_task_function+0x40>)
   82a58:	4798      	blx	r3
				break;
   82a5a:	e7f2      	b.n	82a42 <LCD_task_function+0x12>
				LCDpages_doordevicepage();
   82a5c:	47b0      	blx	r6
				break;
   82a5e:	e7f0      	b.n	82a42 <LCD_task_function+0x12>
   82a60:	200701d4 	.word	0x200701d4
   82a64:	200712ac 	.word	0x200712ac
   82a68:	00082be9 	.word	0x00082be9
   82a6c:	00082aad 	.word	0x00082aad
   82a70:	00082beb 	.word	0x00082beb

00082a74 <widget_frame_command_handler>:

#include <asf.h>

static bool widget_frame_command_handler(struct wtk_basic_frame *frame,
win_command_t command_data)
{
   82a74:	b508      	push	{r3, lr}
	char command = (uintptr_t)command_data;

	switch (command) {
   82a76:	b2c9      	uxtb	r1, r1
   82a78:	2901      	cmp	r1, #1
   82a7a:	d003      	beq.n	82a84 <widget_frame_command_handler+0x10>
   82a7c:	2902      	cmp	r1, #2
   82a7e:	d009      	beq.n	82a94 <widget_frame_command_handler+0x20>
		case BUTTON_ID_2:
		break;
	}

	return false;
}
   82a80:	2000      	movs	r0, #0
   82a82:	bd08      	pop	{r3, pc}
		wtk_progress_bar_set_value(progress_bar,
   82a84:	2000      	movs	r0, #0
   82a86:	4b06      	ldr	r3, [pc, #24]	; (82aa0 <widget_frame_command_handler+0x2c>)
   82a88:	4798      	blx	r3
   82a8a:	4601      	mov	r1, r0
   82a8c:	2000      	movs	r0, #0
   82a8e:	4b05      	ldr	r3, [pc, #20]	; (82aa4 <widget_frame_command_handler+0x30>)
   82a90:	4798      	blx	r3
		break;
   82a92:	e7f5      	b.n	82a80 <widget_frame_command_handler+0xc>
		counter++;
   82a94:	4a04      	ldr	r2, [pc, #16]	; (82aa8 <widget_frame_command_handler+0x34>)
   82a96:	7813      	ldrb	r3, [r2, #0]
   82a98:	3301      	adds	r3, #1
   82a9a:	7013      	strb	r3, [r2, #0]
		break;
   82a9c:	e7f0      	b.n	82a80 <widget_frame_command_handler+0xc>
   82a9e:	bf00      	nop
   82aa0:	00081c51 	.word	0x00081c51
   82aa4:	00081bfd 	.word	0x00081bfd
   82aa8:	200712ad 	.word	0x200712ad

00082aac <LCDpages_mainpage>:
}



void LCDpages_mainpage()
{
   82aac:	b570      	push	{r4, r5, r6, lr}
   82aae:	b084      	sub	sp, #16
	const static char *mainpage_string = "Following Devices:";
	struct wtk_button *doorbtn;
	//struct wtk_button *sensorbtn;
		
			/* Get pointer to root window */
	win_root = win_get_root();
   82ab0:	4b3a      	ldr	r3, [pc, #232]	; (82b9c <LCDpages_mainpage+0xf0>)
   82ab2:	4798      	blx	r3
   82ab4:	4606      	mov	r6, r0

	/* Application frame */

	/* Create a background bitmap using a solid color. */
	frame_background.type = GFX_BITMAP_SOLID;
   82ab6:	4d3a      	ldr	r5, [pc, #232]	; (82ba0 <LCDpages_mainpage+0xf4>)
   82ab8:	2400      	movs	r4, #0
   82aba:	712c      	strb	r4, [r5, #4]
	frame_background.data.color = APP_BACKGROUND_COLOR;
   82abc:	f248 6331 	movw	r3, #34353	; 0x8631
   82ac0:	812b      	strh	r3, [r5, #8]

	/* Set the area to fill the entire screen */
	area.pos.x = 0;
   82ac2:	f8ad 4008 	strh.w	r4, [sp, #8]
	area.pos.y = 0;
   82ac6:	f8ad 400a 	strh.w	r4, [sp, #10]
	area.size.x = gfx_get_width();
   82aca:	4b36      	ldr	r3, [pc, #216]	; (82ba4 <LCDpages_mainpage+0xf8>)
   82acc:	4798      	blx	r3
   82ace:	f8ad 000c 	strh.w	r0, [sp, #12]
	area.size.y = gfx_get_height();
   82ad2:	4b35      	ldr	r3, [pc, #212]	; (82ba8 <LCDpages_mainpage+0xfc>)
   82ad4:	4798      	blx	r3
   82ad6:	f8ad 000e 	strh.w	r0, [sp, #14]
	/*
	 * Create a basic frame with a specified background and command event
	 * handler. Check the return value if an error occurred while creating
	 * the widget.
	 */
	main_frame = wtk_basic_frame_create(win_root, &area,
   82ada:	9401      	str	r4, [sp, #4]
   82adc:	4b33      	ldr	r3, [pc, #204]	; (82bac <LCDpages_mainpage+0x100>)
   82ade:	9300      	str	r3, [sp, #0]
   82ae0:	4623      	mov	r3, r4
   82ae2:	462a      	mov	r2, r5
   82ae4:	a902      	add	r1, sp, #8
   82ae6:	4630      	mov	r0, r6
   82ae8:	4c31      	ldr	r4, [pc, #196]	; (82bb0 <LCDpages_mainpage+0x104>)
   82aea:	47a0      	blx	r4
   82aec:	4b31      	ldr	r3, [pc, #196]	; (82bb4 <LCDpages_mainpage+0x108>)
   82aee:	6018      	str	r0, [r3, #0]
			&frame_background, NULL,
			widget_frame_command_handler, NULL);
	if (!main_frame) {
   82af0:	2800      	cmp	r0, #0
   82af2:	d052      	beq.n	82b9a <LCDpages_mainpage+0xee>
		goto error_frame;
	}

	/* Get a pointer to the widget's window for adding sub-widgets. */
	parent = wtk_basic_frame_as_child(main_frame);
   82af4:	4b30      	ldr	r3, [pc, #192]	; (82bb8 <LCDpages_mainpage+0x10c>)
   82af6:	4798      	blx	r3
   82af8:	4604      	mov	r4, r0
	/*
	 * Draw the frame by showing the frame widget's window. Any
	 * child-widgets and windows will not be shown before the parent
	 * widget/window is shown.
	 */
	win_show(parent);
   82afa:	4b30      	ldr	r3, [pc, #192]	; (82bbc <LCDpages_mainpage+0x110>)
   82afc:	4798      	blx	r3

	/* Application label */
	area.pos.x = LABEL_POS_X;
   82afe:	230a      	movs	r3, #10
   82b00:	f8ad 3008 	strh.w	r3, [sp, #8]
	area.pos.y = LABEL_POS_Y;
   82b04:	f8ad 300a 	strh.w	r3, [sp, #10]
	/* Find an optimal size for the widget. */
	wtk_label_size_hint(&area.size, demo_string);
   82b08:	492d      	ldr	r1, [pc, #180]	; (82bc0 <LCDpages_mainpage+0x114>)
   82b0a:	a803      	add	r0, sp, #12
   82b0c:	4b2d      	ldr	r3, [pc, #180]	; (82bc4 <LCDpages_mainpage+0x118>)
   82b0e:	4798      	blx	r3

	/*
	 * Create the label and check the return value if an error occurred
	 * while creating the label.
	 */
	lbl = wtk_label_create(parent, &area, mainpage_string,
   82b10:	2300      	movs	r3, #0
   82b12:	9301      	str	r3, [sp, #4]
   82b14:	9300      	str	r3, [sp, #0]
   82b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82b1a:	4a2b      	ldr	r2, [pc, #172]	; (82bc8 <LCDpages_mainpage+0x11c>)
   82b1c:	a902      	add	r1, sp, #8
   82b1e:	4620      	mov	r0, r4
   82b20:	4d2a      	ldr	r5, [pc, #168]	; (82bcc <LCDpages_mainpage+0x120>)
   82b22:	47a8      	blx	r5
			GFX_COLOR(255, 255, 255), NULL, false);
	if (!lbl) {
   82b24:	2800      	cmp	r0, #0
   82b26:	d032      	beq.n	82b8e <LCDpages_mainpage+0xe2>
	}
	

	
	/* Draw the label by showing the label widget's window. */
	win_show(wtk_label_as_child(lbl));
   82b28:	4b29      	ldr	r3, [pc, #164]	; (82bd0 <LCDpages_mainpage+0x124>)
   82b2a:	4798      	blx	r3
   82b2c:	4b23      	ldr	r3, [pc, #140]	; (82bbc <LCDpages_mainpage+0x110>)
   82b2e:	4798      	blx	r3

	/* Draw the progress bar by showing the progress bar widget's window. */
//	win_show(wtk_progress_bar_as_child(progress_bar));

	/** \todo Add code to set up button here. */
	area.pos.x = 10;
   82b30:	230a      	movs	r3, #10
   82b32:	f8ad 3008 	strh.w	r3, [sp, #8]
	area.pos.y = 30;
   82b36:	231e      	movs	r3, #30
   82b38:	f8ad 300a 	strh.w	r3, [sp, #10]
	area.size.x = 90;
   82b3c:	235a      	movs	r3, #90	; 0x5a
   82b3e:	f8ad 300c 	strh.w	r3, [sp, #12]
	area.size.y = 40;
   82b42:	2328      	movs	r3, #40	; 0x28
   82b44:	f8ad 300e 	strh.w	r3, [sp, #14]

	doorbtn = wtk_button_create(parent, &area, "Click1",
   82b48:	2303      	movs	r3, #3
   82b4a:	4a22      	ldr	r2, [pc, #136]	; (82bd4 <LCDpages_mainpage+0x128>)
   82b4c:	a902      	add	r1, sp, #8
   82b4e:	4620      	mov	r0, r4
   82b50:	4d21      	ldr	r5, [pc, #132]	; (82bd8 <LCDpages_mainpage+0x12c>)
   82b52:	47a8      	blx	r5
			(win_command_t)BUTTON_ID_2);
	if (!doorbtn) {
   82b54:	b1d8      	cbz	r0, 82b8e <LCDpages_mainpage+0xe2>
		goto error_widget;
	}
	win_show(wtk_button_as_child(doorbtn));
   82b56:	4b21      	ldr	r3, [pc, #132]	; (82bdc <LCDpages_mainpage+0x130>)
   82b58:	4798      	blx	r3
   82b5a:	4b18      	ldr	r3, [pc, #96]	; (82bbc <LCDpages_mainpage+0x110>)
   82b5c:	4798      	blx	r3
	
	
	area.pos.x = 10;
   82b5e:	230a      	movs	r3, #10
   82b60:	f8ad 3008 	strh.w	r3, [sp, #8]
	area.pos.y = 100;
   82b64:	2364      	movs	r3, #100	; 0x64
   82b66:	f8ad 300a 	strh.w	r3, [sp, #10]
	area.size.x = 90;
   82b6a:	235a      	movs	r3, #90	; 0x5a
   82b6c:	f8ad 300c 	strh.w	r3, [sp, #12]
	area.size.y = 40;
   82b70:	2328      	movs	r3, #40	; 0x28
   82b72:	f8ad 300e 	strh.w	r3, [sp, #14]

	doorbtn = wtk_button_create(parent, &area, "Click2",
   82b76:	2302      	movs	r3, #2
   82b78:	4a19      	ldr	r2, [pc, #100]	; (82be0 <LCDpages_mainpage+0x134>)
   82b7a:	a902      	add	r1, sp, #8
   82b7c:	4620      	mov	r0, r4
   82b7e:	47a8      	blx	r5
	(win_command_t)BUTTON_ID_1);
	if (!doorbtn) {
   82b80:	b128      	cbz	r0, 82b8e <LCDpages_mainpage+0xe2>
		goto error_widget;
	}
	win_show(wtk_button_as_child(doorbtn));
   82b82:	4b16      	ldr	r3, [pc, #88]	; (82bdc <LCDpages_mainpage+0x130>)
   82b84:	4798      	blx	r3
   82b86:	4b0d      	ldr	r3, [pc, #52]	; (82bbc <LCDpages_mainpage+0x110>)
   82b88:	4798      	blx	r3
	/* Wait forever if an error occurred during setup. */
	while (1) {
	}
	
	
}
   82b8a:	b004      	add	sp, #16
   82b8c:	bd70      	pop	{r4, r5, r6, pc}
	win_destroy(wtk_basic_frame_as_child(main_frame));
   82b8e:	4b09      	ldr	r3, [pc, #36]	; (82bb4 <LCDpages_mainpage+0x108>)
   82b90:	6818      	ldr	r0, [r3, #0]
   82b92:	4b09      	ldr	r3, [pc, #36]	; (82bb8 <LCDpages_mainpage+0x10c>)
   82b94:	4798      	blx	r3
   82b96:	4b13      	ldr	r3, [pc, #76]	; (82be4 <LCDpages_mainpage+0x138>)
   82b98:	4798      	blx	r3
   82b9a:	e7fe      	b.n	82b9a <LCDpages_mainpage+0xee>
   82b9c:	00081161 	.word	0x00081161
   82ba0:	200712b0 	.word	0x200712b0
   82ba4:	00080789 	.word	0x00080789
   82ba8:	00080795 	.word	0x00080795
   82bac:	00082a75 	.word	0x00082a75
   82bb0:	000817f5 	.word	0x000817f5
   82bb4:	200712bc 	.word	0x200712bc
   82bb8:	000817f1 	.word	0x000817f1
   82bbc:	00081701 	.word	0x00081701
   82bc0:	00085ac8 	.word	0x00085ac8
   82bc4:	00081b49 	.word	0x00081b49
   82bc8:	00085ae0 	.word	0x00085ae0
   82bcc:	00081b61 	.word	0x00081b61
   82bd0:	00081b45 	.word	0x00081b45
   82bd4:	00085af4 	.word	0x00085af4
   82bd8:	00081a0d 	.word	0x00081a0d
   82bdc:	00081a09 	.word	0x00081a09
   82be0:	00085afc 	.word	0x00085afc
   82be4:	00081579 	.word	0x00081579

00082be8 <LCDpages_doordevicepage>:

void LCDpages_doordevicepage()
{
   82be8:	4770      	bx	lr

00082bea <LCDpages_sensordevicepage>:
	
}

void LCDpages_sensordevicepage()
{
   82bea:	4770      	bx	lr

00082bec <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   82bee:	b083      	sub	sp, #12
   82bf0:	4604      	mov	r4, r0
   82bf2:	460d      	mov	r5, r1
	uint32_t val = 0;
   82bf4:	2300      	movs	r3, #0
   82bf6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82bf8:	4b20      	ldr	r3, [pc, #128]	; (82c7c <usart_serial_getchar+0x90>)
   82bfa:	4298      	cmp	r0, r3
   82bfc:	d00d      	beq.n	82c1a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82bfe:	4b20      	ldr	r3, [pc, #128]	; (82c80 <usart_serial_getchar+0x94>)
   82c00:	4298      	cmp	r0, r3
   82c02:	d012      	beq.n	82c2a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82c04:	4b1f      	ldr	r3, [pc, #124]	; (82c84 <usart_serial_getchar+0x98>)
   82c06:	4298      	cmp	r0, r3
   82c08:	d019      	beq.n	82c3e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82c0a:	4b1f      	ldr	r3, [pc, #124]	; (82c88 <usart_serial_getchar+0x9c>)
   82c0c:	429c      	cmp	r4, r3
   82c0e:	d020      	beq.n	82c52 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82c10:	4b1e      	ldr	r3, [pc, #120]	; (82c8c <usart_serial_getchar+0xa0>)
   82c12:	429c      	cmp	r4, r3
   82c14:	d027      	beq.n	82c66 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82c16:	b003      	add	sp, #12
   82c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   82c1a:	461f      	mov	r7, r3
   82c1c:	4e1c      	ldr	r6, [pc, #112]	; (82c90 <usart_serial_getchar+0xa4>)
   82c1e:	4629      	mov	r1, r5
   82c20:	4638      	mov	r0, r7
   82c22:	47b0      	blx	r6
   82c24:	2800      	cmp	r0, #0
   82c26:	d1fa      	bne.n	82c1e <usart_serial_getchar+0x32>
   82c28:	e7ef      	b.n	82c0a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   82c2a:	461f      	mov	r7, r3
   82c2c:	4e19      	ldr	r6, [pc, #100]	; (82c94 <usart_serial_getchar+0xa8>)
   82c2e:	a901      	add	r1, sp, #4
   82c30:	4638      	mov	r0, r7
   82c32:	47b0      	blx	r6
   82c34:	2800      	cmp	r0, #0
   82c36:	d1fa      	bne.n	82c2e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   82c38:	9b01      	ldr	r3, [sp, #4]
   82c3a:	702b      	strb	r3, [r5, #0]
   82c3c:	e7e8      	b.n	82c10 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   82c3e:	461e      	mov	r6, r3
   82c40:	4c14      	ldr	r4, [pc, #80]	; (82c94 <usart_serial_getchar+0xa8>)
   82c42:	a901      	add	r1, sp, #4
   82c44:	4630      	mov	r0, r6
   82c46:	47a0      	blx	r4
   82c48:	2800      	cmp	r0, #0
   82c4a:	d1fa      	bne.n	82c42 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   82c4c:	9b01      	ldr	r3, [sp, #4]
   82c4e:	702b      	strb	r3, [r5, #0]
   82c50:	e7e1      	b.n	82c16 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   82c52:	461e      	mov	r6, r3
   82c54:	4c0f      	ldr	r4, [pc, #60]	; (82c94 <usart_serial_getchar+0xa8>)
   82c56:	a901      	add	r1, sp, #4
   82c58:	4630      	mov	r0, r6
   82c5a:	47a0      	blx	r4
   82c5c:	2800      	cmp	r0, #0
   82c5e:	d1fa      	bne.n	82c56 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   82c60:	9b01      	ldr	r3, [sp, #4]
   82c62:	702b      	strb	r3, [r5, #0]
   82c64:	e7d7      	b.n	82c16 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   82c66:	461e      	mov	r6, r3
   82c68:	4c0a      	ldr	r4, [pc, #40]	; (82c94 <usart_serial_getchar+0xa8>)
   82c6a:	a901      	add	r1, sp, #4
   82c6c:	4630      	mov	r0, r6
   82c6e:	47a0      	blx	r4
   82c70:	2800      	cmp	r0, #0
   82c72:	d1fa      	bne.n	82c6a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   82c74:	9b01      	ldr	r3, [sp, #4]
   82c76:	702b      	strb	r3, [r5, #0]
}
   82c78:	e7cd      	b.n	82c16 <usart_serial_getchar+0x2a>
   82c7a:	bf00      	nop
   82c7c:	400e0800 	.word	0x400e0800
   82c80:	40098000 	.word	0x40098000
   82c84:	4009c000 	.word	0x4009c000
   82c88:	400a0000 	.word	0x400a0000
   82c8c:	400a4000 	.word	0x400a4000
   82c90:	00081f69 	.word	0x00081f69
   82c94:	00081f8f 	.word	0x00081f8f

00082c98 <usart_serial_putchar>:
{
   82c98:	b570      	push	{r4, r5, r6, lr}
   82c9a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   82c9c:	4b1e      	ldr	r3, [pc, #120]	; (82d18 <usart_serial_putchar+0x80>)
   82c9e:	4298      	cmp	r0, r3
   82ca0:	d00d      	beq.n	82cbe <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   82ca2:	4b1e      	ldr	r3, [pc, #120]	; (82d1c <usart_serial_putchar+0x84>)
   82ca4:	4298      	cmp	r0, r3
   82ca6:	d013      	beq.n	82cd0 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   82ca8:	4b1d      	ldr	r3, [pc, #116]	; (82d20 <usart_serial_putchar+0x88>)
   82caa:	4298      	cmp	r0, r3
   82cac:	d019      	beq.n	82ce2 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   82cae:	4b1d      	ldr	r3, [pc, #116]	; (82d24 <usart_serial_putchar+0x8c>)
   82cb0:	4298      	cmp	r0, r3
   82cb2:	d01f      	beq.n	82cf4 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   82cb4:	4b1c      	ldr	r3, [pc, #112]	; (82d28 <usart_serial_putchar+0x90>)
   82cb6:	4298      	cmp	r0, r3
   82cb8:	d025      	beq.n	82d06 <usart_serial_putchar+0x6e>
	return 0;
   82cba:	2000      	movs	r0, #0
}
   82cbc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   82cbe:	461e      	mov	r6, r3
   82cc0:	4d1a      	ldr	r5, [pc, #104]	; (82d2c <usart_serial_putchar+0x94>)
   82cc2:	4621      	mov	r1, r4
   82cc4:	4630      	mov	r0, r6
   82cc6:	47a8      	blx	r5
   82cc8:	2800      	cmp	r0, #0
   82cca:	d1fa      	bne.n	82cc2 <usart_serial_putchar+0x2a>
		return 1;
   82ccc:	2001      	movs	r0, #1
   82cce:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82cd0:	461e      	mov	r6, r3
   82cd2:	4d17      	ldr	r5, [pc, #92]	; (82d30 <usart_serial_putchar+0x98>)
   82cd4:	4621      	mov	r1, r4
   82cd6:	4630      	mov	r0, r6
   82cd8:	47a8      	blx	r5
   82cda:	2800      	cmp	r0, #0
   82cdc:	d1fa      	bne.n	82cd4 <usart_serial_putchar+0x3c>
		return 1;
   82cde:	2001      	movs	r0, #1
   82ce0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82ce2:	461e      	mov	r6, r3
   82ce4:	4d12      	ldr	r5, [pc, #72]	; (82d30 <usart_serial_putchar+0x98>)
   82ce6:	4621      	mov	r1, r4
   82ce8:	4630      	mov	r0, r6
   82cea:	47a8      	blx	r5
   82cec:	2800      	cmp	r0, #0
   82cee:	d1fa      	bne.n	82ce6 <usart_serial_putchar+0x4e>
		return 1;
   82cf0:	2001      	movs	r0, #1
   82cf2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82cf4:	461e      	mov	r6, r3
   82cf6:	4d0e      	ldr	r5, [pc, #56]	; (82d30 <usart_serial_putchar+0x98>)
   82cf8:	4621      	mov	r1, r4
   82cfa:	4630      	mov	r0, r6
   82cfc:	47a8      	blx	r5
   82cfe:	2800      	cmp	r0, #0
   82d00:	d1fa      	bne.n	82cf8 <usart_serial_putchar+0x60>
		return 1;
   82d02:	2001      	movs	r0, #1
   82d04:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82d06:	461e      	mov	r6, r3
   82d08:	4d09      	ldr	r5, [pc, #36]	; (82d30 <usart_serial_putchar+0x98>)
   82d0a:	4621      	mov	r1, r4
   82d0c:	4630      	mov	r0, r6
   82d0e:	47a8      	blx	r5
   82d10:	2800      	cmp	r0, #0
   82d12:	d1fa      	bne.n	82d0a <usart_serial_putchar+0x72>
		return 1;
   82d14:	2001      	movs	r0, #1
   82d16:	bd70      	pop	{r4, r5, r6, pc}
   82d18:	400e0800 	.word	0x400e0800
   82d1c:	40098000 	.word	0x40098000
   82d20:	4009c000 	.word	0x4009c000
   82d24:	400a0000 	.word	0x400a0000
   82d28:	400a4000 	.word	0x400a4000
   82d2c:	00081f59 	.word	0x00081f59
   82d30:	00081f7b 	.word	0x00081f7b

00082d34 <config_console_uart>:
#include "widget_gui.h"



void config_console_uart(void)
{
   82d34:	b530      	push	{r4, r5, lr}
   82d36:	b085      	sub	sp, #20
   82d38:	2008      	movs	r0, #8
   82d3a:	4d12      	ldr	r5, [pc, #72]	; (82d84 <config_console_uart+0x50>)
   82d3c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   82d3e:	4c12      	ldr	r4, [pc, #72]	; (82d88 <config_console_uart+0x54>)
   82d40:	4b12      	ldr	r3, [pc, #72]	; (82d8c <config_console_uart+0x58>)
   82d42:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82d44:	4a12      	ldr	r2, [pc, #72]	; (82d90 <config_console_uart+0x5c>)
   82d46:	4b13      	ldr	r3, [pc, #76]	; (82d94 <config_console_uart+0x60>)
   82d48:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82d4a:	4a13      	ldr	r2, [pc, #76]	; (82d98 <config_console_uart+0x64>)
   82d4c:	4b13      	ldr	r3, [pc, #76]	; (82d9c <config_console_uart+0x68>)
   82d4e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82d50:	4b13      	ldr	r3, [pc, #76]	; (82da0 <config_console_uart+0x6c>)
   82d52:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   82d54:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82d58:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   82d5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82d5e:	9303      	str	r3, [sp, #12]
   82d60:	2008      	movs	r0, #8
   82d62:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   82d64:	a901      	add	r1, sp, #4
   82d66:	4620      	mov	r0, r4
   82d68:	4b0e      	ldr	r3, [pc, #56]	; (82da4 <config_console_uart+0x70>)
   82d6a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82d6c:	4d0e      	ldr	r5, [pc, #56]	; (82da8 <config_console_uart+0x74>)
   82d6e:	682b      	ldr	r3, [r5, #0]
   82d70:	2100      	movs	r1, #0
   82d72:	6898      	ldr	r0, [r3, #8]
   82d74:	4c0d      	ldr	r4, [pc, #52]	; (82dac <config_console_uart+0x78>)
   82d76:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82d78:	682b      	ldr	r3, [r5, #0]
   82d7a:	2100      	movs	r1, #0
   82d7c:	6858      	ldr	r0, [r3, #4]
   82d7e:	47a0      	blx	r4
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
	
}
   82d80:	b005      	add	sp, #20
   82d82:	bd30      	pop	{r4, r5, pc}
   82d84:	000826e9 	.word	0x000826e9
   82d88:	400e0800 	.word	0x400e0800
   82d8c:	20071308 	.word	0x20071308
   82d90:	00082c99 	.word	0x00082c99
   82d94:	20071304 	.word	0x20071304
   82d98:	00082bed 	.word	0x00082bed
   82d9c:	20071300 	.word	0x20071300
   82da0:	0501bd00 	.word	0x0501bd00
   82da4:	00081f23 	.word	0x00081f23
   82da8:	200701d8 	.word	0x200701d8
   82dac:	00082ee9 	.word	0x00082ee9

00082db0 <main>:

//--------------------------------------------------------------------//


int main (void)
{
   82db0:	b570      	push	{r4, r5, r6, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	
	sysclk_init();
   82db2:	4b09      	ldr	r3, [pc, #36]	; (82dd8 <main+0x28>)
   82db4:	4798      	blx	r3

	board_init();
   82db6:	4b09      	ldr	r3, [pc, #36]	; (82ddc <main+0x2c>)
   82db8:	4798      	blx	r3
	
	config_console_uart();
   82dba:	4b09      	ldr	r3, [pc, #36]	; (82de0 <main+0x30>)
   82dbc:	4798      	blx	r3
	
	LCD_init_pins();
   82dbe:	4b09      	ldr	r3, [pc, #36]	; (82de4 <main+0x34>)
   82dc0:	4798      	blx	r3
	
	LCD_init_functions();
   82dc2:	4b09      	ldr	r3, [pc, #36]	; (82de8 <main+0x38>)
   82dc4:	4798      	blx	r3
	
	LCD_setup_window();
   82dc6:	4b09      	ldr	r3, [pc, #36]	; (82dec <main+0x3c>)
   82dc8:	4798      	blx	r3
//		if (!btn) {
			//goto error_widget;
//		}
//		win_show(wtk_button_as_child(btn));

		LCD_task_function();
   82dca:	4e09      	ldr	r6, [pc, #36]	; (82df0 <main+0x40>)
		
		delay_ms(1000);
   82dcc:	4d09      	ldr	r5, [pc, #36]	; (82df4 <main+0x44>)
   82dce:	4c0a      	ldr	r4, [pc, #40]	; (82df8 <main+0x48>)
		LCD_task_function();
   82dd0:	47b0      	blx	r6
		delay_ms(1000);
   82dd2:	4628      	mov	r0, r5
   82dd4:	47a0      	blx	r4
   82dd6:	e7fb      	b.n	82dd0 <main+0x20>
   82dd8:	00082251 	.word	0x00082251
   82ddc:	000822b5 	.word	0x000822b5
   82de0:	00082d35 	.word	0x00082d35
   82de4:	0008293d 	.word	0x0008293d
   82de8:	000829c1 	.word	0x000829c1
   82dec:	000829e5 	.word	0x000829e5
   82df0:	00082a31 	.word	0x00082a31
   82df4:	005b8d80 	.word	0x005b8d80
   82df8:	20070001 	.word	0x20070001

00082dfc <__libc_init_array>:
   82dfc:	b570      	push	{r4, r5, r6, lr}
   82dfe:	4e0f      	ldr	r6, [pc, #60]	; (82e3c <__libc_init_array+0x40>)
   82e00:	4d0f      	ldr	r5, [pc, #60]	; (82e40 <__libc_init_array+0x44>)
   82e02:	1b76      	subs	r6, r6, r5
   82e04:	10b6      	asrs	r6, r6, #2
   82e06:	bf18      	it	ne
   82e08:	2400      	movne	r4, #0
   82e0a:	d005      	beq.n	82e18 <__libc_init_array+0x1c>
   82e0c:	3401      	adds	r4, #1
   82e0e:	f855 3b04 	ldr.w	r3, [r5], #4
   82e12:	4798      	blx	r3
   82e14:	42a6      	cmp	r6, r4
   82e16:	d1f9      	bne.n	82e0c <__libc_init_array+0x10>
   82e18:	4e0a      	ldr	r6, [pc, #40]	; (82e44 <__libc_init_array+0x48>)
   82e1a:	4d0b      	ldr	r5, [pc, #44]	; (82e48 <__libc_init_array+0x4c>)
   82e1c:	f002 fe74 	bl	85b08 <_init>
   82e20:	1b76      	subs	r6, r6, r5
   82e22:	10b6      	asrs	r6, r6, #2
   82e24:	bf18      	it	ne
   82e26:	2400      	movne	r4, #0
   82e28:	d006      	beq.n	82e38 <__libc_init_array+0x3c>
   82e2a:	3401      	adds	r4, #1
   82e2c:	f855 3b04 	ldr.w	r3, [r5], #4
   82e30:	4798      	blx	r3
   82e32:	42a6      	cmp	r6, r4
   82e34:	d1f9      	bne.n	82e2a <__libc_init_array+0x2e>
   82e36:	bd70      	pop	{r4, r5, r6, pc}
   82e38:	bd70      	pop	{r4, r5, r6, pc}
   82e3a:	bf00      	nop
   82e3c:	00085b14 	.word	0x00085b14
   82e40:	00085b14 	.word	0x00085b14
   82e44:	00085b1c 	.word	0x00085b1c
   82e48:	00085b14 	.word	0x00085b14

00082e4c <memset>:
   82e4c:	b470      	push	{r4, r5, r6}
   82e4e:	0786      	lsls	r6, r0, #30
   82e50:	d046      	beq.n	82ee0 <memset+0x94>
   82e52:	1e54      	subs	r4, r2, #1
   82e54:	2a00      	cmp	r2, #0
   82e56:	d041      	beq.n	82edc <memset+0x90>
   82e58:	b2ca      	uxtb	r2, r1
   82e5a:	4603      	mov	r3, r0
   82e5c:	e002      	b.n	82e64 <memset+0x18>
   82e5e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82e62:	d33b      	bcc.n	82edc <memset+0x90>
   82e64:	f803 2b01 	strb.w	r2, [r3], #1
   82e68:	079d      	lsls	r5, r3, #30
   82e6a:	d1f8      	bne.n	82e5e <memset+0x12>
   82e6c:	2c03      	cmp	r4, #3
   82e6e:	d92e      	bls.n	82ece <memset+0x82>
   82e70:	b2cd      	uxtb	r5, r1
   82e72:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82e76:	2c0f      	cmp	r4, #15
   82e78:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82e7c:	d919      	bls.n	82eb2 <memset+0x66>
   82e7e:	4626      	mov	r6, r4
   82e80:	f103 0210 	add.w	r2, r3, #16
   82e84:	3e10      	subs	r6, #16
   82e86:	2e0f      	cmp	r6, #15
   82e88:	f842 5c10 	str.w	r5, [r2, #-16]
   82e8c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82e90:	f842 5c08 	str.w	r5, [r2, #-8]
   82e94:	f842 5c04 	str.w	r5, [r2, #-4]
   82e98:	f102 0210 	add.w	r2, r2, #16
   82e9c:	d8f2      	bhi.n	82e84 <memset+0x38>
   82e9e:	f1a4 0210 	sub.w	r2, r4, #16
   82ea2:	f022 020f 	bic.w	r2, r2, #15
   82ea6:	f004 040f 	and.w	r4, r4, #15
   82eaa:	3210      	adds	r2, #16
   82eac:	2c03      	cmp	r4, #3
   82eae:	4413      	add	r3, r2
   82eb0:	d90d      	bls.n	82ece <memset+0x82>
   82eb2:	461e      	mov	r6, r3
   82eb4:	4622      	mov	r2, r4
   82eb6:	3a04      	subs	r2, #4
   82eb8:	2a03      	cmp	r2, #3
   82eba:	f846 5b04 	str.w	r5, [r6], #4
   82ebe:	d8fa      	bhi.n	82eb6 <memset+0x6a>
   82ec0:	1f22      	subs	r2, r4, #4
   82ec2:	f022 0203 	bic.w	r2, r2, #3
   82ec6:	3204      	adds	r2, #4
   82ec8:	4413      	add	r3, r2
   82eca:	f004 0403 	and.w	r4, r4, #3
   82ece:	b12c      	cbz	r4, 82edc <memset+0x90>
   82ed0:	b2c9      	uxtb	r1, r1
   82ed2:	441c      	add	r4, r3
   82ed4:	f803 1b01 	strb.w	r1, [r3], #1
   82ed8:	429c      	cmp	r4, r3
   82eda:	d1fb      	bne.n	82ed4 <memset+0x88>
   82edc:	bc70      	pop	{r4, r5, r6}
   82ede:	4770      	bx	lr
   82ee0:	4614      	mov	r4, r2
   82ee2:	4603      	mov	r3, r0
   82ee4:	e7c2      	b.n	82e6c <memset+0x20>
   82ee6:	bf00      	nop

00082ee8 <setbuf>:
   82ee8:	2900      	cmp	r1, #0
   82eea:	bf0c      	ite	eq
   82eec:	2202      	moveq	r2, #2
   82eee:	2200      	movne	r2, #0
   82ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82ef4:	f000 b800 	b.w	82ef8 <setvbuf>

00082ef8 <setvbuf>:
   82ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82efc:	4d61      	ldr	r5, [pc, #388]	; (83084 <setvbuf+0x18c>)
   82efe:	b083      	sub	sp, #12
   82f00:	682d      	ldr	r5, [r5, #0]
   82f02:	4604      	mov	r4, r0
   82f04:	460f      	mov	r7, r1
   82f06:	4690      	mov	r8, r2
   82f08:	461e      	mov	r6, r3
   82f0a:	b115      	cbz	r5, 82f12 <setvbuf+0x1a>
   82f0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82f0e:	2b00      	cmp	r3, #0
   82f10:	d064      	beq.n	82fdc <setvbuf+0xe4>
   82f12:	f1b8 0f02 	cmp.w	r8, #2
   82f16:	d006      	beq.n	82f26 <setvbuf+0x2e>
   82f18:	f1b8 0f01 	cmp.w	r8, #1
   82f1c:	f200 809f 	bhi.w	8305e <setvbuf+0x166>
   82f20:	2e00      	cmp	r6, #0
   82f22:	f2c0 809c 	blt.w	8305e <setvbuf+0x166>
   82f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82f28:	07d8      	lsls	r0, r3, #31
   82f2a:	d534      	bpl.n	82f96 <setvbuf+0x9e>
   82f2c:	4621      	mov	r1, r4
   82f2e:	4628      	mov	r0, r5
   82f30:	f000 f984 	bl	8323c <_fflush_r>
   82f34:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82f36:	b141      	cbz	r1, 82f4a <setvbuf+0x52>
   82f38:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82f3c:	4299      	cmp	r1, r3
   82f3e:	d002      	beq.n	82f46 <setvbuf+0x4e>
   82f40:	4628      	mov	r0, r5
   82f42:	f000 fa79 	bl	83438 <_free_r>
   82f46:	2300      	movs	r3, #0
   82f48:	6323      	str	r3, [r4, #48]	; 0x30
   82f4a:	2200      	movs	r2, #0
   82f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82f50:	61a2      	str	r2, [r4, #24]
   82f52:	6062      	str	r2, [r4, #4]
   82f54:	061a      	lsls	r2, r3, #24
   82f56:	d43a      	bmi.n	82fce <setvbuf+0xd6>
   82f58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82f5c:	f023 0303 	bic.w	r3, r3, #3
   82f60:	f1b8 0f02 	cmp.w	r8, #2
   82f64:	81a3      	strh	r3, [r4, #12]
   82f66:	d01d      	beq.n	82fa4 <setvbuf+0xac>
   82f68:	ab01      	add	r3, sp, #4
   82f6a:	466a      	mov	r2, sp
   82f6c:	4621      	mov	r1, r4
   82f6e:	4628      	mov	r0, r5
   82f70:	f000 fb78 	bl	83664 <__swhatbuf_r>
   82f74:	89a3      	ldrh	r3, [r4, #12]
   82f76:	4318      	orrs	r0, r3
   82f78:	81a0      	strh	r0, [r4, #12]
   82f7a:	2e00      	cmp	r6, #0
   82f7c:	d132      	bne.n	82fe4 <setvbuf+0xec>
   82f7e:	9e00      	ldr	r6, [sp, #0]
   82f80:	4630      	mov	r0, r6
   82f82:	f000 fb9d 	bl	836c0 <malloc>
   82f86:	4607      	mov	r7, r0
   82f88:	2800      	cmp	r0, #0
   82f8a:	d06b      	beq.n	83064 <setvbuf+0x16c>
   82f8c:	89a3      	ldrh	r3, [r4, #12]
   82f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82f92:	81a3      	strh	r3, [r4, #12]
   82f94:	e028      	b.n	82fe8 <setvbuf+0xf0>
   82f96:	89a3      	ldrh	r3, [r4, #12]
   82f98:	0599      	lsls	r1, r3, #22
   82f9a:	d4c7      	bmi.n	82f2c <setvbuf+0x34>
   82f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82f9e:	f000 fb5d 	bl	8365c <__retarget_lock_acquire_recursive>
   82fa2:	e7c3      	b.n	82f2c <setvbuf+0x34>
   82fa4:	2500      	movs	r5, #0
   82fa6:	2600      	movs	r6, #0
   82fa8:	2001      	movs	r0, #1
   82faa:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82fac:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82fb0:	f043 0302 	orr.w	r3, r3, #2
   82fb4:	60a6      	str	r6, [r4, #8]
   82fb6:	07ce      	lsls	r6, r1, #31
   82fb8:	81a3      	strh	r3, [r4, #12]
   82fba:	6160      	str	r0, [r4, #20]
   82fbc:	6022      	str	r2, [r4, #0]
   82fbe:	6122      	str	r2, [r4, #16]
   82fc0:	d401      	bmi.n	82fc6 <setvbuf+0xce>
   82fc2:	0598      	lsls	r0, r3, #22
   82fc4:	d53e      	bpl.n	83044 <setvbuf+0x14c>
   82fc6:	4628      	mov	r0, r5
   82fc8:	b003      	add	sp, #12
   82fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82fce:	6921      	ldr	r1, [r4, #16]
   82fd0:	4628      	mov	r0, r5
   82fd2:	f000 fa31 	bl	83438 <_free_r>
   82fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82fda:	e7bd      	b.n	82f58 <setvbuf+0x60>
   82fdc:	4628      	mov	r0, r5
   82fde:	f000 f985 	bl	832ec <__sinit>
   82fe2:	e796      	b.n	82f12 <setvbuf+0x1a>
   82fe4:	2f00      	cmp	r7, #0
   82fe6:	d0cb      	beq.n	82f80 <setvbuf+0x88>
   82fe8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82fea:	2b00      	cmp	r3, #0
   82fec:	d033      	beq.n	83056 <setvbuf+0x15e>
   82fee:	9b00      	ldr	r3, [sp, #0]
   82ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82ff4:	429e      	cmp	r6, r3
   82ff6:	bf1c      	itt	ne
   82ff8:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82ffc:	81a2      	strhne	r2, [r4, #12]
   82ffe:	f1b8 0f01 	cmp.w	r8, #1
   83002:	bf04      	itt	eq
   83004:	f042 0201 	orreq.w	r2, r2, #1
   83008:	81a2      	strheq	r2, [r4, #12]
   8300a:	b292      	uxth	r2, r2
   8300c:	f012 0308 	ands.w	r3, r2, #8
   83010:	6027      	str	r7, [r4, #0]
   83012:	6127      	str	r7, [r4, #16]
   83014:	6166      	str	r6, [r4, #20]
   83016:	d00e      	beq.n	83036 <setvbuf+0x13e>
   83018:	07d1      	lsls	r1, r2, #31
   8301a:	d51a      	bpl.n	83052 <setvbuf+0x15a>
   8301c:	2300      	movs	r3, #0
   8301e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83020:	4276      	negs	r6, r6
   83022:	f015 0501 	ands.w	r5, r5, #1
   83026:	61a6      	str	r6, [r4, #24]
   83028:	60a3      	str	r3, [r4, #8]
   8302a:	d009      	beq.n	83040 <setvbuf+0x148>
   8302c:	2500      	movs	r5, #0
   8302e:	4628      	mov	r0, r5
   83030:	b003      	add	sp, #12
   83032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83036:	60a3      	str	r3, [r4, #8]
   83038:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8303a:	f015 0501 	ands.w	r5, r5, #1
   8303e:	d1f5      	bne.n	8302c <setvbuf+0x134>
   83040:	0593      	lsls	r3, r2, #22
   83042:	d4c0      	bmi.n	82fc6 <setvbuf+0xce>
   83044:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83046:	f000 fb0b 	bl	83660 <__retarget_lock_release_recursive>
   8304a:	4628      	mov	r0, r5
   8304c:	b003      	add	sp, #12
   8304e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83052:	60a6      	str	r6, [r4, #8]
   83054:	e7f0      	b.n	83038 <setvbuf+0x140>
   83056:	4628      	mov	r0, r5
   83058:	f000 f948 	bl	832ec <__sinit>
   8305c:	e7c7      	b.n	82fee <setvbuf+0xf6>
   8305e:	f04f 35ff 	mov.w	r5, #4294967295
   83062:	e7b0      	b.n	82fc6 <setvbuf+0xce>
   83064:	f8dd 9000 	ldr.w	r9, [sp]
   83068:	45b1      	cmp	r9, r6
   8306a:	d004      	beq.n	83076 <setvbuf+0x17e>
   8306c:	4648      	mov	r0, r9
   8306e:	f000 fb27 	bl	836c0 <malloc>
   83072:	4607      	mov	r7, r0
   83074:	b920      	cbnz	r0, 83080 <setvbuf+0x188>
   83076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8307a:	f04f 35ff 	mov.w	r5, #4294967295
   8307e:	e792      	b.n	82fa6 <setvbuf+0xae>
   83080:	464e      	mov	r6, r9
   83082:	e783      	b.n	82f8c <setvbuf+0x94>
   83084:	200701d8 	.word	0x200701d8

00083088 <strlen>:
   83088:	f020 0103 	bic.w	r1, r0, #3
   8308c:	f010 0003 	ands.w	r0, r0, #3
   83090:	f1c0 0000 	rsb	r0, r0, #0
   83094:	f851 3b04 	ldr.w	r3, [r1], #4
   83098:	f100 0c04 	add.w	ip, r0, #4
   8309c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   830a0:	f06f 0200 	mvn.w	r2, #0
   830a4:	bf1c      	itt	ne
   830a6:	fa22 f20c 	lsrne.w	r2, r2, ip
   830aa:	4313      	orrne	r3, r2
   830ac:	f04f 0c01 	mov.w	ip, #1
   830b0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   830b4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   830b8:	eba3 020c 	sub.w	r2, r3, ip
   830bc:	ea22 0203 	bic.w	r2, r2, r3
   830c0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   830c4:	bf04      	itt	eq
   830c6:	f851 3b04 	ldreq.w	r3, [r1], #4
   830ca:	3004      	addeq	r0, #4
   830cc:	d0f4      	beq.n	830b8 <strlen+0x30>
   830ce:	f1c2 0100 	rsb	r1, r2, #0
   830d2:	ea02 0201 	and.w	r2, r2, r1
   830d6:	fab2 f282 	clz	r2, r2
   830da:	f1c2 021f 	rsb	r2, r2, #31
   830de:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   830e2:	4770      	bx	lr

000830e4 <register_fini>:
   830e4:	4b02      	ldr	r3, [pc, #8]	; (830f0 <register_fini+0xc>)
   830e6:	b113      	cbz	r3, 830ee <register_fini+0xa>
   830e8:	4802      	ldr	r0, [pc, #8]	; (830f4 <register_fini+0x10>)
   830ea:	f000 b805 	b.w	830f8 <atexit>
   830ee:	4770      	bx	lr
   830f0:	00000000 	.word	0x00000000
   830f4:	00083365 	.word	0x00083365

000830f8 <atexit>:
   830f8:	2300      	movs	r3, #0
   830fa:	4601      	mov	r1, r0
   830fc:	461a      	mov	r2, r3
   830fe:	4618      	mov	r0, r3
   83100:	f000 be00 	b.w	83d04 <__register_exitproc>

00083104 <__sflush_r>:
   83104:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8310c:	b29a      	uxth	r2, r3
   8310e:	460d      	mov	r5, r1
   83110:	0711      	lsls	r1, r2, #28
   83112:	4680      	mov	r8, r0
   83114:	d43a      	bmi.n	8318c <__sflush_r+0x88>
   83116:	686a      	ldr	r2, [r5, #4]
   83118:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8311c:	2a00      	cmp	r2, #0
   8311e:	81ab      	strh	r3, [r5, #12]
   83120:	dd70      	ble.n	83204 <__sflush_r+0x100>
   83122:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83124:	2c00      	cmp	r4, #0
   83126:	d04a      	beq.n	831be <__sflush_r+0xba>
   83128:	2200      	movs	r2, #0
   8312a:	b29b      	uxth	r3, r3
   8312c:	f8d8 6000 	ldr.w	r6, [r8]
   83130:	f8c8 2000 	str.w	r2, [r8]
   83134:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   83138:	d068      	beq.n	8320c <__sflush_r+0x108>
   8313a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8313c:	075f      	lsls	r7, r3, #29
   8313e:	d505      	bpl.n	8314c <__sflush_r+0x48>
   83140:	6869      	ldr	r1, [r5, #4]
   83142:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83144:	1a52      	subs	r2, r2, r1
   83146:	b10b      	cbz	r3, 8314c <__sflush_r+0x48>
   83148:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8314a:	1ad2      	subs	r2, r2, r3
   8314c:	2300      	movs	r3, #0
   8314e:	69e9      	ldr	r1, [r5, #28]
   83150:	4640      	mov	r0, r8
   83152:	47a0      	blx	r4
   83154:	1c44      	adds	r4, r0, #1
   83156:	d03d      	beq.n	831d4 <__sflush_r+0xd0>
   83158:	2100      	movs	r1, #0
   8315a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8315e:	692a      	ldr	r2, [r5, #16]
   83160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83164:	81ab      	strh	r3, [r5, #12]
   83166:	04db      	lsls	r3, r3, #19
   83168:	6069      	str	r1, [r5, #4]
   8316a:	602a      	str	r2, [r5, #0]
   8316c:	d448      	bmi.n	83200 <__sflush_r+0xfc>
   8316e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83170:	f8c8 6000 	str.w	r6, [r8]
   83174:	b319      	cbz	r1, 831be <__sflush_r+0xba>
   83176:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8317a:	4299      	cmp	r1, r3
   8317c:	d002      	beq.n	83184 <__sflush_r+0x80>
   8317e:	4640      	mov	r0, r8
   83180:	f000 f95a 	bl	83438 <_free_r>
   83184:	2000      	movs	r0, #0
   83186:	6328      	str	r0, [r5, #48]	; 0x30
   83188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8318c:	692e      	ldr	r6, [r5, #16]
   8318e:	b1b6      	cbz	r6, 831be <__sflush_r+0xba>
   83190:	0791      	lsls	r1, r2, #30
   83192:	bf18      	it	ne
   83194:	2300      	movne	r3, #0
   83196:	682c      	ldr	r4, [r5, #0]
   83198:	bf08      	it	eq
   8319a:	696b      	ldreq	r3, [r5, #20]
   8319c:	602e      	str	r6, [r5, #0]
   8319e:	1ba4      	subs	r4, r4, r6
   831a0:	60ab      	str	r3, [r5, #8]
   831a2:	e00a      	b.n	831ba <__sflush_r+0xb6>
   831a4:	4623      	mov	r3, r4
   831a6:	4632      	mov	r2, r6
   831a8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   831aa:	69e9      	ldr	r1, [r5, #28]
   831ac:	4640      	mov	r0, r8
   831ae:	47b8      	blx	r7
   831b0:	2800      	cmp	r0, #0
   831b2:	eba4 0400 	sub.w	r4, r4, r0
   831b6:	4406      	add	r6, r0
   831b8:	dd04      	ble.n	831c4 <__sflush_r+0xc0>
   831ba:	2c00      	cmp	r4, #0
   831bc:	dcf2      	bgt.n	831a4 <__sflush_r+0xa0>
   831be:	2000      	movs	r0, #0
   831c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   831c4:	89ab      	ldrh	r3, [r5, #12]
   831c6:	f04f 30ff 	mov.w	r0, #4294967295
   831ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   831ce:	81ab      	strh	r3, [r5, #12]
   831d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   831d4:	f8d8 4000 	ldr.w	r4, [r8]
   831d8:	2c1d      	cmp	r4, #29
   831da:	d8f3      	bhi.n	831c4 <__sflush_r+0xc0>
   831dc:	4b16      	ldr	r3, [pc, #88]	; (83238 <__sflush_r+0x134>)
   831de:	40e3      	lsrs	r3, r4
   831e0:	43db      	mvns	r3, r3
   831e2:	f013 0301 	ands.w	r3, r3, #1
   831e6:	d1ed      	bne.n	831c4 <__sflush_r+0xc0>
   831e8:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   831ec:	6929      	ldr	r1, [r5, #16]
   831ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   831f2:	81aa      	strh	r2, [r5, #12]
   831f4:	04d2      	lsls	r2, r2, #19
   831f6:	606b      	str	r3, [r5, #4]
   831f8:	6029      	str	r1, [r5, #0]
   831fa:	d5b8      	bpl.n	8316e <__sflush_r+0x6a>
   831fc:	2c00      	cmp	r4, #0
   831fe:	d1b6      	bne.n	8316e <__sflush_r+0x6a>
   83200:	6528      	str	r0, [r5, #80]	; 0x50
   83202:	e7b4      	b.n	8316e <__sflush_r+0x6a>
   83204:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83206:	2a00      	cmp	r2, #0
   83208:	dc8b      	bgt.n	83122 <__sflush_r+0x1e>
   8320a:	e7d8      	b.n	831be <__sflush_r+0xba>
   8320c:	2301      	movs	r3, #1
   8320e:	69e9      	ldr	r1, [r5, #28]
   83210:	4640      	mov	r0, r8
   83212:	47a0      	blx	r4
   83214:	1c43      	adds	r3, r0, #1
   83216:	4602      	mov	r2, r0
   83218:	d002      	beq.n	83220 <__sflush_r+0x11c>
   8321a:	89ab      	ldrh	r3, [r5, #12]
   8321c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8321e:	e78d      	b.n	8313c <__sflush_r+0x38>
   83220:	f8d8 3000 	ldr.w	r3, [r8]
   83224:	2b00      	cmp	r3, #0
   83226:	d0f8      	beq.n	8321a <__sflush_r+0x116>
   83228:	2b1d      	cmp	r3, #29
   8322a:	d001      	beq.n	83230 <__sflush_r+0x12c>
   8322c:	2b16      	cmp	r3, #22
   8322e:	d1c9      	bne.n	831c4 <__sflush_r+0xc0>
   83230:	f8c8 6000 	str.w	r6, [r8]
   83234:	e7c3      	b.n	831be <__sflush_r+0xba>
   83236:	bf00      	nop
   83238:	20400001 	.word	0x20400001

0008323c <_fflush_r>:
   8323c:	b538      	push	{r3, r4, r5, lr}
   8323e:	460d      	mov	r5, r1
   83240:	4604      	mov	r4, r0
   83242:	b108      	cbz	r0, 83248 <_fflush_r+0xc>
   83244:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83246:	b1bb      	cbz	r3, 83278 <_fflush_r+0x3c>
   83248:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8324c:	b188      	cbz	r0, 83272 <_fflush_r+0x36>
   8324e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83250:	07db      	lsls	r3, r3, #31
   83252:	d401      	bmi.n	83258 <_fflush_r+0x1c>
   83254:	0581      	lsls	r1, r0, #22
   83256:	d517      	bpl.n	83288 <_fflush_r+0x4c>
   83258:	4620      	mov	r0, r4
   8325a:	4629      	mov	r1, r5
   8325c:	f7ff ff52 	bl	83104 <__sflush_r>
   83260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83262:	4604      	mov	r4, r0
   83264:	07da      	lsls	r2, r3, #31
   83266:	d402      	bmi.n	8326e <_fflush_r+0x32>
   83268:	89ab      	ldrh	r3, [r5, #12]
   8326a:	059b      	lsls	r3, r3, #22
   8326c:	d507      	bpl.n	8327e <_fflush_r+0x42>
   8326e:	4620      	mov	r0, r4
   83270:	bd38      	pop	{r3, r4, r5, pc}
   83272:	4604      	mov	r4, r0
   83274:	4620      	mov	r0, r4
   83276:	bd38      	pop	{r3, r4, r5, pc}
   83278:	f000 f838 	bl	832ec <__sinit>
   8327c:	e7e4      	b.n	83248 <_fflush_r+0xc>
   8327e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83280:	f000 f9ee 	bl	83660 <__retarget_lock_release_recursive>
   83284:	4620      	mov	r0, r4
   83286:	bd38      	pop	{r3, r4, r5, pc}
   83288:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8328a:	f000 f9e7 	bl	8365c <__retarget_lock_acquire_recursive>
   8328e:	e7e3      	b.n	83258 <_fflush_r+0x1c>

00083290 <_cleanup_r>:
   83290:	4901      	ldr	r1, [pc, #4]	; (83298 <_cleanup_r+0x8>)
   83292:	f000 b9b7 	b.w	83604 <_fwalk_reent>
   83296:	bf00      	nop
   83298:	00083ded 	.word	0x00083ded

0008329c <std.isra.0>:
   8329c:	2300      	movs	r3, #0
   8329e:	b510      	push	{r4, lr}
   832a0:	4604      	mov	r4, r0
   832a2:	8181      	strh	r1, [r0, #12]
   832a4:	81c2      	strh	r2, [r0, #14]
   832a6:	6003      	str	r3, [r0, #0]
   832a8:	6043      	str	r3, [r0, #4]
   832aa:	6083      	str	r3, [r0, #8]
   832ac:	6643      	str	r3, [r0, #100]	; 0x64
   832ae:	6103      	str	r3, [r0, #16]
   832b0:	6143      	str	r3, [r0, #20]
   832b2:	6183      	str	r3, [r0, #24]
   832b4:	4619      	mov	r1, r3
   832b6:	2208      	movs	r2, #8
   832b8:	305c      	adds	r0, #92	; 0x5c
   832ba:	f7ff fdc7 	bl	82e4c <memset>
   832be:	4807      	ldr	r0, [pc, #28]	; (832dc <std.isra.0+0x40>)
   832c0:	4907      	ldr	r1, [pc, #28]	; (832e0 <std.isra.0+0x44>)
   832c2:	4a08      	ldr	r2, [pc, #32]	; (832e4 <std.isra.0+0x48>)
   832c4:	4b08      	ldr	r3, [pc, #32]	; (832e8 <std.isra.0+0x4c>)
   832c6:	6220      	str	r0, [r4, #32]
   832c8:	61e4      	str	r4, [r4, #28]
   832ca:	6261      	str	r1, [r4, #36]	; 0x24
   832cc:	62a2      	str	r2, [r4, #40]	; 0x28
   832ce:	62e3      	str	r3, [r4, #44]	; 0x2c
   832d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   832d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   832d8:	f000 b9bc 	b.w	83654 <__retarget_lock_init_recursive>
   832dc:	00083c51 	.word	0x00083c51
   832e0:	00083c75 	.word	0x00083c75
   832e4:	00083cb1 	.word	0x00083cb1
   832e8:	00083cd1 	.word	0x00083cd1

000832ec <__sinit>:
   832ec:	b510      	push	{r4, lr}
   832ee:	4604      	mov	r4, r0
   832f0:	4814      	ldr	r0, [pc, #80]	; (83344 <__sinit+0x58>)
   832f2:	f000 f9b3 	bl	8365c <__retarget_lock_acquire_recursive>
   832f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   832f8:	b9fa      	cbnz	r2, 8333a <__sinit+0x4e>
   832fa:	2003      	movs	r0, #3
   832fc:	4912      	ldr	r1, [pc, #72]	; (83348 <__sinit+0x5c>)
   832fe:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83302:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83306:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8330a:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8330e:	63e1      	str	r1, [r4, #60]	; 0x3c
   83310:	6860      	ldr	r0, [r4, #4]
   83312:	2104      	movs	r1, #4
   83314:	f7ff ffc2 	bl	8329c <std.isra.0>
   83318:	68a0      	ldr	r0, [r4, #8]
   8331a:	2201      	movs	r2, #1
   8331c:	2109      	movs	r1, #9
   8331e:	f7ff ffbd 	bl	8329c <std.isra.0>
   83322:	68e0      	ldr	r0, [r4, #12]
   83324:	2202      	movs	r2, #2
   83326:	2112      	movs	r1, #18
   83328:	f7ff ffb8 	bl	8329c <std.isra.0>
   8332c:	2301      	movs	r3, #1
   8332e:	4805      	ldr	r0, [pc, #20]	; (83344 <__sinit+0x58>)
   83330:	63a3      	str	r3, [r4, #56]	; 0x38
   83332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83336:	f000 b993 	b.w	83660 <__retarget_lock_release_recursive>
   8333a:	4802      	ldr	r0, [pc, #8]	; (83344 <__sinit+0x58>)
   8333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83340:	f000 b98e 	b.w	83660 <__retarget_lock_release_recursive>
   83344:	20071318 	.word	0x20071318
   83348:	00083291 	.word	0x00083291

0008334c <__sfp_lock_acquire>:
   8334c:	4801      	ldr	r0, [pc, #4]	; (83354 <__sfp_lock_acquire+0x8>)
   8334e:	f000 b985 	b.w	8365c <__retarget_lock_acquire_recursive>
   83352:	bf00      	nop
   83354:	2007132c 	.word	0x2007132c

00083358 <__sfp_lock_release>:
   83358:	4801      	ldr	r0, [pc, #4]	; (83360 <__sfp_lock_release+0x8>)
   8335a:	f000 b981 	b.w	83660 <__retarget_lock_release_recursive>
   8335e:	bf00      	nop
   83360:	2007132c 	.word	0x2007132c

00083364 <__libc_fini_array>:
   83364:	b538      	push	{r3, r4, r5, lr}
   83366:	4c0a      	ldr	r4, [pc, #40]	; (83390 <__libc_fini_array+0x2c>)
   83368:	4d0a      	ldr	r5, [pc, #40]	; (83394 <__libc_fini_array+0x30>)
   8336a:	1b64      	subs	r4, r4, r5
   8336c:	10a4      	asrs	r4, r4, #2
   8336e:	d00a      	beq.n	83386 <__libc_fini_array+0x22>
   83370:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83374:	3b01      	subs	r3, #1
   83376:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8337a:	3c01      	subs	r4, #1
   8337c:	f855 3904 	ldr.w	r3, [r5], #-4
   83380:	4798      	blx	r3
   83382:	2c00      	cmp	r4, #0
   83384:	d1f9      	bne.n	8337a <__libc_fini_array+0x16>
   83386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8338a:	f002 bbc7 	b.w	85b1c <_fini>
   8338e:	bf00      	nop
   83390:	00085b2c 	.word	0x00085b2c
   83394:	00085b28 	.word	0x00085b28

00083398 <_malloc_trim_r>:
   83398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8339a:	460c      	mov	r4, r1
   8339c:	4f23      	ldr	r7, [pc, #140]	; (8342c <_malloc_trim_r+0x94>)
   8339e:	4606      	mov	r6, r0
   833a0:	f000 fc38 	bl	83c14 <__malloc_lock>
   833a4:	68bb      	ldr	r3, [r7, #8]
   833a6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   833aa:	685d      	ldr	r5, [r3, #4]
   833ac:	310f      	adds	r1, #15
   833ae:	f025 0503 	bic.w	r5, r5, #3
   833b2:	4429      	add	r1, r5
   833b4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   833b8:	f021 010f 	bic.w	r1, r1, #15
   833bc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   833c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   833c4:	db07      	blt.n	833d6 <_malloc_trim_r+0x3e>
   833c6:	2100      	movs	r1, #0
   833c8:	4630      	mov	r0, r6
   833ca:	f000 fc2f 	bl	83c2c <_sbrk_r>
   833ce:	68bb      	ldr	r3, [r7, #8]
   833d0:	442b      	add	r3, r5
   833d2:	4298      	cmp	r0, r3
   833d4:	d004      	beq.n	833e0 <_malloc_trim_r+0x48>
   833d6:	4630      	mov	r0, r6
   833d8:	f000 fc22 	bl	83c20 <__malloc_unlock>
   833dc:	2000      	movs	r0, #0
   833de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   833e0:	4261      	negs	r1, r4
   833e2:	4630      	mov	r0, r6
   833e4:	f000 fc22 	bl	83c2c <_sbrk_r>
   833e8:	3001      	adds	r0, #1
   833ea:	d00d      	beq.n	83408 <_malloc_trim_r+0x70>
   833ec:	4b10      	ldr	r3, [pc, #64]	; (83430 <_malloc_trim_r+0x98>)
   833ee:	68ba      	ldr	r2, [r7, #8]
   833f0:	6819      	ldr	r1, [r3, #0]
   833f2:	1b2d      	subs	r5, r5, r4
   833f4:	f045 0501 	orr.w	r5, r5, #1
   833f8:	4630      	mov	r0, r6
   833fa:	1b09      	subs	r1, r1, r4
   833fc:	6055      	str	r5, [r2, #4]
   833fe:	6019      	str	r1, [r3, #0]
   83400:	f000 fc0e 	bl	83c20 <__malloc_unlock>
   83404:	2001      	movs	r0, #1
   83406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83408:	2100      	movs	r1, #0
   8340a:	4630      	mov	r0, r6
   8340c:	f000 fc0e 	bl	83c2c <_sbrk_r>
   83410:	68ba      	ldr	r2, [r7, #8]
   83412:	1a83      	subs	r3, r0, r2
   83414:	2b0f      	cmp	r3, #15
   83416:	ddde      	ble.n	833d6 <_malloc_trim_r+0x3e>
   83418:	4c06      	ldr	r4, [pc, #24]	; (83434 <_malloc_trim_r+0x9c>)
   8341a:	4905      	ldr	r1, [pc, #20]	; (83430 <_malloc_trim_r+0x98>)
   8341c:	6824      	ldr	r4, [r4, #0]
   8341e:	f043 0301 	orr.w	r3, r3, #1
   83422:	1b00      	subs	r0, r0, r4
   83424:	6053      	str	r3, [r2, #4]
   83426:	6008      	str	r0, [r1, #0]
   83428:	e7d5      	b.n	833d6 <_malloc_trim_r+0x3e>
   8342a:	bf00      	nop
   8342c:	2007060c 	.word	0x2007060c
   83430:	200712c0 	.word	0x200712c0
   83434:	20070a14 	.word	0x20070a14

00083438 <_free_r>:
   83438:	2900      	cmp	r1, #0
   8343a:	d044      	beq.n	834c6 <_free_r+0x8e>
   8343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83440:	460d      	mov	r5, r1
   83442:	4680      	mov	r8, r0
   83444:	f000 fbe6 	bl	83c14 <__malloc_lock>
   83448:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8344c:	4969      	ldr	r1, [pc, #420]	; (835f4 <_free_r+0x1bc>)
   8344e:	f1a5 0408 	sub.w	r4, r5, #8
   83452:	f027 0301 	bic.w	r3, r7, #1
   83456:	18e2      	adds	r2, r4, r3
   83458:	688e      	ldr	r6, [r1, #8]
   8345a:	6850      	ldr	r0, [r2, #4]
   8345c:	42b2      	cmp	r2, r6
   8345e:	f020 0003 	bic.w	r0, r0, #3
   83462:	d05e      	beq.n	83522 <_free_r+0xea>
   83464:	07fe      	lsls	r6, r7, #31
   83466:	6050      	str	r0, [r2, #4]
   83468:	d40b      	bmi.n	83482 <_free_r+0x4a>
   8346a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8346e:	f101 0e08 	add.w	lr, r1, #8
   83472:	1be4      	subs	r4, r4, r7
   83474:	68a5      	ldr	r5, [r4, #8]
   83476:	443b      	add	r3, r7
   83478:	4575      	cmp	r5, lr
   8347a:	d06d      	beq.n	83558 <_free_r+0x120>
   8347c:	68e7      	ldr	r7, [r4, #12]
   8347e:	60ef      	str	r7, [r5, #12]
   83480:	60bd      	str	r5, [r7, #8]
   83482:	1815      	adds	r5, r2, r0
   83484:	686d      	ldr	r5, [r5, #4]
   83486:	07ed      	lsls	r5, r5, #31
   83488:	d53e      	bpl.n	83508 <_free_r+0xd0>
   8348a:	f043 0201 	orr.w	r2, r3, #1
   8348e:	6062      	str	r2, [r4, #4]
   83490:	50e3      	str	r3, [r4, r3]
   83492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83496:	d217      	bcs.n	834c8 <_free_r+0x90>
   83498:	2201      	movs	r2, #1
   8349a:	08db      	lsrs	r3, r3, #3
   8349c:	1098      	asrs	r0, r3, #2
   8349e:	684d      	ldr	r5, [r1, #4]
   834a0:	4413      	add	r3, r2
   834a2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   834a6:	4082      	lsls	r2, r0
   834a8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   834ac:	432a      	orrs	r2, r5
   834ae:	3808      	subs	r0, #8
   834b0:	60e0      	str	r0, [r4, #12]
   834b2:	60a7      	str	r7, [r4, #8]
   834b4:	604a      	str	r2, [r1, #4]
   834b6:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   834ba:	60fc      	str	r4, [r7, #12]
   834bc:	4640      	mov	r0, r8
   834be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   834c2:	f000 bbad 	b.w	83c20 <__malloc_unlock>
   834c6:	4770      	bx	lr
   834c8:	0a5a      	lsrs	r2, r3, #9
   834ca:	2a04      	cmp	r2, #4
   834cc:	d852      	bhi.n	83574 <_free_r+0x13c>
   834ce:	099a      	lsrs	r2, r3, #6
   834d0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   834d4:	00ff      	lsls	r7, r7, #3
   834d6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   834da:	19c8      	adds	r0, r1, r7
   834dc:	59ca      	ldr	r2, [r1, r7]
   834de:	3808      	subs	r0, #8
   834e0:	4290      	cmp	r0, r2
   834e2:	d04f      	beq.n	83584 <_free_r+0x14c>
   834e4:	6851      	ldr	r1, [r2, #4]
   834e6:	f021 0103 	bic.w	r1, r1, #3
   834ea:	428b      	cmp	r3, r1
   834ec:	d232      	bcs.n	83554 <_free_r+0x11c>
   834ee:	6892      	ldr	r2, [r2, #8]
   834f0:	4290      	cmp	r0, r2
   834f2:	d1f7      	bne.n	834e4 <_free_r+0xac>
   834f4:	68c3      	ldr	r3, [r0, #12]
   834f6:	60a0      	str	r0, [r4, #8]
   834f8:	60e3      	str	r3, [r4, #12]
   834fa:	609c      	str	r4, [r3, #8]
   834fc:	60c4      	str	r4, [r0, #12]
   834fe:	4640      	mov	r0, r8
   83500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83504:	f000 bb8c 	b.w	83c20 <__malloc_unlock>
   83508:	6895      	ldr	r5, [r2, #8]
   8350a:	4f3b      	ldr	r7, [pc, #236]	; (835f8 <_free_r+0x1c0>)
   8350c:	4403      	add	r3, r0
   8350e:	42bd      	cmp	r5, r7
   83510:	d040      	beq.n	83594 <_free_r+0x15c>
   83512:	68d0      	ldr	r0, [r2, #12]
   83514:	f043 0201 	orr.w	r2, r3, #1
   83518:	60e8      	str	r0, [r5, #12]
   8351a:	6085      	str	r5, [r0, #8]
   8351c:	6062      	str	r2, [r4, #4]
   8351e:	50e3      	str	r3, [r4, r3]
   83520:	e7b7      	b.n	83492 <_free_r+0x5a>
   83522:	07ff      	lsls	r7, r7, #31
   83524:	4403      	add	r3, r0
   83526:	d407      	bmi.n	83538 <_free_r+0x100>
   83528:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8352c:	1b64      	subs	r4, r4, r5
   8352e:	68e2      	ldr	r2, [r4, #12]
   83530:	68a0      	ldr	r0, [r4, #8]
   83532:	442b      	add	r3, r5
   83534:	60c2      	str	r2, [r0, #12]
   83536:	6090      	str	r0, [r2, #8]
   83538:	4a30      	ldr	r2, [pc, #192]	; (835fc <_free_r+0x1c4>)
   8353a:	f043 0001 	orr.w	r0, r3, #1
   8353e:	6812      	ldr	r2, [r2, #0]
   83540:	6060      	str	r0, [r4, #4]
   83542:	4293      	cmp	r3, r2
   83544:	608c      	str	r4, [r1, #8]
   83546:	d3b9      	bcc.n	834bc <_free_r+0x84>
   83548:	4b2d      	ldr	r3, [pc, #180]	; (83600 <_free_r+0x1c8>)
   8354a:	4640      	mov	r0, r8
   8354c:	6819      	ldr	r1, [r3, #0]
   8354e:	f7ff ff23 	bl	83398 <_malloc_trim_r>
   83552:	e7b3      	b.n	834bc <_free_r+0x84>
   83554:	4610      	mov	r0, r2
   83556:	e7cd      	b.n	834f4 <_free_r+0xbc>
   83558:	1811      	adds	r1, r2, r0
   8355a:	6849      	ldr	r1, [r1, #4]
   8355c:	07c9      	lsls	r1, r1, #31
   8355e:	d444      	bmi.n	835ea <_free_r+0x1b2>
   83560:	6891      	ldr	r1, [r2, #8]
   83562:	4403      	add	r3, r0
   83564:	68d2      	ldr	r2, [r2, #12]
   83566:	f043 0001 	orr.w	r0, r3, #1
   8356a:	60ca      	str	r2, [r1, #12]
   8356c:	6091      	str	r1, [r2, #8]
   8356e:	6060      	str	r0, [r4, #4]
   83570:	50e3      	str	r3, [r4, r3]
   83572:	e7a3      	b.n	834bc <_free_r+0x84>
   83574:	2a14      	cmp	r2, #20
   83576:	d816      	bhi.n	835a6 <_free_r+0x16e>
   83578:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8357c:	00ff      	lsls	r7, r7, #3
   8357e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83582:	e7aa      	b.n	834da <_free_r+0xa2>
   83584:	2301      	movs	r3, #1
   83586:	10aa      	asrs	r2, r5, #2
   83588:	684d      	ldr	r5, [r1, #4]
   8358a:	4093      	lsls	r3, r2
   8358c:	432b      	orrs	r3, r5
   8358e:	604b      	str	r3, [r1, #4]
   83590:	4603      	mov	r3, r0
   83592:	e7b0      	b.n	834f6 <_free_r+0xbe>
   83594:	f043 0201 	orr.w	r2, r3, #1
   83598:	614c      	str	r4, [r1, #20]
   8359a:	610c      	str	r4, [r1, #16]
   8359c:	60e5      	str	r5, [r4, #12]
   8359e:	60a5      	str	r5, [r4, #8]
   835a0:	6062      	str	r2, [r4, #4]
   835a2:	50e3      	str	r3, [r4, r3]
   835a4:	e78a      	b.n	834bc <_free_r+0x84>
   835a6:	2a54      	cmp	r2, #84	; 0x54
   835a8:	d806      	bhi.n	835b8 <_free_r+0x180>
   835aa:	0b1a      	lsrs	r2, r3, #12
   835ac:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   835b0:	00ff      	lsls	r7, r7, #3
   835b2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   835b6:	e790      	b.n	834da <_free_r+0xa2>
   835b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   835bc:	d806      	bhi.n	835cc <_free_r+0x194>
   835be:	0bda      	lsrs	r2, r3, #15
   835c0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   835c4:	00ff      	lsls	r7, r7, #3
   835c6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   835ca:	e786      	b.n	834da <_free_r+0xa2>
   835cc:	f240 5054 	movw	r0, #1364	; 0x554
   835d0:	4282      	cmp	r2, r0
   835d2:	d806      	bhi.n	835e2 <_free_r+0x1aa>
   835d4:	0c9a      	lsrs	r2, r3, #18
   835d6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   835da:	00ff      	lsls	r7, r7, #3
   835dc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   835e0:	e77b      	b.n	834da <_free_r+0xa2>
   835e2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   835e6:	257e      	movs	r5, #126	; 0x7e
   835e8:	e777      	b.n	834da <_free_r+0xa2>
   835ea:	f043 0101 	orr.w	r1, r3, #1
   835ee:	6061      	str	r1, [r4, #4]
   835f0:	6013      	str	r3, [r2, #0]
   835f2:	e763      	b.n	834bc <_free_r+0x84>
   835f4:	2007060c 	.word	0x2007060c
   835f8:	20070614 	.word	0x20070614
   835fc:	20070a18 	.word	0x20070a18
   83600:	200712f0 	.word	0x200712f0

00083604 <_fwalk_reent>:
   83604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83608:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8360c:	d01e      	beq.n	8364c <_fwalk_reent+0x48>
   8360e:	4688      	mov	r8, r1
   83610:	4607      	mov	r7, r0
   83612:	f04f 0900 	mov.w	r9, #0
   83616:	6875      	ldr	r5, [r6, #4]
   83618:	68b4      	ldr	r4, [r6, #8]
   8361a:	3d01      	subs	r5, #1
   8361c:	d410      	bmi.n	83640 <_fwalk_reent+0x3c>
   8361e:	89a3      	ldrh	r3, [r4, #12]
   83620:	3d01      	subs	r5, #1
   83622:	2b01      	cmp	r3, #1
   83624:	d908      	bls.n	83638 <_fwalk_reent+0x34>
   83626:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8362a:	3301      	adds	r3, #1
   8362c:	d004      	beq.n	83638 <_fwalk_reent+0x34>
   8362e:	4621      	mov	r1, r4
   83630:	4638      	mov	r0, r7
   83632:	47c0      	blx	r8
   83634:	ea49 0900 	orr.w	r9, r9, r0
   83638:	1c6b      	adds	r3, r5, #1
   8363a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8363e:	d1ee      	bne.n	8361e <_fwalk_reent+0x1a>
   83640:	6836      	ldr	r6, [r6, #0]
   83642:	2e00      	cmp	r6, #0
   83644:	d1e7      	bne.n	83616 <_fwalk_reent+0x12>
   83646:	4648      	mov	r0, r9
   83648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8364c:	46b1      	mov	r9, r6
   8364e:	4648      	mov	r0, r9
   83650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083654 <__retarget_lock_init_recursive>:
   83654:	4770      	bx	lr
   83656:	bf00      	nop

00083658 <__retarget_lock_close_recursive>:
   83658:	4770      	bx	lr
   8365a:	bf00      	nop

0008365c <__retarget_lock_acquire_recursive>:
   8365c:	4770      	bx	lr
   8365e:	bf00      	nop

00083660 <__retarget_lock_release_recursive>:
   83660:	4770      	bx	lr
   83662:	bf00      	nop

00083664 <__swhatbuf_r>:
   83664:	b570      	push	{r4, r5, r6, lr}
   83666:	460c      	mov	r4, r1
   83668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8366c:	b090      	sub	sp, #64	; 0x40
   8366e:	2900      	cmp	r1, #0
   83670:	4615      	mov	r5, r2
   83672:	461e      	mov	r6, r3
   83674:	db14      	blt.n	836a0 <__swhatbuf_r+0x3c>
   83676:	aa01      	add	r2, sp, #4
   83678:	f000 fc1a 	bl	83eb0 <_fstat_r>
   8367c:	2800      	cmp	r0, #0
   8367e:	db0f      	blt.n	836a0 <__swhatbuf_r+0x3c>
   83680:	9a02      	ldr	r2, [sp, #8]
   83682:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83686:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8368a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8368e:	fab2 f282 	clz	r2, r2
   83692:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83696:	0952      	lsrs	r2, r2, #5
   83698:	6032      	str	r2, [r6, #0]
   8369a:	602b      	str	r3, [r5, #0]
   8369c:	b010      	add	sp, #64	; 0x40
   8369e:	bd70      	pop	{r4, r5, r6, pc}
   836a0:	2300      	movs	r3, #0
   836a2:	89a2      	ldrh	r2, [r4, #12]
   836a4:	6033      	str	r3, [r6, #0]
   836a6:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   836aa:	d004      	beq.n	836b6 <__swhatbuf_r+0x52>
   836ac:	2240      	movs	r2, #64	; 0x40
   836ae:	4618      	mov	r0, r3
   836b0:	602a      	str	r2, [r5, #0]
   836b2:	b010      	add	sp, #64	; 0x40
   836b4:	bd70      	pop	{r4, r5, r6, pc}
   836b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   836ba:	602b      	str	r3, [r5, #0]
   836bc:	b010      	add	sp, #64	; 0x40
   836be:	bd70      	pop	{r4, r5, r6, pc}

000836c0 <malloc>:
   836c0:	4b02      	ldr	r3, [pc, #8]	; (836cc <malloc+0xc>)
   836c2:	4601      	mov	r1, r0
   836c4:	6818      	ldr	r0, [r3, #0]
   836c6:	f000 b803 	b.w	836d0 <_malloc_r>
   836ca:	bf00      	nop
   836cc:	200701d8 	.word	0x200701d8

000836d0 <_malloc_r>:
   836d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   836d4:	f101 060b 	add.w	r6, r1, #11
   836d8:	2e16      	cmp	r6, #22
   836da:	b083      	sub	sp, #12
   836dc:	4605      	mov	r5, r0
   836de:	f240 809e 	bls.w	8381e <_malloc_r+0x14e>
   836e2:	f036 0607 	bics.w	r6, r6, #7
   836e6:	f100 80bd 	bmi.w	83864 <_malloc_r+0x194>
   836ea:	42b1      	cmp	r1, r6
   836ec:	f200 80ba 	bhi.w	83864 <_malloc_r+0x194>
   836f0:	f000 fa90 	bl	83c14 <__malloc_lock>
   836f4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   836f8:	f0c0 8285 	bcc.w	83c06 <_malloc_r+0x536>
   836fc:	0a73      	lsrs	r3, r6, #9
   836fe:	f000 80b8 	beq.w	83872 <_malloc_r+0x1a2>
   83702:	2b04      	cmp	r3, #4
   83704:	f200 816c 	bhi.w	839e0 <_malloc_r+0x310>
   83708:	09b3      	lsrs	r3, r6, #6
   8370a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8370e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   83712:	00c1      	lsls	r1, r0, #3
   83714:	4fb8      	ldr	r7, [pc, #736]	; (839f8 <_malloc_r+0x328>)
   83716:	4439      	add	r1, r7
   83718:	684c      	ldr	r4, [r1, #4]
   8371a:	3908      	subs	r1, #8
   8371c:	42a1      	cmp	r1, r4
   8371e:	d106      	bne.n	8372e <_malloc_r+0x5e>
   83720:	e00c      	b.n	8373c <_malloc_r+0x6c>
   83722:	2a00      	cmp	r2, #0
   83724:	f280 80ab 	bge.w	8387e <_malloc_r+0x1ae>
   83728:	68e4      	ldr	r4, [r4, #12]
   8372a:	42a1      	cmp	r1, r4
   8372c:	d006      	beq.n	8373c <_malloc_r+0x6c>
   8372e:	6863      	ldr	r3, [r4, #4]
   83730:	f023 0303 	bic.w	r3, r3, #3
   83734:	1b9a      	subs	r2, r3, r6
   83736:	2a0f      	cmp	r2, #15
   83738:	ddf3      	ble.n	83722 <_malloc_r+0x52>
   8373a:	4670      	mov	r0, lr
   8373c:	693c      	ldr	r4, [r7, #16]
   8373e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83a0c <_malloc_r+0x33c>
   83742:	4574      	cmp	r4, lr
   83744:	f000 819e 	beq.w	83a84 <_malloc_r+0x3b4>
   83748:	6863      	ldr	r3, [r4, #4]
   8374a:	f023 0303 	bic.w	r3, r3, #3
   8374e:	1b9a      	subs	r2, r3, r6
   83750:	2a0f      	cmp	r2, #15
   83752:	f300 8183 	bgt.w	83a5c <_malloc_r+0x38c>
   83756:	2a00      	cmp	r2, #0
   83758:	f8c7 e014 	str.w	lr, [r7, #20]
   8375c:	f8c7 e010 	str.w	lr, [r7, #16]
   83760:	f280 8091 	bge.w	83886 <_malloc_r+0x1b6>
   83764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83768:	f080 8154 	bcs.w	83a14 <_malloc_r+0x344>
   8376c:	2201      	movs	r2, #1
   8376e:	08db      	lsrs	r3, r3, #3
   83770:	6879      	ldr	r1, [r7, #4]
   83772:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83776:	4413      	add	r3, r2
   83778:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8377c:	fa02 f20c 	lsl.w	r2, r2, ip
   83780:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83784:	430a      	orrs	r2, r1
   83786:	f1ac 0108 	sub.w	r1, ip, #8
   8378a:	60e1      	str	r1, [r4, #12]
   8378c:	f8c4 8008 	str.w	r8, [r4, #8]
   83790:	607a      	str	r2, [r7, #4]
   83792:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83796:	f8c8 400c 	str.w	r4, [r8, #12]
   8379a:	2401      	movs	r4, #1
   8379c:	1083      	asrs	r3, r0, #2
   8379e:	409c      	lsls	r4, r3
   837a0:	4294      	cmp	r4, r2
   837a2:	d87d      	bhi.n	838a0 <_malloc_r+0x1d0>
   837a4:	4214      	tst	r4, r2
   837a6:	d106      	bne.n	837b6 <_malloc_r+0xe6>
   837a8:	f020 0003 	bic.w	r0, r0, #3
   837ac:	0064      	lsls	r4, r4, #1
   837ae:	4214      	tst	r4, r2
   837b0:	f100 0004 	add.w	r0, r0, #4
   837b4:	d0fa      	beq.n	837ac <_malloc_r+0xdc>
   837b6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   837ba:	46cc      	mov	ip, r9
   837bc:	4680      	mov	r8, r0
   837be:	f8dc 300c 	ldr.w	r3, [ip, #12]
   837c2:	459c      	cmp	ip, r3
   837c4:	d107      	bne.n	837d6 <_malloc_r+0x106>
   837c6:	e15f      	b.n	83a88 <_malloc_r+0x3b8>
   837c8:	2a00      	cmp	r2, #0
   837ca:	f280 816d 	bge.w	83aa8 <_malloc_r+0x3d8>
   837ce:	68db      	ldr	r3, [r3, #12]
   837d0:	459c      	cmp	ip, r3
   837d2:	f000 8159 	beq.w	83a88 <_malloc_r+0x3b8>
   837d6:	6859      	ldr	r1, [r3, #4]
   837d8:	f021 0103 	bic.w	r1, r1, #3
   837dc:	1b8a      	subs	r2, r1, r6
   837de:	2a0f      	cmp	r2, #15
   837e0:	ddf2      	ble.n	837c8 <_malloc_r+0xf8>
   837e2:	68dc      	ldr	r4, [r3, #12]
   837e4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   837e8:	f046 0801 	orr.w	r8, r6, #1
   837ec:	4628      	mov	r0, r5
   837ee:	441e      	add	r6, r3
   837f0:	f042 0501 	orr.w	r5, r2, #1
   837f4:	f8c3 8004 	str.w	r8, [r3, #4]
   837f8:	f8cc 400c 	str.w	r4, [ip, #12]
   837fc:	f8c4 c008 	str.w	ip, [r4, #8]
   83800:	617e      	str	r6, [r7, #20]
   83802:	613e      	str	r6, [r7, #16]
   83804:	f8c6 e00c 	str.w	lr, [r6, #12]
   83808:	f8c6 e008 	str.w	lr, [r6, #8]
   8380c:	6075      	str	r5, [r6, #4]
   8380e:	505a      	str	r2, [r3, r1]
   83810:	9300      	str	r3, [sp, #0]
   83812:	f000 fa05 	bl	83c20 <__malloc_unlock>
   83816:	9b00      	ldr	r3, [sp, #0]
   83818:	f103 0408 	add.w	r4, r3, #8
   8381c:	e01e      	b.n	8385c <_malloc_r+0x18c>
   8381e:	2910      	cmp	r1, #16
   83820:	d820      	bhi.n	83864 <_malloc_r+0x194>
   83822:	f000 f9f7 	bl	83c14 <__malloc_lock>
   83826:	2610      	movs	r6, #16
   83828:	2318      	movs	r3, #24
   8382a:	2002      	movs	r0, #2
   8382c:	4f72      	ldr	r7, [pc, #456]	; (839f8 <_malloc_r+0x328>)
   8382e:	443b      	add	r3, r7
   83830:	685c      	ldr	r4, [r3, #4]
   83832:	f1a3 0208 	sub.w	r2, r3, #8
   83836:	4294      	cmp	r4, r2
   83838:	f000 812f 	beq.w	83a9a <_malloc_r+0x3ca>
   8383c:	6863      	ldr	r3, [r4, #4]
   8383e:	68e1      	ldr	r1, [r4, #12]
   83840:	f023 0303 	bic.w	r3, r3, #3
   83844:	4423      	add	r3, r4
   83846:	685a      	ldr	r2, [r3, #4]
   83848:	68a6      	ldr	r6, [r4, #8]
   8384a:	f042 0201 	orr.w	r2, r2, #1
   8384e:	60f1      	str	r1, [r6, #12]
   83850:	4628      	mov	r0, r5
   83852:	608e      	str	r6, [r1, #8]
   83854:	605a      	str	r2, [r3, #4]
   83856:	f000 f9e3 	bl	83c20 <__malloc_unlock>
   8385a:	3408      	adds	r4, #8
   8385c:	4620      	mov	r0, r4
   8385e:	b003      	add	sp, #12
   83860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83864:	2400      	movs	r4, #0
   83866:	230c      	movs	r3, #12
   83868:	4620      	mov	r0, r4
   8386a:	602b      	str	r3, [r5, #0]
   8386c:	b003      	add	sp, #12
   8386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83872:	2040      	movs	r0, #64	; 0x40
   83874:	f44f 7100 	mov.w	r1, #512	; 0x200
   83878:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8387c:	e74a      	b.n	83714 <_malloc_r+0x44>
   8387e:	4423      	add	r3, r4
   83880:	685a      	ldr	r2, [r3, #4]
   83882:	68e1      	ldr	r1, [r4, #12]
   83884:	e7e0      	b.n	83848 <_malloc_r+0x178>
   83886:	4423      	add	r3, r4
   83888:	685a      	ldr	r2, [r3, #4]
   8388a:	4628      	mov	r0, r5
   8388c:	f042 0201 	orr.w	r2, r2, #1
   83890:	605a      	str	r2, [r3, #4]
   83892:	3408      	adds	r4, #8
   83894:	f000 f9c4 	bl	83c20 <__malloc_unlock>
   83898:	4620      	mov	r0, r4
   8389a:	b003      	add	sp, #12
   8389c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838a0:	68bc      	ldr	r4, [r7, #8]
   838a2:	6863      	ldr	r3, [r4, #4]
   838a4:	f023 0803 	bic.w	r8, r3, #3
   838a8:	45b0      	cmp	r8, r6
   838aa:	d304      	bcc.n	838b6 <_malloc_r+0x1e6>
   838ac:	eba8 0306 	sub.w	r3, r8, r6
   838b0:	2b0f      	cmp	r3, #15
   838b2:	f300 8085 	bgt.w	839c0 <_malloc_r+0x2f0>
   838b6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83a10 <_malloc_r+0x340>
   838ba:	4b50      	ldr	r3, [pc, #320]	; (839fc <_malloc_r+0x32c>)
   838bc:	f8d9 2000 	ldr.w	r2, [r9]
   838c0:	681b      	ldr	r3, [r3, #0]
   838c2:	3201      	adds	r2, #1
   838c4:	4433      	add	r3, r6
   838c6:	eb04 0a08 	add.w	sl, r4, r8
   838ca:	f000 8154 	beq.w	83b76 <_malloc_r+0x4a6>
   838ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   838d2:	330f      	adds	r3, #15
   838d4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   838d8:	f02b 0b0f 	bic.w	fp, fp, #15
   838dc:	4659      	mov	r1, fp
   838de:	4628      	mov	r0, r5
   838e0:	f000 f9a4 	bl	83c2c <_sbrk_r>
   838e4:	1c41      	adds	r1, r0, #1
   838e6:	4602      	mov	r2, r0
   838e8:	f000 80fb 	beq.w	83ae2 <_malloc_r+0x412>
   838ec:	4582      	cmp	sl, r0
   838ee:	f200 80f6 	bhi.w	83ade <_malloc_r+0x40e>
   838f2:	4b43      	ldr	r3, [pc, #268]	; (83a00 <_malloc_r+0x330>)
   838f4:	6819      	ldr	r1, [r3, #0]
   838f6:	4459      	add	r1, fp
   838f8:	6019      	str	r1, [r3, #0]
   838fa:	f000 814c 	beq.w	83b96 <_malloc_r+0x4c6>
   838fe:	f8d9 0000 	ldr.w	r0, [r9]
   83902:	3001      	adds	r0, #1
   83904:	bf1b      	ittet	ne
   83906:	eba2 0a0a 	subne.w	sl, r2, sl
   8390a:	4451      	addne	r1, sl
   8390c:	f8c9 2000 	streq.w	r2, [r9]
   83910:	6019      	strne	r1, [r3, #0]
   83912:	f012 0107 	ands.w	r1, r2, #7
   83916:	f000 8114 	beq.w	83b42 <_malloc_r+0x472>
   8391a:	f1c1 0008 	rsb	r0, r1, #8
   8391e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83922:	4402      	add	r2, r0
   83924:	3108      	adds	r1, #8
   83926:	eb02 090b 	add.w	r9, r2, fp
   8392a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8392e:	eba1 0909 	sub.w	r9, r1, r9
   83932:	4649      	mov	r1, r9
   83934:	4628      	mov	r0, r5
   83936:	9301      	str	r3, [sp, #4]
   83938:	9200      	str	r2, [sp, #0]
   8393a:	f000 f977 	bl	83c2c <_sbrk_r>
   8393e:	1c43      	adds	r3, r0, #1
   83940:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83944:	f000 8142 	beq.w	83bcc <_malloc_r+0x4fc>
   83948:	1a80      	subs	r0, r0, r2
   8394a:	4448      	add	r0, r9
   8394c:	f040 0001 	orr.w	r0, r0, #1
   83950:	6819      	ldr	r1, [r3, #0]
   83952:	42bc      	cmp	r4, r7
   83954:	4449      	add	r1, r9
   83956:	60ba      	str	r2, [r7, #8]
   83958:	6019      	str	r1, [r3, #0]
   8395a:	6050      	str	r0, [r2, #4]
   8395c:	d017      	beq.n	8398e <_malloc_r+0x2be>
   8395e:	f1b8 0f0f 	cmp.w	r8, #15
   83962:	f240 80fa 	bls.w	83b5a <_malloc_r+0x48a>
   83966:	f04f 0c05 	mov.w	ip, #5
   8396a:	6862      	ldr	r2, [r4, #4]
   8396c:	f1a8 000c 	sub.w	r0, r8, #12
   83970:	f020 0007 	bic.w	r0, r0, #7
   83974:	f002 0201 	and.w	r2, r2, #1
   83978:	eb04 0e00 	add.w	lr, r4, r0
   8397c:	4302      	orrs	r2, r0
   8397e:	280f      	cmp	r0, #15
   83980:	6062      	str	r2, [r4, #4]
   83982:	f8ce c004 	str.w	ip, [lr, #4]
   83986:	f8ce c008 	str.w	ip, [lr, #8]
   8398a:	f200 8116 	bhi.w	83bba <_malloc_r+0x4ea>
   8398e:	4b1d      	ldr	r3, [pc, #116]	; (83a04 <_malloc_r+0x334>)
   83990:	68bc      	ldr	r4, [r7, #8]
   83992:	681a      	ldr	r2, [r3, #0]
   83994:	4291      	cmp	r1, r2
   83996:	bf88      	it	hi
   83998:	6019      	strhi	r1, [r3, #0]
   8399a:	4b1b      	ldr	r3, [pc, #108]	; (83a08 <_malloc_r+0x338>)
   8399c:	681a      	ldr	r2, [r3, #0]
   8399e:	4291      	cmp	r1, r2
   839a0:	6862      	ldr	r2, [r4, #4]
   839a2:	bf88      	it	hi
   839a4:	6019      	strhi	r1, [r3, #0]
   839a6:	f022 0203 	bic.w	r2, r2, #3
   839aa:	4296      	cmp	r6, r2
   839ac:	eba2 0306 	sub.w	r3, r2, r6
   839b0:	d801      	bhi.n	839b6 <_malloc_r+0x2e6>
   839b2:	2b0f      	cmp	r3, #15
   839b4:	dc04      	bgt.n	839c0 <_malloc_r+0x2f0>
   839b6:	4628      	mov	r0, r5
   839b8:	f000 f932 	bl	83c20 <__malloc_unlock>
   839bc:	2400      	movs	r4, #0
   839be:	e74d      	b.n	8385c <_malloc_r+0x18c>
   839c0:	f046 0201 	orr.w	r2, r6, #1
   839c4:	f043 0301 	orr.w	r3, r3, #1
   839c8:	4426      	add	r6, r4
   839ca:	6062      	str	r2, [r4, #4]
   839cc:	4628      	mov	r0, r5
   839ce:	60be      	str	r6, [r7, #8]
   839d0:	3408      	adds	r4, #8
   839d2:	6073      	str	r3, [r6, #4]
   839d4:	f000 f924 	bl	83c20 <__malloc_unlock>
   839d8:	4620      	mov	r0, r4
   839da:	b003      	add	sp, #12
   839dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   839e0:	2b14      	cmp	r3, #20
   839e2:	d970      	bls.n	83ac6 <_malloc_r+0x3f6>
   839e4:	2b54      	cmp	r3, #84	; 0x54
   839e6:	f200 80a2 	bhi.w	83b2e <_malloc_r+0x45e>
   839ea:	0b33      	lsrs	r3, r6, #12
   839ec:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   839f0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   839f4:	00c1      	lsls	r1, r0, #3
   839f6:	e68d      	b.n	83714 <_malloc_r+0x44>
   839f8:	2007060c 	.word	0x2007060c
   839fc:	200712f0 	.word	0x200712f0
   83a00:	200712c0 	.word	0x200712c0
   83a04:	200712e8 	.word	0x200712e8
   83a08:	200712ec 	.word	0x200712ec
   83a0c:	20070614 	.word	0x20070614
   83a10:	20070a14 	.word	0x20070a14
   83a14:	0a5a      	lsrs	r2, r3, #9
   83a16:	2a04      	cmp	r2, #4
   83a18:	d95b      	bls.n	83ad2 <_malloc_r+0x402>
   83a1a:	2a14      	cmp	r2, #20
   83a1c:	f200 80ae 	bhi.w	83b7c <_malloc_r+0x4ac>
   83a20:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   83a24:	00c9      	lsls	r1, r1, #3
   83a26:	325b      	adds	r2, #91	; 0x5b
   83a28:	eb07 0c01 	add.w	ip, r7, r1
   83a2c:	5879      	ldr	r1, [r7, r1]
   83a2e:	f1ac 0c08 	sub.w	ip, ip, #8
   83a32:	458c      	cmp	ip, r1
   83a34:	f000 8088 	beq.w	83b48 <_malloc_r+0x478>
   83a38:	684a      	ldr	r2, [r1, #4]
   83a3a:	f022 0203 	bic.w	r2, r2, #3
   83a3e:	4293      	cmp	r3, r2
   83a40:	d273      	bcs.n	83b2a <_malloc_r+0x45a>
   83a42:	6889      	ldr	r1, [r1, #8]
   83a44:	458c      	cmp	ip, r1
   83a46:	d1f7      	bne.n	83a38 <_malloc_r+0x368>
   83a48:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83a4c:	687a      	ldr	r2, [r7, #4]
   83a4e:	60e3      	str	r3, [r4, #12]
   83a50:	f8c4 c008 	str.w	ip, [r4, #8]
   83a54:	609c      	str	r4, [r3, #8]
   83a56:	f8cc 400c 	str.w	r4, [ip, #12]
   83a5a:	e69e      	b.n	8379a <_malloc_r+0xca>
   83a5c:	f046 0c01 	orr.w	ip, r6, #1
   83a60:	f042 0101 	orr.w	r1, r2, #1
   83a64:	4426      	add	r6, r4
   83a66:	f8c4 c004 	str.w	ip, [r4, #4]
   83a6a:	4628      	mov	r0, r5
   83a6c:	617e      	str	r6, [r7, #20]
   83a6e:	613e      	str	r6, [r7, #16]
   83a70:	f8c6 e00c 	str.w	lr, [r6, #12]
   83a74:	f8c6 e008 	str.w	lr, [r6, #8]
   83a78:	6071      	str	r1, [r6, #4]
   83a7a:	50e2      	str	r2, [r4, r3]
   83a7c:	f000 f8d0 	bl	83c20 <__malloc_unlock>
   83a80:	3408      	adds	r4, #8
   83a82:	e6eb      	b.n	8385c <_malloc_r+0x18c>
   83a84:	687a      	ldr	r2, [r7, #4]
   83a86:	e688      	b.n	8379a <_malloc_r+0xca>
   83a88:	f108 0801 	add.w	r8, r8, #1
   83a8c:	f018 0f03 	tst.w	r8, #3
   83a90:	f10c 0c08 	add.w	ip, ip, #8
   83a94:	f47f ae93 	bne.w	837be <_malloc_r+0xee>
   83a98:	e02d      	b.n	83af6 <_malloc_r+0x426>
   83a9a:	68dc      	ldr	r4, [r3, #12]
   83a9c:	42a3      	cmp	r3, r4
   83a9e:	bf08      	it	eq
   83aa0:	3002      	addeq	r0, #2
   83aa2:	f43f ae4b 	beq.w	8373c <_malloc_r+0x6c>
   83aa6:	e6c9      	b.n	8383c <_malloc_r+0x16c>
   83aa8:	461c      	mov	r4, r3
   83aaa:	4419      	add	r1, r3
   83aac:	684a      	ldr	r2, [r1, #4]
   83aae:	68db      	ldr	r3, [r3, #12]
   83ab0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83ab4:	f042 0201 	orr.w	r2, r2, #1
   83ab8:	604a      	str	r2, [r1, #4]
   83aba:	4628      	mov	r0, r5
   83abc:	60f3      	str	r3, [r6, #12]
   83abe:	609e      	str	r6, [r3, #8]
   83ac0:	f000 f8ae 	bl	83c20 <__malloc_unlock>
   83ac4:	e6ca      	b.n	8385c <_malloc_r+0x18c>
   83ac6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   83aca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   83ace:	00c1      	lsls	r1, r0, #3
   83ad0:	e620      	b.n	83714 <_malloc_r+0x44>
   83ad2:	099a      	lsrs	r2, r3, #6
   83ad4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83ad8:	00c9      	lsls	r1, r1, #3
   83ada:	3238      	adds	r2, #56	; 0x38
   83adc:	e7a4      	b.n	83a28 <_malloc_r+0x358>
   83ade:	42bc      	cmp	r4, r7
   83ae0:	d054      	beq.n	83b8c <_malloc_r+0x4bc>
   83ae2:	68bc      	ldr	r4, [r7, #8]
   83ae4:	6862      	ldr	r2, [r4, #4]
   83ae6:	f022 0203 	bic.w	r2, r2, #3
   83aea:	e75e      	b.n	839aa <_malloc_r+0x2da>
   83aec:	f859 3908 	ldr.w	r3, [r9], #-8
   83af0:	4599      	cmp	r9, r3
   83af2:	f040 8086 	bne.w	83c02 <_malloc_r+0x532>
   83af6:	f010 0f03 	tst.w	r0, #3
   83afa:	f100 30ff 	add.w	r0, r0, #4294967295
   83afe:	d1f5      	bne.n	83aec <_malloc_r+0x41c>
   83b00:	687b      	ldr	r3, [r7, #4]
   83b02:	ea23 0304 	bic.w	r3, r3, r4
   83b06:	607b      	str	r3, [r7, #4]
   83b08:	0064      	lsls	r4, r4, #1
   83b0a:	429c      	cmp	r4, r3
   83b0c:	f63f aec8 	bhi.w	838a0 <_malloc_r+0x1d0>
   83b10:	2c00      	cmp	r4, #0
   83b12:	f43f aec5 	beq.w	838a0 <_malloc_r+0x1d0>
   83b16:	421c      	tst	r4, r3
   83b18:	4640      	mov	r0, r8
   83b1a:	f47f ae4c 	bne.w	837b6 <_malloc_r+0xe6>
   83b1e:	0064      	lsls	r4, r4, #1
   83b20:	421c      	tst	r4, r3
   83b22:	f100 0004 	add.w	r0, r0, #4
   83b26:	d0fa      	beq.n	83b1e <_malloc_r+0x44e>
   83b28:	e645      	b.n	837b6 <_malloc_r+0xe6>
   83b2a:	468c      	mov	ip, r1
   83b2c:	e78c      	b.n	83a48 <_malloc_r+0x378>
   83b2e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83b32:	d815      	bhi.n	83b60 <_malloc_r+0x490>
   83b34:	0bf3      	lsrs	r3, r6, #15
   83b36:	f103 0078 	add.w	r0, r3, #120	; 0x78
   83b3a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   83b3e:	00c1      	lsls	r1, r0, #3
   83b40:	e5e8      	b.n	83714 <_malloc_r+0x44>
   83b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83b46:	e6ee      	b.n	83926 <_malloc_r+0x256>
   83b48:	2101      	movs	r1, #1
   83b4a:	687b      	ldr	r3, [r7, #4]
   83b4c:	1092      	asrs	r2, r2, #2
   83b4e:	fa01 f202 	lsl.w	r2, r1, r2
   83b52:	431a      	orrs	r2, r3
   83b54:	607a      	str	r2, [r7, #4]
   83b56:	4663      	mov	r3, ip
   83b58:	e779      	b.n	83a4e <_malloc_r+0x37e>
   83b5a:	2301      	movs	r3, #1
   83b5c:	6053      	str	r3, [r2, #4]
   83b5e:	e72a      	b.n	839b6 <_malloc_r+0x2e6>
   83b60:	f240 5254 	movw	r2, #1364	; 0x554
   83b64:	4293      	cmp	r3, r2
   83b66:	d822      	bhi.n	83bae <_malloc_r+0x4de>
   83b68:	0cb3      	lsrs	r3, r6, #18
   83b6a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   83b6e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   83b72:	00c1      	lsls	r1, r0, #3
   83b74:	e5ce      	b.n	83714 <_malloc_r+0x44>
   83b76:	f103 0b10 	add.w	fp, r3, #16
   83b7a:	e6af      	b.n	838dc <_malloc_r+0x20c>
   83b7c:	2a54      	cmp	r2, #84	; 0x54
   83b7e:	d829      	bhi.n	83bd4 <_malloc_r+0x504>
   83b80:	0b1a      	lsrs	r2, r3, #12
   83b82:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83b86:	00c9      	lsls	r1, r1, #3
   83b88:	326e      	adds	r2, #110	; 0x6e
   83b8a:	e74d      	b.n	83a28 <_malloc_r+0x358>
   83b8c:	4b20      	ldr	r3, [pc, #128]	; (83c10 <_malloc_r+0x540>)
   83b8e:	6819      	ldr	r1, [r3, #0]
   83b90:	4459      	add	r1, fp
   83b92:	6019      	str	r1, [r3, #0]
   83b94:	e6b3      	b.n	838fe <_malloc_r+0x22e>
   83b96:	f3ca 000b 	ubfx	r0, sl, #0, #12
   83b9a:	2800      	cmp	r0, #0
   83b9c:	f47f aeaf 	bne.w	838fe <_malloc_r+0x22e>
   83ba0:	eb08 030b 	add.w	r3, r8, fp
   83ba4:	68ba      	ldr	r2, [r7, #8]
   83ba6:	f043 0301 	orr.w	r3, r3, #1
   83baa:	6053      	str	r3, [r2, #4]
   83bac:	e6ef      	b.n	8398e <_malloc_r+0x2be>
   83bae:	207f      	movs	r0, #127	; 0x7f
   83bb0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83bb4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83bb8:	e5ac      	b.n	83714 <_malloc_r+0x44>
   83bba:	f104 0108 	add.w	r1, r4, #8
   83bbe:	4628      	mov	r0, r5
   83bc0:	9300      	str	r3, [sp, #0]
   83bc2:	f7ff fc39 	bl	83438 <_free_r>
   83bc6:	9b00      	ldr	r3, [sp, #0]
   83bc8:	6819      	ldr	r1, [r3, #0]
   83bca:	e6e0      	b.n	8398e <_malloc_r+0x2be>
   83bcc:	2001      	movs	r0, #1
   83bce:	f04f 0900 	mov.w	r9, #0
   83bd2:	e6bd      	b.n	83950 <_malloc_r+0x280>
   83bd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83bd8:	d805      	bhi.n	83be6 <_malloc_r+0x516>
   83bda:	0bda      	lsrs	r2, r3, #15
   83bdc:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83be0:	00c9      	lsls	r1, r1, #3
   83be2:	3277      	adds	r2, #119	; 0x77
   83be4:	e720      	b.n	83a28 <_malloc_r+0x358>
   83be6:	f240 5154 	movw	r1, #1364	; 0x554
   83bea:	428a      	cmp	r2, r1
   83bec:	d805      	bhi.n	83bfa <_malloc_r+0x52a>
   83bee:	0c9a      	lsrs	r2, r3, #18
   83bf0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83bf4:	00c9      	lsls	r1, r1, #3
   83bf6:	327c      	adds	r2, #124	; 0x7c
   83bf8:	e716      	b.n	83a28 <_malloc_r+0x358>
   83bfa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83bfe:	227e      	movs	r2, #126	; 0x7e
   83c00:	e712      	b.n	83a28 <_malloc_r+0x358>
   83c02:	687b      	ldr	r3, [r7, #4]
   83c04:	e780      	b.n	83b08 <_malloc_r+0x438>
   83c06:	08f0      	lsrs	r0, r6, #3
   83c08:	f106 0308 	add.w	r3, r6, #8
   83c0c:	e60e      	b.n	8382c <_malloc_r+0x15c>
   83c0e:	bf00      	nop
   83c10:	200712c0 	.word	0x200712c0

00083c14 <__malloc_lock>:
   83c14:	4801      	ldr	r0, [pc, #4]	; (83c1c <__malloc_lock+0x8>)
   83c16:	f7ff bd21 	b.w	8365c <__retarget_lock_acquire_recursive>
   83c1a:	bf00      	nop
   83c1c:	2007131c 	.word	0x2007131c

00083c20 <__malloc_unlock>:
   83c20:	4801      	ldr	r0, [pc, #4]	; (83c28 <__malloc_unlock+0x8>)
   83c22:	f7ff bd1d 	b.w	83660 <__retarget_lock_release_recursive>
   83c26:	bf00      	nop
   83c28:	2007131c 	.word	0x2007131c

00083c2c <_sbrk_r>:
   83c2c:	b538      	push	{r3, r4, r5, lr}
   83c2e:	2300      	movs	r3, #0
   83c30:	4c06      	ldr	r4, [pc, #24]	; (83c4c <_sbrk_r+0x20>)
   83c32:	4605      	mov	r5, r0
   83c34:	4608      	mov	r0, r1
   83c36:	6023      	str	r3, [r4, #0]
   83c38:	f7fe fe5a 	bl	828f0 <_sbrk>
   83c3c:	1c43      	adds	r3, r0, #1
   83c3e:	d000      	beq.n	83c42 <_sbrk_r+0x16>
   83c40:	bd38      	pop	{r3, r4, r5, pc}
   83c42:	6823      	ldr	r3, [r4, #0]
   83c44:	2b00      	cmp	r3, #0
   83c46:	d0fb      	beq.n	83c40 <_sbrk_r+0x14>
   83c48:	602b      	str	r3, [r5, #0]
   83c4a:	bd38      	pop	{r3, r4, r5, pc}
   83c4c:	20071330 	.word	0x20071330

00083c50 <__sread>:
   83c50:	b510      	push	{r4, lr}
   83c52:	460c      	mov	r4, r1
   83c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83c58:	f000 f954 	bl	83f04 <_read_r>
   83c5c:	2800      	cmp	r0, #0
   83c5e:	db03      	blt.n	83c68 <__sread+0x18>
   83c60:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83c62:	4403      	add	r3, r0
   83c64:	6523      	str	r3, [r4, #80]	; 0x50
   83c66:	bd10      	pop	{r4, pc}
   83c68:	89a3      	ldrh	r3, [r4, #12]
   83c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83c6e:	81a3      	strh	r3, [r4, #12]
   83c70:	bd10      	pop	{r4, pc}
   83c72:	bf00      	nop

00083c74 <__swrite>:
   83c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83c78:	460c      	mov	r4, r1
   83c7a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83c7e:	461f      	mov	r7, r3
   83c80:	05cb      	lsls	r3, r1, #23
   83c82:	4616      	mov	r6, r2
   83c84:	4605      	mov	r5, r0
   83c86:	d507      	bpl.n	83c98 <__swrite+0x24>
   83c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83c8c:	2302      	movs	r3, #2
   83c8e:	2200      	movs	r2, #0
   83c90:	f000 f922 	bl	83ed8 <_lseek_r>
   83c94:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83c98:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83c9c:	81a1      	strh	r1, [r4, #12]
   83c9e:	463b      	mov	r3, r7
   83ca0:	4632      	mov	r2, r6
   83ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83ca6:	4628      	mov	r0, r5
   83ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83cac:	f000 b814 	b.w	83cd8 <_write_r>

00083cb0 <__sseek>:
   83cb0:	b510      	push	{r4, lr}
   83cb2:	460c      	mov	r4, r1
   83cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83cb8:	f000 f90e 	bl	83ed8 <_lseek_r>
   83cbc:	89a3      	ldrh	r3, [r4, #12]
   83cbe:	1c42      	adds	r2, r0, #1
   83cc0:	bf0e      	itee	eq
   83cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83cca:	6520      	strne	r0, [r4, #80]	; 0x50
   83ccc:	81a3      	strh	r3, [r4, #12]
   83cce:	bd10      	pop	{r4, pc}

00083cd0 <__sclose>:
   83cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83cd4:	f000 b878 	b.w	83dc8 <_close_r>

00083cd8 <_write_r>:
   83cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83cda:	460e      	mov	r6, r1
   83cdc:	2500      	movs	r5, #0
   83cde:	4c08      	ldr	r4, [pc, #32]	; (83d00 <_write_r+0x28>)
   83ce0:	4611      	mov	r1, r2
   83ce2:	4607      	mov	r7, r0
   83ce4:	461a      	mov	r2, r3
   83ce6:	4630      	mov	r0, r6
   83ce8:	6025      	str	r5, [r4, #0]
   83cea:	f7fe f859 	bl	81da0 <_write>
   83cee:	1c43      	adds	r3, r0, #1
   83cf0:	d000      	beq.n	83cf4 <_write_r+0x1c>
   83cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cf4:	6823      	ldr	r3, [r4, #0]
   83cf6:	2b00      	cmp	r3, #0
   83cf8:	d0fb      	beq.n	83cf2 <_write_r+0x1a>
   83cfa:	603b      	str	r3, [r7, #0]
   83cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cfe:	bf00      	nop
   83d00:	20071330 	.word	0x20071330

00083d04 <__register_exitproc>:
   83d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83d08:	4d2c      	ldr	r5, [pc, #176]	; (83dbc <__register_exitproc+0xb8>)
   83d0a:	4606      	mov	r6, r0
   83d0c:	6828      	ldr	r0, [r5, #0]
   83d0e:	4698      	mov	r8, r3
   83d10:	460f      	mov	r7, r1
   83d12:	4691      	mov	r9, r2
   83d14:	f7ff fca2 	bl	8365c <__retarget_lock_acquire_recursive>
   83d18:	4b29      	ldr	r3, [pc, #164]	; (83dc0 <__register_exitproc+0xbc>)
   83d1a:	681c      	ldr	r4, [r3, #0]
   83d1c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83d20:	2b00      	cmp	r3, #0
   83d22:	d03e      	beq.n	83da2 <__register_exitproc+0x9e>
   83d24:	685a      	ldr	r2, [r3, #4]
   83d26:	2a1f      	cmp	r2, #31
   83d28:	dc1c      	bgt.n	83d64 <__register_exitproc+0x60>
   83d2a:	f102 0e01 	add.w	lr, r2, #1
   83d2e:	b176      	cbz	r6, 83d4e <__register_exitproc+0x4a>
   83d30:	2101      	movs	r1, #1
   83d32:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83d36:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83d3a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83d3e:	4091      	lsls	r1, r2
   83d40:	4308      	orrs	r0, r1
   83d42:	2e02      	cmp	r6, #2
   83d44:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d48:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83d4c:	d023      	beq.n	83d96 <__register_exitproc+0x92>
   83d4e:	3202      	adds	r2, #2
   83d50:	f8c3 e004 	str.w	lr, [r3, #4]
   83d54:	6828      	ldr	r0, [r5, #0]
   83d56:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83d5a:	f7ff fc81 	bl	83660 <__retarget_lock_release_recursive>
   83d5e:	2000      	movs	r0, #0
   83d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d64:	4b17      	ldr	r3, [pc, #92]	; (83dc4 <__register_exitproc+0xc0>)
   83d66:	b30b      	cbz	r3, 83dac <__register_exitproc+0xa8>
   83d68:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83d6c:	f7ff fca8 	bl	836c0 <malloc>
   83d70:	4603      	mov	r3, r0
   83d72:	b1d8      	cbz	r0, 83dac <__register_exitproc+0xa8>
   83d74:	2000      	movs	r0, #0
   83d76:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83d7a:	f04f 0e01 	mov.w	lr, #1
   83d7e:	6058      	str	r0, [r3, #4]
   83d80:	6019      	str	r1, [r3, #0]
   83d82:	4602      	mov	r2, r0
   83d84:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d88:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d8c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83d90:	2e00      	cmp	r6, #0
   83d92:	d0dc      	beq.n	83d4e <__register_exitproc+0x4a>
   83d94:	e7cc      	b.n	83d30 <__register_exitproc+0x2c>
   83d96:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83d9a:	4301      	orrs	r1, r0
   83d9c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83da0:	e7d5      	b.n	83d4e <__register_exitproc+0x4a>
   83da2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83da6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83daa:	e7bb      	b.n	83d24 <__register_exitproc+0x20>
   83dac:	6828      	ldr	r0, [r5, #0]
   83dae:	f7ff fc57 	bl	83660 <__retarget_lock_release_recursive>
   83db2:	f04f 30ff 	mov.w	r0, #4294967295
   83db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83dba:	bf00      	nop
   83dbc:	20070608 	.word	0x20070608
   83dc0:	00085b04 	.word	0x00085b04
   83dc4:	000836c1 	.word	0x000836c1

00083dc8 <_close_r>:
   83dc8:	b538      	push	{r3, r4, r5, lr}
   83dca:	2300      	movs	r3, #0
   83dcc:	4c06      	ldr	r4, [pc, #24]	; (83de8 <_close_r+0x20>)
   83dce:	4605      	mov	r5, r0
   83dd0:	4608      	mov	r0, r1
   83dd2:	6023      	str	r3, [r4, #0]
   83dd4:	f7fe fda8 	bl	82928 <_close>
   83dd8:	1c43      	adds	r3, r0, #1
   83dda:	d000      	beq.n	83dde <_close_r+0x16>
   83ddc:	bd38      	pop	{r3, r4, r5, pc}
   83dde:	6823      	ldr	r3, [r4, #0]
   83de0:	2b00      	cmp	r3, #0
   83de2:	d0fb      	beq.n	83ddc <_close_r+0x14>
   83de4:	602b      	str	r3, [r5, #0]
   83de6:	bd38      	pop	{r3, r4, r5, pc}
   83de8:	20071330 	.word	0x20071330

00083dec <_fclose_r>:
   83dec:	b570      	push	{r4, r5, r6, lr}
   83dee:	b159      	cbz	r1, 83e08 <_fclose_r+0x1c>
   83df0:	4605      	mov	r5, r0
   83df2:	460c      	mov	r4, r1
   83df4:	b110      	cbz	r0, 83dfc <_fclose_r+0x10>
   83df6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83df8:	2b00      	cmp	r3, #0
   83dfa:	d03c      	beq.n	83e76 <_fclose_r+0x8a>
   83dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83dfe:	07d8      	lsls	r0, r3, #31
   83e00:	d505      	bpl.n	83e0e <_fclose_r+0x22>
   83e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e06:	b92b      	cbnz	r3, 83e14 <_fclose_r+0x28>
   83e08:	2600      	movs	r6, #0
   83e0a:	4630      	mov	r0, r6
   83e0c:	bd70      	pop	{r4, r5, r6, pc}
   83e0e:	89a3      	ldrh	r3, [r4, #12]
   83e10:	0599      	lsls	r1, r3, #22
   83e12:	d53c      	bpl.n	83e8e <_fclose_r+0xa2>
   83e14:	4621      	mov	r1, r4
   83e16:	4628      	mov	r0, r5
   83e18:	f7ff f974 	bl	83104 <__sflush_r>
   83e1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83e1e:	4606      	mov	r6, r0
   83e20:	b133      	cbz	r3, 83e30 <_fclose_r+0x44>
   83e22:	69e1      	ldr	r1, [r4, #28]
   83e24:	4628      	mov	r0, r5
   83e26:	4798      	blx	r3
   83e28:	2800      	cmp	r0, #0
   83e2a:	bfb8      	it	lt
   83e2c:	f04f 36ff 	movlt.w	r6, #4294967295
   83e30:	89a3      	ldrh	r3, [r4, #12]
   83e32:	061a      	lsls	r2, r3, #24
   83e34:	d422      	bmi.n	83e7c <_fclose_r+0x90>
   83e36:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83e38:	b141      	cbz	r1, 83e4c <_fclose_r+0x60>
   83e3a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83e3e:	4299      	cmp	r1, r3
   83e40:	d002      	beq.n	83e48 <_fclose_r+0x5c>
   83e42:	4628      	mov	r0, r5
   83e44:	f7ff faf8 	bl	83438 <_free_r>
   83e48:	2300      	movs	r3, #0
   83e4a:	6323      	str	r3, [r4, #48]	; 0x30
   83e4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83e4e:	b121      	cbz	r1, 83e5a <_fclose_r+0x6e>
   83e50:	4628      	mov	r0, r5
   83e52:	f7ff faf1 	bl	83438 <_free_r>
   83e56:	2300      	movs	r3, #0
   83e58:	6463      	str	r3, [r4, #68]	; 0x44
   83e5a:	f7ff fa77 	bl	8334c <__sfp_lock_acquire>
   83e5e:	2200      	movs	r2, #0
   83e60:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e62:	81a2      	strh	r2, [r4, #12]
   83e64:	07db      	lsls	r3, r3, #31
   83e66:	d50e      	bpl.n	83e86 <_fclose_r+0x9a>
   83e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e6a:	f7ff fbf5 	bl	83658 <__retarget_lock_close_recursive>
   83e6e:	f7ff fa73 	bl	83358 <__sfp_lock_release>
   83e72:	4630      	mov	r0, r6
   83e74:	bd70      	pop	{r4, r5, r6, pc}
   83e76:	f7ff fa39 	bl	832ec <__sinit>
   83e7a:	e7bf      	b.n	83dfc <_fclose_r+0x10>
   83e7c:	6921      	ldr	r1, [r4, #16]
   83e7e:	4628      	mov	r0, r5
   83e80:	f7ff fada 	bl	83438 <_free_r>
   83e84:	e7d7      	b.n	83e36 <_fclose_r+0x4a>
   83e86:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e88:	f7ff fbea 	bl	83660 <__retarget_lock_release_recursive>
   83e8c:	e7ec      	b.n	83e68 <_fclose_r+0x7c>
   83e8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e90:	f7ff fbe4 	bl	8365c <__retarget_lock_acquire_recursive>
   83e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e98:	2b00      	cmp	r3, #0
   83e9a:	d1bb      	bne.n	83e14 <_fclose_r+0x28>
   83e9c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83e9e:	f016 0601 	ands.w	r6, r6, #1
   83ea2:	d1b1      	bne.n	83e08 <_fclose_r+0x1c>
   83ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83ea6:	f7ff fbdb 	bl	83660 <__retarget_lock_release_recursive>
   83eaa:	4630      	mov	r0, r6
   83eac:	bd70      	pop	{r4, r5, r6, pc}
   83eae:	bf00      	nop

00083eb0 <_fstat_r>:
   83eb0:	b570      	push	{r4, r5, r6, lr}
   83eb2:	460d      	mov	r5, r1
   83eb4:	2300      	movs	r3, #0
   83eb6:	4c07      	ldr	r4, [pc, #28]	; (83ed4 <_fstat_r+0x24>)
   83eb8:	4606      	mov	r6, r0
   83eba:	4611      	mov	r1, r2
   83ebc:	4628      	mov	r0, r5
   83ebe:	6023      	str	r3, [r4, #0]
   83ec0:	f7fe fd35 	bl	8292e <_fstat>
   83ec4:	1c43      	adds	r3, r0, #1
   83ec6:	d000      	beq.n	83eca <_fstat_r+0x1a>
   83ec8:	bd70      	pop	{r4, r5, r6, pc}
   83eca:	6823      	ldr	r3, [r4, #0]
   83ecc:	2b00      	cmp	r3, #0
   83ece:	d0fb      	beq.n	83ec8 <_fstat_r+0x18>
   83ed0:	6033      	str	r3, [r6, #0]
   83ed2:	bd70      	pop	{r4, r5, r6, pc}
   83ed4:	20071330 	.word	0x20071330

00083ed8 <_lseek_r>:
   83ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83eda:	460e      	mov	r6, r1
   83edc:	2500      	movs	r5, #0
   83ede:	4c08      	ldr	r4, [pc, #32]	; (83f00 <_lseek_r+0x28>)
   83ee0:	4611      	mov	r1, r2
   83ee2:	4607      	mov	r7, r0
   83ee4:	461a      	mov	r2, r3
   83ee6:	4630      	mov	r0, r6
   83ee8:	6025      	str	r5, [r4, #0]
   83eea:	f7fe fd25 	bl	82938 <_lseek>
   83eee:	1c43      	adds	r3, r0, #1
   83ef0:	d000      	beq.n	83ef4 <_lseek_r+0x1c>
   83ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ef4:	6823      	ldr	r3, [r4, #0]
   83ef6:	2b00      	cmp	r3, #0
   83ef8:	d0fb      	beq.n	83ef2 <_lseek_r+0x1a>
   83efa:	603b      	str	r3, [r7, #0]
   83efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83efe:	bf00      	nop
   83f00:	20071330 	.word	0x20071330

00083f04 <_read_r>:
   83f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f06:	460e      	mov	r6, r1
   83f08:	2500      	movs	r5, #0
   83f0a:	4c08      	ldr	r4, [pc, #32]	; (83f2c <_read_r+0x28>)
   83f0c:	4611      	mov	r1, r2
   83f0e:	4607      	mov	r7, r0
   83f10:	461a      	mov	r2, r3
   83f12:	4630      	mov	r0, r6
   83f14:	6025      	str	r5, [r4, #0]
   83f16:	f7fd ff25 	bl	81d64 <_read>
   83f1a:	1c43      	adds	r3, r0, #1
   83f1c:	d000      	beq.n	83f20 <_read_r+0x1c>
   83f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f20:	6823      	ldr	r3, [r4, #0]
   83f22:	2b00      	cmp	r3, #0
   83f24:	d0fb      	beq.n	83f1e <_read_r+0x1a>
   83f26:	603b      	str	r3, [r7, #0]
   83f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f2a:	bf00      	nop
   83f2c:	20071330 	.word	0x20071330

00083f30 <sysfont_glyphs>:
	...
   83f54:	00300000 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
   83f64:	00300000 00000030 00000000 00000000     ..0.0...........
   83f74:	006c0000 006c006c 0000006c 00000000     ..l.l.l.l.......
	...
   83f98:	00480048 004800fc 00480048 004800fc     H.H...H.H.H...H.
   83fa8:	00000048 00000000 00000000 00100000     H...............
   83fb8:	003c0010 00300040 00040008 00100078     ..<.@.0.....x...
   83fc8:	00000010 00000000 00000000 00000000     ................
   83fd8:	00a4007c 004800a8 00140010 004a002a     |.....H.....*.J.
   83fe8:	00000044 00000000 00000000 00700000     D.............p.
   83ff8:	00880088 00700088 008a0088 008c008a     ......p.........
   84008:	00000070 00000000 00000000 00100000     p...............
   84018:	00100010 00000000 00000000 00000000     ................
	...
   84034:	00100008 00200010 00200020 00200020     ...... . . . . .
   84044:	00100020 00080010 00000000 00000000      ...............
   84054:	00100020 00080010 00080008 00080008      ...............
   84064:	00100008 00200010 00000000 00000000     ...... .........
   84074:	00280000 007c0010 00280010 00000000     ..(...|...(.....
	...
   8409c:	00100010 00fe0010 00100010 00000010     ................
	...
   840c4:	00180000 00300018 00000020 00000000     ......0. .......
	...
   840e0:	00fe0000 00000000 00000000 00000000     ................
	...
   84104:	00180000 00000018 00000000 00000000     ................
   84114:	00000000 00080004 00100008 00200010     .............. .
   84124:	00400020 00000040 00000000 00000000      .@.@...........
   84134:	00780000 00840084 0094008c 00c400a4     ..x.............
   84144:	00840084 00000078 00000000 00000000     ....x...........
   84154:	00100000 00500030 00100010 00100010     ....0.P.........
   84164:	00100010 0000007c 00000000 00000000     ....|...........
   84174:	00700000 00080088 00100008 00200010     ..p........... .
   84184:	00400020 000000fc 00000000 00000000      .@.............
   84194:	00700000 00080088 00300008 00080008     ..p.......0.....
   841a4:	00880008 00000070 00000000 00000000     ....p...........
   841b4:	00080000 00280018 00480028 00880088     ......(.(.H.....
   841c4:	000800fc 00000008 00000000 00000000     ................
   841d4:	007c0000 00800080 00c400b8 00040004     ..|.............
   841e4:	00840004 00000078 00000000 00000000     ....x...........
   841f4:	00380000 00800040 00b00080 008400c8     ..8.@...........
   84204:	00480084 00000030 00000000 00000000     ..H.0...........
   84214:	00fc0000 00040004 00080008 00100010     ................
   84224:	00200020 00000040 00000000 00000000      . .@...........
   84234:	00780000 00840084 00780084 00840084     ..x.......x.....
   84244:	00840084 00000078 00000000 00000000     ....x...........
   84254:	00780000 00840084 008c0084 00040074     ..x.........t...
   84264:	00100008 000000e0 00000000 00000000     ................
	...
   8427c:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
   8429c:	00600000 00000060 00600000 00c00060     ..`.`.....`.`...
   842ac:	00000080 00000000 00000000 00000000     ................
   842bc:	00180004 00800060 00180060 00000004     ....`...`.......
	...
   842dc:	007e0000 00000000 0000007e 00000000     ..~.....~.......
	...
   842fc:	00300040 0002000c 0030000c 00000040     @.0.......0.@...
	...
   84314:	00700000 00080088 00100008 00200020     ..p......... . .
   84324:	00200000 00000020 00000000 00000000     .. . ...........
   84334:	00000000 003c0000 00ba0042 00aa00aa     ......<.B.......
   84344:	00bc00aa 003c0040 00000000 00000000     ....@.<.........
   84354:	00100000 00280010 00280028 007c0044     ......(.(.(.D.|.
   84364:	00820044 00000082 00000000 00000000     D...............
   84374:	00f00000 00880088 00f00088 00880088     ................
   84384:	00880088 000000f0 00000000 00000000     ................
   84394:	00380000 00800044 00800080 00800080     ..8.D...........
   843a4:	00440080 00000038 00000000 00000000     ..D.8...........
   843b4:	00f00000 00840088 00840084 00840084     ................
   843c4:	00880084 000000f0 00000000 00000000     ................
   843d4:	007c0000 00400040 00780040 00400040     ..|.@.@.@.x.@.@.
   843e4:	00400040 0000007c 00000000 00000000     @.@.|...........
   843f4:	007c0000 00400040 00400040 00400078     ..|.@.@.@.@.x.@.
   84404:	00400040 00000040 00000000 00000000     @.@.@...........
   84414:	00380000 00800044 00800080 0084009c     ..8.D...........
   84424:	00440084 0000003c 00000000 00000000     ..D.<...........
   84434:	00840000 00840084 00fc0084 00840084     ................
   84444:	00840084 00000084 00000000 00000000     ................
   84454:	007c0000 00100010 00100010 00100010     ..|.............
   84464:	00100010 0000007c 00000000 00000000     ....|...........
   84474:	00f80000 00080008 00080008 00080008     ................
   84484:	00100008 000000e0 00000000 00000000     ................
   84494:	00840000 00880084 00a00090 008800d0     ................
   844a4:	00840088 00000084 00000000 00000000     ................
   844b4:	00800000 00800080 00800080 00800080     ................
   844c4:	00800080 000000fc 00000000 00000000     ................
   844d4:	00840000 00cc0084 00b400cc 008400b4     ................
   844e4:	00840084 00000084 00000000 00000000     ................
   844f4:	00840000 00c400c4 00a400a4 00940094     ................
   84504:	008c008c 00000084 00000000 00000000     ................
   84514:	00300000 00840048 00840084 00840084     ..0.H...........
   84524:	00480084 00000030 00000000 00000000     ..H.0...........
   84534:	00f00000 00840088 00840084 00f00088     ................
   84544:	00800080 00000080 00000000 00000000     ................
   84554:	00300000 00840048 00840084 00840084     ..0.H...........
   84564:	00480084 00200030 0000001c 00000000     ..H.0. .........
   84574:	00f00000 00840088 00880084 009000f0     ................
   84584:	00840088 00000084 00000000 00000000     ................
   84594:	00780000 00800084 00300040 00040008     ..x.....@.0.....
   845a4:	00840004 00000078 00000000 00000000     ....x...........
   845b4:	00fe0000 00100010 00100010 00100010     ................
   845c4:	00100010 00000010 00000000 00000000     ................
   845d4:	00840000 00840084 00840084 00840084     ................
   845e4:	00840084 00000078 00000000 00000000     ....x...........
   845f4:	00820000 00440082 00440044 00280044     ......D.D.D.D.(.
   84604:	00280028 00000010 00000000 00000000     (.(.............
   84614:	00840000 00840084 00b40084 00b400b4     ................
   84624:	00480078 00000048 00000000 00000000     x.H.H...........
   84634:	00820000 00440044 00100028 00280010     ....D.D.(.....(.
   84644:	00440044 00000082 00000000 00000000     D.D.............
   84654:	00820000 00440044 00280028 00100028     ....D.D.(.(.(...
   84664:	00100010 00000010 00000000 00000000     ................
   84674:	00fc0000 00080004 00100008 00200010     .............. .
   84684:	00400040 000000fe 00000000 00000000     @.@.............
   84694:	008000e0 00800080 00800080 00800080     ................
   846a4:	00800080 00e00080 00000000 00000000     ................
   846b4:	00400000 00200040 00100020 00080010     ..@.@. . .......
   846c4:	00040008 00000004 00000000 00000000     ................
   846d4:	002000e0 00200020 00200020 00200020     .. . . . . . . .
   846e4:	00200020 00e00020 00000000 00000000      . . ...........
   846f4:	00100000 00440028 00000000 00000000     ....(.D.........
	...
   84728:	0000007c 00000000 00000000 00200000     |............. .
   84738:	00080010 00000000 00000000 00000000     ................
	...
   8475c:	00040078 007c0004 008c0084 00000076     x.....|.....v...
	...
   84774:	00800080 00800080 00c400b8 00840084     ................
   84784:	00880084 000000f0 00000000 00000000     ................
	...
   8479c:	0080007c 00800080 00800080 0000007c     |...........|...
	...
   847b4:	00020002 00020002 0042003e 00820082     ........>.B.....
   847c4:	00420082 0000003e 00000000 00000000     ..B.>...........
	...
   847dc:	0082007c 00fe0082 00800080 0000007e     |...........~...
	...
   847f4:	001c0000 00200020 002000fc 00200020     .... . ... . . .
   84804:	00200020 000000fc 00000000 00000000      . .............
	...
   8481c:	0084007c 00840084 008c0084 00040074     |...........t...
   8482c:	00380044 00000000 00800080 00800080     D.8.............
   8483c:	00c400b8 00840084 00840084 00000084     ................
	...
   84854:	00100000 00000000 00100070 00100010     ........p.......
   84864:	00100010 0000007c 00000000 00000000     ....|...........
   84874:	00080000 00000000 00080078 00080008     ........x.......
   84884:	00080008 00080008 00e00010 00000000     ................
   84894:	00800080 00800080 00900088 00e000a0     ................
   848a4:	00880090 00000084 00000000 00000000     ................
   848b4:	00f00000 00100010 00100010 00100010     ................
   848c4:	00100010 000000fe 00000000 00000000     ................
	...
   848dc:	00d400ac 00940094 00940094 00000094     ................
	...
   848fc:	00c400b8 00840084 00840084 00000084     ................
	...
   8491c:	00840078 00840084 00840084 00000078     x...........x...
	...
   8493c:	00c400b8 00840084 00840084 008000f8     ................
   8494c:	00800080 00000000 00000000 00000000     ................
   8495c:	0084007c 00840084 00840084 0004007c     |...........|...
   8496c:	00040004 00000000 00000000 00000000     ................
   8497c:	003000cc 00200020 00200020 000000f8     ..0. . . . .....
	...
   8499c:	0080007c 00780080 00040004 000000f8     |.....x.........
	...
   849b8:	00200000 002000fc 00200020 00200020     .. ... . . . . .
   849c8:	0000001c 00000000 00000000 00000000     ................
   849d8:	00000000 00880088 00880088 00880088     ................
   849e8:	00000074 00000000 00000000 00000000     t...............
   849f8:	00000000 00440082 00280044 00100028     ......D.D.(.(...
   84a08:	00000010 00000000 00000000 00000000     ................
   84a18:	00000000 00840084 00b400b4 00480048     ............H.H.
   84a28:	00000048 00000000 00000000 00000000     H...............
   84a38:	00000000 00280044 00100028 00440028     ....D.(.(...(.D.
   84a48:	00000044 00000000 00000000 00000000     D...............
   84a58:	00000000 00440082 00280044 00280028     ......D.D.(.(.(.
   84a68:	00100010 00200020 00000000 00000000     .... . .........
   84a78:	00000000 000400fc 00100008 00400020     ............ .@.
   84a88:	000000fc 00000000 00000000 00100008     ................
   84a98:	00080010 00100008 00080010 00100008     ................
   84aa8:	00080010 00000000 00000000 00100010     ................
   84ab8:	00100010 00000010 00100000 00100010     ................
   84ac8:	00100010 00000000 00000000 00100020     ............ ...
   84ad8:	00200010 00100020 00200010 00100020     .. . ..... . ...
   84ae8:	00200010 00000000                       .. .....

00084af0 <atmel_logo_small_data>:
   84af0:	ffffffff ffffffff ffffffff ffffffff     ................
   84b00:	ffffffff ffffffff ffffffff ffffffff     ................
   84b10:	ffffffff ffffffff ffffffff ffffffff     ................
   84b20:	ffffffff ffffffff ffffffff ffffffff     ................
   84b30:	ffffffff ffffffff ffffffff ffffffff     ................
   84b40:	ffffffff ffffffff ffffffff ffffffff     ................
   84b50:	ffffffff ffffffff ffffffff ffffffff     ................
   84b60:	ffffffff ffffffff ffffffff ffffffff     ................
   84b70:	ffffffff ffffffff ffffffff ffffffff     ................
   84b80:	ffffffff ffffffff ffffffff ffffffff     ................
   84b90:	ffffffff ffffffff ffffffff ffffffff     ................
   84ba0:	ffffffff ffffffff ffffffff ffffffff     ................
   84bb0:	ffffffff ffffffff ffffffff ffffffff     ................
   84bc0:	ffffffff ffffffff ffffffff ffffffff     ................
   84bd0:	ffffffff ffffffff ffffffff ffffffff     ................
   84be0:	ffffffff ffffffff ffffffff ffffffff     ................
   84bf0:	ffffffff ffffffff ffffffff ffffffff     ................
   84c00:	ffffffff ffffffff ffffffff ffffffff     ................
   84c10:	ffffffff ffffffff ffffffff ffffffff     ................
   84c20:	ffffffff ffffffff ffffffff ffffffff     ................
   84c30:	ffffffff ffffffff ffffffff ffffffff     ................
   84c40:	ffffffff ffffffff ffffffff ffffffff     ................
   84c50:	ffffffff ffffffff ffffffff ffffffff     ................
   84c60:	ffffffff ffffffff ffffffff ffffffff     ................
   84c70:	ffffffff ffffffff ffffffff ffffffff     ................
   84c80:	ffffffff ffffffff ffffffff ffffffff     ................
   84c90:	ffffffff ffffffff ffffffff ffffffff     ................
   84ca0:	ffffffff ffffffff ffffffff ffffffff     ................
   84cb0:	ffffffff ffffffff ffffffff ffffffff     ................
   84cc0:	ffffffff ffffffff ffffffff ffffffff     ................
   84cd0:	ffffffff ffffffff ffffffff ffffffff     ................
   84ce0:	ffffffff 7edf7edf dff77edf ffffffff     .....~.~.~......
   84cf0:	7edfdff7 dff77edf ffffffff ffffffff     ...~.~..........
   84d00:	ffffffff ffffffff ffffffff ffffffff     ................
   84d10:	ffffffff ffffffff ffffffff ffffffff     ................
   84d20:	ffffffff ffffffff ffffffff ffffffff     ................
   84d30:	ffffffff ffffffff ffffffff ffffffff     ................
   84d40:	ffffffff ffffffff dff7ffff 7edf7edf     .............~.~
   84d50:	ffffbfef 9fe7ffff ffffffff ffffffff     ................
   84d60:	ffffffff ffffffff ffffffff ffffffff     ................
   84d70:	ffffffff ffffffff ffffffff 1c8effff     ................
   84d80:	d803d803 7da6d803 ffffffff d8037da6     .......}.....}..
   84d90:	7da6d803 ffffffff ffffffff ffffffff     ...}............
   84da0:	ffffffff ffffffff ffffffff ffffffff     ................
   84db0:	ffffffff ffffffff ffffffff ffffffff     ................
   84dc0:	ffffffff ffffffff ffffffff ffffffff     ................
   84dd0:	ffffffff ffffffff ffffffff ffffffff     ................
   84de0:	ffffffff febeffff d803d803 ffff5b65     ............e[..
   84df0:	1a4d7da6 ffffbb75 ffffffff ffffffff     .}M.u...........
   84e00:	ffffffff ffffffff ffffffff ffffffff     ................
   84e10:	ffffffff ffffffff d803bdb6 d803d803     ................
   84e20:	7da6d803 ffffffff d8037da6 7da6d803     ...}.....}.....}
   84e30:	ffffffff ffffffff ffffffff ffffffff     ................
   84e40:	ffffffff ffffffff ffffffff ffffffff     ................
   84e50:	ffffffff ffffffff ffffffff ffffffff     ................
   84e60:	ffffffff ffffffff ffffffff ffffffff     ................
   84e70:	ffffffff ffffffff ffffffff ffffffff     ................
   84e80:	febeffff d803d803 ffff5b65 7b653c96     ........e[...<e{
   84e90:	ffff9b75 ffffffff ffffffff ffffffff     u...............
   84ea0:	ffffffff ffffffff ffffffff ffffffff     ................
   84eb0:	3ecfffff d803f80b d803d803 7da6d803     ...>...........}
   84ec0:	ffffffff d8037da6 7da6d803 ffffffff     .....}.....}....
   84ed0:	ffffffff ffffffff ffffffff ffffffff     ................
   84ee0:	ffffffff ffffffff ffffffff ffffffff     ................
   84ef0:	ffffffff ffffffff ffffffff ffffffff     ................
   84f00:	ffffffff ffffffff ffffffff ffffffff     ................
   84f10:	ffffffff ffffffff ffffffff febeffff     ................
   84f20:	d803d803 ffff5b65 7da6dff7 ffff9fe7     ....e[.....}....
   84f30:	ffffffff ffffffff ffffffff ffffffff     ................
   84f40:	ffffffff ffffffff ffffffff 591c9fe7     ...............Y
   84f50:	d803d803 d803391c 7da6d803 ffffffff     .....9.....}....
   84f60:	d8037da6 7da6d803 ffffffff ffffffff     .}.....}........
   84f70:	ffffffff ffffffff ffffffff ffffffff     ................
   84f80:	ffffffff ffffffff ffffffff ffffffff     ................
   84f90:	ffffffff ffffffff ffffffff ffffffff     ................
   84fa0:	ffffffff ffffffff ffffffff ffffffff     ................
   84fb0:	ffffffff ffffffff febeffff d803d803     ................
   84fc0:	ffff5b65 ffffffff ffffffff ffffffff     e[..............
   84fd0:	ffffffff ffffffff ffffffff ffffffff     ................
   84fe0:	ffffffff dff7ffff d803b934 5b5dd803     ........4.....][
   84ff0:	d803fc85 7da6d803 1ec7ffff d803bb7d     .......}....}...
   85000:	bb7dd803 febefebe 5ed7febe ffffffff     ..}........^....
   85010:	ffffffff 5ed7ffff 7da67da6 ffff1ecf     .......^.}.}....
   85020:	ffffffff bfefffff 7da6bdae dff7bdae     ...........}....
   85030:	ffffffff ffffffff ffffffff ffffffff     ................
   85040:	1ec7ffff fc855c9e ddbe3c96 ffffdff7     .....\...<......
   85050:	ffffffff febeffff d803d803 ffff5b65     ............e[..
   85060:	ffffffff ffffffff ffffffff ffffffff     ................
   85070:	ffffffff ffffffff ffffffff ffffffff     ................
   85080:	3a55ffff d803d803 dff7da3c d803fc85     ..U:....<.......
   85090:	7da6d803 5924ffff d803d803 d803d803     ...}..$Y........
   850a0:	d803d803 5b65d803 ffffffff 3ecfffff     ......e[.......>
   850b0:	d803b934 d803d803 992cd803 ffff1ec7     4.........,.....
   850c0:	f80bdb7d d803d803 f80bd803 ffffdb7d     }...........}...
   850d0:	ffffffff ffffffff ddbeffff d803792c     ............,y..
   850e0:	d803d803 d803d803 5c9e391c ffffffff     .........9.\....
   850f0:	febeffff d803d803 ffff5b65 ffffffff     ........e[......
   85100:	ffffffff ffffffff ffffffff ffffffff     ................
   85110:	ffffffff ffffffff ffffffff d803db7d     ............}...
   85120:	7924d803 ffff9fe7 d803fc85 7da6d803     ..$y...........}
   85130:	5924ffff d803d803 d803d803 d803d803     ..$Y............
   85140:	5b65d803 ffffffff f80b3ecf d803d803     ..e[.....>......
   85150:	d803d803 d803d803 da3cd803 d803d803     ..........<.....
   85160:	d803d803 d803d803 3a55d803 ffffffff     ..........U:....
   85170:	ffffffff d8033c96 d803d803 d803d803     .....<..........
   85180:	d803d803 d803d803 ffffdb7d febeffff     ........}.......
   85190:	d803d803 ffff5b65 ffffffff ffffffff     ....e[..........
   851a0:	ffffffff ffffffff ffffffff ffffffff     ................
   851b0:	ffffffff 7d9effff d803d803 5ed7f80b     .......}.......^
   851c0:	ffffffff d803fc85 7da6d803 bb75ffff     ...........}..u.
   851d0:	d803da3c da3cd803 5b655b65 5c9e5b65     <.....<.e[e[e[.\
   851e0:	ffffffff d803792c f80bd803 5b5d3a5d     ....,y......]:][
   851f0:	d8031814 d803d803 d803d803 5b65b93c     ............<.e[
   85200:	d803b93c d803d803 ffff3c96 1ec7ffff     <........<......
   85210:	d803d803 fa44d803 7edfbdb6 7b6dfec6     ......D....~..m{
   85220:	d803d803 ddbed803 febeffff d803d803     ................
   85230:	ffff5b65 ffffffff ffffffff ffffffff     e[..............
   85240:	ffffffff ffffffff ffffffff ffffffff     ................
   85250:	d803fec6 d803d803 ffffddbe ffffffff     ................
   85260:	d803fc85 7da6d803 ffffffff d8037da6     .......}.....}..
   85270:	7da6d803 ffffffff ffffffff bdaeffff     ...}............
   85280:	d803d803 5ed73814 ffffffff 79249fe7     .....8.^......$y
   85290:	d803d803 fc85d803 ffffffff fc85ffff     ................
   852a0:	d803d803 ffff7924 fa4cffff d803d803     ....$y....L.....
   852b0:	ffff3a55 ffffffff ffffffff d803dc7d     U:..........}...
   852c0:	da44d803 febeffff d803d803 ffff5b65     ..D.........e[..
   852d0:	ffffffff ffffffff ffffffff ffffffff     ................
   852e0:	ffffffff ffffffff 7edfffff d8033814     ...........~.8..
   852f0:	db7dd803 7edf7edf ffffdff7 d803fc85     ..}..~.~........
   85300:	7da6d803 ffffffff d8037da6 7da6d803     ...}.....}.....}
   85310:	ffffffff ffffffff bb75ffff d803d803     ..........u.....
   85320:	ffff1c8e ffffffff 9da6ffff d803d803     ................
   85330:	ffff591c ffffffff ffffffff d803591c     .Y...........Y..
   85340:	9fe7d803 d803bfef d803d803 7edffdbe     ...............~
   85350:	7edf7edf 7edf7edf d8035ed7 d803d803     .~.~.~.~.^......
   85360:	febebfef d803d803 ffff5b65 ffffffff     ........e[......
   85370:	ffffffff ffffffff ffffffff ffffffff     ................
   85380:	ffffffff 792cbfef d803d803 d803d803     ......,y........
   85390:	d803d803 fffffebe d803fc85 7da6d803     ...............}
   853a0:	ffffffff d8037da6 7da6d803 ffffffff     .....}.....}....
   853b0:	ffffffff 5b65ffff d803d803 fffffebe     ......e[........
   853c0:	ffffffff 7edfffff d803d803 ffffda44     .......~....D...
   853d0:	ffffffff ffffffff d803da44 7edfd803     ........D......~
   853e0:	d803fec6 d803d803 d803d803 d803d803     ................
   853f0:	d803d803 d803d803 d803d803 febe1ec7     ................
   85400:	d803d803 ffff5b65 ffffffff ffffffff     ....e[..........
   85410:	ffffffff ffffffff ffffffff ffffffff     ................
   85420:	d803fa44 d803d803 d803d803 d803d803     D...............
   85430:	fffffebe d803fc85 7da6d803 ffffffff     ...........}....
   85440:	d8037da6 7da6d803 ffffffff ffffffff     .}.....}........
   85450:	5b65ffff d803d803 fffffebe ffffffff     ..e[............
   85460:	7edfffff d803d803 ffffda44 ffffffff     ...~....D.......
   85470:	ffffffff d803da44 7edfd803 d803febe     ....D......~....
   85480:	d803d803 d803d803 d803d803 d803d803     ................
   85490:	d803d803 d803d803 febefebe d803d803     ................
   854a0:	ffff5b65 ffffffff ffffffff ffffffff     e[..............
   854b0:	ffffffff ffffffff 7b6dffff d803d803     ..........m{....
   854c0:	fc85992c fc85fc85 fc85fc85 ffff7edf     ,............~..
   854d0:	d803fc85 7da6d803 ffffffff d8037da6     .......}.....}..
   854e0:	5c9ed803 ffffffff ffffffff 5b65ffff     ...\..........e[
   854f0:	d803d803 fffffebe ffffffff 7edfffff     ...............~
   85500:	d803d803 ffffda44 ffffffff ffffffff     ....D...........
   85510:	d803da44 7edfd803 d8031ecf f80bd803     D......~........
   85520:	fc85fc85 fc85fc85 fc85fc85 fc85fc85     ................
   85530:	fc85fc85 fec67edf d803d803 ffff5b65     .....~......e[..
   85540:	ffffffff ffffffff ffffffff ffffffff     ................
   85550:	ffffffff d8033c8e 391cd803 ffff9fe7     .....<.....9....
   85560:	ffffffff ffffffff ffffffff d803fc85     ................
   85570:	7da6d803 ffffffff d803bdae 5b5dd803     ...}..........][
   85580:	ffffffff ffffffff 5b65ffff d803d803     ..........e[....
   85590:	fffffebe ffffffff 7edfffff d803d803     ...........~....
   855a0:	ffffda44 ffffffff ffffffff d803da44     D...........D...
   855b0:	7edfd803 f80bdff7 d803d803 ffff9fe7     ...~............
   855c0:	ffffffff ffffffff ffffffff ffffffff     ................
   855d0:	9fe7ffff d803d803 ffff792c ffffffff     ........,y......
   855e0:	ffffffff ffffffff ffffffff bdb6ffff     ................
   855f0:	d803d803 3ecff80b ffffffff ffffffff     .......>........
   85600:	ffffffff ffffffff d803fc85 7da6d803     ...............}
   85610:	ffffffff f80bdff7 d803d803 ffff7d9e     .............}..
   85620:	ffffffff 5b65ffff d803d803 fffffebe     ......e[........
   85630:	ffffffff 7edfffff d803d803 ffffda44     .......~....D...
   85640:	ffffffff ffffffff d803da44 7edfd803     ........D......~
   85650:	3a55ffff d803d803 ffff1a55 ffffffff     ..U:....U.......
   85660:	ffffffff fc85fec6 5c9efc85 ffffffff     ...........\....
   85670:	d803b934 9b6dd803 ffffffff ffffffff     4.....m.........
   85680:	ffffffff ffffffff f80b5ed7 d803d803     .........^......
   85690:	ffffbdae ffffffff ffffffff ffffffff     ................
   856a0:	ffffffff d803fc85 7da6d803 ffffffff     ...........}....
   856b0:	fc85ffff d803d803 7924d803 1c86da44     ..........$yD...
   856c0:	5b65ffff d803d803 fffffebe ffffffff     ..e[............
   856d0:	7edfffff d803d803 ffffda44 ffffffff     ...~....D.......
   856e0:	ffffffff d803da44 7edfd803 5ed7ffff     ....D......~...^
   856f0:	d803d803 da3cd803 7edfbdb6 db7d5ed7     ......<....~.^}.
   85700:	d803d803 3c96d803 ffffffff d803ddb6     .......<........
   85710:	d803d803 da443814 ffffda44 ffffffff     .....8D.D.......
   85720:	9fe7ffff d803591c 1c86d803 ffffffff     .....Y..........
   85730:	ffffffff ffffffff ffffffff ffffffff     ................
   85740:	d803fc85 7da6d803 ffffffff ffffffff     .......}........
   85750:	d8033a5d d803d803 5b65d803 5b65ffff     ]:........e[..e[
   85760:	d803d803 fffffebe ffffffff 7edfffff     ...............~
   85770:	d803d803 ffffda44 ffffffff ffffffff     ....D...........
   85780:	d803da44 7edfd803 ffffffff d8035c9e     D......~.....\..
   85790:	d803d803 d803d803 d803d803 d803d803     ................
   857a0:	ffff3a5d ffffffff 3c8effff d803d803     ]:.........<....
   857b0:	d803d803 ffffd803 ffffffff b93cdff7     ..............<.
   857c0:	d803d803 ffff7b65 ffffffff ffffffff     ....e{..........
   857d0:	ffffffff ffffffff ffffffff d803fc85     ................
   857e0:	7da6d803 ffffffff ffffffff 7d9effff     ...}...........}
   857f0:	d803b934 5b65d803 5b65ffff d803d803     4.....e[..e[....
   85800:	fffffebe ffffffff 7edfffff d803d803     ...........~....
   85810:	ffffda44 ffffffff ffffffff d803da44     D...........D...
   85820:	7edfd803 ffffffff fec6ffff d803b93c     ...~........<...
   85830:	d803d803 d803d803 5c9e5924 ffffffff     ........$Y.\....
   85840:	ffffffff ffffffff fa4cfec6 d803d803     ..........L.....
   85850:	ffffd803 ffffffff ffffffff ffffffff     ................
   85860:	ffffffff ffffffff ffffffff ffffffff     ................
   85870:	ffffffff ffffffff ffffffff ffffffff     ................
   85880:	ffffffff ffffffff ffffffff dff7ffff     ................
   85890:	bfef7edf ffffffff ffffffff ffffffff     .~..............
   858a0:	ffffffff ffffffff ffffffff ffffffff     ................
   858b0:	ffffffff ffffffff ffffffff ffffffff     ................
   858c0:	ffffffff ffffffff 7edfffff 7da6bdb6     ...........~...}
   858d0:	5ed79dae ffffffff ffffffff ffffffff     ...^............
   858e0:	ffffffff ffffffff 7edfffff ffff7edf     ...........~.~..
   858f0:	ffffffff ffffffff ffffffff ffffffff     ................
   85900:	ffffffff ffffffff ffffffff ffffffff     ................
   85910:	ffffffff ffffffff ffffffff ffffffff     ................
   85920:	ffffffff ffffffff ffffffff ffffffff     ................
   85930:	ffffffff ffffffff ffffffff ffffffff     ................
   85940:	ffffffff ffffffff ffffffff ffffffff     ................
   85950:	ffffffff ffffffff ffffffff ffffffff     ................
   85960:	ffffffff ffffffff ffffffff ffffffff     ................
   85970:	ffffffff ffffffff ffffffff ffffffff     ................
   85980:	ffffffff ffffffff ffffffff ffffffff     ................
   85990:	ffffffff ffffffff ffffffff ffffffff     ................
   859a0:	ffffffff ffffffff ffffffff ffffffff     ................
   859b0:	ffffffff ffffffff ffffffff ffffffff     ................
   859c0:	ffffffff ffffffff ffffffff ffffffff     ................
   859d0:	ffffffff ffffffff ffffffff ffffffff     ................
   859e0:	ffffffff ffffffff ffffffff ffffffff     ................
   859f0:	ffffffff ffffffff ffffffff ffffffff     ................
   85a00:	ffffffff ffffffff ffffffff ffffffff     ................
   85a10:	ffffffff ffffffff ffffffff ffffffff     ................
   85a20:	ffffffff ffffffff ffffffff ffffffff     ................
   85a30:	ffffffff ffffffff ffffffff ffffffff     ................
   85a40:	ffffffff ffffffff ffffffff ffffffff     ................
   85a50:	ffffffff ffffffff ffffffff ffffffff     ................
   85a60:	ffffffff ffffffff ffffffff ffffffff     ................
   85a70:	ffffffff ffffffff ffffffff ffffffff     ................
   85a80:	ffffffff ffffffff ffffffff ffffffff     ................
   85a90:	ffffffff ffffffff ffffffff ffffffff     ................
   85aa0:	ffffffff ffffffff ffffffff ffffffff     ................
   85ab0:	ffffffff ffffffff ffffffff ffffffff     ................
   85ac0:	ffffffff ffffffff 6f6d6544 7274736e     ........Demonstr
   85ad0:	6e697461 69772067 74656764 00000073     ating widgets...
   85ae0:	6c6c6f46 6e69776f 65442067 65636976     Following Device
   85af0:	00003a73 63696c43 0000316b 63696c43     s:..Click1..Clic
   85b00:	0000326b                                k2..

00085b04 <_global_impure_ptr>:
   85b04:	200701e0                                ... 

00085b08 <_init>:
   85b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85b0a:	bf00      	nop
   85b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85b0e:	bc08      	pop	{r3}
   85b10:	469e      	mov	lr, r3
   85b12:	4770      	bx	lr

00085b14 <__init_array_start>:
   85b14:	000830e5 	.word	0x000830e5

00085b18 <__frame_dummy_init_array_entry>:
   85b18:	00080119                                ....

00085b1c <_fini>:
   85b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85b1e:	bf00      	nop
   85b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85b22:	bc08      	pop	{r3}
   85b24:	469e      	mov	lr, r3
   85b26:	4770      	bx	lr

00085b28 <__fini_array_start>:
   85b28:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701c4 	.word	0x200701c4

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <sysfont>:
20070138:	00000000 00083f30 7d20100a              ....0?.... }

20070144 <membag_list>:
20070144:	00000010 00000005 00000000 00000000     ................
	...
2007015c:	00000040 00000002 00000000 00000000     @...............
	...
20070174:	00000080 0000000a 00000000 00000000     ................
	...
2007018c:	00000020 00000004 00000000 00000000      ...............
	...
200701a4:	00000010 00000002 00000000 00000000     ................
	...

200701bc <xNextTaskUnblockTime>:
200701bc:	ffffffff                                ....

200701c0 <g_interrupt_enabled>:
200701c0:	00000001                                ....

200701c4 <SystemCoreClock>:
200701c4:	003d0900                                ..=.

200701c8 <atmel_logo_small>:
200701c8:	001a004e 00000002 00084af0              N........J..

200701d4 <updatedisplay>:
200701d4:	00000001                                ....

200701d8 <_impure_ptr>:
200701d8:	200701e0 00000000                       ... ....

200701e0 <impure_data>:
200701e0:	00000000 200704cc 20070534 2007059c     ....... 4.. ... 
	...
20070288:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070298:	0005deec 0000000b 00000000 00000000     ................
	...

20070608 <__atexit_recursive_mutex>:
20070608:	2007130c                                ... 

2007060c <__malloc_av_>:
	...
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 
200709f4:	200709ec 200709ec 200709f4 200709f4     ... ... ... ... 
20070a04:	200709fc 200709fc 20070a04 20070a04     ... ... ... ... 

20070a14 <__malloc_sbrk_base>:
20070a14:	ffffffff                                ....

20070a18 <__malloc_trim_threshold>:
20070a18:	00020000                                ....
