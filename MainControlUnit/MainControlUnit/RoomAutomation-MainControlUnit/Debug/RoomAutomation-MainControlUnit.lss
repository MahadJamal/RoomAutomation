
RoomAutomation-MainControlUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002684  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000984  20070000  00082684  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000188  20070984  00083008  00020984  2**2
                  ALLOC
  3 .stack        00002004  20070b0c  00083190  00020984  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00020984  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000209ad  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001b8bf  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c0a  00000000  00000000  0003c2c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000786b  00000000  00000000  0003fecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c40  00000000  00000000  0004773a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c90  00000000  00000000  0004837a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a1f8  00000000  00000000  0004900a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010c57  00000000  00000000  00063202  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006a6d0  00000000  00000000  00073e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002310  00000000  00000000  000de52c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 2b 07 20 41 11 08 00 3d 11 08 00 3d 11 08 00     .+. A...=...=...
   80010:	3d 11 08 00 3d 11 08 00 3d 11 08 00 00 00 00 00     =...=...=.......
	...
   8002c:	e9 09 08 00 3d 11 08 00 00 00 00 00 21 0a 08 00     ....=.......!...
   8003c:	5d 0a 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     ]...=...=...=...
   8004c:	3d 11 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     =...=...=...=...
   8005c:	3d 11 08 00 3d 11 08 00 3d 11 08 00 00 00 00 00     =...=...=.......
   8006c:	b1 0f 08 00 c5 0f 08 00 d9 0f 08 00 ed 0f 08 00     ................
	...
   80084:	3d 11 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     =...=...=...=...
   80094:	3d 11 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     =...=...=...=...
   800a4:	00 00 00 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     ....=...=...=...
   800b4:	3d 11 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     =...=...=...=...
   800c4:	3d 11 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     =...=...=...=...
   800d4:	3d 11 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     =...=...=...=...
   800e4:	3d 11 08 00 3d 11 08 00 3d 11 08 00 3d 11 08 00     =...=...=...=...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070984 	.word	0x20070984
   80110:	00000000 	.word	0x00000000
   80114:	00082684 	.word	0x00082684

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082684 	.word	0x00082684
   80154:	20070988 	.word	0x20070988
   80158:	00082684 	.word	0x00082684
   8015c:	00000000 	.word	0x00000000

00080160 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80160:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80164:	4b0b      	ldr	r3, [pc, #44]	; (80194 <ili9341_send_command+0x34>)
   80166:	635a      	str	r2, [r3, #52]	; 0x34
   80168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8016c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80170:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80172:	4a09      	ldr	r2, [pc, #36]	; (80198 <ili9341_send_command+0x38>)
   80174:	6913      	ldr	r3, [r2, #16]
		/* Do nothing */
	}
#  endif
#elif defined(CONF_ILI9341_SPI)
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80176:	f413 7f00 	tst.w	r3, #512	; 0x200
   8017a:	d0fb      	beq.n	80174 <ili9341_send_command+0x14>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8017c:	4b06      	ldr	r3, [pc, #24]	; (80198 <ili9341_send_command+0x38>)
   8017e:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80180:	461a      	mov	r2, r3
   80182:	6913      	ldr	r3, [r2, #16]
   80184:	f413 7f00 	tst.w	r3, #512	; 0x200
   80188:	d0fb      	beq.n	80182 <ili9341_send_command+0x22>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8018a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8018e:	4b01      	ldr	r3, [pc, #4]	; (80194 <ili9341_send_command+0x34>)
   80190:	631a      	str	r2, [r3, #48]	; 0x30
   80192:	4770      	bx	lr
   80194:	400e1200 	.word	0x400e1200
   80198:	40008000 	.word	0x40008000

0008019c <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
   8019c:	b510      	push	{r4, lr}
   8019e:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
   801a0:	202a      	movs	r0, #42	; 0x2a
   801a2:	4b35      	ldr	r3, [pc, #212]	; (80278 <ili9341_send_draw_limits+0xdc>)
   801a4:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
   801a6:	4b35      	ldr	r3, [pc, #212]	; (8027c <ili9341_send_draw_limits+0xe0>)
   801a8:	f9b3 1000 	ldrsh.w	r1, [r3]
   801ac:	f3c1 2007 	ubfx	r0, r1, #8, #8
   801b0:	4a33      	ldr	r2, [pc, #204]	; (80280 <ili9341_send_draw_limits+0xe4>)
   801b2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801b4:	f413 7f00 	tst.w	r3, #512	; 0x200
   801b8:	d0fb      	beq.n	801b2 <ili9341_send_draw_limits+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801ba:	4b31      	ldr	r3, [pc, #196]	; (80280 <ili9341_send_draw_limits+0xe4>)
   801bc:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
   801be:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801c0:	461a      	mov	r2, r3
   801c2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801c4:	f413 7f00 	tst.w	r3, #512	; 0x200
   801c8:	d0fb      	beq.n	801c2 <ili9341_send_draw_limits+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801ca:	4b2d      	ldr	r3, [pc, #180]	; (80280 <ili9341_send_draw_limits+0xe4>)
   801cc:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   801ce:	b19c      	cbz	r4, 801f8 <ili9341_send_draw_limits+0x5c>
		ili9341_send_byte(limit_end_x >> 8);
   801d0:	4b2c      	ldr	r3, [pc, #176]	; (80284 <ili9341_send_draw_limits+0xe8>)
   801d2:	f9b3 1000 	ldrsh.w	r1, [r3]
   801d6:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801da:	4a29      	ldr	r2, [pc, #164]	; (80280 <ili9341_send_draw_limits+0xe4>)
   801dc:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801de:	f413 7f00 	tst.w	r3, #512	; 0x200
   801e2:	d0fb      	beq.n	801dc <ili9341_send_draw_limits+0x40>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801e4:	4b26      	ldr	r3, [pc, #152]	; (80280 <ili9341_send_draw_limits+0xe4>)
   801e6:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
   801e8:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801ea:	461a      	mov	r2, r3
   801ec:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   801ee:	f413 7f00 	tst.w	r3, #512	; 0x200
   801f2:	d0fb      	beq.n	801ec <ili9341_send_draw_limits+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   801f4:	4b22      	ldr	r3, [pc, #136]	; (80280 <ili9341_send_draw_limits+0xe4>)
   801f6:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   801f8:	4a21      	ldr	r2, [pc, #132]	; (80280 <ili9341_send_draw_limits+0xe4>)
   801fa:	6913      	ldr	r3, [r2, #16]
   801fc:	f413 7f00 	tst.w	r3, #512	; 0x200
   80200:	d0fb      	beq.n	801fa <ili9341_send_draw_limits+0x5e>
   80202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80206:	4b20      	ldr	r3, [pc, #128]	; (80288 <ili9341_send_draw_limits+0xec>)
   80208:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
   8020a:	202b      	movs	r0, #43	; 0x2b
   8020c:	4b1a      	ldr	r3, [pc, #104]	; (80278 <ili9341_send_draw_limits+0xdc>)
   8020e:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
   80210:	4b1e      	ldr	r3, [pc, #120]	; (8028c <ili9341_send_draw_limits+0xf0>)
   80212:	f9b3 1000 	ldrsh.w	r1, [r3]
   80216:	f3c1 2007 	ubfx	r0, r1, #8, #8
   8021a:	4a19      	ldr	r2, [pc, #100]	; (80280 <ili9341_send_draw_limits+0xe4>)
   8021c:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8021e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80222:	d0fb      	beq.n	8021c <ili9341_send_draw_limits+0x80>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80224:	4b16      	ldr	r3, [pc, #88]	; (80280 <ili9341_send_draw_limits+0xe4>)
   80226:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
   80228:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8022a:	461a      	mov	r2, r3
   8022c:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8022e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80232:	d0fb      	beq.n	8022c <ili9341_send_draw_limits+0x90>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80234:	4b12      	ldr	r3, [pc, #72]	; (80280 <ili9341_send_draw_limits+0xe4>)
   80236:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   80238:	b19c      	cbz	r4, 80262 <ili9341_send_draw_limits+0xc6>
		ili9341_send_byte(limit_end_y >> 8);
   8023a:	4b15      	ldr	r3, [pc, #84]	; (80290 <ili9341_send_draw_limits+0xf4>)
   8023c:	f9b3 1000 	ldrsh.w	r1, [r3]
   80240:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80244:	4a0e      	ldr	r2, [pc, #56]	; (80280 <ili9341_send_draw_limits+0xe4>)
   80246:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80248:	f413 7f00 	tst.w	r3, #512	; 0x200
   8024c:	d0fb      	beq.n	80246 <ili9341_send_draw_limits+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8024e:	4b0c      	ldr	r3, [pc, #48]	; (80280 <ili9341_send_draw_limits+0xe4>)
   80250:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
   80252:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80254:	461a      	mov	r2, r3
   80256:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80258:	f413 7f00 	tst.w	r3, #512	; 0x200
   8025c:	d0fb      	beq.n	80256 <ili9341_send_draw_limits+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8025e:	4b08      	ldr	r3, [pc, #32]	; (80280 <ili9341_send_draw_limits+0xe4>)
   80260:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80262:	4a07      	ldr	r2, [pc, #28]	; (80280 <ili9341_send_draw_limits+0xe4>)
   80264:	6913      	ldr	r3, [r2, #16]
   80266:	f413 7f00 	tst.w	r3, #512	; 0x200
   8026a:	d0fb      	beq.n	80264 <ili9341_send_draw_limits+0xc8>
   8026c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80270:	4b05      	ldr	r3, [pc, #20]	; (80288 <ili9341_send_draw_limits+0xec>)
   80272:	631a      	str	r2, [r3, #48]	; 0x30
   80274:	bd10      	pop	{r4, pc}
   80276:	bf00      	nop
   80278:	00080161 	.word	0x00080161
   8027c:	200709a4 	.word	0x200709a4
   80280:	40008000 	.word	0x40008000
   80284:	200709a0 	.word	0x200709a0
   80288:	400e0e00 	.word	0x400e0e00
   8028c:	200709a6 	.word	0x200709a6
   80290:	200709a2 	.word	0x200709a2

00080294 <ili9341_set_top_left_limit>:
 *
 * \param x The x coordinate of the top left corner
 * \param y The y coordinate of the top left corner
 */
void ili9341_set_top_left_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   80294:	b508      	push	{r3, lr}
	limit_start_x = x;
   80296:	4b04      	ldr	r3, [pc, #16]	; (802a8 <ili9341_set_top_left_limit+0x14>)
   80298:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
   8029a:	4b04      	ldr	r3, [pc, #16]	; (802ac <ili9341_set_top_left_limit+0x18>)
   8029c:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(false);
   8029e:	2000      	movs	r0, #0
   802a0:	4b03      	ldr	r3, [pc, #12]	; (802b0 <ili9341_set_top_left_limit+0x1c>)
   802a2:	4798      	blx	r3
   802a4:	bd08      	pop	{r3, pc}
   802a6:	bf00      	nop
   802a8:	200709a4 	.word	0x200709a4
   802ac:	200709a6 	.word	0x200709a6
   802b0:	0008019d 	.word	0x0008019d

000802b4 <ili9341_set_bottom_right_limit>:
 *
 * \param x The x coordinate of the bottom right corner
 * \param y The y coordinate of the bottom right corner
 */
void ili9341_set_bottom_right_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   802b4:	b508      	push	{r3, lr}
	limit_end_x = x;
   802b6:	4b04      	ldr	r3, [pc, #16]	; (802c8 <ili9341_set_bottom_right_limit+0x14>)
   802b8:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
   802ba:	4b04      	ldr	r3, [pc, #16]	; (802cc <ili9341_set_bottom_right_limit+0x18>)
   802bc:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(true);
   802be:	2001      	movs	r0, #1
   802c0:	4b03      	ldr	r3, [pc, #12]	; (802d0 <ili9341_set_bottom_right_limit+0x1c>)
   802c2:	4798      	blx	r3
   802c4:	bd08      	pop	{r3, pc}
   802c6:	bf00      	nop
   802c8:	200709a0 	.word	0x200709a0
   802cc:	200709a2 	.word	0x200709a2
   802d0:	0008019d 	.word	0x0008019d

000802d4 <ili9341_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
   802d4:	b510      	push	{r4, lr}
	limit_start_x = start_x;
   802d6:	4c06      	ldr	r4, [pc, #24]	; (802f0 <ili9341_set_limits+0x1c>)
   802d8:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
   802da:	4806      	ldr	r0, [pc, #24]	; (802f4 <ili9341_set_limits+0x20>)
   802dc:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
   802de:	4906      	ldr	r1, [pc, #24]	; (802f8 <ili9341_set_limits+0x24>)
   802e0:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
   802e2:	4a06      	ldr	r2, [pc, #24]	; (802fc <ili9341_set_limits+0x28>)
   802e4:	8013      	strh	r3, [r2, #0]

	ili9341_send_draw_limits(true);
   802e6:	2001      	movs	r0, #1
   802e8:	4b05      	ldr	r3, [pc, #20]	; (80300 <ili9341_set_limits+0x2c>)
   802ea:	4798      	blx	r3
   802ec:	bd10      	pop	{r4, pc}
   802ee:	bf00      	nop
   802f0:	200709a4 	.word	0x200709a4
   802f4:	200709a6 	.word	0x200709a6
   802f8:	200709a0 	.word	0x200709a0
   802fc:	200709a2 	.word	0x200709a2
   80300:	0008019d 	.word	0x0008019d

00080304 <ili9341_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9341_duplicate_pixel(const ili9341_color_t color, uint32_t count)
{
   80304:	b538      	push	{r3, r4, r5, lr}
   80306:	4604      	mov	r4, r0
   80308:	460d      	mov	r5, r1
	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   8030a:	202c      	movs	r0, #44	; 0x2c
   8030c:	4b0f      	ldr	r3, [pc, #60]	; (8034c <ili9341_duplicate_pixel+0x48>)
   8030e:	4798      	blx	r3
	pdc_disable_transfer(SPI_DMA, PERIPH_PTCR_TXTEN);
#  elif UC3
	pdca_disable(CONF_ILI9341_PDCA_CHANNEL);
#  endif
#else
	while (count--) {
   80310:	b18d      	cbz	r5, 80336 <ili9341_duplicate_pixel+0x32>
   80312:	1e69      	subs	r1, r5, #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80314:	0a25      	lsrs	r5, r4, #8
		ili9341_send_byte(color);
   80316:	b2e4      	uxtb	r4, r4
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80318:	4b0d      	ldr	r3, [pc, #52]	; (80350 <ili9341_duplicate_pixel+0x4c>)
   8031a:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8031c:	f412 7f00 	tst.w	r2, #512	; 0x200
   80320:	d0fb      	beq.n	8031a <ili9341_duplicate_pixel+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80322:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80324:	691a      	ldr	r2, [r3, #16]
   80326:	f412 7f00 	tst.w	r2, #512	; 0x200
   8032a:	d0fb      	beq.n	80324 <ili9341_duplicate_pixel+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8032c:	60dd      	str	r5, [r3, #12]
	while (count--) {
   8032e:	3901      	subs	r1, #1
   80330:	f1b1 3fff 	cmp.w	r1, #4294967295
   80334:	d1f1      	bne.n	8031a <ili9341_duplicate_pixel+0x16>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80336:	4a06      	ldr	r2, [pc, #24]	; (80350 <ili9341_duplicate_pixel+0x4c>)
   80338:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8033a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8033e:	d0fb      	beq.n	80338 <ili9341_duplicate_pixel+0x34>
   80340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80344:	4b03      	ldr	r3, [pc, #12]	; (80354 <ili9341_duplicate_pixel+0x50>)
   80346:	631a      	str	r2, [r3, #48]	; 0x30
   80348:	bd38      	pop	{r3, r4, r5, pc}
   8034a:	bf00      	nop
   8034c:	00080161 	.word	0x00080161
   80350:	40008000 	.word	0x40008000
   80354:	400e0e00 	.word	0x400e0e00

00080358 <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
   80358:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
   8035a:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
   8035e:	f000 0301 	and.w	r3, r0, #1
		madctl &= ~(1 << 6);
   80362:	2b00      	cmp	r3, #0
   80364:	bf0c      	ite	eq
   80366:	2448      	moveq	r4, #72	; 0x48
   80368:	2408      	movne	r4, #8
	}

	if (flags & ILI9341_FLIP_Y) {
   8036a:	f010 0f02 	tst.w	r0, #2
		madctl |= 1 << 7;
   8036e:	bf18      	it	ne
   80370:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
   80374:	f010 0f04 	tst.w	r0, #4
		madctl |= 1 << 5;
   80378:	bf18      	it	ne
   8037a:	f044 0420 	orrne.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
   8037e:	2036      	movs	r0, #54	; 0x36
   80380:	4b09      	ldr	r3, [pc, #36]	; (803a8 <ili9341_set_orientation+0x50>)
   80382:	4798      	blx	r3
   80384:	4a09      	ldr	r2, [pc, #36]	; (803ac <ili9341_set_orientation+0x54>)
   80386:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80388:	f413 7f00 	tst.w	r3, #512	; 0x200
   8038c:	d0fb      	beq.n	80386 <ili9341_set_orientation+0x2e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8038e:	4b07      	ldr	r3, [pc, #28]	; (803ac <ili9341_set_orientation+0x54>)
   80390:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80392:	461a      	mov	r2, r3
   80394:	6913      	ldr	r3, [r2, #16]
   80396:	f413 7f00 	tst.w	r3, #512	; 0x200
   8039a:	d0fb      	beq.n	80394 <ili9341_set_orientation+0x3c>
   8039c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   803a0:	4b03      	ldr	r3, [pc, #12]	; (803b0 <ili9341_set_orientation+0x58>)
   803a2:	631a      	str	r2, [r3, #48]	; 0x30
   803a4:	bd10      	pop	{r4, pc}
   803a6:	bf00      	nop
   803a8:	00080161 	.word	0x00080161
   803ac:	40008000 	.word	0x40008000
   803b0:	400e0e00 	.word	0x400e0e00

000803b4 <ili9341_init>:
{
   803b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803b8:	b084      	sub	sp, #16
	struct spi_device device = {
   803ba:	2500      	movs	r5, #0
   803bc:	ae04      	add	r6, sp, #16
   803be:	f846 5d04 	str.w	r5, [r6, #-4]!
	spi_master_init(CONF_ILI9341_SPI);
   803c2:	4ca5      	ldr	r4, [pc, #660]	; (80658 <ili9341_init+0x2a4>)
   803c4:	4620      	mov	r0, r4
   803c6:	4ba5      	ldr	r3, [pc, #660]	; (8065c <ili9341_init+0x2a8>)
   803c8:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags,
   803ca:	9500      	str	r5, [sp, #0]
   803cc:	4ba4      	ldr	r3, [pc, #656]	; (80660 <ili9341_init+0x2ac>)
   803ce:	462a      	mov	r2, r5
   803d0:	4631      	mov	r1, r6
   803d2:	4620      	mov	r0, r4
   803d4:	4ea3      	ldr	r6, [pc, #652]	; (80664 <ili9341_init+0x2b0>)
   803d6:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
   803d8:	2301      	movs	r3, #1
   803da:	6023      	str	r3, [r4, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   803dc:	60e5      	str	r5, [r4, #12]
   803de:	4da2      	ldr	r5, [pc, #648]	; (80668 <ili9341_init+0x2b4>)
   803e0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   803e4:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(10);
   803e6:	f64e 2060 	movw	r0, #60000	; 0xea60
   803ea:	4ca0      	ldr	r4, [pc, #640]	; (8066c <ili9341_init+0x2b8>)
   803ec:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803ee:	636e      	str	r6, [r5, #52]	; 0x34
	delay_ms(10);
   803f0:	f64e 2060 	movw	r0, #60000	; 0xea60
   803f4:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   803f6:	632e      	str	r6, [r5, #48]	; 0x30
	delay_ms(150);
   803f8:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8067c <ili9341_init+0x2c8>
   803fc:	4640      	mov	r0, r8
   803fe:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
   80400:	2011      	movs	r0, #17
   80402:	4d9b      	ldr	r5, [pc, #620]	; (80670 <ili9341_init+0x2bc>)
   80404:	47a8      	blx	r5
   80406:	4e9b      	ldr	r6, [pc, #620]	; (80674 <ili9341_init+0x2c0>)
   80408:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
   8040c:	6337      	str	r7, [r6, #48]	; 0x30
	delay_ms(150);
   8040e:	4640      	mov	r0, r8
   80410:	47a0      	blx	r4
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
   80412:	2029      	movs	r0, #41	; 0x29
   80414:	47a8      	blx	r5
   80416:	6337      	str	r7, [r6, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
   80418:	20cd      	movs	r0, #205	; 0xcd
   8041a:	47a8      	blx	r5
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8041c:	4a8e      	ldr	r2, [pc, #568]	; (80658 <ili9341_init+0x2a4>)
   8041e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80420:	f413 7f00 	tst.w	r3, #512	; 0x200
   80424:	d0fb      	beq.n	8041e <ili9341_init+0x6a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80426:	2239      	movs	r2, #57	; 0x39
   80428:	4b8b      	ldr	r3, [pc, #556]	; (80658 <ili9341_init+0x2a4>)
   8042a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8042c:	461a      	mov	r2, r3
   8042e:	6913      	ldr	r3, [r2, #16]
   80430:	f413 7f00 	tst.w	r3, #512	; 0x200
   80434:	d0fb      	beq.n	8042e <ili9341_init+0x7a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80436:	222c      	movs	r2, #44	; 0x2c
   80438:	4b87      	ldr	r3, [pc, #540]	; (80658 <ili9341_init+0x2a4>)
   8043a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8043c:	461a      	mov	r2, r3
   8043e:	6913      	ldr	r3, [r2, #16]
   80440:	f413 7f00 	tst.w	r3, #512	; 0x200
   80444:	d0fb      	beq.n	8043e <ili9341_init+0x8a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80446:	2200      	movs	r2, #0
   80448:	4b83      	ldr	r3, [pc, #524]	; (80658 <ili9341_init+0x2a4>)
   8044a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8044c:	461a      	mov	r2, r3
   8044e:	6913      	ldr	r3, [r2, #16]
   80450:	f413 7f00 	tst.w	r3, #512	; 0x200
   80454:	d0fb      	beq.n	8044e <ili9341_init+0x9a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80456:	2234      	movs	r2, #52	; 0x34
   80458:	4b7f      	ldr	r3, [pc, #508]	; (80658 <ili9341_init+0x2a4>)
   8045a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8045c:	461a      	mov	r2, r3
   8045e:	6913      	ldr	r3, [r2, #16]
   80460:	f413 7f00 	tst.w	r3, #512	; 0x200
   80464:	d0fb      	beq.n	8045e <ili9341_init+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80466:	2202      	movs	r2, #2
   80468:	4b7b      	ldr	r3, [pc, #492]	; (80658 <ili9341_init+0x2a4>)
   8046a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8046c:	461a      	mov	r2, r3
   8046e:	6913      	ldr	r3, [r2, #16]
   80470:	f413 7f00 	tst.w	r3, #512	; 0x200
   80474:	d0fb      	beq.n	8046e <ili9341_init+0xba>
   80476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8047a:	4b7e      	ldr	r3, [pc, #504]	; (80674 <ili9341_init+0x2c0>)
   8047c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
   8047e:	20cf      	movs	r0, #207	; 0xcf
   80480:	4b7b      	ldr	r3, [pc, #492]	; (80670 <ili9341_init+0x2bc>)
   80482:	4798      	blx	r3
   80484:	4a74      	ldr	r2, [pc, #464]	; (80658 <ili9341_init+0x2a4>)
   80486:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80488:	f413 7f00 	tst.w	r3, #512	; 0x200
   8048c:	d0fb      	beq.n	80486 <ili9341_init+0xd2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8048e:	2200      	movs	r2, #0
   80490:	4b71      	ldr	r3, [pc, #452]	; (80658 <ili9341_init+0x2a4>)
   80492:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80494:	461a      	mov	r2, r3
   80496:	6913      	ldr	r3, [r2, #16]
   80498:	f413 7f00 	tst.w	r3, #512	; 0x200
   8049c:	d0fb      	beq.n	80496 <ili9341_init+0xe2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8049e:	22aa      	movs	r2, #170	; 0xaa
   804a0:	4b6d      	ldr	r3, [pc, #436]	; (80658 <ili9341_init+0x2a4>)
   804a2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804a4:	461a      	mov	r2, r3
   804a6:	6913      	ldr	r3, [r2, #16]
   804a8:	f413 7f00 	tst.w	r3, #512	; 0x200
   804ac:	d0fb      	beq.n	804a6 <ili9341_init+0xf2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804ae:	22b0      	movs	r2, #176	; 0xb0
   804b0:	4b69      	ldr	r3, [pc, #420]	; (80658 <ili9341_init+0x2a4>)
   804b2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804b4:	461a      	mov	r2, r3
   804b6:	6913      	ldr	r3, [r2, #16]
   804b8:	f413 7f00 	tst.w	r3, #512	; 0x200
   804bc:	d0fb      	beq.n	804b6 <ili9341_init+0x102>
   804be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   804c2:	4b6c      	ldr	r3, [pc, #432]	; (80674 <ili9341_init+0x2c0>)
   804c4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
   804c6:	20f7      	movs	r0, #247	; 0xf7
   804c8:	4b69      	ldr	r3, [pc, #420]	; (80670 <ili9341_init+0x2bc>)
   804ca:	4798      	blx	r3
   804cc:	4a62      	ldr	r2, [pc, #392]	; (80658 <ili9341_init+0x2a4>)
   804ce:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804d0:	f413 7f00 	tst.w	r3, #512	; 0x200
   804d4:	d0fb      	beq.n	804ce <ili9341_init+0x11a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804d6:	2230      	movs	r2, #48	; 0x30
   804d8:	4b5f      	ldr	r3, [pc, #380]	; (80658 <ili9341_init+0x2a4>)
   804da:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804dc:	461a      	mov	r2, r3
   804de:	6913      	ldr	r3, [r2, #16]
   804e0:	f413 7f00 	tst.w	r3, #512	; 0x200
   804e4:	d0fb      	beq.n	804de <ili9341_init+0x12a>
   804e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   804ea:	4b62      	ldr	r3, [pc, #392]	; (80674 <ili9341_init+0x2c0>)
   804ec:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
   804ee:	20c0      	movs	r0, #192	; 0xc0
   804f0:	4b5f      	ldr	r3, [pc, #380]	; (80670 <ili9341_init+0x2bc>)
   804f2:	4798      	blx	r3
   804f4:	4a58      	ldr	r2, [pc, #352]	; (80658 <ili9341_init+0x2a4>)
   804f6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804f8:	f413 7f00 	tst.w	r3, #512	; 0x200
   804fc:	d0fb      	beq.n	804f6 <ili9341_init+0x142>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804fe:	2225      	movs	r2, #37	; 0x25
   80500:	4b55      	ldr	r3, [pc, #340]	; (80658 <ili9341_init+0x2a4>)
   80502:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80504:	461a      	mov	r2, r3
   80506:	6913      	ldr	r3, [r2, #16]
   80508:	f413 7f00 	tst.w	r3, #512	; 0x200
   8050c:	d0fb      	beq.n	80506 <ili9341_init+0x152>
   8050e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80512:	4b58      	ldr	r3, [pc, #352]	; (80674 <ili9341_init+0x2c0>)
   80514:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
   80516:	20c1      	movs	r0, #193	; 0xc1
   80518:	4b55      	ldr	r3, [pc, #340]	; (80670 <ili9341_init+0x2bc>)
   8051a:	4798      	blx	r3
   8051c:	4a4e      	ldr	r2, [pc, #312]	; (80658 <ili9341_init+0x2a4>)
   8051e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80520:	f413 7f00 	tst.w	r3, #512	; 0x200
   80524:	d0fb      	beq.n	8051e <ili9341_init+0x16a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80526:	2211      	movs	r2, #17
   80528:	4b4b      	ldr	r3, [pc, #300]	; (80658 <ili9341_init+0x2a4>)
   8052a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8052c:	461a      	mov	r2, r3
   8052e:	6913      	ldr	r3, [r2, #16]
   80530:	f413 7f00 	tst.w	r3, #512	; 0x200
   80534:	d0fb      	beq.n	8052e <ili9341_init+0x17a>
   80536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8053a:	4b4e      	ldr	r3, [pc, #312]	; (80674 <ili9341_init+0x2c0>)
   8053c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
   8053e:	20c5      	movs	r0, #197	; 0xc5
   80540:	4b4b      	ldr	r3, [pc, #300]	; (80670 <ili9341_init+0x2bc>)
   80542:	4798      	blx	r3
   80544:	4a44      	ldr	r2, [pc, #272]	; (80658 <ili9341_init+0x2a4>)
   80546:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80548:	f413 7f00 	tst.w	r3, #512	; 0x200
   8054c:	d0fb      	beq.n	80546 <ili9341_init+0x192>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8054e:	225c      	movs	r2, #92	; 0x5c
   80550:	4b41      	ldr	r3, [pc, #260]	; (80658 <ili9341_init+0x2a4>)
   80552:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80554:	461a      	mov	r2, r3
   80556:	6913      	ldr	r3, [r2, #16]
   80558:	f413 7f00 	tst.w	r3, #512	; 0x200
   8055c:	d0fb      	beq.n	80556 <ili9341_init+0x1a2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8055e:	224c      	movs	r2, #76	; 0x4c
   80560:	4b3d      	ldr	r3, [pc, #244]	; (80658 <ili9341_init+0x2a4>)
   80562:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80564:	461a      	mov	r2, r3
   80566:	6913      	ldr	r3, [r2, #16]
   80568:	f413 7f00 	tst.w	r3, #512	; 0x200
   8056c:	d0fb      	beq.n	80566 <ili9341_init+0x1b2>
   8056e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80572:	4b40      	ldr	r3, [pc, #256]	; (80674 <ili9341_init+0x2c0>)
   80574:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
   80576:	20c7      	movs	r0, #199	; 0xc7
   80578:	4b3d      	ldr	r3, [pc, #244]	; (80670 <ili9341_init+0x2bc>)
   8057a:	4798      	blx	r3
   8057c:	4a36      	ldr	r2, [pc, #216]	; (80658 <ili9341_init+0x2a4>)
   8057e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80580:	f413 7f00 	tst.w	r3, #512	; 0x200
   80584:	d0fb      	beq.n	8057e <ili9341_init+0x1ca>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80586:	2294      	movs	r2, #148	; 0x94
   80588:	4b33      	ldr	r3, [pc, #204]	; (80658 <ili9341_init+0x2a4>)
   8058a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8058c:	461a      	mov	r2, r3
   8058e:	6913      	ldr	r3, [r2, #16]
   80590:	f413 7f00 	tst.w	r3, #512	; 0x200
   80594:	d0fb      	beq.n	8058e <ili9341_init+0x1da>
   80596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8059a:	4b36      	ldr	r3, [pc, #216]	; (80674 <ili9341_init+0x2c0>)
   8059c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
   8059e:	20e8      	movs	r0, #232	; 0xe8
   805a0:	4b33      	ldr	r3, [pc, #204]	; (80670 <ili9341_init+0x2bc>)
   805a2:	4798      	blx	r3
   805a4:	4a2c      	ldr	r2, [pc, #176]	; (80658 <ili9341_init+0x2a4>)
   805a6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   805a8:	f413 7f00 	tst.w	r3, #512	; 0x200
   805ac:	d0fb      	beq.n	805a6 <ili9341_init+0x1f2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805ae:	2285      	movs	r2, #133	; 0x85
   805b0:	4b29      	ldr	r3, [pc, #164]	; (80658 <ili9341_init+0x2a4>)
   805b2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805b4:	461a      	mov	r2, r3
   805b6:	6913      	ldr	r3, [r2, #16]
   805b8:	f413 7f00 	tst.w	r3, #512	; 0x200
   805bc:	d0fb      	beq.n	805b6 <ili9341_init+0x202>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805be:	2201      	movs	r2, #1
   805c0:	4b25      	ldr	r3, [pc, #148]	; (80658 <ili9341_init+0x2a4>)
   805c2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805c4:	461a      	mov	r2, r3
   805c6:	6913      	ldr	r3, [r2, #16]
   805c8:	f413 7f00 	tst.w	r3, #512	; 0x200
   805cc:	d0fb      	beq.n	805c6 <ili9341_init+0x212>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805ce:	2278      	movs	r2, #120	; 0x78
   805d0:	4b21      	ldr	r3, [pc, #132]	; (80658 <ili9341_init+0x2a4>)
   805d2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805d4:	461a      	mov	r2, r3
   805d6:	6913      	ldr	r3, [r2, #16]
   805d8:	f413 7f00 	tst.w	r3, #512	; 0x200
   805dc:	d0fb      	beq.n	805d6 <ili9341_init+0x222>
   805de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   805e2:	4b24      	ldr	r3, [pc, #144]	; (80674 <ili9341_init+0x2c0>)
   805e4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
   805e6:	20ea      	movs	r0, #234	; 0xea
   805e8:	4b21      	ldr	r3, [pc, #132]	; (80670 <ili9341_init+0x2bc>)
   805ea:	4798      	blx	r3
   805ec:	4a1a      	ldr	r2, [pc, #104]	; (80658 <ili9341_init+0x2a4>)
   805ee:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   805f0:	f413 7f00 	tst.w	r3, #512	; 0x200
   805f4:	d0fb      	beq.n	805ee <ili9341_init+0x23a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805f6:	2200      	movs	r2, #0
   805f8:	4b17      	ldr	r3, [pc, #92]	; (80658 <ili9341_init+0x2a4>)
   805fa:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805fc:	461a      	mov	r2, r3
   805fe:	6913      	ldr	r3, [r2, #16]
   80600:	f413 7f00 	tst.w	r3, #512	; 0x200
   80604:	d0fb      	beq.n	805fe <ili9341_init+0x24a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80606:	2200      	movs	r2, #0
   80608:	4b13      	ldr	r3, [pc, #76]	; (80658 <ili9341_init+0x2a4>)
   8060a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8060c:	461a      	mov	r2, r3
   8060e:	6913      	ldr	r3, [r2, #16]
   80610:	f413 7f00 	tst.w	r3, #512	; 0x200
   80614:	d0fb      	beq.n	8060e <ili9341_init+0x25a>
   80616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8061a:	4b16      	ldr	r3, [pc, #88]	; (80674 <ili9341_init+0x2c0>)
   8061c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
   8061e:	203a      	movs	r0, #58	; 0x3a
   80620:	4b13      	ldr	r3, [pc, #76]	; (80670 <ili9341_init+0x2bc>)
   80622:	4798      	blx	r3
   80624:	4a0c      	ldr	r2, [pc, #48]	; (80658 <ili9341_init+0x2a4>)
   80626:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80628:	f413 7f00 	tst.w	r3, #512	; 0x200
   8062c:	d0fb      	beq.n	80626 <ili9341_init+0x272>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8062e:	2205      	movs	r2, #5
   80630:	4b09      	ldr	r3, [pc, #36]	; (80658 <ili9341_init+0x2a4>)
   80632:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80634:	461a      	mov	r2, r3
   80636:	6913      	ldr	r3, [r2, #16]
   80638:	f413 7f00 	tst.w	r3, #512	; 0x200
   8063c:	d0fb      	beq.n	80636 <ili9341_init+0x282>
   8063e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80642:	4b0c      	ldr	r3, [pc, #48]	; (80674 <ili9341_init+0x2c0>)
   80644:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
   80646:	2000      	movs	r0, #0
   80648:	4b0b      	ldr	r3, [pc, #44]	; (80678 <ili9341_init+0x2c4>)
   8064a:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
   8064c:	23f0      	movs	r3, #240	; 0xf0
   8064e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   80652:	2100      	movs	r1, #0
   80654:	4608      	mov	r0, r1
   80656:	e013      	b.n	80680 <ili9341_init+0x2cc>
   80658:	40008000 	.word	0x40008000
   8065c:	00080691 	.word	0x00080691
   80660:	007a1200 	.word	0x007a1200
   80664:	000806e5 	.word	0x000806e5
   80668:	400e1200 	.word	0x400e1200
   8066c:	20070001 	.word	0x20070001
   80670:	00080161 	.word	0x00080161
   80674:	400e0e00 	.word	0x400e0e00
   80678:	00080359 	.word	0x00080359
   8067c:	000dbba0 	.word	0x000dbba0
   80680:	4c02      	ldr	r4, [pc, #8]	; (8068c <ili9341_init+0x2d8>)
   80682:	47a0      	blx	r4
}
   80684:	b004      	add	sp, #16
   80686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8068a:	bf00      	nop
   8068c:	000802d5 	.word	0x000802d5

00080690 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
   80690:	b510      	push	{r4, lr}
   80692:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
   80694:	4b10      	ldr	r3, [pc, #64]	; (806d8 <spi_master_init+0x48>)
   80696:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80698:	2380      	movs	r3, #128	; 0x80
   8069a:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8069c:	6863      	ldr	r3, [r4, #4]
   8069e:	f043 0301 	orr.w	r3, r3, #1
   806a2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   806a4:	6863      	ldr	r3, [r4, #4]
   806a6:	f043 0310 	orr.w	r3, r3, #16
   806aa:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   806ac:	6863      	ldr	r3, [r4, #4]
   806ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   806b2:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
   806b4:	2100      	movs	r1, #0
   806b6:	4620      	mov	r0, r4
   806b8:	4b08      	ldr	r3, [pc, #32]	; (806dc <spi_master_init+0x4c>)
   806ba:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
   806bc:	6863      	ldr	r3, [r4, #4]
   806be:	f023 0302 	bic.w	r3, r3, #2
   806c2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   806c4:	6863      	ldr	r3, [r4, #4]
   806c6:	f023 0304 	bic.w	r3, r3, #4
   806ca:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
   806cc:	2100      	movs	r1, #0
   806ce:	4620      	mov	r0, r4
   806d0:	4b03      	ldr	r3, [pc, #12]	; (806e0 <spi_master_init+0x50>)
   806d2:	4798      	blx	r3
   806d4:	bd10      	pop	{r4, pc}
   806d6:	bf00      	nop
   806d8:	000807f1 	.word	0x000807f1
   806dc:	0008080d 	.word	0x0008080d
   806e0:	00080823 	.word	0x00080823

000806e4 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
   806e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806e8:	4604      	mov	r4, r0
   806ea:	460d      	mov	r5, r1
   806ec:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
   806ee:	4915      	ldr	r1, [pc, #84]	; (80744 <spi_master_setup_device+0x60>)
   806f0:	4618      	mov	r0, r3
   806f2:	4b15      	ldr	r3, [pc, #84]	; (80748 <spi_master_setup_device+0x64>)
   806f4:	4798      	blx	r3
   806f6:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
   806f8:	2300      	movs	r3, #0
   806fa:	461a      	mov	r2, r3
   806fc:	6829      	ldr	r1, [r5, #0]
   806fe:	4620      	mov	r0, r4
   80700:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80760 <spi_master_setup_device+0x7c>
   80704:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
   80706:	2208      	movs	r2, #8
   80708:	6829      	ldr	r1, [r5, #0]
   8070a:	4620      	mov	r0, r4
   8070c:	4b0f      	ldr	r3, [pc, #60]	; (8074c <spi_master_setup_device+0x68>)
   8070e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
   80710:	b2fa      	uxtb	r2, r7
   80712:	6829      	ldr	r1, [r5, #0]
   80714:	4620      	mov	r0, r4
   80716:	4b0e      	ldr	r3, [pc, #56]	; (80750 <spi_master_setup_device+0x6c>)
   80718:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
   8071a:	2208      	movs	r2, #8
   8071c:	6829      	ldr	r1, [r5, #0]
   8071e:	4620      	mov	r0, r4
   80720:	4b0c      	ldr	r3, [pc, #48]	; (80754 <spi_master_setup_device+0x70>)
   80722:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
   80724:	0872      	lsrs	r2, r6, #1
   80726:	6829      	ldr	r1, [r5, #0]
   80728:	4620      	mov	r0, r4
   8072a:	4b0b      	ldr	r3, [pc, #44]	; (80758 <spi_master_setup_device+0x74>)
   8072c:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
   8072e:	f086 0201 	eor.w	r2, r6, #1
   80732:	f002 0201 	and.w	r2, r2, #1
   80736:	6829      	ldr	r1, [r5, #0]
   80738:	4620      	mov	r0, r4
   8073a:	4b08      	ldr	r3, [pc, #32]	; (8075c <spi_master_setup_device+0x78>)
   8073c:	4798      	blx	r3
   8073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80742:	bf00      	nop
   80744:	0501bd00 	.word	0x0501bd00
   80748:	000808cb 	.word	0x000808cb
   8074c:	000808b7 	.word	0x000808b7
   80750:	000808e1 	.word	0x000808e1
   80754:	00080871 	.word	0x00080871
   80758:	00080835 	.word	0x00080835
   8075c:	00080853 	.word	0x00080853
   80760:	00080907 	.word	0x00080907

00080764 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80768:	b980      	cbnz	r0, 8078c <_read+0x28>
   8076a:	460c      	mov	r4, r1
   8076c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8076e:	2a00      	cmp	r2, #0
   80770:	dd0f      	ble.n	80792 <_read+0x2e>
   80772:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80774:	4e08      	ldr	r6, [pc, #32]	; (80798 <_read+0x34>)
   80776:	4d09      	ldr	r5, [pc, #36]	; (8079c <_read+0x38>)
   80778:	6830      	ldr	r0, [r6, #0]
   8077a:	4621      	mov	r1, r4
   8077c:	682b      	ldr	r3, [r5, #0]
   8077e:	4798      	blx	r3
		ptr++;
   80780:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80782:	42bc      	cmp	r4, r7
   80784:	d1f8      	bne.n	80778 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80786:	4640      	mov	r0, r8
   80788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8078c:	f04f 38ff 	mov.w	r8, #4294967295
   80790:	e7f9      	b.n	80786 <_read+0x22>
	for (; len > 0; --len) {
   80792:	4680      	mov	r8, r0
   80794:	e7f7      	b.n	80786 <_read+0x22>
   80796:	bf00      	nop
   80798:	20070ae0 	.word	0x20070ae0
   8079c:	20070ad8 	.word	0x20070ad8

000807a0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   807a0:	3801      	subs	r0, #1
   807a2:	2802      	cmp	r0, #2
   807a4:	d815      	bhi.n	807d2 <_write+0x32>
{
   807a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807aa:	460e      	mov	r6, r1
   807ac:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   807ae:	b19a      	cbz	r2, 807d8 <_write+0x38>
   807b0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   807b2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 807ec <_write+0x4c>
   807b6:	4f0c      	ldr	r7, [pc, #48]	; (807e8 <_write+0x48>)
   807b8:	f8d8 0000 	ldr.w	r0, [r8]
   807bc:	f815 1b01 	ldrb.w	r1, [r5], #1
   807c0:	683b      	ldr	r3, [r7, #0]
   807c2:	4798      	blx	r3
   807c4:	2800      	cmp	r0, #0
   807c6:	db0a      	blt.n	807de <_write+0x3e>
   807c8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   807ca:	3c01      	subs	r4, #1
   807cc:	d1f4      	bne.n	807b8 <_write+0x18>
   807ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   807d2:	f04f 30ff 	mov.w	r0, #4294967295
   807d6:	4770      	bx	lr
	for (; len != 0; --len) {
   807d8:	4610      	mov	r0, r2
   807da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   807de:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   807e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807e6:	bf00      	nop
   807e8:	20070adc 	.word	0x20070adc
   807ec:	20070ae0 	.word	0x20070ae0

000807f0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   807f0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   807f2:	4b04      	ldr	r3, [pc, #16]	; (80804 <spi_enable_clock+0x14>)
   807f4:	4298      	cmp	r0, r3
   807f6:	d000      	beq.n	807fa <spi_enable_clock+0xa>
   807f8:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   807fa:	2018      	movs	r0, #24
   807fc:	4b02      	ldr	r3, [pc, #8]	; (80808 <spi_enable_clock+0x18>)
   807fe:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   80800:	e7fa      	b.n	807f8 <spi_enable_clock+0x8>
   80802:	bf00      	nop
   80804:	40008000 	.word	0x40008000
   80808:	000810e9 	.word	0x000810e9

0008080c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   8080c:	6843      	ldr	r3, [r0, #4]
   8080e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80812:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   80814:	6843      	ldr	r3, [r0, #4]
   80816:	0409      	lsls	r1, r1, #16
   80818:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   8081c:	4319      	orrs	r1, r3
   8081e:	6041      	str	r1, [r0, #4]
   80820:	4770      	bx	lr

00080822 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   80822:	6843      	ldr	r3, [r0, #4]
   80824:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80828:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   8082a:	6843      	ldr	r3, [r0, #4]
   8082c:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   80830:	6041      	str	r1, [r0, #4]
   80832:	4770      	bx	lr

00080834 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   80834:	b932      	cbnz	r2, 80844 <spi_set_clock_polarity+0x10>
   80836:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8083a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8083c:	f023 0301 	bic.w	r3, r3, #1
   80840:	6303      	str	r3, [r0, #48]	; 0x30
   80842:	4770      	bx	lr
   80844:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80848:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8084a:	f043 0301 	orr.w	r3, r3, #1
   8084e:	6303      	str	r3, [r0, #48]	; 0x30
   80850:	4770      	bx	lr

00080852 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   80852:	b932      	cbnz	r2, 80862 <spi_set_clock_phase+0x10>
   80854:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80858:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8085a:	f023 0302 	bic.w	r3, r3, #2
   8085e:	6303      	str	r3, [r0, #48]	; 0x30
   80860:	4770      	bx	lr
   80862:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80866:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80868:	f043 0302 	orr.w	r3, r3, #2
   8086c:	6303      	str	r3, [r0, #48]	; 0x30
   8086e:	4770      	bx	lr

00080870 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   80870:	2a04      	cmp	r2, #4
   80872:	d003      	beq.n	8087c <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   80874:	b16a      	cbz	r2, 80892 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   80876:	2a08      	cmp	r2, #8
   80878:	d016      	beq.n	808a8 <spi_configure_cs_behavior+0x38>
   8087a:	4770      	bx	lr
   8087c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80880:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80882:	f023 0308 	bic.w	r3, r3, #8
   80886:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   80888:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8088a:	f043 0304 	orr.w	r3, r3, #4
   8088e:	6303      	str	r3, [r0, #48]	; 0x30
   80890:	4770      	bx	lr
   80892:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80896:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80898:	f023 0308 	bic.w	r3, r3, #8
   8089c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   8089e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   808a0:	f023 0304 	bic.w	r3, r3, #4
   808a4:	6303      	str	r3, [r0, #48]	; 0x30
   808a6:	4770      	bx	lr
   808a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   808ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
   808ae:	f043 0308 	orr.w	r3, r3, #8
   808b2:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   808b4:	e7e1      	b.n	8087a <spi_configure_cs_behavior+0xa>

000808b6 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   808b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   808ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   808bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   808c0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   808c2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   808c4:	431a      	orrs	r2, r3
   808c6:	630a      	str	r2, [r1, #48]	; 0x30
   808c8:	4770      	bx	lr

000808ca <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   808ca:	1e43      	subs	r3, r0, #1
   808cc:	4419      	add	r1, r3
   808ce:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   808d2:	1e43      	subs	r3, r0, #1
   808d4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   808d6:	bf94      	ite	ls
   808d8:	b200      	sxthls	r0, r0
		return -1;
   808da:	f04f 30ff 	movhi.w	r0, #4294967295
}
   808de:	4770      	bx	lr

000808e0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
   808e0:	b172      	cbz	r2, 80900 <spi_set_baudrate_div+0x20>
{
   808e2:	b410      	push	{r4}
   808e4:	4614      	mov	r4, r2
   808e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   808ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   808ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   808f0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   808f2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   808f4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   808f8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   808fa:	2000      	movs	r0, #0
}
   808fc:	bc10      	pop	{r4}
   808fe:	4770      	bx	lr
        return -1;
   80900:	f04f 30ff 	mov.w	r0, #4294967295
   80904:	4770      	bx	lr

00080906 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80906:	b410      	push	{r4}
   80908:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8090c:	6b08      	ldr	r0, [r1, #48]	; 0x30
   8090e:	b280      	uxth	r0, r0
   80910:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80912:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   80914:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   80918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8091c:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   8091e:	bc10      	pop	{r4}
   80920:	4770      	bx	lr

00080922 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80922:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80924:	23ac      	movs	r3, #172	; 0xac
   80926:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80928:	680b      	ldr	r3, [r1, #0]
   8092a:	684a      	ldr	r2, [r1, #4]
   8092c:	fbb3 f3f2 	udiv	r3, r3, r2
   80930:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80932:	1e5c      	subs	r4, r3, #1
   80934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80938:	4294      	cmp	r4, r2
   8093a:	d80b      	bhi.n	80954 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8093c:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8093e:	688b      	ldr	r3, [r1, #8]
   80940:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80942:	f240 2302 	movw	r3, #514	; 0x202
   80946:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8094a:	2350      	movs	r3, #80	; 0x50
   8094c:	6003      	str	r3, [r0, #0]

	return 0;
   8094e:	2000      	movs	r0, #0
}
   80950:	bc10      	pop	{r4}
   80952:	4770      	bx	lr
		return 1;
   80954:	2001      	movs	r0, #1
   80956:	e7fb      	b.n	80950 <uart_init+0x2e>

00080958 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80958:	6943      	ldr	r3, [r0, #20]
   8095a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8095e:	bf1a      	itte	ne
   80960:	61c1      	strne	r1, [r0, #28]
	return 0;
   80962:	2000      	movne	r0, #0
		return 1;
   80964:	2001      	moveq	r0, #1
}
   80966:	4770      	bx	lr

00080968 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80968:	6943      	ldr	r3, [r0, #20]
   8096a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8096e:	bf1d      	ittte	ne
   80970:	6983      	ldrne	r3, [r0, #24]
   80972:	700b      	strbne	r3, [r1, #0]
	return 0;
   80974:	2000      	movne	r0, #0
		return 1;
   80976:	2001      	moveq	r0, #1
}
   80978:	4770      	bx	lr

0008097a <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8097a:	6943      	ldr	r3, [r0, #20]
   8097c:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80980:	bf1d      	ittte	ne
   80982:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80986:	61c1      	strne	r1, [r0, #28]
	return 0;
   80988:	2000      	movne	r0, #0
		return 1;
   8098a:	2001      	moveq	r0, #1
}
   8098c:	4770      	bx	lr

0008098e <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8098e:	6943      	ldr	r3, [r0, #20]
   80990:	f013 0f01 	tst.w	r3, #1
   80994:	d005      	beq.n	809a2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80996:	6983      	ldr	r3, [r0, #24]
   80998:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8099c:	600b      	str	r3, [r1, #0]

	return 0;
   8099e:	2000      	movs	r0, #0
   809a0:	4770      	bx	lr
		return 1;
   809a2:	2001      	movs	r0, #1
}
   809a4:	4770      	bx	lr

000809a6 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   809a6:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   809a8:	685a      	ldr	r2, [r3, #4]
   809aa:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   809ac:	6842      	ldr	r2, [r0, #4]
   809ae:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   809b0:	685a      	ldr	r2, [r3, #4]
   809b2:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   809b4:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   809b6:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   809b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   809ba:	6803      	ldr	r3, [r0, #0]
   809bc:	3301      	adds	r3, #1
   809be:	6003      	str	r3, [r0, #0]
   809c0:	4770      	bx	lr

000809c2 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   809c2:	6843      	ldr	r3, [r0, #4]
   809c4:	6882      	ldr	r2, [r0, #8]
   809c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   809c8:	6883      	ldr	r3, [r0, #8]
   809ca:	6842      	ldr	r2, [r0, #4]
   809cc:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   809ce:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   809d0:	685a      	ldr	r2, [r3, #4]
   809d2:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   809d4:	bf04      	itt	eq
   809d6:	6882      	ldreq	r2, [r0, #8]
   809d8:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   809da:	2200      	movs	r2, #0
   809dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   809de:	681a      	ldr	r2, [r3, #0]
   809e0:	3a01      	subs	r2, #1
   809e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   809e4:	6818      	ldr	r0, [r3, #0]
}
   809e6:	4770      	bx	lr

000809e8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   809e8:	4b06      	ldr	r3, [pc, #24]	; (80a04 <pxCurrentTCBConst2>)
   809ea:	6819      	ldr	r1, [r3, #0]
   809ec:	6808      	ldr	r0, [r1, #0]
   809ee:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   809f2:	f380 8809 	msr	PSP, r0
   809f6:	f04f 0000 	mov.w	r0, #0
   809fa:	f380 8811 	msr	BASEPRI, r0
   809fe:	f04e 0e0d 	orr.w	lr, lr, #13
   80a02:	4770      	bx	lr

00080a04 <pxCurrentTCBConst2>:
   80a04:	200709a8 	.word	0x200709a8

00080a08 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80a08:	f3ef 8011 	mrs	r0, BASEPRI
   80a0c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80a10:	f381 8811 	msr	BASEPRI, r1
   80a14:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80a16:	2000      	movs	r0, #0

00080a18 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80a18:	f380 8811 	msr	BASEPRI, r0
   80a1c:	4770      	bx	lr
	...

00080a20 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80a20:	f3ef 8009 	mrs	r0, PSP
   80a24:	4b0c      	ldr	r3, [pc, #48]	; (80a58 <pxCurrentTCBConst>)
   80a26:	681a      	ldr	r2, [r3, #0]
   80a28:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80a2c:	6010      	str	r0, [r2, #0]
   80a2e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80a32:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80a36:	f380 8811 	msr	BASEPRI, r0
   80a3a:	f000 f8b9 	bl	80bb0 <vTaskSwitchContext>
   80a3e:	f04f 0000 	mov.w	r0, #0
   80a42:	f380 8811 	msr	BASEPRI, r0
   80a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80a4a:	6819      	ldr	r1, [r3, #0]
   80a4c:	6808      	ldr	r0, [r1, #0]
   80a4e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80a52:	f380 8809 	msr	PSP, r0
   80a56:	4770      	bx	lr

00080a58 <pxCurrentTCBConst>:
   80a58:	200709a8 	.word	0x200709a8

00080a5c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80a5c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80a62:	4b05      	ldr	r3, [pc, #20]	; (80a78 <SysTick_Handler+0x1c>)
   80a64:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80a66:	4b05      	ldr	r3, [pc, #20]	; (80a7c <SysTick_Handler+0x20>)
   80a68:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80a6a:	4b05      	ldr	r3, [pc, #20]	; (80a80 <SysTick_Handler+0x24>)
   80a6c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80a6e:	2000      	movs	r0, #0
   80a70:	4b04      	ldr	r3, [pc, #16]	; (80a84 <SysTick_Handler+0x28>)
   80a72:	4798      	blx	r3
   80a74:	bd08      	pop	{r3, pc}
   80a76:	bf00      	nop
   80a78:	e000ed04 	.word	0xe000ed04
   80a7c:	00080a09 	.word	0x00080a09
   80a80:	00080a89 	.word	0x00080a89
   80a84:	00080a19 	.word	0x00080a19

00080a88 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80a88:	4b3d      	ldr	r3, [pc, #244]	; (80b80 <vTaskIncrementTick+0xf8>)
   80a8a:	681b      	ldr	r3, [r3, #0]
   80a8c:	2b00      	cmp	r3, #0
   80a8e:	d16f      	bne.n	80b70 <vTaskIncrementTick+0xe8>
{
   80a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   80a94:	4b3b      	ldr	r3, [pc, #236]	; (80b84 <vTaskIncrementTick+0xfc>)
   80a96:	681a      	ldr	r2, [r3, #0]
   80a98:	3201      	adds	r2, #1
   80a9a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80a9c:	681b      	ldr	r3, [r3, #0]
   80a9e:	b9ab      	cbnz	r3, 80acc <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80aa0:	4b39      	ldr	r3, [pc, #228]	; (80b88 <vTaskIncrementTick+0x100>)
   80aa2:	681b      	ldr	r3, [r3, #0]
   80aa4:	681b      	ldr	r3, [r3, #0]
   80aa6:	2b00      	cmp	r3, #0
   80aa8:	d128      	bne.n	80afc <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   80aaa:	4b37      	ldr	r3, [pc, #220]	; (80b88 <vTaskIncrementTick+0x100>)
   80aac:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80aae:	4a37      	ldr	r2, [pc, #220]	; (80b8c <vTaskIncrementTick+0x104>)
   80ab0:	6810      	ldr	r0, [r2, #0]
   80ab2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80ab4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80ab6:	4936      	ldr	r1, [pc, #216]	; (80b90 <vTaskIncrementTick+0x108>)
   80ab8:	680a      	ldr	r2, [r1, #0]
   80aba:	3201      	adds	r2, #1
   80abc:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80abe:	681b      	ldr	r3, [r3, #0]
   80ac0:	681b      	ldr	r3, [r3, #0]
   80ac2:	b9fb      	cbnz	r3, 80b04 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80ac4:	f04f 32ff 	mov.w	r2, #4294967295
   80ac8:	4b32      	ldr	r3, [pc, #200]	; (80b94 <vTaskIncrementTick+0x10c>)
   80aca:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80acc:	4b2d      	ldr	r3, [pc, #180]	; (80b84 <vTaskIncrementTick+0xfc>)
   80ace:	681a      	ldr	r2, [r3, #0]
   80ad0:	4b30      	ldr	r3, [pc, #192]	; (80b94 <vTaskIncrementTick+0x10c>)
   80ad2:	681b      	ldr	r3, [r3, #0]
   80ad4:	429a      	cmp	r2, r3
   80ad6:	d350      	bcc.n	80b7a <vTaskIncrementTick+0xf2>
   80ad8:	4b2b      	ldr	r3, [pc, #172]	; (80b88 <vTaskIncrementTick+0x100>)
   80ada:	681b      	ldr	r3, [r3, #0]
   80adc:	681b      	ldr	r3, [r3, #0]
   80ade:	b1cb      	cbz	r3, 80b14 <vTaskIncrementTick+0x8c>
   80ae0:	4b29      	ldr	r3, [pc, #164]	; (80b88 <vTaskIncrementTick+0x100>)
   80ae2:	681b      	ldr	r3, [r3, #0]
   80ae4:	68db      	ldr	r3, [r3, #12]
   80ae6:	68dc      	ldr	r4, [r3, #12]
   80ae8:	6863      	ldr	r3, [r4, #4]
   80aea:	4a26      	ldr	r2, [pc, #152]	; (80b84 <vTaskIncrementTick+0xfc>)
   80aec:	6812      	ldr	r2, [r2, #0]
   80aee:	4293      	cmp	r3, r2
   80af0:	d816      	bhi.n	80b20 <vTaskIncrementTick+0x98>
   80af2:	4e29      	ldr	r6, [pc, #164]	; (80b98 <vTaskIncrementTick+0x110>)
   80af4:	4f29      	ldr	r7, [pc, #164]	; (80b9c <vTaskIncrementTick+0x114>)
   80af6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80bac <vTaskIncrementTick+0x124>
   80afa:	e02f      	b.n	80b5c <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80afc:	4b28      	ldr	r3, [pc, #160]	; (80ba0 <vTaskIncrementTick+0x118>)
   80afe:	4798      	blx	r3
   80b00:	bf00      	nop
   80b02:	e7fd      	b.n	80b00 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80b04:	4b20      	ldr	r3, [pc, #128]	; (80b88 <vTaskIncrementTick+0x100>)
   80b06:	681b      	ldr	r3, [r3, #0]
   80b08:	68db      	ldr	r3, [r3, #12]
   80b0a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80b0c:	685a      	ldr	r2, [r3, #4]
   80b0e:	4b21      	ldr	r3, [pc, #132]	; (80b94 <vTaskIncrementTick+0x10c>)
   80b10:	601a      	str	r2, [r3, #0]
   80b12:	e7db      	b.n	80acc <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80b14:	f04f 32ff 	mov.w	r2, #4294967295
   80b18:	4b1e      	ldr	r3, [pc, #120]	; (80b94 <vTaskIncrementTick+0x10c>)
   80b1a:	601a      	str	r2, [r3, #0]
   80b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b20:	4a1c      	ldr	r2, [pc, #112]	; (80b94 <vTaskIncrementTick+0x10c>)
   80b22:	6013      	str	r3, [r2, #0]
   80b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b28:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80b2a:	683b      	ldr	r3, [r7, #0]
   80b2c:	4298      	cmp	r0, r3
   80b2e:	bf88      	it	hi
   80b30:	6038      	strhi	r0, [r7, #0]
   80b32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80b36:	4629      	mov	r1, r5
   80b38:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80b3c:	4b19      	ldr	r3, [pc, #100]	; (80ba4 <vTaskIncrementTick+0x11c>)
   80b3e:	4798      	blx	r3
   80b40:	4b11      	ldr	r3, [pc, #68]	; (80b88 <vTaskIncrementTick+0x100>)
   80b42:	681b      	ldr	r3, [r3, #0]
   80b44:	681b      	ldr	r3, [r3, #0]
   80b46:	2b00      	cmp	r3, #0
   80b48:	d0e4      	beq.n	80b14 <vTaskIncrementTick+0x8c>
   80b4a:	4b0f      	ldr	r3, [pc, #60]	; (80b88 <vTaskIncrementTick+0x100>)
   80b4c:	681b      	ldr	r3, [r3, #0]
   80b4e:	68db      	ldr	r3, [r3, #12]
   80b50:	68dc      	ldr	r4, [r3, #12]
   80b52:	6863      	ldr	r3, [r4, #4]
   80b54:	4a0b      	ldr	r2, [pc, #44]	; (80b84 <vTaskIncrementTick+0xfc>)
   80b56:	6812      	ldr	r2, [r2, #0]
   80b58:	4293      	cmp	r3, r2
   80b5a:	d8e1      	bhi.n	80b20 <vTaskIncrementTick+0x98>
   80b5c:	1d25      	adds	r5, r4, #4
   80b5e:	4628      	mov	r0, r5
   80b60:	47b0      	blx	r6
   80b62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80b64:	2b00      	cmp	r3, #0
   80b66:	d0df      	beq.n	80b28 <vTaskIncrementTick+0xa0>
   80b68:	f104 0018 	add.w	r0, r4, #24
   80b6c:	47b0      	blx	r6
   80b6e:	e7db      	b.n	80b28 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   80b70:	4a0d      	ldr	r2, [pc, #52]	; (80ba8 <vTaskIncrementTick+0x120>)
   80b72:	6813      	ldr	r3, [r2, #0]
   80b74:	3301      	adds	r3, #1
   80b76:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80b78:	4770      	bx	lr
   80b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b7e:	bf00      	nop
   80b80:	20070a1c 	.word	0x20070a1c
   80b84:	20070a2c 	.word	0x20070a2c
   80b88:	200709ac 	.word	0x200709ac
   80b8c:	200709b0 	.word	0x200709b0
   80b90:	20070a28 	.word	0x20070a28
   80b94:	20070138 	.word	0x20070138
   80b98:	000809c3 	.word	0x000809c3
   80b9c:	20070a20 	.word	0x20070a20
   80ba0:	00080a09 	.word	0x00080a09
   80ba4:	000809a7 	.word	0x000809a7
   80ba8:	20070a18 	.word	0x20070a18
   80bac:	200709b4 	.word	0x200709b4

00080bb0 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   80bb0:	4b21      	ldr	r3, [pc, #132]	; (80c38 <vTaskSwitchContext+0x88>)
   80bb2:	681b      	ldr	r3, [r3, #0]
   80bb4:	b9eb      	cbnz	r3, 80bf2 <vTaskSwitchContext+0x42>
{
   80bb6:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80bb8:	4b20      	ldr	r3, [pc, #128]	; (80c3c <vTaskSwitchContext+0x8c>)
   80bba:	681b      	ldr	r3, [r3, #0]
   80bbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80bc0:	009b      	lsls	r3, r3, #2
   80bc2:	4a1f      	ldr	r2, [pc, #124]	; (80c40 <vTaskSwitchContext+0x90>)
   80bc4:	58d3      	ldr	r3, [r2, r3]
   80bc6:	b9c3      	cbnz	r3, 80bfa <vTaskSwitchContext+0x4a>
   80bc8:	4b1c      	ldr	r3, [pc, #112]	; (80c3c <vTaskSwitchContext+0x8c>)
   80bca:	681b      	ldr	r3, [r3, #0]
   80bcc:	b16b      	cbz	r3, 80bea <vTaskSwitchContext+0x3a>
   80bce:	4a1b      	ldr	r2, [pc, #108]	; (80c3c <vTaskSwitchContext+0x8c>)
   80bd0:	491b      	ldr	r1, [pc, #108]	; (80c40 <vTaskSwitchContext+0x90>)
   80bd2:	6813      	ldr	r3, [r2, #0]
   80bd4:	3b01      	subs	r3, #1
   80bd6:	6013      	str	r3, [r2, #0]
   80bd8:	6813      	ldr	r3, [r2, #0]
   80bda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   80be2:	b953      	cbnz	r3, 80bfa <vTaskSwitchContext+0x4a>
   80be4:	6813      	ldr	r3, [r2, #0]
   80be6:	2b00      	cmp	r3, #0
   80be8:	d1f3      	bne.n	80bd2 <vTaskSwitchContext+0x22>
   80bea:	4b16      	ldr	r3, [pc, #88]	; (80c44 <vTaskSwitchContext+0x94>)
   80bec:	4798      	blx	r3
   80bee:	bf00      	nop
   80bf0:	e7fd      	b.n	80bee <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   80bf2:	2201      	movs	r2, #1
   80bf4:	4b14      	ldr	r3, [pc, #80]	; (80c48 <vTaskSwitchContext+0x98>)
   80bf6:	601a      	str	r2, [r3, #0]
   80bf8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   80bfa:	4b10      	ldr	r3, [pc, #64]	; (80c3c <vTaskSwitchContext+0x8c>)
   80bfc:	681b      	ldr	r3, [r3, #0]
   80bfe:	4a10      	ldr	r2, [pc, #64]	; (80c40 <vTaskSwitchContext+0x90>)
   80c00:	0099      	lsls	r1, r3, #2
   80c02:	18c8      	adds	r0, r1, r3
   80c04:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   80c08:	6844      	ldr	r4, [r0, #4]
   80c0a:	6864      	ldr	r4, [r4, #4]
   80c0c:	6044      	str	r4, [r0, #4]
   80c0e:	4419      	add	r1, r3
   80c10:	4602      	mov	r2, r0
   80c12:	3208      	adds	r2, #8
   80c14:	4294      	cmp	r4, r2
   80c16:	d009      	beq.n	80c2c <vTaskSwitchContext+0x7c>
   80c18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80c1c:	4a08      	ldr	r2, [pc, #32]	; (80c40 <vTaskSwitchContext+0x90>)
   80c1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80c22:	685b      	ldr	r3, [r3, #4]
   80c24:	68da      	ldr	r2, [r3, #12]
   80c26:	4b09      	ldr	r3, [pc, #36]	; (80c4c <vTaskSwitchContext+0x9c>)
   80c28:	601a      	str	r2, [r3, #0]
   80c2a:	bd10      	pop	{r4, pc}
   80c2c:	6860      	ldr	r0, [r4, #4]
   80c2e:	4a04      	ldr	r2, [pc, #16]	; (80c40 <vTaskSwitchContext+0x90>)
   80c30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80c34:	6050      	str	r0, [r2, #4]
   80c36:	e7ef      	b.n	80c18 <vTaskSwitchContext+0x68>
   80c38:	20070a1c 	.word	0x20070a1c
   80c3c:	20070a20 	.word	0x20070a20
   80c40:	200709b4 	.word	0x200709b4
   80c44:	00080a09 	.word	0x00080a09
   80c48:	20070a24 	.word	0x20070a24
   80c4c:	200709a8 	.word	0x200709a8

00080c50 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80c50:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80c52:	480e      	ldr	r0, [pc, #56]	; (80c8c <sysclk_init+0x3c>)
   80c54:	4b0e      	ldr	r3, [pc, #56]	; (80c90 <sysclk_init+0x40>)
   80c56:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80c58:	213e      	movs	r1, #62	; 0x3e
   80c5a:	2000      	movs	r0, #0
   80c5c:	4b0d      	ldr	r3, [pc, #52]	; (80c94 <sysclk_init+0x44>)
   80c5e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80c60:	4c0d      	ldr	r4, [pc, #52]	; (80c98 <sysclk_init+0x48>)
   80c62:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80c64:	2800      	cmp	r0, #0
   80c66:	d0fc      	beq.n	80c62 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80c68:	4b0c      	ldr	r3, [pc, #48]	; (80c9c <sysclk_init+0x4c>)
   80c6a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80c6c:	4a0c      	ldr	r2, [pc, #48]	; (80ca0 <sysclk_init+0x50>)
   80c6e:	4b0d      	ldr	r3, [pc, #52]	; (80ca4 <sysclk_init+0x54>)
   80c70:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80c72:	4c0d      	ldr	r4, [pc, #52]	; (80ca8 <sysclk_init+0x58>)
   80c74:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80c76:	2800      	cmp	r0, #0
   80c78:	d0fc      	beq.n	80c74 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80c7a:	2010      	movs	r0, #16
   80c7c:	4b0b      	ldr	r3, [pc, #44]	; (80cac <sysclk_init+0x5c>)
   80c7e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80c80:	4b0b      	ldr	r3, [pc, #44]	; (80cb0 <sysclk_init+0x60>)
   80c82:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80c84:	4801      	ldr	r0, [pc, #4]	; (80c8c <sysclk_init+0x3c>)
   80c86:	4b02      	ldr	r3, [pc, #8]	; (80c90 <sysclk_init+0x40>)
   80c88:	4798      	blx	r3
   80c8a:	bd10      	pop	{r4, pc}
   80c8c:	0501bd00 	.word	0x0501bd00
   80c90:	200700b1 	.word	0x200700b1
   80c94:	00081065 	.word	0x00081065
   80c98:	000810b9 	.word	0x000810b9
   80c9c:	000810c9 	.word	0x000810c9
   80ca0:	200d3f01 	.word	0x200d3f01
   80ca4:	400e0600 	.word	0x400e0600
   80ca8:	000810d9 	.word	0x000810d9
   80cac:	00081001 	.word	0x00081001
   80cb0:	000811d9 	.word	0x000811d9

00080cb4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80cb4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80cb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80cba:	4b1e      	ldr	r3, [pc, #120]	; (80d34 <board_init+0x80>)
   80cbc:	605a      	str	r2, [r3, #4]
   80cbe:	200b      	movs	r0, #11
   80cc0:	4c1d      	ldr	r4, [pc, #116]	; (80d38 <board_init+0x84>)
   80cc2:	47a0      	blx	r4
   80cc4:	200c      	movs	r0, #12
   80cc6:	47a0      	blx	r4
   80cc8:	200d      	movs	r0, #13
   80cca:	47a0      	blx	r4
   80ccc:	200e      	movs	r0, #14
   80cce:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80cd0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80cd4:	203b      	movs	r0, #59	; 0x3b
   80cd6:	4c19      	ldr	r4, [pc, #100]	; (80d3c <board_init+0x88>)
   80cd8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80cda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80cde:	2055      	movs	r0, #85	; 0x55
   80ce0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80ce2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ce6:	2056      	movs	r0, #86	; 0x56
   80ce8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80cea:	4915      	ldr	r1, [pc, #84]	; (80d40 <board_init+0x8c>)
   80cec:	2068      	movs	r0, #104	; 0x68
   80cee:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80cf0:	4914      	ldr	r1, [pc, #80]	; (80d44 <board_init+0x90>)
   80cf2:	205c      	movs	r0, #92	; 0x5c
   80cf4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80cf6:	4a14      	ldr	r2, [pc, #80]	; (80d48 <board_init+0x94>)
   80cf8:	f44f 7140 	mov.w	r1, #768	; 0x300
   80cfc:	4813      	ldr	r0, [pc, #76]	; (80d4c <board_init+0x98>)
   80cfe:	4b14      	ldr	r3, [pc, #80]	; (80d50 <board_init+0x9c>)
   80d00:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   80d02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d06:	2019      	movs	r0, #25
   80d08:	47a0      	blx	r4
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   80d0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d0e:	201a      	movs	r0, #26
   80d10:	47a0      	blx	r4
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   80d12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d16:	201b      	movs	r0, #27
   80d18:	47a0      	blx	r4
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   80d1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d1e:	201c      	movs	r0, #28
   80d20:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80d22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d26:	202b      	movs	r0, #43	; 0x2b
   80d28:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80d2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d2e:	202a      	movs	r0, #42	; 0x2a
   80d30:	47a0      	blx	r4
   80d32:	bd10      	pop	{r4, pc}
   80d34:	400e1a50 	.word	0x400e1a50
   80d38:	000810e9 	.word	0x000810e9
   80d3c:	00080df5 	.word	0x00080df5
   80d40:	28000079 	.word	0x28000079
   80d44:	28000001 	.word	0x28000001
   80d48:	08000001 	.word	0x08000001
   80d4c:	400e0e00 	.word	0x400e0e00
   80d50:	00080ec5 	.word	0x00080ec5

00080d54 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80d54:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80d56:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80d5a:	d016      	beq.n	80d8a <pio_set_peripheral+0x36>
   80d5c:	d80b      	bhi.n	80d76 <pio_set_peripheral+0x22>
   80d5e:	b149      	cbz	r1, 80d74 <pio_set_peripheral+0x20>
   80d60:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80d64:	d105      	bne.n	80d72 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80d66:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80d68:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80d6a:	400b      	ands	r3, r1
   80d6c:	ea23 0302 	bic.w	r3, r3, r2
   80d70:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80d72:	6042      	str	r2, [r0, #4]
   80d74:	4770      	bx	lr
	switch (ul_type) {
   80d76:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80d7a:	d0fb      	beq.n	80d74 <pio_set_peripheral+0x20>
   80d7c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80d80:	d0f8      	beq.n	80d74 <pio_set_peripheral+0x20>
   80d82:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80d86:	d1f4      	bne.n	80d72 <pio_set_peripheral+0x1e>
   80d88:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80d8a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80d8c:	4313      	orrs	r3, r2
   80d8e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80d90:	e7ef      	b.n	80d72 <pio_set_peripheral+0x1e>

00080d92 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80d92:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80d94:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80d98:	bf14      	ite	ne
   80d9a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80d9c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80d9e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80da2:	bf14      	ite	ne
   80da4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80da6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80da8:	f012 0f02 	tst.w	r2, #2
   80dac:	d107      	bne.n	80dbe <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80dae:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80db2:	bf18      	it	ne
   80db4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80db8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80dba:	6001      	str	r1, [r0, #0]
   80dbc:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80dbe:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80dc2:	e7f9      	b.n	80db8 <pio_set_input+0x26>

00080dc4 <pio_set_output>:
{
   80dc4:	b410      	push	{r4}
   80dc6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80dc8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80dca:	b944      	cbnz	r4, 80dde <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80dcc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80dce:	b143      	cbz	r3, 80de2 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80dd0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80dd2:	b942      	cbnz	r2, 80de6 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80dd4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80dd6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80dd8:	6001      	str	r1, [r0, #0]
}
   80dda:	bc10      	pop	{r4}
   80ddc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80dde:	6641      	str	r1, [r0, #100]	; 0x64
   80de0:	e7f5      	b.n	80dce <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80de2:	6541      	str	r1, [r0, #84]	; 0x54
   80de4:	e7f5      	b.n	80dd2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80de6:	6301      	str	r1, [r0, #48]	; 0x30
   80de8:	e7f5      	b.n	80dd6 <pio_set_output+0x12>

00080dea <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80dea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80dec:	4770      	bx	lr

00080dee <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80dee:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80df0:	4770      	bx	lr
	...

00080df4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80df4:	b570      	push	{r4, r5, r6, lr}
   80df6:	b082      	sub	sp, #8
   80df8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80dfa:	0943      	lsrs	r3, r0, #5
   80dfc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e00:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e04:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80e06:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80e0a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80e0e:	d031      	beq.n	80e74 <pio_configure_pin+0x80>
   80e10:	d816      	bhi.n	80e40 <pio_configure_pin+0x4c>
   80e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80e16:	d01b      	beq.n	80e50 <pio_configure_pin+0x5c>
   80e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80e1c:	d116      	bne.n	80e4c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80e1e:	f000 001f 	and.w	r0, r0, #31
   80e22:	2601      	movs	r6, #1
   80e24:	4086      	lsls	r6, r0
   80e26:	4632      	mov	r2, r6
   80e28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80e2c:	4620      	mov	r0, r4
   80e2e:	4b22      	ldr	r3, [pc, #136]	; (80eb8 <pio_configure_pin+0xc4>)
   80e30:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80e32:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80e36:	bf14      	ite	ne
   80e38:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80e3a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80e3c:	2001      	movs	r0, #1
   80e3e:	e017      	b.n	80e70 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80e40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80e44:	d021      	beq.n	80e8a <pio_configure_pin+0x96>
   80e46:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80e4a:	d01e      	beq.n	80e8a <pio_configure_pin+0x96>
		return 0;
   80e4c:	2000      	movs	r0, #0
   80e4e:	e00f      	b.n	80e70 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80e50:	f000 001f 	and.w	r0, r0, #31
   80e54:	2601      	movs	r6, #1
   80e56:	4086      	lsls	r6, r0
   80e58:	4632      	mov	r2, r6
   80e5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e5e:	4620      	mov	r0, r4
   80e60:	4b15      	ldr	r3, [pc, #84]	; (80eb8 <pio_configure_pin+0xc4>)
   80e62:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80e64:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80e68:	bf14      	ite	ne
   80e6a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80e6c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80e6e:	2001      	movs	r0, #1
}
   80e70:	b002      	add	sp, #8
   80e72:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80e74:	f000 011f 	and.w	r1, r0, #31
   80e78:	2601      	movs	r6, #1
   80e7a:	462a      	mov	r2, r5
   80e7c:	fa06 f101 	lsl.w	r1, r6, r1
   80e80:	4620      	mov	r0, r4
   80e82:	4b0e      	ldr	r3, [pc, #56]	; (80ebc <pio_configure_pin+0xc8>)
   80e84:	4798      	blx	r3
	return 1;
   80e86:	4630      	mov	r0, r6
		break;
   80e88:	e7f2      	b.n	80e70 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80e8a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80e8e:	f000 011f 	and.w	r1, r0, #31
   80e92:	2601      	movs	r6, #1
   80e94:	ea05 0306 	and.w	r3, r5, r6
   80e98:	9300      	str	r3, [sp, #0]
   80e9a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80e9e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ea2:	bf14      	ite	ne
   80ea4:	2200      	movne	r2, #0
   80ea6:	2201      	moveq	r2, #1
   80ea8:	fa06 f101 	lsl.w	r1, r6, r1
   80eac:	4620      	mov	r0, r4
   80eae:	4c04      	ldr	r4, [pc, #16]	; (80ec0 <pio_configure_pin+0xcc>)
   80eb0:	47a0      	blx	r4
	return 1;
   80eb2:	4630      	mov	r0, r6
		break;
   80eb4:	e7dc      	b.n	80e70 <pio_configure_pin+0x7c>
   80eb6:	bf00      	nop
   80eb8:	00080d55 	.word	0x00080d55
   80ebc:	00080d93 	.word	0x00080d93
   80ec0:	00080dc5 	.word	0x00080dc5

00080ec4 <pio_configure_pin_group>:
{
   80ec4:	b570      	push	{r4, r5, r6, lr}
   80ec6:	b082      	sub	sp, #8
   80ec8:	4605      	mov	r5, r0
   80eca:	460e      	mov	r6, r1
   80ecc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80ece:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80ed2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80ed6:	d027      	beq.n	80f28 <pio_configure_pin_group+0x64>
   80ed8:	d811      	bhi.n	80efe <pio_configure_pin_group+0x3a>
   80eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80ede:	d016      	beq.n	80f0e <pio_configure_pin_group+0x4a>
   80ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ee4:	d111      	bne.n	80f0a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80ee6:	460a      	mov	r2, r1
   80ee8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80eec:	4b19      	ldr	r3, [pc, #100]	; (80f54 <pio_configure_pin_group+0x90>)
   80eee:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ef0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80ef4:	bf14      	ite	ne
   80ef6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ef8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80efa:	2001      	movs	r0, #1
   80efc:	e012      	b.n	80f24 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80efe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80f02:	d015      	beq.n	80f30 <pio_configure_pin_group+0x6c>
   80f04:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80f08:	d012      	beq.n	80f30 <pio_configure_pin_group+0x6c>
		return 0;
   80f0a:	2000      	movs	r0, #0
   80f0c:	e00a      	b.n	80f24 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80f0e:	460a      	mov	r2, r1
   80f10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f14:	4b0f      	ldr	r3, [pc, #60]	; (80f54 <pio_configure_pin_group+0x90>)
   80f16:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80f18:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80f1c:	bf14      	ite	ne
   80f1e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80f20:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80f22:	2001      	movs	r0, #1
}
   80f24:	b002      	add	sp, #8
   80f26:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80f28:	4b0b      	ldr	r3, [pc, #44]	; (80f58 <pio_configure_pin_group+0x94>)
   80f2a:	4798      	blx	r3
	return 1;
   80f2c:	2001      	movs	r0, #1
		break;
   80f2e:	e7f9      	b.n	80f24 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80f30:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80f34:	f004 0301 	and.w	r3, r4, #1
   80f38:	9300      	str	r3, [sp, #0]
   80f3a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80f3e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80f42:	bf14      	ite	ne
   80f44:	2200      	movne	r2, #0
   80f46:	2201      	moveq	r2, #1
   80f48:	4631      	mov	r1, r6
   80f4a:	4628      	mov	r0, r5
   80f4c:	4c03      	ldr	r4, [pc, #12]	; (80f5c <pio_configure_pin_group+0x98>)
   80f4e:	47a0      	blx	r4
	return 1;
   80f50:	2001      	movs	r0, #1
		break;
   80f52:	e7e7      	b.n	80f24 <pio_configure_pin_group+0x60>
   80f54:	00080d55 	.word	0x00080d55
   80f58:	00080d93 	.word	0x00080d93
   80f5c:	00080dc5 	.word	0x00080dc5

00080f60 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f64:	4604      	mov	r4, r0
   80f66:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80f68:	4b0e      	ldr	r3, [pc, #56]	; (80fa4 <pio_handler_process+0x44>)
   80f6a:	4798      	blx	r3
   80f6c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80f6e:	4620      	mov	r0, r4
   80f70:	4b0d      	ldr	r3, [pc, #52]	; (80fa8 <pio_handler_process+0x48>)
   80f72:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80f74:	4005      	ands	r5, r0
   80f76:	d013      	beq.n	80fa0 <pio_handler_process+0x40>
   80f78:	4c0c      	ldr	r4, [pc, #48]	; (80fac <pio_handler_process+0x4c>)
   80f7a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80f7e:	e003      	b.n	80f88 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80f80:	42b4      	cmp	r4, r6
   80f82:	d00d      	beq.n	80fa0 <pio_handler_process+0x40>
   80f84:	3410      	adds	r4, #16
		while (status != 0) {
   80f86:	b15d      	cbz	r5, 80fa0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80f88:	6820      	ldr	r0, [r4, #0]
   80f8a:	4540      	cmp	r0, r8
   80f8c:	d1f8      	bne.n	80f80 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80f8e:	6861      	ldr	r1, [r4, #4]
   80f90:	4229      	tst	r1, r5
   80f92:	d0f5      	beq.n	80f80 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80f94:	68e3      	ldr	r3, [r4, #12]
   80f96:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80f98:	6863      	ldr	r3, [r4, #4]
   80f9a:	ea25 0503 	bic.w	r5, r5, r3
   80f9e:	e7ef      	b.n	80f80 <pio_handler_process+0x20>
   80fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fa4:	00080deb 	.word	0x00080deb
   80fa8:	00080def 	.word	0x00080def
   80fac:	20070a30 	.word	0x20070a30

00080fb0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80fb0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80fb2:	210b      	movs	r1, #11
   80fb4:	4801      	ldr	r0, [pc, #4]	; (80fbc <PIOA_Handler+0xc>)
   80fb6:	4b02      	ldr	r3, [pc, #8]	; (80fc0 <PIOA_Handler+0x10>)
   80fb8:	4798      	blx	r3
   80fba:	bd08      	pop	{r3, pc}
   80fbc:	400e0e00 	.word	0x400e0e00
   80fc0:	00080f61 	.word	0x00080f61

00080fc4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80fc4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80fc6:	210c      	movs	r1, #12
   80fc8:	4801      	ldr	r0, [pc, #4]	; (80fd0 <PIOB_Handler+0xc>)
   80fca:	4b02      	ldr	r3, [pc, #8]	; (80fd4 <PIOB_Handler+0x10>)
   80fcc:	4798      	blx	r3
   80fce:	bd08      	pop	{r3, pc}
   80fd0:	400e1000 	.word	0x400e1000
   80fd4:	00080f61 	.word	0x00080f61

00080fd8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80fd8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80fda:	210d      	movs	r1, #13
   80fdc:	4801      	ldr	r0, [pc, #4]	; (80fe4 <PIOC_Handler+0xc>)
   80fde:	4b02      	ldr	r3, [pc, #8]	; (80fe8 <PIOC_Handler+0x10>)
   80fe0:	4798      	blx	r3
   80fe2:	bd08      	pop	{r3, pc}
   80fe4:	400e1200 	.word	0x400e1200
   80fe8:	00080f61 	.word	0x00080f61

00080fec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80fec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80fee:	210e      	movs	r1, #14
   80ff0:	4801      	ldr	r0, [pc, #4]	; (80ff8 <PIOD_Handler+0xc>)
   80ff2:	4b02      	ldr	r3, [pc, #8]	; (80ffc <PIOD_Handler+0x10>)
   80ff4:	4798      	blx	r3
   80ff6:	bd08      	pop	{r3, pc}
   80ff8:	400e1400 	.word	0x400e1400
   80ffc:	00080f61 	.word	0x00080f61

00081000 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81000:	4a17      	ldr	r2, [pc, #92]	; (81060 <pmc_switch_mck_to_pllack+0x60>)
   81002:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81008:	4318      	orrs	r0, r3
   8100a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8100c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8100e:	f013 0f08 	tst.w	r3, #8
   81012:	d10a      	bne.n	8102a <pmc_switch_mck_to_pllack+0x2a>
   81014:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81018:	4911      	ldr	r1, [pc, #68]	; (81060 <pmc_switch_mck_to_pllack+0x60>)
   8101a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8101c:	f012 0f08 	tst.w	r2, #8
   81020:	d103      	bne.n	8102a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81022:	3b01      	subs	r3, #1
   81024:	d1f9      	bne.n	8101a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81026:	2001      	movs	r0, #1
   81028:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8102a:	4a0d      	ldr	r2, [pc, #52]	; (81060 <pmc_switch_mck_to_pllack+0x60>)
   8102c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8102e:	f023 0303 	bic.w	r3, r3, #3
   81032:	f043 0302 	orr.w	r3, r3, #2
   81036:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81038:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8103a:	f013 0f08 	tst.w	r3, #8
   8103e:	d10a      	bne.n	81056 <pmc_switch_mck_to_pllack+0x56>
   81040:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81044:	4906      	ldr	r1, [pc, #24]	; (81060 <pmc_switch_mck_to_pllack+0x60>)
   81046:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81048:	f012 0f08 	tst.w	r2, #8
   8104c:	d105      	bne.n	8105a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8104e:	3b01      	subs	r3, #1
   81050:	d1f9      	bne.n	81046 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81052:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81054:	4770      	bx	lr
	return 0;
   81056:	2000      	movs	r0, #0
   81058:	4770      	bx	lr
   8105a:	2000      	movs	r0, #0
   8105c:	4770      	bx	lr
   8105e:	bf00      	nop
   81060:	400e0600 	.word	0x400e0600

00081064 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81064:	b9c8      	cbnz	r0, 8109a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81066:	4a11      	ldr	r2, [pc, #68]	; (810ac <pmc_switch_mainck_to_xtal+0x48>)
   81068:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8106a:	0209      	lsls	r1, r1, #8
   8106c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8106e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81072:	f023 0303 	bic.w	r3, r3, #3
   81076:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8107a:	f043 0301 	orr.w	r3, r3, #1
   8107e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81080:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81082:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81084:	f013 0f01 	tst.w	r3, #1
   81088:	d0fb      	beq.n	81082 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8108a:	4a08      	ldr	r2, [pc, #32]	; (810ac <pmc_switch_mainck_to_xtal+0x48>)
   8108c:	6a13      	ldr	r3, [r2, #32]
   8108e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81096:	6213      	str	r3, [r2, #32]
   81098:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8109a:	4904      	ldr	r1, [pc, #16]	; (810ac <pmc_switch_mainck_to_xtal+0x48>)
   8109c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8109e:	4a04      	ldr	r2, [pc, #16]	; (810b0 <pmc_switch_mainck_to_xtal+0x4c>)
   810a0:	401a      	ands	r2, r3
   810a2:	4b04      	ldr	r3, [pc, #16]	; (810b4 <pmc_switch_mainck_to_xtal+0x50>)
   810a4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   810a6:	620b      	str	r3, [r1, #32]
   810a8:	4770      	bx	lr
   810aa:	bf00      	nop
   810ac:	400e0600 	.word	0x400e0600
   810b0:	fec8fffc 	.word	0xfec8fffc
   810b4:	01370002 	.word	0x01370002

000810b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   810b8:	4b02      	ldr	r3, [pc, #8]	; (810c4 <pmc_osc_is_ready_mainck+0xc>)
   810ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   810bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   810c0:	4770      	bx	lr
   810c2:	bf00      	nop
   810c4:	400e0600 	.word	0x400e0600

000810c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   810c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   810cc:	4b01      	ldr	r3, [pc, #4]	; (810d4 <pmc_disable_pllack+0xc>)
   810ce:	629a      	str	r2, [r3, #40]	; 0x28
   810d0:	4770      	bx	lr
   810d2:	bf00      	nop
   810d4:	400e0600 	.word	0x400e0600

000810d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   810d8:	4b02      	ldr	r3, [pc, #8]	; (810e4 <pmc_is_locked_pllack+0xc>)
   810da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   810dc:	f000 0002 	and.w	r0, r0, #2
   810e0:	4770      	bx	lr
   810e2:	bf00      	nop
   810e4:	400e0600 	.word	0x400e0600

000810e8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   810e8:	282c      	cmp	r0, #44	; 0x2c
   810ea:	d81e      	bhi.n	8112a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   810ec:	281f      	cmp	r0, #31
   810ee:	d80c      	bhi.n	8110a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   810f0:	4b11      	ldr	r3, [pc, #68]	; (81138 <pmc_enable_periph_clk+0x50>)
   810f2:	699a      	ldr	r2, [r3, #24]
   810f4:	2301      	movs	r3, #1
   810f6:	4083      	lsls	r3, r0
   810f8:	4393      	bics	r3, r2
   810fa:	d018      	beq.n	8112e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   810fc:	2301      	movs	r3, #1
   810fe:	fa03 f000 	lsl.w	r0, r3, r0
   81102:	4b0d      	ldr	r3, [pc, #52]	; (81138 <pmc_enable_periph_clk+0x50>)
   81104:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81106:	2000      	movs	r0, #0
   81108:	4770      	bx	lr
		ul_id -= 32;
   8110a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8110c:	4b0a      	ldr	r3, [pc, #40]	; (81138 <pmc_enable_periph_clk+0x50>)
   8110e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81112:	2301      	movs	r3, #1
   81114:	4083      	lsls	r3, r0
   81116:	4393      	bics	r3, r2
   81118:	d00b      	beq.n	81132 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8111a:	2301      	movs	r3, #1
   8111c:	fa03 f000 	lsl.w	r0, r3, r0
   81120:	4b05      	ldr	r3, [pc, #20]	; (81138 <pmc_enable_periph_clk+0x50>)
   81122:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   81126:	2000      	movs	r0, #0
   81128:	4770      	bx	lr
		return 1;
   8112a:	2001      	movs	r0, #1
   8112c:	4770      	bx	lr
	return 0;
   8112e:	2000      	movs	r0, #0
   81130:	4770      	bx	lr
   81132:	2000      	movs	r0, #0
}
   81134:	4770      	bx	lr
   81136:	bf00      	nop
   81138:	400e0600 	.word	0x400e0600

0008113c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8113c:	e7fe      	b.n	8113c <Dummy_Handler>
	...

00081140 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81140:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81142:	4b1c      	ldr	r3, [pc, #112]	; (811b4 <Reset_Handler+0x74>)
   81144:	4a1c      	ldr	r2, [pc, #112]	; (811b8 <Reset_Handler+0x78>)
   81146:	429a      	cmp	r2, r3
   81148:	d010      	beq.n	8116c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8114a:	4b1c      	ldr	r3, [pc, #112]	; (811bc <Reset_Handler+0x7c>)
   8114c:	4a19      	ldr	r2, [pc, #100]	; (811b4 <Reset_Handler+0x74>)
   8114e:	429a      	cmp	r2, r3
   81150:	d20c      	bcs.n	8116c <Reset_Handler+0x2c>
   81152:	3b01      	subs	r3, #1
   81154:	1a9b      	subs	r3, r3, r2
   81156:	f023 0303 	bic.w	r3, r3, #3
   8115a:	3304      	adds	r3, #4
   8115c:	4413      	add	r3, r2
   8115e:	4916      	ldr	r1, [pc, #88]	; (811b8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81160:	f851 0b04 	ldr.w	r0, [r1], #4
   81164:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81168:	429a      	cmp	r2, r3
   8116a:	d1f9      	bne.n	81160 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8116c:	4b14      	ldr	r3, [pc, #80]	; (811c0 <Reset_Handler+0x80>)
   8116e:	4a15      	ldr	r2, [pc, #84]	; (811c4 <Reset_Handler+0x84>)
   81170:	429a      	cmp	r2, r3
   81172:	d20a      	bcs.n	8118a <Reset_Handler+0x4a>
   81174:	3b01      	subs	r3, #1
   81176:	1a9b      	subs	r3, r3, r2
   81178:	f023 0303 	bic.w	r3, r3, #3
   8117c:	3304      	adds	r3, #4
   8117e:	4413      	add	r3, r2
		*pDest++ = 0;
   81180:	2100      	movs	r1, #0
   81182:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81186:	4293      	cmp	r3, r2
   81188:	d1fb      	bne.n	81182 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8118a:	4b0f      	ldr	r3, [pc, #60]	; (811c8 <Reset_Handler+0x88>)
   8118c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81190:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81194:	490d      	ldr	r1, [pc, #52]	; (811cc <Reset_Handler+0x8c>)
   81196:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81198:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8119c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   811a0:	d203      	bcs.n	811aa <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   811a2:	688b      	ldr	r3, [r1, #8]
   811a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   811a8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   811aa:	4b09      	ldr	r3, [pc, #36]	; (811d0 <Reset_Handler+0x90>)
   811ac:	4798      	blx	r3

	/* Branch to main function */
	main();
   811ae:	4b09      	ldr	r3, [pc, #36]	; (811d4 <Reset_Handler+0x94>)
   811b0:	4798      	blx	r3
   811b2:	e7fe      	b.n	811b2 <Reset_Handler+0x72>
   811b4:	20070000 	.word	0x20070000
   811b8:	00082684 	.word	0x00082684
   811bc:	20070984 	.word	0x20070984
   811c0:	20070b0c 	.word	0x20070b0c
   811c4:	20070984 	.word	0x20070984
   811c8:	00080000 	.word	0x00080000
   811cc:	e000ed00 	.word	0xe000ed00
   811d0:	00081585 	.word	0x00081585
   811d4:	00081501 	.word	0x00081501

000811d8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   811d8:	4b3d      	ldr	r3, [pc, #244]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   811da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   811dc:	f003 0303 	and.w	r3, r3, #3
   811e0:	2b03      	cmp	r3, #3
   811e2:	d80e      	bhi.n	81202 <SystemCoreClockUpdate+0x2a>
   811e4:	e8df f003 	tbb	[pc, r3]
   811e8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   811ec:	4b39      	ldr	r3, [pc, #228]	; (812d4 <SystemCoreClockUpdate+0xfc>)
   811ee:	695b      	ldr	r3, [r3, #20]
   811f0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   811f4:	bf14      	ite	ne
   811f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   811fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   811fe:	4b36      	ldr	r3, [pc, #216]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81200:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81202:	4b33      	ldr	r3, [pc, #204]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   81204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81206:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8120a:	2b70      	cmp	r3, #112	; 0x70
   8120c:	d057      	beq.n	812be <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8120e:	4b30      	ldr	r3, [pc, #192]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   81210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81212:	4931      	ldr	r1, [pc, #196]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81214:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81218:	680b      	ldr	r3, [r1, #0]
   8121a:	40d3      	lsrs	r3, r2
   8121c:	600b      	str	r3, [r1, #0]
   8121e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81220:	4b2b      	ldr	r3, [pc, #172]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   81222:	6a1b      	ldr	r3, [r3, #32]
   81224:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81228:	d003      	beq.n	81232 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8122a:	4a2c      	ldr	r2, [pc, #176]	; (812dc <SystemCoreClockUpdate+0x104>)
   8122c:	4b2a      	ldr	r3, [pc, #168]	; (812d8 <SystemCoreClockUpdate+0x100>)
   8122e:	601a      	str	r2, [r3, #0]
   81230:	e7e7      	b.n	81202 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81232:	4a2b      	ldr	r2, [pc, #172]	; (812e0 <SystemCoreClockUpdate+0x108>)
   81234:	4b28      	ldr	r3, [pc, #160]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81236:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81238:	4b25      	ldr	r3, [pc, #148]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   8123a:	6a1b      	ldr	r3, [r3, #32]
   8123c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81240:	2b10      	cmp	r3, #16
   81242:	d005      	beq.n	81250 <SystemCoreClockUpdate+0x78>
   81244:	2b20      	cmp	r3, #32
   81246:	d1dc      	bne.n	81202 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81248:	4a24      	ldr	r2, [pc, #144]	; (812dc <SystemCoreClockUpdate+0x104>)
   8124a:	4b23      	ldr	r3, [pc, #140]	; (812d8 <SystemCoreClockUpdate+0x100>)
   8124c:	601a      	str	r2, [r3, #0]
				break;
   8124e:	e7d8      	b.n	81202 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81250:	4a24      	ldr	r2, [pc, #144]	; (812e4 <SystemCoreClockUpdate+0x10c>)
   81252:	4b21      	ldr	r3, [pc, #132]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81254:	601a      	str	r2, [r3, #0]
				break;
   81256:	e7d4      	b.n	81202 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81258:	4b1d      	ldr	r3, [pc, #116]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   8125a:	6a1b      	ldr	r3, [r3, #32]
   8125c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81260:	d00c      	beq.n	8127c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81262:	4a1e      	ldr	r2, [pc, #120]	; (812dc <SystemCoreClockUpdate+0x104>)
   81264:	4b1c      	ldr	r3, [pc, #112]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81266:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81268:	4b19      	ldr	r3, [pc, #100]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   8126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8126c:	f003 0303 	and.w	r3, r3, #3
   81270:	2b02      	cmp	r3, #2
   81272:	d016      	beq.n	812a2 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81274:	4a1c      	ldr	r2, [pc, #112]	; (812e8 <SystemCoreClockUpdate+0x110>)
   81276:	4b18      	ldr	r3, [pc, #96]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81278:	601a      	str	r2, [r3, #0]
   8127a:	e7c2      	b.n	81202 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8127c:	4a18      	ldr	r2, [pc, #96]	; (812e0 <SystemCoreClockUpdate+0x108>)
   8127e:	4b16      	ldr	r3, [pc, #88]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81280:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81282:	4b13      	ldr	r3, [pc, #76]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   81284:	6a1b      	ldr	r3, [r3, #32]
   81286:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8128a:	2b10      	cmp	r3, #16
   8128c:	d005      	beq.n	8129a <SystemCoreClockUpdate+0xc2>
   8128e:	2b20      	cmp	r3, #32
   81290:	d1ea      	bne.n	81268 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81292:	4a12      	ldr	r2, [pc, #72]	; (812dc <SystemCoreClockUpdate+0x104>)
   81294:	4b10      	ldr	r3, [pc, #64]	; (812d8 <SystemCoreClockUpdate+0x100>)
   81296:	601a      	str	r2, [r3, #0]
				break;
   81298:	e7e6      	b.n	81268 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8129a:	4a12      	ldr	r2, [pc, #72]	; (812e4 <SystemCoreClockUpdate+0x10c>)
   8129c:	4b0e      	ldr	r3, [pc, #56]	; (812d8 <SystemCoreClockUpdate+0x100>)
   8129e:	601a      	str	r2, [r3, #0]
				break;
   812a0:	e7e2      	b.n	81268 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   812a2:	4a0b      	ldr	r2, [pc, #44]	; (812d0 <SystemCoreClockUpdate+0xf8>)
   812a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   812a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   812a8:	480b      	ldr	r0, [pc, #44]	; (812d8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   812aa:	f3c1 410a 	ubfx	r1, r1, #16, #11
   812ae:	6803      	ldr	r3, [r0, #0]
   812b0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   812b4:	b2d2      	uxtb	r2, r2
   812b6:	fbb3 f3f2 	udiv	r3, r3, r2
   812ba:	6003      	str	r3, [r0, #0]
   812bc:	e7a1      	b.n	81202 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   812be:	4a06      	ldr	r2, [pc, #24]	; (812d8 <SystemCoreClockUpdate+0x100>)
   812c0:	6813      	ldr	r3, [r2, #0]
   812c2:	490a      	ldr	r1, [pc, #40]	; (812ec <SystemCoreClockUpdate+0x114>)
   812c4:	fba1 1303 	umull	r1, r3, r1, r3
   812c8:	085b      	lsrs	r3, r3, #1
   812ca:	6013      	str	r3, [r2, #0]
   812cc:	4770      	bx	lr
   812ce:	bf00      	nop
   812d0:	400e0600 	.word	0x400e0600
   812d4:	400e1a10 	.word	0x400e1a10
   812d8:	2007013c 	.word	0x2007013c
   812dc:	00b71b00 	.word	0x00b71b00
   812e0:	003d0900 	.word	0x003d0900
   812e4:	007a1200 	.word	0x007a1200
   812e8:	0e4e1c00 	.word	0x0e4e1c00
   812ec:	aaaaaaab 	.word	0xaaaaaaab

000812f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   812f0:	4b0a      	ldr	r3, [pc, #40]	; (8131c <_sbrk+0x2c>)
   812f2:	681b      	ldr	r3, [r3, #0]
   812f4:	b153      	cbz	r3, 8130c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   812f6:	4b09      	ldr	r3, [pc, #36]	; (8131c <_sbrk+0x2c>)
   812f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   812fa:	181a      	adds	r2, r3, r0
   812fc:	4908      	ldr	r1, [pc, #32]	; (81320 <_sbrk+0x30>)
   812fe:	4291      	cmp	r1, r2
   81300:	db08      	blt.n	81314 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81302:	4610      	mov	r0, r2
   81304:	4a05      	ldr	r2, [pc, #20]	; (8131c <_sbrk+0x2c>)
   81306:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81308:	4618      	mov	r0, r3
   8130a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8130c:	4a05      	ldr	r2, [pc, #20]	; (81324 <_sbrk+0x34>)
   8130e:	4b03      	ldr	r3, [pc, #12]	; (8131c <_sbrk+0x2c>)
   81310:	601a      	str	r2, [r3, #0]
   81312:	e7f0      	b.n	812f6 <_sbrk+0x6>
		return (caddr_t) -1;	
   81314:	f04f 30ff 	mov.w	r0, #4294967295
}
   81318:	4770      	bx	lr
   8131a:	bf00      	nop
   8131c:	20070aa0 	.word	0x20070aa0
   81320:	20087ffc 	.word	0x20087ffc
   81324:	20072b10 	.word	0x20072b10

00081328 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81328:	f04f 30ff 	mov.w	r0, #4294967295
   8132c:	4770      	bx	lr

0008132e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8132e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81332:	604b      	str	r3, [r1, #4]

	return 0;
}
   81334:	2000      	movs	r0, #0
   81336:	4770      	bx	lr

00081338 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81338:	2000      	movs	r0, #0
   8133a:	4770      	bx	lr

0008133c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8133c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8133e:	b083      	sub	sp, #12
   81340:	4604      	mov	r4, r0
   81342:	460d      	mov	r5, r1
	uint32_t val = 0;
   81344:	2300      	movs	r3, #0
   81346:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81348:	4b20      	ldr	r3, [pc, #128]	; (813cc <usart_serial_getchar+0x90>)
   8134a:	4298      	cmp	r0, r3
   8134c:	d00d      	beq.n	8136a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8134e:	4b20      	ldr	r3, [pc, #128]	; (813d0 <usart_serial_getchar+0x94>)
   81350:	4298      	cmp	r0, r3
   81352:	d012      	beq.n	8137a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81354:	4b1f      	ldr	r3, [pc, #124]	; (813d4 <usart_serial_getchar+0x98>)
   81356:	4298      	cmp	r0, r3
   81358:	d019      	beq.n	8138e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8135a:	4b1f      	ldr	r3, [pc, #124]	; (813d8 <usart_serial_getchar+0x9c>)
   8135c:	429c      	cmp	r4, r3
   8135e:	d020      	beq.n	813a2 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81360:	4b1e      	ldr	r3, [pc, #120]	; (813dc <usart_serial_getchar+0xa0>)
   81362:	429c      	cmp	r4, r3
   81364:	d027      	beq.n	813b6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81366:	b003      	add	sp, #12
   81368:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8136a:	461f      	mov	r7, r3
   8136c:	4e1c      	ldr	r6, [pc, #112]	; (813e0 <usart_serial_getchar+0xa4>)
   8136e:	4629      	mov	r1, r5
   81370:	4638      	mov	r0, r7
   81372:	47b0      	blx	r6
   81374:	2800      	cmp	r0, #0
   81376:	d1fa      	bne.n	8136e <usart_serial_getchar+0x32>
   81378:	e7ef      	b.n	8135a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8137a:	461f      	mov	r7, r3
   8137c:	4e19      	ldr	r6, [pc, #100]	; (813e4 <usart_serial_getchar+0xa8>)
   8137e:	a901      	add	r1, sp, #4
   81380:	4638      	mov	r0, r7
   81382:	47b0      	blx	r6
   81384:	2800      	cmp	r0, #0
   81386:	d1fa      	bne.n	8137e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   81388:	9b01      	ldr	r3, [sp, #4]
   8138a:	702b      	strb	r3, [r5, #0]
   8138c:	e7e8      	b.n	81360 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8138e:	461e      	mov	r6, r3
   81390:	4c14      	ldr	r4, [pc, #80]	; (813e4 <usart_serial_getchar+0xa8>)
   81392:	a901      	add	r1, sp, #4
   81394:	4630      	mov	r0, r6
   81396:	47a0      	blx	r4
   81398:	2800      	cmp	r0, #0
   8139a:	d1fa      	bne.n	81392 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8139c:	9b01      	ldr	r3, [sp, #4]
   8139e:	702b      	strb	r3, [r5, #0]
   813a0:	e7e1      	b.n	81366 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   813a2:	461e      	mov	r6, r3
   813a4:	4c0f      	ldr	r4, [pc, #60]	; (813e4 <usart_serial_getchar+0xa8>)
   813a6:	a901      	add	r1, sp, #4
   813a8:	4630      	mov	r0, r6
   813aa:	47a0      	blx	r4
   813ac:	2800      	cmp	r0, #0
   813ae:	d1fa      	bne.n	813a6 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   813b0:	9b01      	ldr	r3, [sp, #4]
   813b2:	702b      	strb	r3, [r5, #0]
   813b4:	e7d7      	b.n	81366 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   813b6:	461e      	mov	r6, r3
   813b8:	4c0a      	ldr	r4, [pc, #40]	; (813e4 <usart_serial_getchar+0xa8>)
   813ba:	a901      	add	r1, sp, #4
   813bc:	4630      	mov	r0, r6
   813be:	47a0      	blx	r4
   813c0:	2800      	cmp	r0, #0
   813c2:	d1fa      	bne.n	813ba <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   813c4:	9b01      	ldr	r3, [sp, #4]
   813c6:	702b      	strb	r3, [r5, #0]
}
   813c8:	e7cd      	b.n	81366 <usart_serial_getchar+0x2a>
   813ca:	bf00      	nop
   813cc:	400e0800 	.word	0x400e0800
   813d0:	40098000 	.word	0x40098000
   813d4:	4009c000 	.word	0x4009c000
   813d8:	400a0000 	.word	0x400a0000
   813dc:	400a4000 	.word	0x400a4000
   813e0:	00080969 	.word	0x00080969
   813e4:	0008098f 	.word	0x0008098f

000813e8 <usart_serial_putchar>:
{
   813e8:	b570      	push	{r4, r5, r6, lr}
   813ea:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   813ec:	4b1e      	ldr	r3, [pc, #120]	; (81468 <usart_serial_putchar+0x80>)
   813ee:	4298      	cmp	r0, r3
   813f0:	d00d      	beq.n	8140e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   813f2:	4b1e      	ldr	r3, [pc, #120]	; (8146c <usart_serial_putchar+0x84>)
   813f4:	4298      	cmp	r0, r3
   813f6:	d013      	beq.n	81420 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   813f8:	4b1d      	ldr	r3, [pc, #116]	; (81470 <usart_serial_putchar+0x88>)
   813fa:	4298      	cmp	r0, r3
   813fc:	d019      	beq.n	81432 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   813fe:	4b1d      	ldr	r3, [pc, #116]	; (81474 <usart_serial_putchar+0x8c>)
   81400:	4298      	cmp	r0, r3
   81402:	d01f      	beq.n	81444 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   81404:	4b1c      	ldr	r3, [pc, #112]	; (81478 <usart_serial_putchar+0x90>)
   81406:	4298      	cmp	r0, r3
   81408:	d025      	beq.n	81456 <usart_serial_putchar+0x6e>
	return 0;
   8140a:	2000      	movs	r0, #0
}
   8140c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8140e:	461e      	mov	r6, r3
   81410:	4d1a      	ldr	r5, [pc, #104]	; (8147c <usart_serial_putchar+0x94>)
   81412:	4621      	mov	r1, r4
   81414:	4630      	mov	r0, r6
   81416:	47a8      	blx	r5
   81418:	2800      	cmp	r0, #0
   8141a:	d1fa      	bne.n	81412 <usart_serial_putchar+0x2a>
		return 1;
   8141c:	2001      	movs	r0, #1
   8141e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81420:	461e      	mov	r6, r3
   81422:	4d17      	ldr	r5, [pc, #92]	; (81480 <usart_serial_putchar+0x98>)
   81424:	4621      	mov	r1, r4
   81426:	4630      	mov	r0, r6
   81428:	47a8      	blx	r5
   8142a:	2800      	cmp	r0, #0
   8142c:	d1fa      	bne.n	81424 <usart_serial_putchar+0x3c>
		return 1;
   8142e:	2001      	movs	r0, #1
   81430:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81432:	461e      	mov	r6, r3
   81434:	4d12      	ldr	r5, [pc, #72]	; (81480 <usart_serial_putchar+0x98>)
   81436:	4621      	mov	r1, r4
   81438:	4630      	mov	r0, r6
   8143a:	47a8      	blx	r5
   8143c:	2800      	cmp	r0, #0
   8143e:	d1fa      	bne.n	81436 <usart_serial_putchar+0x4e>
		return 1;
   81440:	2001      	movs	r0, #1
   81442:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81444:	461e      	mov	r6, r3
   81446:	4d0e      	ldr	r5, [pc, #56]	; (81480 <usart_serial_putchar+0x98>)
   81448:	4621      	mov	r1, r4
   8144a:	4630      	mov	r0, r6
   8144c:	47a8      	blx	r5
   8144e:	2800      	cmp	r0, #0
   81450:	d1fa      	bne.n	81448 <usart_serial_putchar+0x60>
		return 1;
   81452:	2001      	movs	r0, #1
   81454:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81456:	461e      	mov	r6, r3
   81458:	4d09      	ldr	r5, [pc, #36]	; (81480 <usart_serial_putchar+0x98>)
   8145a:	4621      	mov	r1, r4
   8145c:	4630      	mov	r0, r6
   8145e:	47a8      	blx	r5
   81460:	2800      	cmp	r0, #0
   81462:	d1fa      	bne.n	8145a <usart_serial_putchar+0x72>
		return 1;
   81464:	2001      	movs	r0, #1
   81466:	bd70      	pop	{r4, r5, r6, pc}
   81468:	400e0800 	.word	0x400e0800
   8146c:	40098000 	.word	0x40098000
   81470:	4009c000 	.word	0x4009c000
   81474:	400a0000 	.word	0x400a0000
   81478:	400a4000 	.word	0x400a4000
   8147c:	00080959 	.word	0x00080959
   81480:	0008097b 	.word	0x0008097b

00081484 <config_console_uart>:




void config_console_uart(void)
{
   81484:	b530      	push	{r4, r5, lr}
   81486:	b085      	sub	sp, #20
   81488:	2008      	movs	r0, #8
   8148a:	4d12      	ldr	r5, [pc, #72]	; (814d4 <config_console_uart+0x50>)
   8148c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8148e:	4c12      	ldr	r4, [pc, #72]	; (814d8 <config_console_uart+0x54>)
   81490:	4b12      	ldr	r3, [pc, #72]	; (814dc <config_console_uart+0x58>)
   81492:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81494:	4a12      	ldr	r2, [pc, #72]	; (814e0 <config_console_uart+0x5c>)
   81496:	4b13      	ldr	r3, [pc, #76]	; (814e4 <config_console_uart+0x60>)
   81498:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8149a:	4a13      	ldr	r2, [pc, #76]	; (814e8 <config_console_uart+0x64>)
   8149c:	4b13      	ldr	r3, [pc, #76]	; (814ec <config_console_uart+0x68>)
   8149e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   814a0:	4b13      	ldr	r3, [pc, #76]	; (814f0 <config_console_uart+0x6c>)
   814a2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   814a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   814a8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   814aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
   814ae:	9303      	str	r3, [sp, #12]
   814b0:	2008      	movs	r0, #8
   814b2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   814b4:	a901      	add	r1, sp, #4
   814b6:	4620      	mov	r0, r4
   814b8:	4b0e      	ldr	r3, [pc, #56]	; (814f4 <config_console_uart+0x70>)
   814ba:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   814bc:	4d0e      	ldr	r5, [pc, #56]	; (814f8 <config_console_uart+0x74>)
   814be:	682b      	ldr	r3, [r5, #0]
   814c0:	2100      	movs	r1, #0
   814c2:	6898      	ldr	r0, [r3, #8]
   814c4:	4c0d      	ldr	r4, [pc, #52]	; (814fc <config_console_uart+0x78>)
   814c6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   814c8:	682b      	ldr	r3, [r5, #0]
   814ca:	2100      	movs	r1, #0
   814cc:	6858      	ldr	r0, [r3, #4]
   814ce:	47a0      	blx	r4
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
	
}
   814d0:	b005      	add	sp, #20
   814d2:	bd30      	pop	{r4, r5, pc}
   814d4:	000810e9 	.word	0x000810e9
   814d8:	400e0800 	.word	0x400e0800
   814dc:	20070ae0 	.word	0x20070ae0
   814e0:	000813e9 	.word	0x000813e9
   814e4:	20070adc 	.word	0x20070adc
   814e8:	0008133d 	.word	0x0008133d
   814ec:	20070ad8 	.word	0x20070ad8
   814f0:	0501bd00 	.word	0x0501bd00
   814f4:	00080923 	.word	0x00080923
   814f8:	20070140 	.word	0x20070140
   814fc:	00081671 	.word	0x00081671

00081500 <main>:



int main (void)
{
   81500:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	
	sysclk_init();
   81502:	4b17      	ldr	r3, [pc, #92]	; (81560 <main+0x60>)
   81504:	4798      	blx	r3

	board_init();
   81506:	4b17      	ldr	r3, [pc, #92]	; (81564 <main+0x64>)
   81508:	4798      	blx	r3
	
	config_console_uart();
   8150a:	4b17      	ldr	r3, [pc, #92]	; (81568 <main+0x68>)
   8150c:	4798      	blx	r3
	
	//printf("This is Arduino Console UART Application.\n");
	ili9341_init();
   8150e:	4b17      	ldr	r3, [pc, #92]	; (8156c <main+0x6c>)
   81510:	4798      	blx	r3
	
	gpio_configure_pin(PIO_PC23_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   81512:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81516:	2057      	movs	r0, #87	; 0x57
   81518:	4c15      	ldr	r4, [pc, #84]	; (81570 <main+0x70>)
   8151a:	47a0      	blx	r4
	gpio_configure_pin(PIO_PC24_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   8151c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81520:	2058      	movs	r0, #88	; 0x58
   81522:	47a0      	blx	r4
	gpio_configure_pin(PIO_PC25_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   81524:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81528:	2059      	movs	r0, #89	; 0x59
   8152a:	47a0      	blx	r4
		//ili9341_backlight_on();
		//delay_ms(500);
		//ili9341_backlight_off();
		//delay_ms(500);
		
			 ili9341_set_top_left_limit(0, 0);
   8152c:	4e11      	ldr	r6, [pc, #68]	; (81574 <main+0x74>)
			 ili9341_set_bottom_right_limit(240, 320);
   8152e:	4d12      	ldr	r5, [pc, #72]	; (81578 <main+0x78>)

			 ili9341_duplicate_pixel(ILI9341_COLOR(255, 0, 0), 240UL * 320UL);
   81530:	4c12      	ldr	r4, [pc, #72]	; (8157c <main+0x7c>)
			 ili9341_set_top_left_limit(0, 0);
   81532:	2100      	movs	r1, #0
   81534:	4608      	mov	r0, r1
   81536:	47b0      	blx	r6
			 ili9341_set_bottom_right_limit(240, 320);
   81538:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8153c:	20f0      	movs	r0, #240	; 0xf0
   8153e:	47a8      	blx	r5
			 ili9341_duplicate_pixel(ILI9341_COLOR(255, 0, 0), 240UL * 320UL);
   81540:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
   81544:	20f8      	movs	r0, #248	; 0xf8
   81546:	47a0      	blx	r4
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   81548:	4b0d      	ldr	r3, [pc, #52]	; (81580 <main+0x80>)
   8154a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8154c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
		port->PIO_CODR = mask;
   81550:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81554:	4b0a      	ldr	r3, [pc, #40]	; (81580 <main+0x80>)
   81556:	bf14      	ite	ne
   81558:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   8155a:	631a      	streq	r2, [r3, #48]	; 0x30
   8155c:	e7e9      	b.n	81532 <main+0x32>
   8155e:	bf00      	nop
   81560:	00080c51 	.word	0x00080c51
   81564:	00080cb5 	.word	0x00080cb5
   81568:	00081485 	.word	0x00081485
   8156c:	000803b5 	.word	0x000803b5
   81570:	00080df5 	.word	0x00080df5
   81574:	00080295 	.word	0x00080295
   81578:	000802b5 	.word	0x000802b5
   8157c:	00080305 	.word	0x00080305
   81580:	400e1000 	.word	0x400e1000

00081584 <__libc_init_array>:
   81584:	b570      	push	{r4, r5, r6, lr}
   81586:	4e0f      	ldr	r6, [pc, #60]	; (815c4 <__libc_init_array+0x40>)
   81588:	4d0f      	ldr	r5, [pc, #60]	; (815c8 <__libc_init_array+0x44>)
   8158a:	1b76      	subs	r6, r6, r5
   8158c:	10b6      	asrs	r6, r6, #2
   8158e:	bf18      	it	ne
   81590:	2400      	movne	r4, #0
   81592:	d005      	beq.n	815a0 <__libc_init_array+0x1c>
   81594:	3401      	adds	r4, #1
   81596:	f855 3b04 	ldr.w	r3, [r5], #4
   8159a:	4798      	blx	r3
   8159c:	42a6      	cmp	r6, r4
   8159e:	d1f9      	bne.n	81594 <__libc_init_array+0x10>
   815a0:	4e0a      	ldr	r6, [pc, #40]	; (815cc <__libc_init_array+0x48>)
   815a2:	4d0b      	ldr	r5, [pc, #44]	; (815d0 <__libc_init_array+0x4c>)
   815a4:	f001 f85c 	bl	82660 <_init>
   815a8:	1b76      	subs	r6, r6, r5
   815aa:	10b6      	asrs	r6, r6, #2
   815ac:	bf18      	it	ne
   815ae:	2400      	movne	r4, #0
   815b0:	d006      	beq.n	815c0 <__libc_init_array+0x3c>
   815b2:	3401      	adds	r4, #1
   815b4:	f855 3b04 	ldr.w	r3, [r5], #4
   815b8:	4798      	blx	r3
   815ba:	42a6      	cmp	r6, r4
   815bc:	d1f9      	bne.n	815b2 <__libc_init_array+0x2e>
   815be:	bd70      	pop	{r4, r5, r6, pc}
   815c0:	bd70      	pop	{r4, r5, r6, pc}
   815c2:	bf00      	nop
   815c4:	0008266c 	.word	0x0008266c
   815c8:	0008266c 	.word	0x0008266c
   815cc:	00082674 	.word	0x00082674
   815d0:	0008266c 	.word	0x0008266c

000815d4 <memset>:
   815d4:	b470      	push	{r4, r5, r6}
   815d6:	0786      	lsls	r6, r0, #30
   815d8:	d046      	beq.n	81668 <memset+0x94>
   815da:	1e54      	subs	r4, r2, #1
   815dc:	2a00      	cmp	r2, #0
   815de:	d041      	beq.n	81664 <memset+0x90>
   815e0:	b2ca      	uxtb	r2, r1
   815e2:	4603      	mov	r3, r0
   815e4:	e002      	b.n	815ec <memset+0x18>
   815e6:	f114 34ff 	adds.w	r4, r4, #4294967295
   815ea:	d33b      	bcc.n	81664 <memset+0x90>
   815ec:	f803 2b01 	strb.w	r2, [r3], #1
   815f0:	079d      	lsls	r5, r3, #30
   815f2:	d1f8      	bne.n	815e6 <memset+0x12>
   815f4:	2c03      	cmp	r4, #3
   815f6:	d92e      	bls.n	81656 <memset+0x82>
   815f8:	b2cd      	uxtb	r5, r1
   815fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   815fe:	2c0f      	cmp	r4, #15
   81600:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81604:	d919      	bls.n	8163a <memset+0x66>
   81606:	4626      	mov	r6, r4
   81608:	f103 0210 	add.w	r2, r3, #16
   8160c:	3e10      	subs	r6, #16
   8160e:	2e0f      	cmp	r6, #15
   81610:	f842 5c10 	str.w	r5, [r2, #-16]
   81614:	f842 5c0c 	str.w	r5, [r2, #-12]
   81618:	f842 5c08 	str.w	r5, [r2, #-8]
   8161c:	f842 5c04 	str.w	r5, [r2, #-4]
   81620:	f102 0210 	add.w	r2, r2, #16
   81624:	d8f2      	bhi.n	8160c <memset+0x38>
   81626:	f1a4 0210 	sub.w	r2, r4, #16
   8162a:	f022 020f 	bic.w	r2, r2, #15
   8162e:	f004 040f 	and.w	r4, r4, #15
   81632:	3210      	adds	r2, #16
   81634:	2c03      	cmp	r4, #3
   81636:	4413      	add	r3, r2
   81638:	d90d      	bls.n	81656 <memset+0x82>
   8163a:	461e      	mov	r6, r3
   8163c:	4622      	mov	r2, r4
   8163e:	3a04      	subs	r2, #4
   81640:	2a03      	cmp	r2, #3
   81642:	f846 5b04 	str.w	r5, [r6], #4
   81646:	d8fa      	bhi.n	8163e <memset+0x6a>
   81648:	1f22      	subs	r2, r4, #4
   8164a:	f022 0203 	bic.w	r2, r2, #3
   8164e:	3204      	adds	r2, #4
   81650:	4413      	add	r3, r2
   81652:	f004 0403 	and.w	r4, r4, #3
   81656:	b12c      	cbz	r4, 81664 <memset+0x90>
   81658:	b2c9      	uxtb	r1, r1
   8165a:	441c      	add	r4, r3
   8165c:	f803 1b01 	strb.w	r1, [r3], #1
   81660:	429c      	cmp	r4, r3
   81662:	d1fb      	bne.n	8165c <memset+0x88>
   81664:	bc70      	pop	{r4, r5, r6}
   81666:	4770      	bx	lr
   81668:	4614      	mov	r4, r2
   8166a:	4603      	mov	r3, r0
   8166c:	e7c2      	b.n	815f4 <memset+0x20>
   8166e:	bf00      	nop

00081670 <setbuf>:
   81670:	2900      	cmp	r1, #0
   81672:	bf0c      	ite	eq
   81674:	2202      	moveq	r2, #2
   81676:	2200      	movne	r2, #0
   81678:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8167c:	f000 b800 	b.w	81680 <setvbuf>

00081680 <setvbuf>:
   81680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81684:	4d61      	ldr	r5, [pc, #388]	; (8180c <setvbuf+0x18c>)
   81686:	b083      	sub	sp, #12
   81688:	682d      	ldr	r5, [r5, #0]
   8168a:	4604      	mov	r4, r0
   8168c:	460f      	mov	r7, r1
   8168e:	4690      	mov	r8, r2
   81690:	461e      	mov	r6, r3
   81692:	b115      	cbz	r5, 8169a <setvbuf+0x1a>
   81694:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81696:	2b00      	cmp	r3, #0
   81698:	d064      	beq.n	81764 <setvbuf+0xe4>
   8169a:	f1b8 0f02 	cmp.w	r8, #2
   8169e:	d006      	beq.n	816ae <setvbuf+0x2e>
   816a0:	f1b8 0f01 	cmp.w	r8, #1
   816a4:	f200 809f 	bhi.w	817e6 <setvbuf+0x166>
   816a8:	2e00      	cmp	r6, #0
   816aa:	f2c0 809c 	blt.w	817e6 <setvbuf+0x166>
   816ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   816b0:	07d8      	lsls	r0, r3, #31
   816b2:	d534      	bpl.n	8171e <setvbuf+0x9e>
   816b4:	4621      	mov	r1, r4
   816b6:	4628      	mov	r0, r5
   816b8:	f000 f956 	bl	81968 <_fflush_r>
   816bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   816be:	b141      	cbz	r1, 816d2 <setvbuf+0x52>
   816c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   816c4:	4299      	cmp	r1, r3
   816c6:	d002      	beq.n	816ce <setvbuf+0x4e>
   816c8:	4628      	mov	r0, r5
   816ca:	f000 fa4b 	bl	81b64 <_free_r>
   816ce:	2300      	movs	r3, #0
   816d0:	6323      	str	r3, [r4, #48]	; 0x30
   816d2:	2200      	movs	r2, #0
   816d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   816d8:	61a2      	str	r2, [r4, #24]
   816da:	6062      	str	r2, [r4, #4]
   816dc:	061a      	lsls	r2, r3, #24
   816de:	d43a      	bmi.n	81756 <setvbuf+0xd6>
   816e0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   816e4:	f023 0303 	bic.w	r3, r3, #3
   816e8:	f1b8 0f02 	cmp.w	r8, #2
   816ec:	81a3      	strh	r3, [r4, #12]
   816ee:	d01d      	beq.n	8172c <setvbuf+0xac>
   816f0:	ab01      	add	r3, sp, #4
   816f2:	466a      	mov	r2, sp
   816f4:	4621      	mov	r1, r4
   816f6:	4628      	mov	r0, r5
   816f8:	f000 fb4a 	bl	81d90 <__swhatbuf_r>
   816fc:	89a3      	ldrh	r3, [r4, #12]
   816fe:	4318      	orrs	r0, r3
   81700:	81a0      	strh	r0, [r4, #12]
   81702:	2e00      	cmp	r6, #0
   81704:	d132      	bne.n	8176c <setvbuf+0xec>
   81706:	9e00      	ldr	r6, [sp, #0]
   81708:	4630      	mov	r0, r6
   8170a:	f000 fb6f 	bl	81dec <malloc>
   8170e:	4607      	mov	r7, r0
   81710:	2800      	cmp	r0, #0
   81712:	d06b      	beq.n	817ec <setvbuf+0x16c>
   81714:	89a3      	ldrh	r3, [r4, #12]
   81716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8171a:	81a3      	strh	r3, [r4, #12]
   8171c:	e028      	b.n	81770 <setvbuf+0xf0>
   8171e:	89a3      	ldrh	r3, [r4, #12]
   81720:	0599      	lsls	r1, r3, #22
   81722:	d4c7      	bmi.n	816b4 <setvbuf+0x34>
   81724:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81726:	f000 fb2f 	bl	81d88 <__retarget_lock_acquire_recursive>
   8172a:	e7c3      	b.n	816b4 <setvbuf+0x34>
   8172c:	2500      	movs	r5, #0
   8172e:	2600      	movs	r6, #0
   81730:	2001      	movs	r0, #1
   81732:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81734:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81738:	f043 0302 	orr.w	r3, r3, #2
   8173c:	60a6      	str	r6, [r4, #8]
   8173e:	07ce      	lsls	r6, r1, #31
   81740:	81a3      	strh	r3, [r4, #12]
   81742:	6160      	str	r0, [r4, #20]
   81744:	6022      	str	r2, [r4, #0]
   81746:	6122      	str	r2, [r4, #16]
   81748:	d401      	bmi.n	8174e <setvbuf+0xce>
   8174a:	0598      	lsls	r0, r3, #22
   8174c:	d53e      	bpl.n	817cc <setvbuf+0x14c>
   8174e:	4628      	mov	r0, r5
   81750:	b003      	add	sp, #12
   81752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81756:	6921      	ldr	r1, [r4, #16]
   81758:	4628      	mov	r0, r5
   8175a:	f000 fa03 	bl	81b64 <_free_r>
   8175e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81762:	e7bd      	b.n	816e0 <setvbuf+0x60>
   81764:	4628      	mov	r0, r5
   81766:	f000 f957 	bl	81a18 <__sinit>
   8176a:	e796      	b.n	8169a <setvbuf+0x1a>
   8176c:	2f00      	cmp	r7, #0
   8176e:	d0cb      	beq.n	81708 <setvbuf+0x88>
   81770:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81772:	2b00      	cmp	r3, #0
   81774:	d033      	beq.n	817de <setvbuf+0x15e>
   81776:	9b00      	ldr	r3, [sp, #0]
   81778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8177c:	429e      	cmp	r6, r3
   8177e:	bf1c      	itt	ne
   81780:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81784:	81a2      	strhne	r2, [r4, #12]
   81786:	f1b8 0f01 	cmp.w	r8, #1
   8178a:	bf04      	itt	eq
   8178c:	f042 0201 	orreq.w	r2, r2, #1
   81790:	81a2      	strheq	r2, [r4, #12]
   81792:	b292      	uxth	r2, r2
   81794:	f012 0308 	ands.w	r3, r2, #8
   81798:	6027      	str	r7, [r4, #0]
   8179a:	6127      	str	r7, [r4, #16]
   8179c:	6166      	str	r6, [r4, #20]
   8179e:	d00e      	beq.n	817be <setvbuf+0x13e>
   817a0:	07d1      	lsls	r1, r2, #31
   817a2:	d51a      	bpl.n	817da <setvbuf+0x15a>
   817a4:	2300      	movs	r3, #0
   817a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   817a8:	4276      	negs	r6, r6
   817aa:	f015 0501 	ands.w	r5, r5, #1
   817ae:	61a6      	str	r6, [r4, #24]
   817b0:	60a3      	str	r3, [r4, #8]
   817b2:	d009      	beq.n	817c8 <setvbuf+0x148>
   817b4:	2500      	movs	r5, #0
   817b6:	4628      	mov	r0, r5
   817b8:	b003      	add	sp, #12
   817ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   817be:	60a3      	str	r3, [r4, #8]
   817c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
   817c2:	f015 0501 	ands.w	r5, r5, #1
   817c6:	d1f5      	bne.n	817b4 <setvbuf+0x134>
   817c8:	0593      	lsls	r3, r2, #22
   817ca:	d4c0      	bmi.n	8174e <setvbuf+0xce>
   817cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   817ce:	f000 fadd 	bl	81d8c <__retarget_lock_release_recursive>
   817d2:	4628      	mov	r0, r5
   817d4:	b003      	add	sp, #12
   817d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   817da:	60a6      	str	r6, [r4, #8]
   817dc:	e7f0      	b.n	817c0 <setvbuf+0x140>
   817de:	4628      	mov	r0, r5
   817e0:	f000 f91a 	bl	81a18 <__sinit>
   817e4:	e7c7      	b.n	81776 <setvbuf+0xf6>
   817e6:	f04f 35ff 	mov.w	r5, #4294967295
   817ea:	e7b0      	b.n	8174e <setvbuf+0xce>
   817ec:	f8dd 9000 	ldr.w	r9, [sp]
   817f0:	45b1      	cmp	r9, r6
   817f2:	d004      	beq.n	817fe <setvbuf+0x17e>
   817f4:	4648      	mov	r0, r9
   817f6:	f000 faf9 	bl	81dec <malloc>
   817fa:	4607      	mov	r7, r0
   817fc:	b920      	cbnz	r0, 81808 <setvbuf+0x188>
   817fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81802:	f04f 35ff 	mov.w	r5, #4294967295
   81806:	e792      	b.n	8172e <setvbuf+0xae>
   81808:	464e      	mov	r6, r9
   8180a:	e783      	b.n	81714 <setvbuf+0x94>
   8180c:	20070140 	.word	0x20070140

00081810 <register_fini>:
   81810:	4b02      	ldr	r3, [pc, #8]	; (8181c <register_fini+0xc>)
   81812:	b113      	cbz	r3, 8181a <register_fini+0xa>
   81814:	4802      	ldr	r0, [pc, #8]	; (81820 <register_fini+0x10>)
   81816:	f000 b805 	b.w	81824 <atexit>
   8181a:	4770      	bx	lr
   8181c:	00000000 	.word	0x00000000
   81820:	00081a91 	.word	0x00081a91

00081824 <atexit>:
   81824:	2300      	movs	r3, #0
   81826:	4601      	mov	r1, r0
   81828:	461a      	mov	r2, r3
   8182a:	4618      	mov	r0, r3
   8182c:	f000 be00 	b.w	82430 <__register_exitproc>

00081830 <__sflush_r>:
   81830:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   81834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81838:	b29a      	uxth	r2, r3
   8183a:	460d      	mov	r5, r1
   8183c:	0711      	lsls	r1, r2, #28
   8183e:	4680      	mov	r8, r0
   81840:	d43a      	bmi.n	818b8 <__sflush_r+0x88>
   81842:	686a      	ldr	r2, [r5, #4]
   81844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81848:	2a00      	cmp	r2, #0
   8184a:	81ab      	strh	r3, [r5, #12]
   8184c:	dd70      	ble.n	81930 <__sflush_r+0x100>
   8184e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81850:	2c00      	cmp	r4, #0
   81852:	d04a      	beq.n	818ea <__sflush_r+0xba>
   81854:	2200      	movs	r2, #0
   81856:	b29b      	uxth	r3, r3
   81858:	f8d8 6000 	ldr.w	r6, [r8]
   8185c:	f8c8 2000 	str.w	r2, [r8]
   81860:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   81864:	d068      	beq.n	81938 <__sflush_r+0x108>
   81866:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81868:	075f      	lsls	r7, r3, #29
   8186a:	d505      	bpl.n	81878 <__sflush_r+0x48>
   8186c:	6869      	ldr	r1, [r5, #4]
   8186e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81870:	1a52      	subs	r2, r2, r1
   81872:	b10b      	cbz	r3, 81878 <__sflush_r+0x48>
   81874:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81876:	1ad2      	subs	r2, r2, r3
   81878:	2300      	movs	r3, #0
   8187a:	69e9      	ldr	r1, [r5, #28]
   8187c:	4640      	mov	r0, r8
   8187e:	47a0      	blx	r4
   81880:	1c44      	adds	r4, r0, #1
   81882:	d03d      	beq.n	81900 <__sflush_r+0xd0>
   81884:	2100      	movs	r1, #0
   81886:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8188a:	692a      	ldr	r2, [r5, #16]
   8188c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81890:	81ab      	strh	r3, [r5, #12]
   81892:	04db      	lsls	r3, r3, #19
   81894:	6069      	str	r1, [r5, #4]
   81896:	602a      	str	r2, [r5, #0]
   81898:	d448      	bmi.n	8192c <__sflush_r+0xfc>
   8189a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8189c:	f8c8 6000 	str.w	r6, [r8]
   818a0:	b319      	cbz	r1, 818ea <__sflush_r+0xba>
   818a2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   818a6:	4299      	cmp	r1, r3
   818a8:	d002      	beq.n	818b0 <__sflush_r+0x80>
   818aa:	4640      	mov	r0, r8
   818ac:	f000 f95a 	bl	81b64 <_free_r>
   818b0:	2000      	movs	r0, #0
   818b2:	6328      	str	r0, [r5, #48]	; 0x30
   818b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818b8:	692e      	ldr	r6, [r5, #16]
   818ba:	b1b6      	cbz	r6, 818ea <__sflush_r+0xba>
   818bc:	0791      	lsls	r1, r2, #30
   818be:	bf18      	it	ne
   818c0:	2300      	movne	r3, #0
   818c2:	682c      	ldr	r4, [r5, #0]
   818c4:	bf08      	it	eq
   818c6:	696b      	ldreq	r3, [r5, #20]
   818c8:	602e      	str	r6, [r5, #0]
   818ca:	1ba4      	subs	r4, r4, r6
   818cc:	60ab      	str	r3, [r5, #8]
   818ce:	e00a      	b.n	818e6 <__sflush_r+0xb6>
   818d0:	4623      	mov	r3, r4
   818d2:	4632      	mov	r2, r6
   818d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   818d6:	69e9      	ldr	r1, [r5, #28]
   818d8:	4640      	mov	r0, r8
   818da:	47b8      	blx	r7
   818dc:	2800      	cmp	r0, #0
   818de:	eba4 0400 	sub.w	r4, r4, r0
   818e2:	4406      	add	r6, r0
   818e4:	dd04      	ble.n	818f0 <__sflush_r+0xc0>
   818e6:	2c00      	cmp	r4, #0
   818e8:	dcf2      	bgt.n	818d0 <__sflush_r+0xa0>
   818ea:	2000      	movs	r0, #0
   818ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818f0:	89ab      	ldrh	r3, [r5, #12]
   818f2:	f04f 30ff 	mov.w	r0, #4294967295
   818f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   818fa:	81ab      	strh	r3, [r5, #12]
   818fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81900:	f8d8 4000 	ldr.w	r4, [r8]
   81904:	2c1d      	cmp	r4, #29
   81906:	d8f3      	bhi.n	818f0 <__sflush_r+0xc0>
   81908:	4b16      	ldr	r3, [pc, #88]	; (81964 <__sflush_r+0x134>)
   8190a:	40e3      	lsrs	r3, r4
   8190c:	43db      	mvns	r3, r3
   8190e:	f013 0301 	ands.w	r3, r3, #1
   81912:	d1ed      	bne.n	818f0 <__sflush_r+0xc0>
   81914:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   81918:	6929      	ldr	r1, [r5, #16]
   8191a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8191e:	81aa      	strh	r2, [r5, #12]
   81920:	04d2      	lsls	r2, r2, #19
   81922:	606b      	str	r3, [r5, #4]
   81924:	6029      	str	r1, [r5, #0]
   81926:	d5b8      	bpl.n	8189a <__sflush_r+0x6a>
   81928:	2c00      	cmp	r4, #0
   8192a:	d1b6      	bne.n	8189a <__sflush_r+0x6a>
   8192c:	6528      	str	r0, [r5, #80]	; 0x50
   8192e:	e7b4      	b.n	8189a <__sflush_r+0x6a>
   81930:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81932:	2a00      	cmp	r2, #0
   81934:	dc8b      	bgt.n	8184e <__sflush_r+0x1e>
   81936:	e7d8      	b.n	818ea <__sflush_r+0xba>
   81938:	2301      	movs	r3, #1
   8193a:	69e9      	ldr	r1, [r5, #28]
   8193c:	4640      	mov	r0, r8
   8193e:	47a0      	blx	r4
   81940:	1c43      	adds	r3, r0, #1
   81942:	4602      	mov	r2, r0
   81944:	d002      	beq.n	8194c <__sflush_r+0x11c>
   81946:	89ab      	ldrh	r3, [r5, #12]
   81948:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8194a:	e78d      	b.n	81868 <__sflush_r+0x38>
   8194c:	f8d8 3000 	ldr.w	r3, [r8]
   81950:	2b00      	cmp	r3, #0
   81952:	d0f8      	beq.n	81946 <__sflush_r+0x116>
   81954:	2b1d      	cmp	r3, #29
   81956:	d001      	beq.n	8195c <__sflush_r+0x12c>
   81958:	2b16      	cmp	r3, #22
   8195a:	d1c9      	bne.n	818f0 <__sflush_r+0xc0>
   8195c:	f8c8 6000 	str.w	r6, [r8]
   81960:	e7c3      	b.n	818ea <__sflush_r+0xba>
   81962:	bf00      	nop
   81964:	20400001 	.word	0x20400001

00081968 <_fflush_r>:
   81968:	b538      	push	{r3, r4, r5, lr}
   8196a:	460d      	mov	r5, r1
   8196c:	4604      	mov	r4, r0
   8196e:	b108      	cbz	r0, 81974 <_fflush_r+0xc>
   81970:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81972:	b1bb      	cbz	r3, 819a4 <_fflush_r+0x3c>
   81974:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   81978:	b188      	cbz	r0, 8199e <_fflush_r+0x36>
   8197a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8197c:	07db      	lsls	r3, r3, #31
   8197e:	d401      	bmi.n	81984 <_fflush_r+0x1c>
   81980:	0581      	lsls	r1, r0, #22
   81982:	d517      	bpl.n	819b4 <_fflush_r+0x4c>
   81984:	4620      	mov	r0, r4
   81986:	4629      	mov	r1, r5
   81988:	f7ff ff52 	bl	81830 <__sflush_r>
   8198c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8198e:	4604      	mov	r4, r0
   81990:	07da      	lsls	r2, r3, #31
   81992:	d402      	bmi.n	8199a <_fflush_r+0x32>
   81994:	89ab      	ldrh	r3, [r5, #12]
   81996:	059b      	lsls	r3, r3, #22
   81998:	d507      	bpl.n	819aa <_fflush_r+0x42>
   8199a:	4620      	mov	r0, r4
   8199c:	bd38      	pop	{r3, r4, r5, pc}
   8199e:	4604      	mov	r4, r0
   819a0:	4620      	mov	r0, r4
   819a2:	bd38      	pop	{r3, r4, r5, pc}
   819a4:	f000 f838 	bl	81a18 <__sinit>
   819a8:	e7e4      	b.n	81974 <_fflush_r+0xc>
   819aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   819ac:	f000 f9ee 	bl	81d8c <__retarget_lock_release_recursive>
   819b0:	4620      	mov	r0, r4
   819b2:	bd38      	pop	{r3, r4, r5, pc}
   819b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   819b6:	f000 f9e7 	bl	81d88 <__retarget_lock_acquire_recursive>
   819ba:	e7e3      	b.n	81984 <_fflush_r+0x1c>

000819bc <_cleanup_r>:
   819bc:	4901      	ldr	r1, [pc, #4]	; (819c4 <_cleanup_r+0x8>)
   819be:	f000 b9b7 	b.w	81d30 <_fwalk_reent>
   819c2:	bf00      	nop
   819c4:	00082519 	.word	0x00082519

000819c8 <std.isra.0>:
   819c8:	2300      	movs	r3, #0
   819ca:	b510      	push	{r4, lr}
   819cc:	4604      	mov	r4, r0
   819ce:	8181      	strh	r1, [r0, #12]
   819d0:	81c2      	strh	r2, [r0, #14]
   819d2:	6003      	str	r3, [r0, #0]
   819d4:	6043      	str	r3, [r0, #4]
   819d6:	6083      	str	r3, [r0, #8]
   819d8:	6643      	str	r3, [r0, #100]	; 0x64
   819da:	6103      	str	r3, [r0, #16]
   819dc:	6143      	str	r3, [r0, #20]
   819de:	6183      	str	r3, [r0, #24]
   819e0:	4619      	mov	r1, r3
   819e2:	2208      	movs	r2, #8
   819e4:	305c      	adds	r0, #92	; 0x5c
   819e6:	f7ff fdf5 	bl	815d4 <memset>
   819ea:	4807      	ldr	r0, [pc, #28]	; (81a08 <std.isra.0+0x40>)
   819ec:	4907      	ldr	r1, [pc, #28]	; (81a0c <std.isra.0+0x44>)
   819ee:	4a08      	ldr	r2, [pc, #32]	; (81a10 <std.isra.0+0x48>)
   819f0:	4b08      	ldr	r3, [pc, #32]	; (81a14 <std.isra.0+0x4c>)
   819f2:	6220      	str	r0, [r4, #32]
   819f4:	61e4      	str	r4, [r4, #28]
   819f6:	6261      	str	r1, [r4, #36]	; 0x24
   819f8:	62a2      	str	r2, [r4, #40]	; 0x28
   819fa:	62e3      	str	r3, [r4, #44]	; 0x2c
   819fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   81a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81a04:	f000 b9bc 	b.w	81d80 <__retarget_lock_init_recursive>
   81a08:	0008237d 	.word	0x0008237d
   81a0c:	000823a1 	.word	0x000823a1
   81a10:	000823dd 	.word	0x000823dd
   81a14:	000823fd 	.word	0x000823fd

00081a18 <__sinit>:
   81a18:	b510      	push	{r4, lr}
   81a1a:	4604      	mov	r4, r0
   81a1c:	4814      	ldr	r0, [pc, #80]	; (81a70 <__sinit+0x58>)
   81a1e:	f000 f9b3 	bl	81d88 <__retarget_lock_acquire_recursive>
   81a22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81a24:	b9fa      	cbnz	r2, 81a66 <__sinit+0x4e>
   81a26:	2003      	movs	r0, #3
   81a28:	4912      	ldr	r1, [pc, #72]	; (81a74 <__sinit+0x5c>)
   81a2a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   81a2e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   81a32:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   81a36:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   81a3a:	63e1      	str	r1, [r4, #60]	; 0x3c
   81a3c:	6860      	ldr	r0, [r4, #4]
   81a3e:	2104      	movs	r1, #4
   81a40:	f7ff ffc2 	bl	819c8 <std.isra.0>
   81a44:	68a0      	ldr	r0, [r4, #8]
   81a46:	2201      	movs	r2, #1
   81a48:	2109      	movs	r1, #9
   81a4a:	f7ff ffbd 	bl	819c8 <std.isra.0>
   81a4e:	68e0      	ldr	r0, [r4, #12]
   81a50:	2202      	movs	r2, #2
   81a52:	2112      	movs	r1, #18
   81a54:	f7ff ffb8 	bl	819c8 <std.isra.0>
   81a58:	2301      	movs	r3, #1
   81a5a:	4805      	ldr	r0, [pc, #20]	; (81a70 <__sinit+0x58>)
   81a5c:	63a3      	str	r3, [r4, #56]	; 0x38
   81a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81a62:	f000 b993 	b.w	81d8c <__retarget_lock_release_recursive>
   81a66:	4802      	ldr	r0, [pc, #8]	; (81a70 <__sinit+0x58>)
   81a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81a6c:	f000 b98e 	b.w	81d8c <__retarget_lock_release_recursive>
   81a70:	20070af0 	.word	0x20070af0
   81a74:	000819bd 	.word	0x000819bd

00081a78 <__sfp_lock_acquire>:
   81a78:	4801      	ldr	r0, [pc, #4]	; (81a80 <__sfp_lock_acquire+0x8>)
   81a7a:	f000 b985 	b.w	81d88 <__retarget_lock_acquire_recursive>
   81a7e:	bf00      	nop
   81a80:	20070b04 	.word	0x20070b04

00081a84 <__sfp_lock_release>:
   81a84:	4801      	ldr	r0, [pc, #4]	; (81a8c <__sfp_lock_release+0x8>)
   81a86:	f000 b981 	b.w	81d8c <__retarget_lock_release_recursive>
   81a8a:	bf00      	nop
   81a8c:	20070b04 	.word	0x20070b04

00081a90 <__libc_fini_array>:
   81a90:	b538      	push	{r3, r4, r5, lr}
   81a92:	4c0a      	ldr	r4, [pc, #40]	; (81abc <__libc_fini_array+0x2c>)
   81a94:	4d0a      	ldr	r5, [pc, #40]	; (81ac0 <__libc_fini_array+0x30>)
   81a96:	1b64      	subs	r4, r4, r5
   81a98:	10a4      	asrs	r4, r4, #2
   81a9a:	d00a      	beq.n	81ab2 <__libc_fini_array+0x22>
   81a9c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81aa0:	3b01      	subs	r3, #1
   81aa2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81aa6:	3c01      	subs	r4, #1
   81aa8:	f855 3904 	ldr.w	r3, [r5], #-4
   81aac:	4798      	blx	r3
   81aae:	2c00      	cmp	r4, #0
   81ab0:	d1f9      	bne.n	81aa6 <__libc_fini_array+0x16>
   81ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81ab6:	f000 bddd 	b.w	82674 <_fini>
   81aba:	bf00      	nop
   81abc:	00082684 	.word	0x00082684
   81ac0:	00082680 	.word	0x00082680

00081ac4 <_malloc_trim_r>:
   81ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ac6:	460c      	mov	r4, r1
   81ac8:	4f23      	ldr	r7, [pc, #140]	; (81b58 <_malloc_trim_r+0x94>)
   81aca:	4606      	mov	r6, r0
   81acc:	f000 fc38 	bl	82340 <__malloc_lock>
   81ad0:	68bb      	ldr	r3, [r7, #8]
   81ad2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   81ad6:	685d      	ldr	r5, [r3, #4]
   81ad8:	310f      	adds	r1, #15
   81ada:	f025 0503 	bic.w	r5, r5, #3
   81ade:	4429      	add	r1, r5
   81ae0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   81ae4:	f021 010f 	bic.w	r1, r1, #15
   81ae8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   81aec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   81af0:	db07      	blt.n	81b02 <_malloc_trim_r+0x3e>
   81af2:	2100      	movs	r1, #0
   81af4:	4630      	mov	r0, r6
   81af6:	f000 fc2f 	bl	82358 <_sbrk_r>
   81afa:	68bb      	ldr	r3, [r7, #8]
   81afc:	442b      	add	r3, r5
   81afe:	4298      	cmp	r0, r3
   81b00:	d004      	beq.n	81b0c <_malloc_trim_r+0x48>
   81b02:	4630      	mov	r0, r6
   81b04:	f000 fc22 	bl	8234c <__malloc_unlock>
   81b08:	2000      	movs	r0, #0
   81b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81b0c:	4261      	negs	r1, r4
   81b0e:	4630      	mov	r0, r6
   81b10:	f000 fc22 	bl	82358 <_sbrk_r>
   81b14:	3001      	adds	r0, #1
   81b16:	d00d      	beq.n	81b34 <_malloc_trim_r+0x70>
   81b18:	4b10      	ldr	r3, [pc, #64]	; (81b5c <_malloc_trim_r+0x98>)
   81b1a:	68ba      	ldr	r2, [r7, #8]
   81b1c:	6819      	ldr	r1, [r3, #0]
   81b1e:	1b2d      	subs	r5, r5, r4
   81b20:	f045 0501 	orr.w	r5, r5, #1
   81b24:	4630      	mov	r0, r6
   81b26:	1b09      	subs	r1, r1, r4
   81b28:	6055      	str	r5, [r2, #4]
   81b2a:	6019      	str	r1, [r3, #0]
   81b2c:	f000 fc0e 	bl	8234c <__malloc_unlock>
   81b30:	2001      	movs	r0, #1
   81b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81b34:	2100      	movs	r1, #0
   81b36:	4630      	mov	r0, r6
   81b38:	f000 fc0e 	bl	82358 <_sbrk_r>
   81b3c:	68ba      	ldr	r2, [r7, #8]
   81b3e:	1a83      	subs	r3, r0, r2
   81b40:	2b0f      	cmp	r3, #15
   81b42:	ddde      	ble.n	81b02 <_malloc_trim_r+0x3e>
   81b44:	4c06      	ldr	r4, [pc, #24]	; (81b60 <_malloc_trim_r+0x9c>)
   81b46:	4905      	ldr	r1, [pc, #20]	; (81b5c <_malloc_trim_r+0x98>)
   81b48:	6824      	ldr	r4, [r4, #0]
   81b4a:	f043 0301 	orr.w	r3, r3, #1
   81b4e:	1b00      	subs	r0, r0, r4
   81b50:	6053      	str	r3, [r2, #4]
   81b52:	6008      	str	r0, [r1, #0]
   81b54:	e7d5      	b.n	81b02 <_malloc_trim_r+0x3e>
   81b56:	bf00      	nop
   81b58:	20070574 	.word	0x20070574
   81b5c:	20070aa4 	.word	0x20070aa4
   81b60:	2007097c 	.word	0x2007097c

00081b64 <_free_r>:
   81b64:	2900      	cmp	r1, #0
   81b66:	d044      	beq.n	81bf2 <_free_r+0x8e>
   81b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b6c:	460d      	mov	r5, r1
   81b6e:	4680      	mov	r8, r0
   81b70:	f000 fbe6 	bl	82340 <__malloc_lock>
   81b74:	f855 7c04 	ldr.w	r7, [r5, #-4]
   81b78:	4969      	ldr	r1, [pc, #420]	; (81d20 <_free_r+0x1bc>)
   81b7a:	f1a5 0408 	sub.w	r4, r5, #8
   81b7e:	f027 0301 	bic.w	r3, r7, #1
   81b82:	18e2      	adds	r2, r4, r3
   81b84:	688e      	ldr	r6, [r1, #8]
   81b86:	6850      	ldr	r0, [r2, #4]
   81b88:	42b2      	cmp	r2, r6
   81b8a:	f020 0003 	bic.w	r0, r0, #3
   81b8e:	d05e      	beq.n	81c4e <_free_r+0xea>
   81b90:	07fe      	lsls	r6, r7, #31
   81b92:	6050      	str	r0, [r2, #4]
   81b94:	d40b      	bmi.n	81bae <_free_r+0x4a>
   81b96:	f855 7c08 	ldr.w	r7, [r5, #-8]
   81b9a:	f101 0e08 	add.w	lr, r1, #8
   81b9e:	1be4      	subs	r4, r4, r7
   81ba0:	68a5      	ldr	r5, [r4, #8]
   81ba2:	443b      	add	r3, r7
   81ba4:	4575      	cmp	r5, lr
   81ba6:	d06d      	beq.n	81c84 <_free_r+0x120>
   81ba8:	68e7      	ldr	r7, [r4, #12]
   81baa:	60ef      	str	r7, [r5, #12]
   81bac:	60bd      	str	r5, [r7, #8]
   81bae:	1815      	adds	r5, r2, r0
   81bb0:	686d      	ldr	r5, [r5, #4]
   81bb2:	07ed      	lsls	r5, r5, #31
   81bb4:	d53e      	bpl.n	81c34 <_free_r+0xd0>
   81bb6:	f043 0201 	orr.w	r2, r3, #1
   81bba:	6062      	str	r2, [r4, #4]
   81bbc:	50e3      	str	r3, [r4, r3]
   81bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81bc2:	d217      	bcs.n	81bf4 <_free_r+0x90>
   81bc4:	2201      	movs	r2, #1
   81bc6:	08db      	lsrs	r3, r3, #3
   81bc8:	1098      	asrs	r0, r3, #2
   81bca:	684d      	ldr	r5, [r1, #4]
   81bcc:	4413      	add	r3, r2
   81bce:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   81bd2:	4082      	lsls	r2, r0
   81bd4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   81bd8:	432a      	orrs	r2, r5
   81bda:	3808      	subs	r0, #8
   81bdc:	60e0      	str	r0, [r4, #12]
   81bde:	60a7      	str	r7, [r4, #8]
   81be0:	604a      	str	r2, [r1, #4]
   81be2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   81be6:	60fc      	str	r4, [r7, #12]
   81be8:	4640      	mov	r0, r8
   81bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81bee:	f000 bbad 	b.w	8234c <__malloc_unlock>
   81bf2:	4770      	bx	lr
   81bf4:	0a5a      	lsrs	r2, r3, #9
   81bf6:	2a04      	cmp	r2, #4
   81bf8:	d852      	bhi.n	81ca0 <_free_r+0x13c>
   81bfa:	099a      	lsrs	r2, r3, #6
   81bfc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   81c00:	00ff      	lsls	r7, r7, #3
   81c02:	f102 0538 	add.w	r5, r2, #56	; 0x38
   81c06:	19c8      	adds	r0, r1, r7
   81c08:	59ca      	ldr	r2, [r1, r7]
   81c0a:	3808      	subs	r0, #8
   81c0c:	4290      	cmp	r0, r2
   81c0e:	d04f      	beq.n	81cb0 <_free_r+0x14c>
   81c10:	6851      	ldr	r1, [r2, #4]
   81c12:	f021 0103 	bic.w	r1, r1, #3
   81c16:	428b      	cmp	r3, r1
   81c18:	d232      	bcs.n	81c80 <_free_r+0x11c>
   81c1a:	6892      	ldr	r2, [r2, #8]
   81c1c:	4290      	cmp	r0, r2
   81c1e:	d1f7      	bne.n	81c10 <_free_r+0xac>
   81c20:	68c3      	ldr	r3, [r0, #12]
   81c22:	60a0      	str	r0, [r4, #8]
   81c24:	60e3      	str	r3, [r4, #12]
   81c26:	609c      	str	r4, [r3, #8]
   81c28:	60c4      	str	r4, [r0, #12]
   81c2a:	4640      	mov	r0, r8
   81c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81c30:	f000 bb8c 	b.w	8234c <__malloc_unlock>
   81c34:	6895      	ldr	r5, [r2, #8]
   81c36:	4f3b      	ldr	r7, [pc, #236]	; (81d24 <_free_r+0x1c0>)
   81c38:	4403      	add	r3, r0
   81c3a:	42bd      	cmp	r5, r7
   81c3c:	d040      	beq.n	81cc0 <_free_r+0x15c>
   81c3e:	68d0      	ldr	r0, [r2, #12]
   81c40:	f043 0201 	orr.w	r2, r3, #1
   81c44:	60e8      	str	r0, [r5, #12]
   81c46:	6085      	str	r5, [r0, #8]
   81c48:	6062      	str	r2, [r4, #4]
   81c4a:	50e3      	str	r3, [r4, r3]
   81c4c:	e7b7      	b.n	81bbe <_free_r+0x5a>
   81c4e:	07ff      	lsls	r7, r7, #31
   81c50:	4403      	add	r3, r0
   81c52:	d407      	bmi.n	81c64 <_free_r+0x100>
   81c54:	f855 5c08 	ldr.w	r5, [r5, #-8]
   81c58:	1b64      	subs	r4, r4, r5
   81c5a:	68e2      	ldr	r2, [r4, #12]
   81c5c:	68a0      	ldr	r0, [r4, #8]
   81c5e:	442b      	add	r3, r5
   81c60:	60c2      	str	r2, [r0, #12]
   81c62:	6090      	str	r0, [r2, #8]
   81c64:	4a30      	ldr	r2, [pc, #192]	; (81d28 <_free_r+0x1c4>)
   81c66:	f043 0001 	orr.w	r0, r3, #1
   81c6a:	6812      	ldr	r2, [r2, #0]
   81c6c:	6060      	str	r0, [r4, #4]
   81c6e:	4293      	cmp	r3, r2
   81c70:	608c      	str	r4, [r1, #8]
   81c72:	d3b9      	bcc.n	81be8 <_free_r+0x84>
   81c74:	4b2d      	ldr	r3, [pc, #180]	; (81d2c <_free_r+0x1c8>)
   81c76:	4640      	mov	r0, r8
   81c78:	6819      	ldr	r1, [r3, #0]
   81c7a:	f7ff ff23 	bl	81ac4 <_malloc_trim_r>
   81c7e:	e7b3      	b.n	81be8 <_free_r+0x84>
   81c80:	4610      	mov	r0, r2
   81c82:	e7cd      	b.n	81c20 <_free_r+0xbc>
   81c84:	1811      	adds	r1, r2, r0
   81c86:	6849      	ldr	r1, [r1, #4]
   81c88:	07c9      	lsls	r1, r1, #31
   81c8a:	d444      	bmi.n	81d16 <_free_r+0x1b2>
   81c8c:	6891      	ldr	r1, [r2, #8]
   81c8e:	4403      	add	r3, r0
   81c90:	68d2      	ldr	r2, [r2, #12]
   81c92:	f043 0001 	orr.w	r0, r3, #1
   81c96:	60ca      	str	r2, [r1, #12]
   81c98:	6091      	str	r1, [r2, #8]
   81c9a:	6060      	str	r0, [r4, #4]
   81c9c:	50e3      	str	r3, [r4, r3]
   81c9e:	e7a3      	b.n	81be8 <_free_r+0x84>
   81ca0:	2a14      	cmp	r2, #20
   81ca2:	d816      	bhi.n	81cd2 <_free_r+0x16e>
   81ca4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   81ca8:	00ff      	lsls	r7, r7, #3
   81caa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   81cae:	e7aa      	b.n	81c06 <_free_r+0xa2>
   81cb0:	2301      	movs	r3, #1
   81cb2:	10aa      	asrs	r2, r5, #2
   81cb4:	684d      	ldr	r5, [r1, #4]
   81cb6:	4093      	lsls	r3, r2
   81cb8:	432b      	orrs	r3, r5
   81cba:	604b      	str	r3, [r1, #4]
   81cbc:	4603      	mov	r3, r0
   81cbe:	e7b0      	b.n	81c22 <_free_r+0xbe>
   81cc0:	f043 0201 	orr.w	r2, r3, #1
   81cc4:	614c      	str	r4, [r1, #20]
   81cc6:	610c      	str	r4, [r1, #16]
   81cc8:	60e5      	str	r5, [r4, #12]
   81cca:	60a5      	str	r5, [r4, #8]
   81ccc:	6062      	str	r2, [r4, #4]
   81cce:	50e3      	str	r3, [r4, r3]
   81cd0:	e78a      	b.n	81be8 <_free_r+0x84>
   81cd2:	2a54      	cmp	r2, #84	; 0x54
   81cd4:	d806      	bhi.n	81ce4 <_free_r+0x180>
   81cd6:	0b1a      	lsrs	r2, r3, #12
   81cd8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   81cdc:	00ff      	lsls	r7, r7, #3
   81cde:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   81ce2:	e790      	b.n	81c06 <_free_r+0xa2>
   81ce4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81ce8:	d806      	bhi.n	81cf8 <_free_r+0x194>
   81cea:	0bda      	lsrs	r2, r3, #15
   81cec:	f102 0778 	add.w	r7, r2, #120	; 0x78
   81cf0:	00ff      	lsls	r7, r7, #3
   81cf2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   81cf6:	e786      	b.n	81c06 <_free_r+0xa2>
   81cf8:	f240 5054 	movw	r0, #1364	; 0x554
   81cfc:	4282      	cmp	r2, r0
   81cfe:	d806      	bhi.n	81d0e <_free_r+0x1aa>
   81d00:	0c9a      	lsrs	r2, r3, #18
   81d02:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   81d06:	00ff      	lsls	r7, r7, #3
   81d08:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   81d0c:	e77b      	b.n	81c06 <_free_r+0xa2>
   81d0e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   81d12:	257e      	movs	r5, #126	; 0x7e
   81d14:	e777      	b.n	81c06 <_free_r+0xa2>
   81d16:	f043 0101 	orr.w	r1, r3, #1
   81d1a:	6061      	str	r1, [r4, #4]
   81d1c:	6013      	str	r3, [r2, #0]
   81d1e:	e763      	b.n	81be8 <_free_r+0x84>
   81d20:	20070574 	.word	0x20070574
   81d24:	2007057c 	.word	0x2007057c
   81d28:	20070980 	.word	0x20070980
   81d2c:	20070ad4 	.word	0x20070ad4

00081d30 <_fwalk_reent>:
   81d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81d34:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   81d38:	d01e      	beq.n	81d78 <_fwalk_reent+0x48>
   81d3a:	4688      	mov	r8, r1
   81d3c:	4607      	mov	r7, r0
   81d3e:	f04f 0900 	mov.w	r9, #0
   81d42:	6875      	ldr	r5, [r6, #4]
   81d44:	68b4      	ldr	r4, [r6, #8]
   81d46:	3d01      	subs	r5, #1
   81d48:	d410      	bmi.n	81d6c <_fwalk_reent+0x3c>
   81d4a:	89a3      	ldrh	r3, [r4, #12]
   81d4c:	3d01      	subs	r5, #1
   81d4e:	2b01      	cmp	r3, #1
   81d50:	d908      	bls.n	81d64 <_fwalk_reent+0x34>
   81d52:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   81d56:	3301      	adds	r3, #1
   81d58:	d004      	beq.n	81d64 <_fwalk_reent+0x34>
   81d5a:	4621      	mov	r1, r4
   81d5c:	4638      	mov	r0, r7
   81d5e:	47c0      	blx	r8
   81d60:	ea49 0900 	orr.w	r9, r9, r0
   81d64:	1c6b      	adds	r3, r5, #1
   81d66:	f104 0468 	add.w	r4, r4, #104	; 0x68
   81d6a:	d1ee      	bne.n	81d4a <_fwalk_reent+0x1a>
   81d6c:	6836      	ldr	r6, [r6, #0]
   81d6e:	2e00      	cmp	r6, #0
   81d70:	d1e7      	bne.n	81d42 <_fwalk_reent+0x12>
   81d72:	4648      	mov	r0, r9
   81d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81d78:	46b1      	mov	r9, r6
   81d7a:	4648      	mov	r0, r9
   81d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00081d80 <__retarget_lock_init_recursive>:
   81d80:	4770      	bx	lr
   81d82:	bf00      	nop

00081d84 <__retarget_lock_close_recursive>:
   81d84:	4770      	bx	lr
   81d86:	bf00      	nop

00081d88 <__retarget_lock_acquire_recursive>:
   81d88:	4770      	bx	lr
   81d8a:	bf00      	nop

00081d8c <__retarget_lock_release_recursive>:
   81d8c:	4770      	bx	lr
   81d8e:	bf00      	nop

00081d90 <__swhatbuf_r>:
   81d90:	b570      	push	{r4, r5, r6, lr}
   81d92:	460c      	mov	r4, r1
   81d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81d98:	b090      	sub	sp, #64	; 0x40
   81d9a:	2900      	cmp	r1, #0
   81d9c:	4615      	mov	r5, r2
   81d9e:	461e      	mov	r6, r3
   81da0:	db14      	blt.n	81dcc <__swhatbuf_r+0x3c>
   81da2:	aa01      	add	r2, sp, #4
   81da4:	f000 fc1a 	bl	825dc <_fstat_r>
   81da8:	2800      	cmp	r0, #0
   81daa:	db0f      	blt.n	81dcc <__swhatbuf_r+0x3c>
   81dac:	9a02      	ldr	r2, [sp, #8]
   81dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81db2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   81db6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   81dba:	fab2 f282 	clz	r2, r2
   81dbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
   81dc2:	0952      	lsrs	r2, r2, #5
   81dc4:	6032      	str	r2, [r6, #0]
   81dc6:	602b      	str	r3, [r5, #0]
   81dc8:	b010      	add	sp, #64	; 0x40
   81dca:	bd70      	pop	{r4, r5, r6, pc}
   81dcc:	2300      	movs	r3, #0
   81dce:	89a2      	ldrh	r2, [r4, #12]
   81dd0:	6033      	str	r3, [r6, #0]
   81dd2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   81dd6:	d004      	beq.n	81de2 <__swhatbuf_r+0x52>
   81dd8:	2240      	movs	r2, #64	; 0x40
   81dda:	4618      	mov	r0, r3
   81ddc:	602a      	str	r2, [r5, #0]
   81dde:	b010      	add	sp, #64	; 0x40
   81de0:	bd70      	pop	{r4, r5, r6, pc}
   81de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81de6:	602b      	str	r3, [r5, #0]
   81de8:	b010      	add	sp, #64	; 0x40
   81dea:	bd70      	pop	{r4, r5, r6, pc}

00081dec <malloc>:
   81dec:	4b02      	ldr	r3, [pc, #8]	; (81df8 <malloc+0xc>)
   81dee:	4601      	mov	r1, r0
   81df0:	6818      	ldr	r0, [r3, #0]
   81df2:	f000 b803 	b.w	81dfc <_malloc_r>
   81df6:	bf00      	nop
   81df8:	20070140 	.word	0x20070140

00081dfc <_malloc_r>:
   81dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e00:	f101 060b 	add.w	r6, r1, #11
   81e04:	2e16      	cmp	r6, #22
   81e06:	b083      	sub	sp, #12
   81e08:	4605      	mov	r5, r0
   81e0a:	f240 809e 	bls.w	81f4a <_malloc_r+0x14e>
   81e0e:	f036 0607 	bics.w	r6, r6, #7
   81e12:	f100 80bd 	bmi.w	81f90 <_malloc_r+0x194>
   81e16:	42b1      	cmp	r1, r6
   81e18:	f200 80ba 	bhi.w	81f90 <_malloc_r+0x194>
   81e1c:	f000 fa90 	bl	82340 <__malloc_lock>
   81e20:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81e24:	f0c0 8285 	bcc.w	82332 <_malloc_r+0x536>
   81e28:	0a73      	lsrs	r3, r6, #9
   81e2a:	f000 80b8 	beq.w	81f9e <_malloc_r+0x1a2>
   81e2e:	2b04      	cmp	r3, #4
   81e30:	f200 816c 	bhi.w	8210c <_malloc_r+0x310>
   81e34:	09b3      	lsrs	r3, r6, #6
   81e36:	f103 0039 	add.w	r0, r3, #57	; 0x39
   81e3a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   81e3e:	00c1      	lsls	r1, r0, #3
   81e40:	4fb8      	ldr	r7, [pc, #736]	; (82124 <_malloc_r+0x328>)
   81e42:	4439      	add	r1, r7
   81e44:	684c      	ldr	r4, [r1, #4]
   81e46:	3908      	subs	r1, #8
   81e48:	42a1      	cmp	r1, r4
   81e4a:	d106      	bne.n	81e5a <_malloc_r+0x5e>
   81e4c:	e00c      	b.n	81e68 <_malloc_r+0x6c>
   81e4e:	2a00      	cmp	r2, #0
   81e50:	f280 80ab 	bge.w	81faa <_malloc_r+0x1ae>
   81e54:	68e4      	ldr	r4, [r4, #12]
   81e56:	42a1      	cmp	r1, r4
   81e58:	d006      	beq.n	81e68 <_malloc_r+0x6c>
   81e5a:	6863      	ldr	r3, [r4, #4]
   81e5c:	f023 0303 	bic.w	r3, r3, #3
   81e60:	1b9a      	subs	r2, r3, r6
   81e62:	2a0f      	cmp	r2, #15
   81e64:	ddf3      	ble.n	81e4e <_malloc_r+0x52>
   81e66:	4670      	mov	r0, lr
   81e68:	693c      	ldr	r4, [r7, #16]
   81e6a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82138 <_malloc_r+0x33c>
   81e6e:	4574      	cmp	r4, lr
   81e70:	f000 819e 	beq.w	821b0 <_malloc_r+0x3b4>
   81e74:	6863      	ldr	r3, [r4, #4]
   81e76:	f023 0303 	bic.w	r3, r3, #3
   81e7a:	1b9a      	subs	r2, r3, r6
   81e7c:	2a0f      	cmp	r2, #15
   81e7e:	f300 8183 	bgt.w	82188 <_malloc_r+0x38c>
   81e82:	2a00      	cmp	r2, #0
   81e84:	f8c7 e014 	str.w	lr, [r7, #20]
   81e88:	f8c7 e010 	str.w	lr, [r7, #16]
   81e8c:	f280 8091 	bge.w	81fb2 <_malloc_r+0x1b6>
   81e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81e94:	f080 8154 	bcs.w	82140 <_malloc_r+0x344>
   81e98:	2201      	movs	r2, #1
   81e9a:	08db      	lsrs	r3, r3, #3
   81e9c:	6879      	ldr	r1, [r7, #4]
   81e9e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81ea2:	4413      	add	r3, r2
   81ea4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81ea8:	fa02 f20c 	lsl.w	r2, r2, ip
   81eac:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   81eb0:	430a      	orrs	r2, r1
   81eb2:	f1ac 0108 	sub.w	r1, ip, #8
   81eb6:	60e1      	str	r1, [r4, #12]
   81eb8:	f8c4 8008 	str.w	r8, [r4, #8]
   81ebc:	607a      	str	r2, [r7, #4]
   81ebe:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   81ec2:	f8c8 400c 	str.w	r4, [r8, #12]
   81ec6:	2401      	movs	r4, #1
   81ec8:	1083      	asrs	r3, r0, #2
   81eca:	409c      	lsls	r4, r3
   81ecc:	4294      	cmp	r4, r2
   81ece:	d87d      	bhi.n	81fcc <_malloc_r+0x1d0>
   81ed0:	4214      	tst	r4, r2
   81ed2:	d106      	bne.n	81ee2 <_malloc_r+0xe6>
   81ed4:	f020 0003 	bic.w	r0, r0, #3
   81ed8:	0064      	lsls	r4, r4, #1
   81eda:	4214      	tst	r4, r2
   81edc:	f100 0004 	add.w	r0, r0, #4
   81ee0:	d0fa      	beq.n	81ed8 <_malloc_r+0xdc>
   81ee2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   81ee6:	46cc      	mov	ip, r9
   81ee8:	4680      	mov	r8, r0
   81eea:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81eee:	459c      	cmp	ip, r3
   81ef0:	d107      	bne.n	81f02 <_malloc_r+0x106>
   81ef2:	e15f      	b.n	821b4 <_malloc_r+0x3b8>
   81ef4:	2a00      	cmp	r2, #0
   81ef6:	f280 816d 	bge.w	821d4 <_malloc_r+0x3d8>
   81efa:	68db      	ldr	r3, [r3, #12]
   81efc:	459c      	cmp	ip, r3
   81efe:	f000 8159 	beq.w	821b4 <_malloc_r+0x3b8>
   81f02:	6859      	ldr	r1, [r3, #4]
   81f04:	f021 0103 	bic.w	r1, r1, #3
   81f08:	1b8a      	subs	r2, r1, r6
   81f0a:	2a0f      	cmp	r2, #15
   81f0c:	ddf2      	ble.n	81ef4 <_malloc_r+0xf8>
   81f0e:	68dc      	ldr	r4, [r3, #12]
   81f10:	f8d3 c008 	ldr.w	ip, [r3, #8]
   81f14:	f046 0801 	orr.w	r8, r6, #1
   81f18:	4628      	mov	r0, r5
   81f1a:	441e      	add	r6, r3
   81f1c:	f042 0501 	orr.w	r5, r2, #1
   81f20:	f8c3 8004 	str.w	r8, [r3, #4]
   81f24:	f8cc 400c 	str.w	r4, [ip, #12]
   81f28:	f8c4 c008 	str.w	ip, [r4, #8]
   81f2c:	617e      	str	r6, [r7, #20]
   81f2e:	613e      	str	r6, [r7, #16]
   81f30:	f8c6 e00c 	str.w	lr, [r6, #12]
   81f34:	f8c6 e008 	str.w	lr, [r6, #8]
   81f38:	6075      	str	r5, [r6, #4]
   81f3a:	505a      	str	r2, [r3, r1]
   81f3c:	9300      	str	r3, [sp, #0]
   81f3e:	f000 fa05 	bl	8234c <__malloc_unlock>
   81f42:	9b00      	ldr	r3, [sp, #0]
   81f44:	f103 0408 	add.w	r4, r3, #8
   81f48:	e01e      	b.n	81f88 <_malloc_r+0x18c>
   81f4a:	2910      	cmp	r1, #16
   81f4c:	d820      	bhi.n	81f90 <_malloc_r+0x194>
   81f4e:	f000 f9f7 	bl	82340 <__malloc_lock>
   81f52:	2610      	movs	r6, #16
   81f54:	2318      	movs	r3, #24
   81f56:	2002      	movs	r0, #2
   81f58:	4f72      	ldr	r7, [pc, #456]	; (82124 <_malloc_r+0x328>)
   81f5a:	443b      	add	r3, r7
   81f5c:	685c      	ldr	r4, [r3, #4]
   81f5e:	f1a3 0208 	sub.w	r2, r3, #8
   81f62:	4294      	cmp	r4, r2
   81f64:	f000 812f 	beq.w	821c6 <_malloc_r+0x3ca>
   81f68:	6863      	ldr	r3, [r4, #4]
   81f6a:	68e1      	ldr	r1, [r4, #12]
   81f6c:	f023 0303 	bic.w	r3, r3, #3
   81f70:	4423      	add	r3, r4
   81f72:	685a      	ldr	r2, [r3, #4]
   81f74:	68a6      	ldr	r6, [r4, #8]
   81f76:	f042 0201 	orr.w	r2, r2, #1
   81f7a:	60f1      	str	r1, [r6, #12]
   81f7c:	4628      	mov	r0, r5
   81f7e:	608e      	str	r6, [r1, #8]
   81f80:	605a      	str	r2, [r3, #4]
   81f82:	f000 f9e3 	bl	8234c <__malloc_unlock>
   81f86:	3408      	adds	r4, #8
   81f88:	4620      	mov	r0, r4
   81f8a:	b003      	add	sp, #12
   81f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f90:	2400      	movs	r4, #0
   81f92:	230c      	movs	r3, #12
   81f94:	4620      	mov	r0, r4
   81f96:	602b      	str	r3, [r5, #0]
   81f98:	b003      	add	sp, #12
   81f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f9e:	2040      	movs	r0, #64	; 0x40
   81fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
   81fa4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   81fa8:	e74a      	b.n	81e40 <_malloc_r+0x44>
   81faa:	4423      	add	r3, r4
   81fac:	685a      	ldr	r2, [r3, #4]
   81fae:	68e1      	ldr	r1, [r4, #12]
   81fb0:	e7e0      	b.n	81f74 <_malloc_r+0x178>
   81fb2:	4423      	add	r3, r4
   81fb4:	685a      	ldr	r2, [r3, #4]
   81fb6:	4628      	mov	r0, r5
   81fb8:	f042 0201 	orr.w	r2, r2, #1
   81fbc:	605a      	str	r2, [r3, #4]
   81fbe:	3408      	adds	r4, #8
   81fc0:	f000 f9c4 	bl	8234c <__malloc_unlock>
   81fc4:	4620      	mov	r0, r4
   81fc6:	b003      	add	sp, #12
   81fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fcc:	68bc      	ldr	r4, [r7, #8]
   81fce:	6863      	ldr	r3, [r4, #4]
   81fd0:	f023 0803 	bic.w	r8, r3, #3
   81fd4:	45b0      	cmp	r8, r6
   81fd6:	d304      	bcc.n	81fe2 <_malloc_r+0x1e6>
   81fd8:	eba8 0306 	sub.w	r3, r8, r6
   81fdc:	2b0f      	cmp	r3, #15
   81fde:	f300 8085 	bgt.w	820ec <_malloc_r+0x2f0>
   81fe2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8213c <_malloc_r+0x340>
   81fe6:	4b50      	ldr	r3, [pc, #320]	; (82128 <_malloc_r+0x32c>)
   81fe8:	f8d9 2000 	ldr.w	r2, [r9]
   81fec:	681b      	ldr	r3, [r3, #0]
   81fee:	3201      	adds	r2, #1
   81ff0:	4433      	add	r3, r6
   81ff2:	eb04 0a08 	add.w	sl, r4, r8
   81ff6:	f000 8154 	beq.w	822a2 <_malloc_r+0x4a6>
   81ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   81ffe:	330f      	adds	r3, #15
   82000:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82004:	f02b 0b0f 	bic.w	fp, fp, #15
   82008:	4659      	mov	r1, fp
   8200a:	4628      	mov	r0, r5
   8200c:	f000 f9a4 	bl	82358 <_sbrk_r>
   82010:	1c41      	adds	r1, r0, #1
   82012:	4602      	mov	r2, r0
   82014:	f000 80fb 	beq.w	8220e <_malloc_r+0x412>
   82018:	4582      	cmp	sl, r0
   8201a:	f200 80f6 	bhi.w	8220a <_malloc_r+0x40e>
   8201e:	4b43      	ldr	r3, [pc, #268]	; (8212c <_malloc_r+0x330>)
   82020:	6819      	ldr	r1, [r3, #0]
   82022:	4459      	add	r1, fp
   82024:	6019      	str	r1, [r3, #0]
   82026:	f000 814c 	beq.w	822c2 <_malloc_r+0x4c6>
   8202a:	f8d9 0000 	ldr.w	r0, [r9]
   8202e:	3001      	adds	r0, #1
   82030:	bf1b      	ittet	ne
   82032:	eba2 0a0a 	subne.w	sl, r2, sl
   82036:	4451      	addne	r1, sl
   82038:	f8c9 2000 	streq.w	r2, [r9]
   8203c:	6019      	strne	r1, [r3, #0]
   8203e:	f012 0107 	ands.w	r1, r2, #7
   82042:	f000 8114 	beq.w	8226e <_malloc_r+0x472>
   82046:	f1c1 0008 	rsb	r0, r1, #8
   8204a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8204e:	4402      	add	r2, r0
   82050:	3108      	adds	r1, #8
   82052:	eb02 090b 	add.w	r9, r2, fp
   82056:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8205a:	eba1 0909 	sub.w	r9, r1, r9
   8205e:	4649      	mov	r1, r9
   82060:	4628      	mov	r0, r5
   82062:	9301      	str	r3, [sp, #4]
   82064:	9200      	str	r2, [sp, #0]
   82066:	f000 f977 	bl	82358 <_sbrk_r>
   8206a:	1c43      	adds	r3, r0, #1
   8206c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82070:	f000 8142 	beq.w	822f8 <_malloc_r+0x4fc>
   82074:	1a80      	subs	r0, r0, r2
   82076:	4448      	add	r0, r9
   82078:	f040 0001 	orr.w	r0, r0, #1
   8207c:	6819      	ldr	r1, [r3, #0]
   8207e:	42bc      	cmp	r4, r7
   82080:	4449      	add	r1, r9
   82082:	60ba      	str	r2, [r7, #8]
   82084:	6019      	str	r1, [r3, #0]
   82086:	6050      	str	r0, [r2, #4]
   82088:	d017      	beq.n	820ba <_malloc_r+0x2be>
   8208a:	f1b8 0f0f 	cmp.w	r8, #15
   8208e:	f240 80fa 	bls.w	82286 <_malloc_r+0x48a>
   82092:	f04f 0c05 	mov.w	ip, #5
   82096:	6862      	ldr	r2, [r4, #4]
   82098:	f1a8 000c 	sub.w	r0, r8, #12
   8209c:	f020 0007 	bic.w	r0, r0, #7
   820a0:	f002 0201 	and.w	r2, r2, #1
   820a4:	eb04 0e00 	add.w	lr, r4, r0
   820a8:	4302      	orrs	r2, r0
   820aa:	280f      	cmp	r0, #15
   820ac:	6062      	str	r2, [r4, #4]
   820ae:	f8ce c004 	str.w	ip, [lr, #4]
   820b2:	f8ce c008 	str.w	ip, [lr, #8]
   820b6:	f200 8116 	bhi.w	822e6 <_malloc_r+0x4ea>
   820ba:	4b1d      	ldr	r3, [pc, #116]	; (82130 <_malloc_r+0x334>)
   820bc:	68bc      	ldr	r4, [r7, #8]
   820be:	681a      	ldr	r2, [r3, #0]
   820c0:	4291      	cmp	r1, r2
   820c2:	bf88      	it	hi
   820c4:	6019      	strhi	r1, [r3, #0]
   820c6:	4b1b      	ldr	r3, [pc, #108]	; (82134 <_malloc_r+0x338>)
   820c8:	681a      	ldr	r2, [r3, #0]
   820ca:	4291      	cmp	r1, r2
   820cc:	6862      	ldr	r2, [r4, #4]
   820ce:	bf88      	it	hi
   820d0:	6019      	strhi	r1, [r3, #0]
   820d2:	f022 0203 	bic.w	r2, r2, #3
   820d6:	4296      	cmp	r6, r2
   820d8:	eba2 0306 	sub.w	r3, r2, r6
   820dc:	d801      	bhi.n	820e2 <_malloc_r+0x2e6>
   820de:	2b0f      	cmp	r3, #15
   820e0:	dc04      	bgt.n	820ec <_malloc_r+0x2f0>
   820e2:	4628      	mov	r0, r5
   820e4:	f000 f932 	bl	8234c <__malloc_unlock>
   820e8:	2400      	movs	r4, #0
   820ea:	e74d      	b.n	81f88 <_malloc_r+0x18c>
   820ec:	f046 0201 	orr.w	r2, r6, #1
   820f0:	f043 0301 	orr.w	r3, r3, #1
   820f4:	4426      	add	r6, r4
   820f6:	6062      	str	r2, [r4, #4]
   820f8:	4628      	mov	r0, r5
   820fa:	60be      	str	r6, [r7, #8]
   820fc:	3408      	adds	r4, #8
   820fe:	6073      	str	r3, [r6, #4]
   82100:	f000 f924 	bl	8234c <__malloc_unlock>
   82104:	4620      	mov	r0, r4
   82106:	b003      	add	sp, #12
   82108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8210c:	2b14      	cmp	r3, #20
   8210e:	d970      	bls.n	821f2 <_malloc_r+0x3f6>
   82110:	2b54      	cmp	r3, #84	; 0x54
   82112:	f200 80a2 	bhi.w	8225a <_malloc_r+0x45e>
   82116:	0b33      	lsrs	r3, r6, #12
   82118:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8211c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82120:	00c1      	lsls	r1, r0, #3
   82122:	e68d      	b.n	81e40 <_malloc_r+0x44>
   82124:	20070574 	.word	0x20070574
   82128:	20070ad4 	.word	0x20070ad4
   8212c:	20070aa4 	.word	0x20070aa4
   82130:	20070acc 	.word	0x20070acc
   82134:	20070ad0 	.word	0x20070ad0
   82138:	2007057c 	.word	0x2007057c
   8213c:	2007097c 	.word	0x2007097c
   82140:	0a5a      	lsrs	r2, r3, #9
   82142:	2a04      	cmp	r2, #4
   82144:	d95b      	bls.n	821fe <_malloc_r+0x402>
   82146:	2a14      	cmp	r2, #20
   82148:	f200 80ae 	bhi.w	822a8 <_malloc_r+0x4ac>
   8214c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82150:	00c9      	lsls	r1, r1, #3
   82152:	325b      	adds	r2, #91	; 0x5b
   82154:	eb07 0c01 	add.w	ip, r7, r1
   82158:	5879      	ldr	r1, [r7, r1]
   8215a:	f1ac 0c08 	sub.w	ip, ip, #8
   8215e:	458c      	cmp	ip, r1
   82160:	f000 8088 	beq.w	82274 <_malloc_r+0x478>
   82164:	684a      	ldr	r2, [r1, #4]
   82166:	f022 0203 	bic.w	r2, r2, #3
   8216a:	4293      	cmp	r3, r2
   8216c:	d273      	bcs.n	82256 <_malloc_r+0x45a>
   8216e:	6889      	ldr	r1, [r1, #8]
   82170:	458c      	cmp	ip, r1
   82172:	d1f7      	bne.n	82164 <_malloc_r+0x368>
   82174:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82178:	687a      	ldr	r2, [r7, #4]
   8217a:	60e3      	str	r3, [r4, #12]
   8217c:	f8c4 c008 	str.w	ip, [r4, #8]
   82180:	609c      	str	r4, [r3, #8]
   82182:	f8cc 400c 	str.w	r4, [ip, #12]
   82186:	e69e      	b.n	81ec6 <_malloc_r+0xca>
   82188:	f046 0c01 	orr.w	ip, r6, #1
   8218c:	f042 0101 	orr.w	r1, r2, #1
   82190:	4426      	add	r6, r4
   82192:	f8c4 c004 	str.w	ip, [r4, #4]
   82196:	4628      	mov	r0, r5
   82198:	617e      	str	r6, [r7, #20]
   8219a:	613e      	str	r6, [r7, #16]
   8219c:	f8c6 e00c 	str.w	lr, [r6, #12]
   821a0:	f8c6 e008 	str.w	lr, [r6, #8]
   821a4:	6071      	str	r1, [r6, #4]
   821a6:	50e2      	str	r2, [r4, r3]
   821a8:	f000 f8d0 	bl	8234c <__malloc_unlock>
   821ac:	3408      	adds	r4, #8
   821ae:	e6eb      	b.n	81f88 <_malloc_r+0x18c>
   821b0:	687a      	ldr	r2, [r7, #4]
   821b2:	e688      	b.n	81ec6 <_malloc_r+0xca>
   821b4:	f108 0801 	add.w	r8, r8, #1
   821b8:	f018 0f03 	tst.w	r8, #3
   821bc:	f10c 0c08 	add.w	ip, ip, #8
   821c0:	f47f ae93 	bne.w	81eea <_malloc_r+0xee>
   821c4:	e02d      	b.n	82222 <_malloc_r+0x426>
   821c6:	68dc      	ldr	r4, [r3, #12]
   821c8:	42a3      	cmp	r3, r4
   821ca:	bf08      	it	eq
   821cc:	3002      	addeq	r0, #2
   821ce:	f43f ae4b 	beq.w	81e68 <_malloc_r+0x6c>
   821d2:	e6c9      	b.n	81f68 <_malloc_r+0x16c>
   821d4:	461c      	mov	r4, r3
   821d6:	4419      	add	r1, r3
   821d8:	684a      	ldr	r2, [r1, #4]
   821da:	68db      	ldr	r3, [r3, #12]
   821dc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   821e0:	f042 0201 	orr.w	r2, r2, #1
   821e4:	604a      	str	r2, [r1, #4]
   821e6:	4628      	mov	r0, r5
   821e8:	60f3      	str	r3, [r6, #12]
   821ea:	609e      	str	r6, [r3, #8]
   821ec:	f000 f8ae 	bl	8234c <__malloc_unlock>
   821f0:	e6ca      	b.n	81f88 <_malloc_r+0x18c>
   821f2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   821f6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   821fa:	00c1      	lsls	r1, r0, #3
   821fc:	e620      	b.n	81e40 <_malloc_r+0x44>
   821fe:	099a      	lsrs	r2, r3, #6
   82200:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82204:	00c9      	lsls	r1, r1, #3
   82206:	3238      	adds	r2, #56	; 0x38
   82208:	e7a4      	b.n	82154 <_malloc_r+0x358>
   8220a:	42bc      	cmp	r4, r7
   8220c:	d054      	beq.n	822b8 <_malloc_r+0x4bc>
   8220e:	68bc      	ldr	r4, [r7, #8]
   82210:	6862      	ldr	r2, [r4, #4]
   82212:	f022 0203 	bic.w	r2, r2, #3
   82216:	e75e      	b.n	820d6 <_malloc_r+0x2da>
   82218:	f859 3908 	ldr.w	r3, [r9], #-8
   8221c:	4599      	cmp	r9, r3
   8221e:	f040 8086 	bne.w	8232e <_malloc_r+0x532>
   82222:	f010 0f03 	tst.w	r0, #3
   82226:	f100 30ff 	add.w	r0, r0, #4294967295
   8222a:	d1f5      	bne.n	82218 <_malloc_r+0x41c>
   8222c:	687b      	ldr	r3, [r7, #4]
   8222e:	ea23 0304 	bic.w	r3, r3, r4
   82232:	607b      	str	r3, [r7, #4]
   82234:	0064      	lsls	r4, r4, #1
   82236:	429c      	cmp	r4, r3
   82238:	f63f aec8 	bhi.w	81fcc <_malloc_r+0x1d0>
   8223c:	2c00      	cmp	r4, #0
   8223e:	f43f aec5 	beq.w	81fcc <_malloc_r+0x1d0>
   82242:	421c      	tst	r4, r3
   82244:	4640      	mov	r0, r8
   82246:	f47f ae4c 	bne.w	81ee2 <_malloc_r+0xe6>
   8224a:	0064      	lsls	r4, r4, #1
   8224c:	421c      	tst	r4, r3
   8224e:	f100 0004 	add.w	r0, r0, #4
   82252:	d0fa      	beq.n	8224a <_malloc_r+0x44e>
   82254:	e645      	b.n	81ee2 <_malloc_r+0xe6>
   82256:	468c      	mov	ip, r1
   82258:	e78c      	b.n	82174 <_malloc_r+0x378>
   8225a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8225e:	d815      	bhi.n	8228c <_malloc_r+0x490>
   82260:	0bf3      	lsrs	r3, r6, #15
   82262:	f103 0078 	add.w	r0, r3, #120	; 0x78
   82266:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8226a:	00c1      	lsls	r1, r0, #3
   8226c:	e5e8      	b.n	81e40 <_malloc_r+0x44>
   8226e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82272:	e6ee      	b.n	82052 <_malloc_r+0x256>
   82274:	2101      	movs	r1, #1
   82276:	687b      	ldr	r3, [r7, #4]
   82278:	1092      	asrs	r2, r2, #2
   8227a:	fa01 f202 	lsl.w	r2, r1, r2
   8227e:	431a      	orrs	r2, r3
   82280:	607a      	str	r2, [r7, #4]
   82282:	4663      	mov	r3, ip
   82284:	e779      	b.n	8217a <_malloc_r+0x37e>
   82286:	2301      	movs	r3, #1
   82288:	6053      	str	r3, [r2, #4]
   8228a:	e72a      	b.n	820e2 <_malloc_r+0x2e6>
   8228c:	f240 5254 	movw	r2, #1364	; 0x554
   82290:	4293      	cmp	r3, r2
   82292:	d822      	bhi.n	822da <_malloc_r+0x4de>
   82294:	0cb3      	lsrs	r3, r6, #18
   82296:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8229a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8229e:	00c1      	lsls	r1, r0, #3
   822a0:	e5ce      	b.n	81e40 <_malloc_r+0x44>
   822a2:	f103 0b10 	add.w	fp, r3, #16
   822a6:	e6af      	b.n	82008 <_malloc_r+0x20c>
   822a8:	2a54      	cmp	r2, #84	; 0x54
   822aa:	d829      	bhi.n	82300 <_malloc_r+0x504>
   822ac:	0b1a      	lsrs	r2, r3, #12
   822ae:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   822b2:	00c9      	lsls	r1, r1, #3
   822b4:	326e      	adds	r2, #110	; 0x6e
   822b6:	e74d      	b.n	82154 <_malloc_r+0x358>
   822b8:	4b20      	ldr	r3, [pc, #128]	; (8233c <_malloc_r+0x540>)
   822ba:	6819      	ldr	r1, [r3, #0]
   822bc:	4459      	add	r1, fp
   822be:	6019      	str	r1, [r3, #0]
   822c0:	e6b3      	b.n	8202a <_malloc_r+0x22e>
   822c2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   822c6:	2800      	cmp	r0, #0
   822c8:	f47f aeaf 	bne.w	8202a <_malloc_r+0x22e>
   822cc:	eb08 030b 	add.w	r3, r8, fp
   822d0:	68ba      	ldr	r2, [r7, #8]
   822d2:	f043 0301 	orr.w	r3, r3, #1
   822d6:	6053      	str	r3, [r2, #4]
   822d8:	e6ef      	b.n	820ba <_malloc_r+0x2be>
   822da:	207f      	movs	r0, #127	; 0x7f
   822dc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   822e0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   822e4:	e5ac      	b.n	81e40 <_malloc_r+0x44>
   822e6:	f104 0108 	add.w	r1, r4, #8
   822ea:	4628      	mov	r0, r5
   822ec:	9300      	str	r3, [sp, #0]
   822ee:	f7ff fc39 	bl	81b64 <_free_r>
   822f2:	9b00      	ldr	r3, [sp, #0]
   822f4:	6819      	ldr	r1, [r3, #0]
   822f6:	e6e0      	b.n	820ba <_malloc_r+0x2be>
   822f8:	2001      	movs	r0, #1
   822fa:	f04f 0900 	mov.w	r9, #0
   822fe:	e6bd      	b.n	8207c <_malloc_r+0x280>
   82300:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82304:	d805      	bhi.n	82312 <_malloc_r+0x516>
   82306:	0bda      	lsrs	r2, r3, #15
   82308:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8230c:	00c9      	lsls	r1, r1, #3
   8230e:	3277      	adds	r2, #119	; 0x77
   82310:	e720      	b.n	82154 <_malloc_r+0x358>
   82312:	f240 5154 	movw	r1, #1364	; 0x554
   82316:	428a      	cmp	r2, r1
   82318:	d805      	bhi.n	82326 <_malloc_r+0x52a>
   8231a:	0c9a      	lsrs	r2, r3, #18
   8231c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   82320:	00c9      	lsls	r1, r1, #3
   82322:	327c      	adds	r2, #124	; 0x7c
   82324:	e716      	b.n	82154 <_malloc_r+0x358>
   82326:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8232a:	227e      	movs	r2, #126	; 0x7e
   8232c:	e712      	b.n	82154 <_malloc_r+0x358>
   8232e:	687b      	ldr	r3, [r7, #4]
   82330:	e780      	b.n	82234 <_malloc_r+0x438>
   82332:	08f0      	lsrs	r0, r6, #3
   82334:	f106 0308 	add.w	r3, r6, #8
   82338:	e60e      	b.n	81f58 <_malloc_r+0x15c>
   8233a:	bf00      	nop
   8233c:	20070aa4 	.word	0x20070aa4

00082340 <__malloc_lock>:
   82340:	4801      	ldr	r0, [pc, #4]	; (82348 <__malloc_lock+0x8>)
   82342:	f7ff bd21 	b.w	81d88 <__retarget_lock_acquire_recursive>
   82346:	bf00      	nop
   82348:	20070af4 	.word	0x20070af4

0008234c <__malloc_unlock>:
   8234c:	4801      	ldr	r0, [pc, #4]	; (82354 <__malloc_unlock+0x8>)
   8234e:	f7ff bd1d 	b.w	81d8c <__retarget_lock_release_recursive>
   82352:	bf00      	nop
   82354:	20070af4 	.word	0x20070af4

00082358 <_sbrk_r>:
   82358:	b538      	push	{r3, r4, r5, lr}
   8235a:	2300      	movs	r3, #0
   8235c:	4c06      	ldr	r4, [pc, #24]	; (82378 <_sbrk_r+0x20>)
   8235e:	4605      	mov	r5, r0
   82360:	4608      	mov	r0, r1
   82362:	6023      	str	r3, [r4, #0]
   82364:	f7fe ffc4 	bl	812f0 <_sbrk>
   82368:	1c43      	adds	r3, r0, #1
   8236a:	d000      	beq.n	8236e <_sbrk_r+0x16>
   8236c:	bd38      	pop	{r3, r4, r5, pc}
   8236e:	6823      	ldr	r3, [r4, #0]
   82370:	2b00      	cmp	r3, #0
   82372:	d0fb      	beq.n	8236c <_sbrk_r+0x14>
   82374:	602b      	str	r3, [r5, #0]
   82376:	bd38      	pop	{r3, r4, r5, pc}
   82378:	20070b08 	.word	0x20070b08

0008237c <__sread>:
   8237c:	b510      	push	{r4, lr}
   8237e:	460c      	mov	r4, r1
   82380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82384:	f000 f954 	bl	82630 <_read_r>
   82388:	2800      	cmp	r0, #0
   8238a:	db03      	blt.n	82394 <__sread+0x18>
   8238c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8238e:	4403      	add	r3, r0
   82390:	6523      	str	r3, [r4, #80]	; 0x50
   82392:	bd10      	pop	{r4, pc}
   82394:	89a3      	ldrh	r3, [r4, #12]
   82396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8239a:	81a3      	strh	r3, [r4, #12]
   8239c:	bd10      	pop	{r4, pc}
   8239e:	bf00      	nop

000823a0 <__swrite>:
   823a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823a4:	460c      	mov	r4, r1
   823a6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   823aa:	461f      	mov	r7, r3
   823ac:	05cb      	lsls	r3, r1, #23
   823ae:	4616      	mov	r6, r2
   823b0:	4605      	mov	r5, r0
   823b2:	d507      	bpl.n	823c4 <__swrite+0x24>
   823b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   823b8:	2302      	movs	r3, #2
   823ba:	2200      	movs	r2, #0
   823bc:	f000 f922 	bl	82604 <_lseek_r>
   823c0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   823c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   823c8:	81a1      	strh	r1, [r4, #12]
   823ca:	463b      	mov	r3, r7
   823cc:	4632      	mov	r2, r6
   823ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   823d2:	4628      	mov	r0, r5
   823d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   823d8:	f000 b814 	b.w	82404 <_write_r>

000823dc <__sseek>:
   823dc:	b510      	push	{r4, lr}
   823de:	460c      	mov	r4, r1
   823e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   823e4:	f000 f90e 	bl	82604 <_lseek_r>
   823e8:	89a3      	ldrh	r3, [r4, #12]
   823ea:	1c42      	adds	r2, r0, #1
   823ec:	bf0e      	itee	eq
   823ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   823f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   823f6:	6520      	strne	r0, [r4, #80]	; 0x50
   823f8:	81a3      	strh	r3, [r4, #12]
   823fa:	bd10      	pop	{r4, pc}

000823fc <__sclose>:
   823fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82400:	f000 b878 	b.w	824f4 <_close_r>

00082404 <_write_r>:
   82404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82406:	460e      	mov	r6, r1
   82408:	2500      	movs	r5, #0
   8240a:	4c08      	ldr	r4, [pc, #32]	; (8242c <_write_r+0x28>)
   8240c:	4611      	mov	r1, r2
   8240e:	4607      	mov	r7, r0
   82410:	461a      	mov	r2, r3
   82412:	4630      	mov	r0, r6
   82414:	6025      	str	r5, [r4, #0]
   82416:	f7fe f9c3 	bl	807a0 <_write>
   8241a:	1c43      	adds	r3, r0, #1
   8241c:	d000      	beq.n	82420 <_write_r+0x1c>
   8241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82420:	6823      	ldr	r3, [r4, #0]
   82422:	2b00      	cmp	r3, #0
   82424:	d0fb      	beq.n	8241e <_write_r+0x1a>
   82426:	603b      	str	r3, [r7, #0]
   82428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8242a:	bf00      	nop
   8242c:	20070b08 	.word	0x20070b08

00082430 <__register_exitproc>:
   82430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82434:	4d2c      	ldr	r5, [pc, #176]	; (824e8 <__register_exitproc+0xb8>)
   82436:	4606      	mov	r6, r0
   82438:	6828      	ldr	r0, [r5, #0]
   8243a:	4698      	mov	r8, r3
   8243c:	460f      	mov	r7, r1
   8243e:	4691      	mov	r9, r2
   82440:	f7ff fca2 	bl	81d88 <__retarget_lock_acquire_recursive>
   82444:	4b29      	ldr	r3, [pc, #164]	; (824ec <__register_exitproc+0xbc>)
   82446:	681c      	ldr	r4, [r3, #0]
   82448:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8244c:	2b00      	cmp	r3, #0
   8244e:	d03e      	beq.n	824ce <__register_exitproc+0x9e>
   82450:	685a      	ldr	r2, [r3, #4]
   82452:	2a1f      	cmp	r2, #31
   82454:	dc1c      	bgt.n	82490 <__register_exitproc+0x60>
   82456:	f102 0e01 	add.w	lr, r2, #1
   8245a:	b176      	cbz	r6, 8247a <__register_exitproc+0x4a>
   8245c:	2101      	movs	r1, #1
   8245e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   82462:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   82466:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8246a:	4091      	lsls	r1, r2
   8246c:	4308      	orrs	r0, r1
   8246e:	2e02      	cmp	r6, #2
   82470:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   82474:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   82478:	d023      	beq.n	824c2 <__register_exitproc+0x92>
   8247a:	3202      	adds	r2, #2
   8247c:	f8c3 e004 	str.w	lr, [r3, #4]
   82480:	6828      	ldr	r0, [r5, #0]
   82482:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   82486:	f7ff fc81 	bl	81d8c <__retarget_lock_release_recursive>
   8248a:	2000      	movs	r0, #0
   8248c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82490:	4b17      	ldr	r3, [pc, #92]	; (824f0 <__register_exitproc+0xc0>)
   82492:	b30b      	cbz	r3, 824d8 <__register_exitproc+0xa8>
   82494:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82498:	f7ff fca8 	bl	81dec <malloc>
   8249c:	4603      	mov	r3, r0
   8249e:	b1d8      	cbz	r0, 824d8 <__register_exitproc+0xa8>
   824a0:	2000      	movs	r0, #0
   824a2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   824a6:	f04f 0e01 	mov.w	lr, #1
   824aa:	6058      	str	r0, [r3, #4]
   824ac:	6019      	str	r1, [r3, #0]
   824ae:	4602      	mov	r2, r0
   824b0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   824b4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   824b8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   824bc:	2e00      	cmp	r6, #0
   824be:	d0dc      	beq.n	8247a <__register_exitproc+0x4a>
   824c0:	e7cc      	b.n	8245c <__register_exitproc+0x2c>
   824c2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   824c6:	4301      	orrs	r1, r0
   824c8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   824cc:	e7d5      	b.n	8247a <__register_exitproc+0x4a>
   824ce:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   824d2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   824d6:	e7bb      	b.n	82450 <__register_exitproc+0x20>
   824d8:	6828      	ldr	r0, [r5, #0]
   824da:	f7ff fc57 	bl	81d8c <__retarget_lock_release_recursive>
   824de:	f04f 30ff 	mov.w	r0, #4294967295
   824e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   824e6:	bf00      	nop
   824e8:	20070570 	.word	0x20070570
   824ec:	0008265c 	.word	0x0008265c
   824f0:	00081ded 	.word	0x00081ded

000824f4 <_close_r>:
   824f4:	b538      	push	{r3, r4, r5, lr}
   824f6:	2300      	movs	r3, #0
   824f8:	4c06      	ldr	r4, [pc, #24]	; (82514 <_close_r+0x20>)
   824fa:	4605      	mov	r5, r0
   824fc:	4608      	mov	r0, r1
   824fe:	6023      	str	r3, [r4, #0]
   82500:	f7fe ff12 	bl	81328 <_close>
   82504:	1c43      	adds	r3, r0, #1
   82506:	d000      	beq.n	8250a <_close_r+0x16>
   82508:	bd38      	pop	{r3, r4, r5, pc}
   8250a:	6823      	ldr	r3, [r4, #0]
   8250c:	2b00      	cmp	r3, #0
   8250e:	d0fb      	beq.n	82508 <_close_r+0x14>
   82510:	602b      	str	r3, [r5, #0]
   82512:	bd38      	pop	{r3, r4, r5, pc}
   82514:	20070b08 	.word	0x20070b08

00082518 <_fclose_r>:
   82518:	b570      	push	{r4, r5, r6, lr}
   8251a:	b159      	cbz	r1, 82534 <_fclose_r+0x1c>
   8251c:	4605      	mov	r5, r0
   8251e:	460c      	mov	r4, r1
   82520:	b110      	cbz	r0, 82528 <_fclose_r+0x10>
   82522:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82524:	2b00      	cmp	r3, #0
   82526:	d03c      	beq.n	825a2 <_fclose_r+0x8a>
   82528:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8252a:	07d8      	lsls	r0, r3, #31
   8252c:	d505      	bpl.n	8253a <_fclose_r+0x22>
   8252e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82532:	b92b      	cbnz	r3, 82540 <_fclose_r+0x28>
   82534:	2600      	movs	r6, #0
   82536:	4630      	mov	r0, r6
   82538:	bd70      	pop	{r4, r5, r6, pc}
   8253a:	89a3      	ldrh	r3, [r4, #12]
   8253c:	0599      	lsls	r1, r3, #22
   8253e:	d53c      	bpl.n	825ba <_fclose_r+0xa2>
   82540:	4621      	mov	r1, r4
   82542:	4628      	mov	r0, r5
   82544:	f7ff f974 	bl	81830 <__sflush_r>
   82548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8254a:	4606      	mov	r6, r0
   8254c:	b133      	cbz	r3, 8255c <_fclose_r+0x44>
   8254e:	69e1      	ldr	r1, [r4, #28]
   82550:	4628      	mov	r0, r5
   82552:	4798      	blx	r3
   82554:	2800      	cmp	r0, #0
   82556:	bfb8      	it	lt
   82558:	f04f 36ff 	movlt.w	r6, #4294967295
   8255c:	89a3      	ldrh	r3, [r4, #12]
   8255e:	061a      	lsls	r2, r3, #24
   82560:	d422      	bmi.n	825a8 <_fclose_r+0x90>
   82562:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82564:	b141      	cbz	r1, 82578 <_fclose_r+0x60>
   82566:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8256a:	4299      	cmp	r1, r3
   8256c:	d002      	beq.n	82574 <_fclose_r+0x5c>
   8256e:	4628      	mov	r0, r5
   82570:	f7ff faf8 	bl	81b64 <_free_r>
   82574:	2300      	movs	r3, #0
   82576:	6323      	str	r3, [r4, #48]	; 0x30
   82578:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8257a:	b121      	cbz	r1, 82586 <_fclose_r+0x6e>
   8257c:	4628      	mov	r0, r5
   8257e:	f7ff faf1 	bl	81b64 <_free_r>
   82582:	2300      	movs	r3, #0
   82584:	6463      	str	r3, [r4, #68]	; 0x44
   82586:	f7ff fa77 	bl	81a78 <__sfp_lock_acquire>
   8258a:	2200      	movs	r2, #0
   8258c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8258e:	81a2      	strh	r2, [r4, #12]
   82590:	07db      	lsls	r3, r3, #31
   82592:	d50e      	bpl.n	825b2 <_fclose_r+0x9a>
   82594:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82596:	f7ff fbf5 	bl	81d84 <__retarget_lock_close_recursive>
   8259a:	f7ff fa73 	bl	81a84 <__sfp_lock_release>
   8259e:	4630      	mov	r0, r6
   825a0:	bd70      	pop	{r4, r5, r6, pc}
   825a2:	f7ff fa39 	bl	81a18 <__sinit>
   825a6:	e7bf      	b.n	82528 <_fclose_r+0x10>
   825a8:	6921      	ldr	r1, [r4, #16]
   825aa:	4628      	mov	r0, r5
   825ac:	f7ff fada 	bl	81b64 <_free_r>
   825b0:	e7d7      	b.n	82562 <_fclose_r+0x4a>
   825b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   825b4:	f7ff fbea 	bl	81d8c <__retarget_lock_release_recursive>
   825b8:	e7ec      	b.n	82594 <_fclose_r+0x7c>
   825ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   825bc:	f7ff fbe4 	bl	81d88 <__retarget_lock_acquire_recursive>
   825c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   825c4:	2b00      	cmp	r3, #0
   825c6:	d1bb      	bne.n	82540 <_fclose_r+0x28>
   825c8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   825ca:	f016 0601 	ands.w	r6, r6, #1
   825ce:	d1b1      	bne.n	82534 <_fclose_r+0x1c>
   825d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   825d2:	f7ff fbdb 	bl	81d8c <__retarget_lock_release_recursive>
   825d6:	4630      	mov	r0, r6
   825d8:	bd70      	pop	{r4, r5, r6, pc}
   825da:	bf00      	nop

000825dc <_fstat_r>:
   825dc:	b570      	push	{r4, r5, r6, lr}
   825de:	460d      	mov	r5, r1
   825e0:	2300      	movs	r3, #0
   825e2:	4c07      	ldr	r4, [pc, #28]	; (82600 <_fstat_r+0x24>)
   825e4:	4606      	mov	r6, r0
   825e6:	4611      	mov	r1, r2
   825e8:	4628      	mov	r0, r5
   825ea:	6023      	str	r3, [r4, #0]
   825ec:	f7fe fe9f 	bl	8132e <_fstat>
   825f0:	1c43      	adds	r3, r0, #1
   825f2:	d000      	beq.n	825f6 <_fstat_r+0x1a>
   825f4:	bd70      	pop	{r4, r5, r6, pc}
   825f6:	6823      	ldr	r3, [r4, #0]
   825f8:	2b00      	cmp	r3, #0
   825fa:	d0fb      	beq.n	825f4 <_fstat_r+0x18>
   825fc:	6033      	str	r3, [r6, #0]
   825fe:	bd70      	pop	{r4, r5, r6, pc}
   82600:	20070b08 	.word	0x20070b08

00082604 <_lseek_r>:
   82604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82606:	460e      	mov	r6, r1
   82608:	2500      	movs	r5, #0
   8260a:	4c08      	ldr	r4, [pc, #32]	; (8262c <_lseek_r+0x28>)
   8260c:	4611      	mov	r1, r2
   8260e:	4607      	mov	r7, r0
   82610:	461a      	mov	r2, r3
   82612:	4630      	mov	r0, r6
   82614:	6025      	str	r5, [r4, #0]
   82616:	f7fe fe8f 	bl	81338 <_lseek>
   8261a:	1c43      	adds	r3, r0, #1
   8261c:	d000      	beq.n	82620 <_lseek_r+0x1c>
   8261e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82620:	6823      	ldr	r3, [r4, #0]
   82622:	2b00      	cmp	r3, #0
   82624:	d0fb      	beq.n	8261e <_lseek_r+0x1a>
   82626:	603b      	str	r3, [r7, #0]
   82628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8262a:	bf00      	nop
   8262c:	20070b08 	.word	0x20070b08

00082630 <_read_r>:
   82630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82632:	460e      	mov	r6, r1
   82634:	2500      	movs	r5, #0
   82636:	4c08      	ldr	r4, [pc, #32]	; (82658 <_read_r+0x28>)
   82638:	4611      	mov	r1, r2
   8263a:	4607      	mov	r7, r0
   8263c:	461a      	mov	r2, r3
   8263e:	4630      	mov	r0, r6
   82640:	6025      	str	r5, [r4, #0]
   82642:	f7fe f88f 	bl	80764 <_read>
   82646:	1c43      	adds	r3, r0, #1
   82648:	d000      	beq.n	8264c <_read_r+0x1c>
   8264a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8264c:	6823      	ldr	r3, [r4, #0]
   8264e:	2b00      	cmp	r3, #0
   82650:	d0fb      	beq.n	8264a <_read_r+0x1a>
   82652:	603b      	str	r3, [r7, #0]
   82654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82656:	bf00      	nop
   82658:	20070b08 	.word	0x20070b08

0008265c <_global_impure_ptr>:
   8265c:	20070148                                H.. 

00082660 <_init>:
   82660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82662:	bf00      	nop
   82664:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82666:	bc08      	pop	{r3}
   82668:	469e      	mov	lr, r3
   8266a:	4770      	bx	lr

0008266c <__init_array_start>:
   8266c:	00081811 	.word	0x00081811

00082670 <__frame_dummy_init_array_entry>:
   82670:	00080119                                ....

00082674 <_fini>:
   82674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82676:	bf00      	nop
   82678:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8267a:	bc08      	pop	{r3}
   8267c:	469e      	mov	lr, r3
   8267e:	4770      	bx	lr

00082680 <__fini_array_start>:
   82680:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <xNextTaskUnblockTime>:
20070138:	ffffffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <_impure_ptr>:
20070140:	20070148 00000000                       H.. ....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	20070ae4                                ... 

20070574 <__malloc_av_>:
	...
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 

2007097c <__malloc_sbrk_base>:
2007097c:	ffffffff                                ....

20070980 <__malloc_trim_threshold>:
20070980:	00020000                                ....
