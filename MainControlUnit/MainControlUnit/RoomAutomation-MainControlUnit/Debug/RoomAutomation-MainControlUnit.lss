
RoomAutomation-MainControlUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a2bc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008a2bc  0008a2bc  0001a2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b68  20070000  0008a2c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000930  20070b68  0008ae2c  00020b68  2**2
                  ALLOC
  4 .stack        00002000  20071498  0008b75c  00020b68  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b68  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b91  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002d1b4  00000000  00000000  00020bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000667b  00000000  00000000  0004dd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d5f3  00000000  00000000  00054419  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000010f0  00000000  00000000  00061a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001220  00000000  00000000  00062afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00020ec8  00000000  00000000  00063d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e96b  00000000  00000000  00084be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00072541  00000000  00000000  000a354f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003960  00000000  00000000  00115a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	98 34 07 20 a5 2f 08 00 a1 2f 08 00 a1 2f 08 00     .4. ./.../.../..
   80010:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 00 00 00 00     ./.../.../......
	...
   8002c:	4d 28 08 00 a1 2f 08 00 00 00 00 00 85 28 08 00     M(.../.......(..
   8003c:	c1 28 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     .(.../.../.../..
   8004c:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ./.../.../.../..
   8005c:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 00 00 00 00     ./.../.../......
   8006c:	15 2e 08 00 29 2e 08 00 3d 2e 08 00 51 2e 08 00     ....)...=...Q...
	...
   80084:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ./.../.../.../..
   80094:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ./.../.../.../..
   800a4:	00 00 00 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ...../.../.../..
   800b4:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ./.../.../.../..
   800c4:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ./.../.../.../..
   800d4:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ./.../.../.../..
   800e4:	a1 2f 08 00 a1 2f 08 00 a1 2f 08 00 a1 2f 08 00     ./.../.../.../..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b68 	.word	0x20070b68
   80110:	00000000 	.word	0x00000000
   80114:	0008a2c4 	.word	0x0008a2c4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008a2c4 	.word	0x0008a2c4
   80154:	20070b6c 	.word	0x20070b6c
   80158:	0008a2c4 	.word	0x0008a2c4
   8015c:	00000000 	.word	0x00000000

00080160 <sub_frame_draw_handler>:
 *
 * \sa wtk_basic_frame_draw_handler_t
 */
static void sub_frame_draw_handler(struct win_window *win,
		struct win_clip_region const *clip)
{
   80160:	b530      	push	{r4, r5, lr}
   80162:	b085      	sub	sp, #20
   80164:	460c      	mov	r4, r1
	char buffer[4];

	snprintf(buffer, sizeof(buffer), "%3d", counter);
   80166:	4b0c      	ldr	r3, [pc, #48]	; (80198 <sub_frame_draw_handler+0x38>)
   80168:	781b      	ldrb	r3, [r3, #0]
   8016a:	4a0c      	ldr	r2, [pc, #48]	; (8019c <sub_frame_draw_handler+0x3c>)
   8016c:	2104      	movs	r1, #4
   8016e:	a803      	add	r0, sp, #12
   80170:	4d0b      	ldr	r5, [pc, #44]	; (801a0 <sub_frame_draw_handler+0x40>)
   80172:	47a8      	blx	r5

	/**
	 * \todo Add code here to draw text on screen using the
	 * gfx_draw_string() function.
	 */
	gfx_draw_string(buffer, clip->origin.x + 30, clip->origin.y + 12,
   80174:	8862      	ldrh	r2, [r4, #2]
   80176:	320c      	adds	r2, #12
   80178:	8821      	ldrh	r1, [r4, #0]
   8017a:	311e      	adds	r1, #30
   8017c:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   80180:	9301      	str	r3, [sp, #4]
   80182:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80186:	9300      	str	r3, [sp, #0]
   80188:	4b06      	ldr	r3, [pc, #24]	; (801a4 <sub_frame_draw_handler+0x44>)
   8018a:	b212      	sxth	r2, r2
   8018c:	b209      	sxth	r1, r1
   8018e:	a803      	add	r0, sp, #12
   80190:	4c05      	ldr	r4, [pc, #20]	; (801a8 <sub_frame_draw_handler+0x48>)
   80192:	47a0      	blx	r4
			&sysfont, GFX_COLOR(255, 255, 255),
			GFX_COLOR_TRANSPARENT);
}
   80194:	b005      	add	sp, #20
   80196:	bd30      	pop	{r4, r5, pc}
   80198:	20070b84 	.word	0x20070b84
   8019c:	00088474 	.word	0x00088474
   801a0:	00083809 	.word	0x00083809
   801a4:	20070138 	.word	0x20070138
   801a8:	00081055 	.word	0x00081055

000801ac <widget_frame_command_handler>:
{
   801ac:	b510      	push	{r4, lr}
	switch (command) {
   801ae:	b2c9      	uxtb	r1, r1
   801b0:	2901      	cmp	r1, #1
   801b2:	d003      	beq.n	801bc <widget_frame_command_handler+0x10>
   801b4:	2902      	cmp	r1, #2
   801b6:	d00c      	beq.n	801d2 <widget_frame_command_handler+0x26>
}
   801b8:	2000      	movs	r0, #0
   801ba:	bd10      	pop	{r4, pc}
		wtk_progress_bar_set_value(progress_bar,
   801bc:	4b0a      	ldr	r3, [pc, #40]	; (801e8 <widget_frame_command_handler+0x3c>)
   801be:	681c      	ldr	r4, [r3, #0]
   801c0:	4b0a      	ldr	r3, [pc, #40]	; (801ec <widget_frame_command_handler+0x40>)
   801c2:	6818      	ldr	r0, [r3, #0]
   801c4:	4b0a      	ldr	r3, [pc, #40]	; (801f0 <widget_frame_command_handler+0x44>)
   801c6:	4798      	blx	r3
   801c8:	4601      	mov	r1, r0
   801ca:	4620      	mov	r0, r4
   801cc:	4b09      	ldr	r3, [pc, #36]	; (801f4 <widget_frame_command_handler+0x48>)
   801ce:	4798      	blx	r3
		break;
   801d0:	e7f2      	b.n	801b8 <widget_frame_command_handler+0xc>
		counter++;
   801d2:	4a09      	ldr	r2, [pc, #36]	; (801f8 <widget_frame_command_handler+0x4c>)
   801d4:	7813      	ldrb	r3, [r2, #0]
   801d6:	3301      	adds	r3, #1
   801d8:	7013      	strb	r3, [r2, #0]
		win_redraw(wtk_basic_frame_as_child(sub_frame));
   801da:	4b08      	ldr	r3, [pc, #32]	; (801fc <widget_frame_command_handler+0x50>)
   801dc:	6818      	ldr	r0, [r3, #0]
   801de:	4b08      	ldr	r3, [pc, #32]	; (80200 <widget_frame_command_handler+0x54>)
   801e0:	4798      	blx	r3
   801e2:	4b08      	ldr	r3, [pc, #32]	; (80204 <widget_frame_command_handler+0x58>)
   801e4:	4798      	blx	r3
		break;
   801e6:	e7e7      	b.n	801b8 <widget_frame_command_handler+0xc>
   801e8:	20070b98 	.word	0x20070b98
   801ec:	20070b9c 	.word	0x20070b9c
   801f0:	00082405 	.word	0x00082405
   801f4:	00082029 	.word	0x00082029
   801f8:	20070b84 	.word	0x20070b84
   801fc:	20070ba0 	.word	0x20070ba0
   80200:	00081acd 	.word	0x00081acd
   80204:	00081995 	.word	0x00081995

00080208 <app_widget_launch>:
 * \brief Setup widget demo
 *
 * This function launches the widget demo.
 */
void app_widget_launch()
{
   80208:	b570      	push	{r4, r5, r6, lr}
   8020a:	b086      	sub	sp, #24
	struct win_area area;
	struct wtk_label *lbl;
	struct wtk_button *btn;

	/* Get pointer to root window */
	win_root = win_get_root();
   8020c:	4b5f      	ldr	r3, [pc, #380]	; (8038c <app_widget_launch+0x184>)
   8020e:	4798      	blx	r3
   80210:	4606      	mov	r6, r0

	/* Application frame */

	/* Create a background bitmap using a solid color. */
	frame_background.type = GFX_BITMAP_SOLID;
   80212:	4d5f      	ldr	r5, [pc, #380]	; (80390 <app_widget_launch+0x188>)
   80214:	2400      	movs	r4, #0
   80216:	712c      	strb	r4, [r5, #4]
	frame_background.data.color = APP_BACKGROUND_COLOR;
   80218:	f248 6331 	movw	r3, #34353	; 0x8631
   8021c:	812b      	strh	r3, [r5, #8]

	/* Set the area to fill the entire screen */
	area.pos.x = 0;
   8021e:	f8ad 4010 	strh.w	r4, [sp, #16]
	area.pos.y = 0;
   80222:	f8ad 4012 	strh.w	r4, [sp, #18]
	area.size.x = gfx_get_width();
   80226:	4b5b      	ldr	r3, [pc, #364]	; (80394 <app_widget_launch+0x18c>)
   80228:	4798      	blx	r3
   8022a:	f8ad 0014 	strh.w	r0, [sp, #20]
	area.size.y = gfx_get_height();
   8022e:	4b5a      	ldr	r3, [pc, #360]	; (80398 <app_widget_launch+0x190>)
   80230:	4798      	blx	r3
   80232:	f8ad 0016 	strh.w	r0, [sp, #22]
	/*
	 * Create a basic frame with a specified background and command event
	 * handler. Check the return value if an error occurred while creating
	 * the widget.
	 */
	main_frame = wtk_basic_frame_create(win_root, &area,
   80236:	9401      	str	r4, [sp, #4]
   80238:	4b58      	ldr	r3, [pc, #352]	; (8039c <app_widget_launch+0x194>)
   8023a:	9300      	str	r3, [sp, #0]
   8023c:	4623      	mov	r3, r4
   8023e:	462a      	mov	r2, r5
   80240:	a904      	add	r1, sp, #16
   80242:	4630      	mov	r0, r6
   80244:	4c56      	ldr	r4, [pc, #344]	; (803a0 <app_widget_launch+0x198>)
   80246:	47a0      	blx	r4
   80248:	4b56      	ldr	r3, [pc, #344]	; (803a4 <app_widget_launch+0x19c>)
   8024a:	6018      	str	r0, [r3, #0]
			&frame_background, NULL,
			widget_frame_command_handler, NULL);
	if (!main_frame) {
   8024c:	2800      	cmp	r0, #0
   8024e:	f000 809b 	beq.w	80388 <app_widget_launch+0x180>
		goto error_frame;
	}

	/* Get a pointer to the widget's window for adding sub-widgets. */
	parent = wtk_basic_frame_as_child(main_frame);
   80252:	4b55      	ldr	r3, [pc, #340]	; (803a8 <app_widget_launch+0x1a0>)
   80254:	4798      	blx	r3
   80256:	4604      	mov	r4, r0
	/*
	 * Draw the frame by showing the frame widget's window. Any
	 * child-widgets and windows will not be shown before the parent
	 * widget/window is shown.
	 */
	win_show(parent);
   80258:	4b54      	ldr	r3, [pc, #336]	; (803ac <app_widget_launch+0x1a4>)
   8025a:	4798      	blx	r3

	/* Application label */
	area.pos.x = LABEL_POS_X;
   8025c:	230a      	movs	r3, #10
   8025e:	f8ad 3010 	strh.w	r3, [sp, #16]
	area.pos.y = LABEL_POS_Y;
   80262:	f8ad 3012 	strh.w	r3, [sp, #18]
	/* Find an optimal size for the widget. */
	wtk_label_size_hint(&area.size, demo_string);
   80266:	4d52      	ldr	r5, [pc, #328]	; (803b0 <app_widget_launch+0x1a8>)
   80268:	4629      	mov	r1, r5
   8026a:	a805      	add	r0, sp, #20
   8026c:	4b51      	ldr	r3, [pc, #324]	; (803b4 <app_widget_launch+0x1ac>)
   8026e:	4798      	blx	r3

	/*
	 * Create the label and check the return value if an error occurred
	 * while creating the label.
	 */
	lbl = wtk_label_create(parent, &area, demo_string,
   80270:	2300      	movs	r3, #0
   80272:	9301      	str	r3, [sp, #4]
   80274:	9300      	str	r3, [sp, #0]
   80276:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8027a:	462a      	mov	r2, r5
   8027c:	a904      	add	r1, sp, #16
   8027e:	4620      	mov	r0, r4
   80280:	4d4d      	ldr	r5, [pc, #308]	; (803b8 <app_widget_launch+0x1b0>)
   80282:	47a8      	blx	r5
			GFX_COLOR(255, 255, 255), NULL, false);
	if (!lbl) {
   80284:	2800      	cmp	r0, #0
   80286:	d079      	beq.n	8037c <app_widget_launch+0x174>
		goto error_widget;
	}

	/* Draw the label by showing the label widget's window. */
	win_show(wtk_label_as_child(lbl));
   80288:	4b4c      	ldr	r3, [pc, #304]	; (803bc <app_widget_launch+0x1b4>)
   8028a:	4798      	blx	r3
   8028c:	4b47      	ldr	r3, [pc, #284]	; (803ac <app_widget_launch+0x1a4>)
   8028e:	4798      	blx	r3

	/* Application slider */
	area.pos.x = SLIDER_POS_X;
   80290:	230a      	movs	r3, #10
   80292:	f8ad 3010 	strh.w	r3, [sp, #16]
	area.pos.y = SLIDER_POS_Y;
   80296:	233c      	movs	r3, #60	; 0x3c
   80298:	f8ad 3012 	strh.w	r3, [sp, #18]
	area.size.x = SLIDER_SIZE_X;
   8029c:	2350      	movs	r3, #80	; 0x50
   8029e:	f8ad 3014 	strh.w	r3, [sp, #20]
	area.size.y = SLIDER_SIZE_Y;
   802a2:	2328      	movs	r3, #40	; 0x28
   802a4:	f8ad 3016 	strh.w	r3, [sp, #22]

	/*
	 * Create the slider and check the return value if an error occurred
	 * while creating the slider.
	 */
	slider = wtk_slider_create(parent, &area, SLIDER_MAX_VALUE,
   802a8:	2301      	movs	r3, #1
   802aa:	9301      	str	r3, [sp, #4]
   802ac:	2302      	movs	r3, #2
   802ae:	9300      	str	r3, [sp, #0]
   802b0:	2332      	movs	r3, #50	; 0x32
   802b2:	2264      	movs	r2, #100	; 0x64
   802b4:	a904      	add	r1, sp, #16
   802b6:	4620      	mov	r0, r4
   802b8:	4d41      	ldr	r5, [pc, #260]	; (803c0 <app_widget_launch+0x1b8>)
   802ba:	47a8      	blx	r5
   802bc:	4b41      	ldr	r3, [pc, #260]	; (803c4 <app_widget_launch+0x1bc>)
   802be:	6018      	str	r0, [r3, #0]
			SLIDER_MAX_VALUE / 2,
			WTK_SLIDER_HORIZONTAL | WTK_SLIDER_CMD_RELEASE,
			(win_command_t)SLIDER_ID);
	if (!slider) {
   802c0:	2800      	cmp	r0, #0
   802c2:	d05b      	beq.n	8037c <app_widget_launch+0x174>
		goto error_widget;
	}

	/* Draw the slider by showing the slider widget's window. */
	win_show(wtk_slider_as_child(slider));
   802c4:	4b40      	ldr	r3, [pc, #256]	; (803c8 <app_widget_launch+0x1c0>)
   802c6:	4798      	blx	r3
   802c8:	4b38      	ldr	r3, [pc, #224]	; (803ac <app_widget_launch+0x1a4>)
   802ca:	4798      	blx	r3

	/* Application progress bar, placed right of the slider. */
	area.pos.x += area.size.x + SLIDER_PB_SPACING_X;
   802cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   802d0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   802d4:	4413      	add	r3, r2
   802d6:	330a      	adds	r3, #10
   802d8:	f8ad 3010 	strh.w	r3, [sp, #16]
	area.size.x = PB_SIZE_X;
   802dc:	2350      	movs	r3, #80	; 0x50
   802de:	f8ad 3014 	strh.w	r3, [sp, #20]
	area.size.y = PB_SIZE_Y;
   802e2:	2328      	movs	r3, #40	; 0x28
   802e4:	f8ad 3016 	strh.w	r3, [sp, #22]

	/*
	 * Create the progress bar and check the return value if an error
	 * occurred while creating the progress bar.
	 */
	progress_bar = wtk_progress_bar_create(parent, &area, SLIDER_MAX_VALUE,
   802e8:	2300      	movs	r3, #0
   802ea:	9302      	str	r3, [sp, #8]
   802ec:	f64c 335a 	movw	r3, #52058	; 0xcb5a
   802f0:	9301      	str	r3, [sp, #4]
   802f2:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
   802f6:	9300      	str	r3, [sp, #0]
   802f8:	2332      	movs	r3, #50	; 0x32
   802fa:	2264      	movs	r2, #100	; 0x64
   802fc:	a904      	add	r1, sp, #16
   802fe:	4620      	mov	r0, r4
   80300:	4d32      	ldr	r5, [pc, #200]	; (803cc <app_widget_launch+0x1c4>)
   80302:	47a8      	blx	r5
   80304:	4b32      	ldr	r3, [pc, #200]	; (803d0 <app_widget_launch+0x1c8>)
   80306:	6018      	str	r0, [r3, #0]
			SLIDER_MAX_VALUE / 2, GFX_COLOR(255, 255, 0),
			GFX_COLOR(90, 90, 90), WTK_PROGRESS_BAR_HORIZONTAL);
	if (!progress_bar) {
   80308:	2800      	cmp	r0, #0
   8030a:	d037      	beq.n	8037c <app_widget_launch+0x174>
		goto error_widget;
	}

	/* Draw the progress bar by showing the progress bar widget's window. */
	win_show(wtk_progress_bar_as_child(progress_bar));
   8030c:	4b31      	ldr	r3, [pc, #196]	; (803d4 <app_widget_launch+0x1cc>)
   8030e:	4798      	blx	r3
   80310:	4b26      	ldr	r3, [pc, #152]	; (803ac <app_widget_launch+0x1a4>)
   80312:	4798      	blx	r3

	/** \todo Add code to set up button here. */
	area.pos.x = 10;
   80314:	230a      	movs	r3, #10
   80316:	f8ad 3010 	strh.w	r3, [sp, #16]
	area.pos.y = 150;
   8031a:	2396      	movs	r3, #150	; 0x96
   8031c:	f8ad 3012 	strh.w	r3, [sp, #18]
	area.size.x = 90;
   80320:	235a      	movs	r3, #90	; 0x5a
   80322:	f8ad 3014 	strh.w	r3, [sp, #20]
	area.size.y = 40;
   80326:	2328      	movs	r3, #40	; 0x28
   80328:	f8ad 3016 	strh.w	r3, [sp, #22]

	btn = wtk_button_create(parent, &area, "Click",
   8032c:	2302      	movs	r3, #2
   8032e:	4a2a      	ldr	r2, [pc, #168]	; (803d8 <app_widget_launch+0x1d0>)
   80330:	a904      	add	r1, sp, #16
   80332:	4620      	mov	r0, r4
   80334:	4d29      	ldr	r5, [pc, #164]	; (803dc <app_widget_launch+0x1d4>)
   80336:	47a8      	blx	r5
			(win_command_t)BUTTON_ID);
	if (!btn) {
   80338:	b300      	cbz	r0, 8037c <app_widget_launch+0x174>
		goto error_widget;
	}
	win_show(wtk_button_as_child(btn));
   8033a:	4b29      	ldr	r3, [pc, #164]	; (803e0 <app_widget_launch+0x1d8>)
   8033c:	4798      	blx	r3
   8033e:	4b1b      	ldr	r3, [pc, #108]	; (803ac <app_widget_launch+0x1a4>)
   80340:	4798      	blx	r3

	/** \todo Add code to set up basic frame here. */
	area.pos.x += area.size.x + 40;
   80342:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   80346:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   8034a:	4413      	add	r3, r2
   8034c:	3328      	adds	r3, #40	; 0x28
   8034e:	a906      	add	r1, sp, #24
   80350:	f821 3d08 	strh.w	r3, [r1, #-8]!

	sub_frame_background.type = GFX_BITMAP_SOLID;
   80354:	4a23      	ldr	r2, [pc, #140]	; (803e4 <app_widget_launch+0x1dc>)
   80356:	2300      	movs	r3, #0
   80358:	7113      	strb	r3, [r2, #4]
	sub_frame_background.data.color = GFX_COLOR(127, 0, 0);
   8035a:	2078      	movs	r0, #120	; 0x78
   8035c:	8110      	strh	r0, [r2, #8]

	sub_frame = wtk_basic_frame_create(parent, &area,
   8035e:	9301      	str	r3, [sp, #4]
   80360:	9300      	str	r3, [sp, #0]
   80362:	4b21      	ldr	r3, [pc, #132]	; (803e8 <app_widget_launch+0x1e0>)
   80364:	4620      	mov	r0, r4
   80366:	4c0e      	ldr	r4, [pc, #56]	; (803a0 <app_widget_launch+0x198>)
   80368:	47a0      	blx	r4
   8036a:	4b20      	ldr	r3, [pc, #128]	; (803ec <app_widget_launch+0x1e4>)
   8036c:	6018      	str	r0, [r3, #0]
			&sub_frame_background, sub_frame_draw_handler,
			NULL, NULL);
	if (!sub_frame) {
   8036e:	b128      	cbz	r0, 8037c <app_widget_launch+0x174>
		goto error_widget;
	}
	win_show(wtk_basic_frame_as_child(sub_frame));
   80370:	4b0d      	ldr	r3, [pc, #52]	; (803a8 <app_widget_launch+0x1a0>)
   80372:	4798      	blx	r3
   80374:	4b0d      	ldr	r3, [pc, #52]	; (803ac <app_widget_launch+0x1a4>)
   80376:	4798      	blx	r3
	win_destroy(wtk_basic_frame_as_child(main_frame));
error_frame:
	/* Wait forever if an error occurred during setup. */
	while (1) {
	}
   80378:	b006      	add	sp, #24
   8037a:	bd70      	pop	{r4, r5, r6, pc}
	win_destroy(wtk_basic_frame_as_child(main_frame));
   8037c:	4b09      	ldr	r3, [pc, #36]	; (803a4 <app_widget_launch+0x19c>)
   8037e:	6818      	ldr	r0, [r3, #0]
   80380:	4b09      	ldr	r3, [pc, #36]	; (803a8 <app_widget_launch+0x1a0>)
   80382:	4798      	blx	r3
   80384:	4b1a      	ldr	r3, [pc, #104]	; (803f0 <app_widget_launch+0x1e8>)
   80386:	4798      	blx	r3
   80388:	e7fe      	b.n	80388 <app_widget_launch+0x180>
   8038a:	bf00      	nop
   8038c:	000813f5 	.word	0x000813f5
   80390:	20070b88 	.word	0x20070b88
   80394:	00080a1d 	.word	0x00080a1d
   80398:	00080a29 	.word	0x00080a29
   8039c:	000801ad 	.word	0x000801ad
   803a0:	00081ad1 	.word	0x00081ad1
   803a4:	20070b94 	.word	0x20070b94
   803a8:	00081acd 	.word	0x00081acd
   803ac:	000819b5 	.word	0x000819b5
   803b0:	00088454 	.word	0x00088454
   803b4:	00081e25 	.word	0x00081e25
   803b8:	00081e3d 	.word	0x00081e3d
   803bc:	00081e21 	.word	0x00081e21
   803c0:	0008241d 	.word	0x0008241d
   803c4:	20070b9c 	.word	0x20070b9c
   803c8:	00082401 	.word	0x00082401
   803cc:	0008207d 	.word	0x0008207d
   803d0:	20070b98 	.word	0x20070b98
   803d4:	00082025 	.word	0x00082025
   803d8:	0008846c 	.word	0x0008846c
   803dc:	00081ce9 	.word	0x00081ce9
   803e0:	00081ce5 	.word	0x00081ce5
   803e4:	20070ba4 	.word	0x20070ba4
   803e8:	00080161 	.word	0x00080161
   803ec:	20070ba0 	.word	0x20070ba0
   803f0:	0008182d 	.word	0x0008182d

000803f4 <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   803f4:	4b0b      	ldr	r3, [pc, #44]	; (80424 <ili9341_send_command+0x30>)
   803f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   803fa:	635a      	str	r2, [r3, #52]	; 0x34
   803fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80400:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80402:	4a09      	ldr	r2, [pc, #36]	; (80428 <ili9341_send_command+0x34>)
   80404:	6913      	ldr	r3, [r2, #16]
		/* Do nothing */
	}
#  endif
#elif defined(CONF_ILI9341_SPI)
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80406:	f413 7f00 	tst.w	r3, #512	; 0x200
   8040a:	d0fb      	beq.n	80404 <ili9341_send_command+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8040c:	4b06      	ldr	r3, [pc, #24]	; (80428 <ili9341_send_command+0x34>)
   8040e:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80410:	461a      	mov	r2, r3
   80412:	6913      	ldr	r3, [r2, #16]
   80414:	f413 7f00 	tst.w	r3, #512	; 0x200
   80418:	d0fb      	beq.n	80412 <ili9341_send_command+0x1e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8041a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8041e:	4b01      	ldr	r3, [pc, #4]	; (80424 <ili9341_send_command+0x30>)
   80420:	631a      	str	r2, [r3, #48]	; 0x30
   80422:	4770      	bx	lr
   80424:	400e1200 	.word	0x400e1200
   80428:	40008000 	.word	0x40008000

0008042c <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
   8042c:	b510      	push	{r4, lr}
   8042e:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
   80430:	202a      	movs	r0, #42	; 0x2a
   80432:	4b35      	ldr	r3, [pc, #212]	; (80508 <ili9341_send_draw_limits+0xdc>)
   80434:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
   80436:	4b35      	ldr	r3, [pc, #212]	; (8050c <ili9341_send_draw_limits+0xe0>)
   80438:	f9b3 1000 	ldrsh.w	r1, [r3]
   8043c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   80440:	4a33      	ldr	r2, [pc, #204]	; (80510 <ili9341_send_draw_limits+0xe4>)
   80442:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80444:	f413 7f00 	tst.w	r3, #512	; 0x200
   80448:	d0fb      	beq.n	80442 <ili9341_send_draw_limits+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8044a:	4b31      	ldr	r3, [pc, #196]	; (80510 <ili9341_send_draw_limits+0xe4>)
   8044c:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
   8044e:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80450:	461a      	mov	r2, r3
   80452:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80454:	f413 7f00 	tst.w	r3, #512	; 0x200
   80458:	d0fb      	beq.n	80452 <ili9341_send_draw_limits+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8045a:	4b2d      	ldr	r3, [pc, #180]	; (80510 <ili9341_send_draw_limits+0xe4>)
   8045c:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   8045e:	b19c      	cbz	r4, 80488 <ili9341_send_draw_limits+0x5c>
		ili9341_send_byte(limit_end_x >> 8);
   80460:	4b2c      	ldr	r3, [pc, #176]	; (80514 <ili9341_send_draw_limits+0xe8>)
   80462:	f9b3 1000 	ldrsh.w	r1, [r3]
   80466:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8046a:	4a29      	ldr	r2, [pc, #164]	; (80510 <ili9341_send_draw_limits+0xe4>)
   8046c:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8046e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80472:	d0fb      	beq.n	8046c <ili9341_send_draw_limits+0x40>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80474:	4b26      	ldr	r3, [pc, #152]	; (80510 <ili9341_send_draw_limits+0xe4>)
   80476:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
   80478:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8047a:	461a      	mov	r2, r3
   8047c:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8047e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80482:	d0fb      	beq.n	8047c <ili9341_send_draw_limits+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80484:	4b22      	ldr	r3, [pc, #136]	; (80510 <ili9341_send_draw_limits+0xe4>)
   80486:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80488:	4a21      	ldr	r2, [pc, #132]	; (80510 <ili9341_send_draw_limits+0xe4>)
   8048a:	6913      	ldr	r3, [r2, #16]
   8048c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80490:	d0fb      	beq.n	8048a <ili9341_send_draw_limits+0x5e>
   80492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80496:	4b20      	ldr	r3, [pc, #128]	; (80518 <ili9341_send_draw_limits+0xec>)
   80498:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
   8049a:	202b      	movs	r0, #43	; 0x2b
   8049c:	4b1a      	ldr	r3, [pc, #104]	; (80508 <ili9341_send_draw_limits+0xdc>)
   8049e:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
   804a0:	4b1e      	ldr	r3, [pc, #120]	; (8051c <ili9341_send_draw_limits+0xf0>)
   804a2:	f9b3 1000 	ldrsh.w	r1, [r3]
   804a6:	f3c1 2007 	ubfx	r0, r1, #8, #8
   804aa:	4a19      	ldr	r2, [pc, #100]	; (80510 <ili9341_send_draw_limits+0xe4>)
   804ac:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804ae:	f413 7f00 	tst.w	r3, #512	; 0x200
   804b2:	d0fb      	beq.n	804ac <ili9341_send_draw_limits+0x80>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804b4:	4b16      	ldr	r3, [pc, #88]	; (80510 <ili9341_send_draw_limits+0xe4>)
   804b6:	60d8      	str	r0, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
   804b8:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804ba:	461a      	mov	r2, r3
   804bc:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804be:	f413 7f00 	tst.w	r3, #512	; 0x200
   804c2:	d0fb      	beq.n	804bc <ili9341_send_draw_limits+0x90>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804c4:	4b12      	ldr	r3, [pc, #72]	; (80510 <ili9341_send_draw_limits+0xe4>)
   804c6:	60d9      	str	r1, [r3, #12]
	if (send_end_limits) {
   804c8:	b19c      	cbz	r4, 804f2 <ili9341_send_draw_limits+0xc6>
		ili9341_send_byte(limit_end_y >> 8);
   804ca:	4b15      	ldr	r3, [pc, #84]	; (80520 <ili9341_send_draw_limits+0xf4>)
   804cc:	f9b3 1000 	ldrsh.w	r1, [r3]
   804d0:	f3c1 2007 	ubfx	r0, r1, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804d4:	4a0e      	ldr	r2, [pc, #56]	; (80510 <ili9341_send_draw_limits+0xe4>)
   804d6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804d8:	f413 7f00 	tst.w	r3, #512	; 0x200
   804dc:	d0fb      	beq.n	804d6 <ili9341_send_draw_limits+0xaa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804de:	4b0c      	ldr	r3, [pc, #48]	; (80510 <ili9341_send_draw_limits+0xe4>)
   804e0:	60d8      	str	r0, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
   804e2:	b2c9      	uxtb	r1, r1
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804e4:	461a      	mov	r2, r3
   804e6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   804e8:	f413 7f00 	tst.w	r3, #512	; 0x200
   804ec:	d0fb      	beq.n	804e6 <ili9341_send_draw_limits+0xba>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   804ee:	4b08      	ldr	r3, [pc, #32]	; (80510 <ili9341_send_draw_limits+0xe4>)
   804f0:	60d9      	str	r1, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   804f2:	4a07      	ldr	r2, [pc, #28]	; (80510 <ili9341_send_draw_limits+0xe4>)
   804f4:	6913      	ldr	r3, [r2, #16]
   804f6:	f413 7f00 	tst.w	r3, #512	; 0x200
   804fa:	d0fb      	beq.n	804f4 <ili9341_send_draw_limits+0xc8>
   804fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80500:	4b05      	ldr	r3, [pc, #20]	; (80518 <ili9341_send_draw_limits+0xec>)
   80502:	631a      	str	r2, [r3, #48]	; 0x30
   80504:	bd10      	pop	{r4, pc}
   80506:	bf00      	nop
   80508:	000803f5 	.word	0x000803f5
   8050c:	20070bb4 	.word	0x20070bb4
   80510:	40008000 	.word	0x40008000
   80514:	20070bb0 	.word	0x20070bb0
   80518:	400e1200 	.word	0x400e1200
   8051c:	20070bb6 	.word	0x20070bb6
   80520:	20070bb2 	.word	0x20070bb2

00080524 <ili9341_set_top_left_limit>:
 *
 * \param x The x coordinate of the top left corner
 * \param y The y coordinate of the top left corner
 */
void ili9341_set_top_left_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   80524:	b508      	push	{r3, lr}
	limit_start_x = x;
   80526:	4b04      	ldr	r3, [pc, #16]	; (80538 <ili9341_set_top_left_limit+0x14>)
   80528:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
   8052a:	4b04      	ldr	r3, [pc, #16]	; (8053c <ili9341_set_top_left_limit+0x18>)
   8052c:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(false);
   8052e:	2000      	movs	r0, #0
   80530:	4b03      	ldr	r3, [pc, #12]	; (80540 <ili9341_set_top_left_limit+0x1c>)
   80532:	4798      	blx	r3
   80534:	bd08      	pop	{r3, pc}
   80536:	bf00      	nop
   80538:	20070bb4 	.word	0x20070bb4
   8053c:	20070bb6 	.word	0x20070bb6
   80540:	0008042d 	.word	0x0008042d

00080544 <ili9341_set_bottom_right_limit>:
 *
 * \param x The x coordinate of the bottom right corner
 * \param y The y coordinate of the bottom right corner
 */
void ili9341_set_bottom_right_limit(ili9341_coord_t x, ili9341_coord_t y)
{
   80544:	b508      	push	{r3, lr}
	limit_end_x = x;
   80546:	4b04      	ldr	r3, [pc, #16]	; (80558 <ili9341_set_bottom_right_limit+0x14>)
   80548:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
   8054a:	4b04      	ldr	r3, [pc, #16]	; (8055c <ili9341_set_bottom_right_limit+0x18>)
   8054c:	8019      	strh	r1, [r3, #0]

	ili9341_send_draw_limits(true);
   8054e:	2001      	movs	r0, #1
   80550:	4b03      	ldr	r3, [pc, #12]	; (80560 <ili9341_set_bottom_right_limit+0x1c>)
   80552:	4798      	blx	r3
   80554:	bd08      	pop	{r3, pc}
   80556:	bf00      	nop
   80558:	20070bb0 	.word	0x20070bb0
   8055c:	20070bb2 	.word	0x20070bb2
   80560:	0008042d 	.word	0x0008042d

00080564 <ili9341_set_limits>:
 * \param end_x The x coordinate of the bottom right corner
 * \param end_y The y coordinate of the bottom right corner
 */
void ili9341_set_limits(ili9341_coord_t start_x, ili9341_coord_t start_y,
		ili9341_coord_t end_x, ili9341_coord_t end_y)
{
   80564:	b510      	push	{r4, lr}
	limit_start_x = start_x;
   80566:	4c06      	ldr	r4, [pc, #24]	; (80580 <ili9341_set_limits+0x1c>)
   80568:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
   8056a:	4806      	ldr	r0, [pc, #24]	; (80584 <ili9341_set_limits+0x20>)
   8056c:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
   8056e:	4906      	ldr	r1, [pc, #24]	; (80588 <ili9341_set_limits+0x24>)
   80570:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
   80572:	4a06      	ldr	r2, [pc, #24]	; (8058c <ili9341_set_limits+0x28>)
   80574:	8013      	strh	r3, [r2, #0]

	ili9341_send_draw_limits(true);
   80576:	2001      	movs	r0, #1
   80578:	4b05      	ldr	r3, [pc, #20]	; (80590 <ili9341_set_limits+0x2c>)
   8057a:	4798      	blx	r3
   8057c:	bd10      	pop	{r4, pc}
   8057e:	bf00      	nop
   80580:	20070bb4 	.word	0x20070bb4
   80584:	20070bb6 	.word	0x20070bb6
   80588:	20070bb0 	.word	0x20070bb0
   8058c:	20070bb2 	.word	0x20070bb2
   80590:	0008042d 	.word	0x0008042d

00080594 <ili9341_write_gram>:
\endcode
 *
 * \param color The color pixel to write to the screen
 */
void ili9341_write_gram(ili9341_color_t color)
{
   80594:	b510      	push	{r4, lr}
   80596:	4604      	mov	r4, r0
	/* Only 16-bit color supported */
	Assert(sizeof(color) == 2);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   80598:	202c      	movs	r0, #44	; 0x2c
   8059a:	4b0e      	ldr	r3, [pc, #56]	; (805d4 <ili9341_write_gram+0x40>)
   8059c:	4798      	blx	r3
	ili9341_send_byte(color);
   8059e:	b2e1      	uxtb	r1, r4
   805a0:	4a0d      	ldr	r2, [pc, #52]	; (805d8 <ili9341_write_gram+0x44>)
   805a2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   805a4:	f413 7f00 	tst.w	r3, #512	; 0x200
   805a8:	d0fb      	beq.n	805a2 <ili9341_write_gram+0xe>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805aa:	4b0b      	ldr	r3, [pc, #44]	; (805d8 <ili9341_write_gram+0x44>)
   805ac:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(color >> 8);
   805ae:	0a24      	lsrs	r4, r4, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805b0:	461a      	mov	r2, r3
   805b2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   805b4:	f413 7f00 	tst.w	r3, #512	; 0x200
   805b8:	d0fb      	beq.n	805b2 <ili9341_write_gram+0x1e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805ba:	4b07      	ldr	r3, [pc, #28]	; (805d8 <ili9341_write_gram+0x44>)
   805bc:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   805be:	461a      	mov	r2, r3
   805c0:	6913      	ldr	r3, [r2, #16]
   805c2:	f413 7f00 	tst.w	r3, #512	; 0x200
   805c6:	d0fb      	beq.n	805c0 <ili9341_write_gram+0x2c>
   805c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   805cc:	4b03      	ldr	r3, [pc, #12]	; (805dc <ili9341_write_gram+0x48>)
   805ce:	631a      	str	r2, [r3, #48]	; 0x30
   805d0:	bd10      	pop	{r4, pc}
   805d2:	bf00      	nop
   805d4:	000803f5 	.word	0x000803f5
   805d8:	40008000 	.word	0x40008000
   805dc:	400e1200 	.word	0x400e1200

000805e0 <ili9341_copy_pixels_to_screen>:
 *
 * \param pixels Pointer to the pixel data
 * \param count Number of pixels to copy to the screen
 */
void ili9341_copy_pixels_to_screen(const ili9341_color_t *pixels, uint32_t count)
{
   805e0:	b570      	push	{r4, r5, r6, lr}
   805e2:	4604      	mov	r4, r0
   805e4:	460e      	mov	r6, r1
	const ili9341_color_t *pixel = pixels;

	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   805e6:	202c      	movs	r0, #44	; 0x2c
   805e8:	4b10      	ldr	r3, [pc, #64]	; (8062c <ili9341_copy_pixels_to_screen+0x4c>)
   805ea:	4798      	blx	r3
	pdc_disable_transfer(SPI_DMA, PERIPH_PTCR_TXTEN);
#  elif UC3
	pdca_disable(CONF_ILI9341_PDCA_CHANNEL);
#  endif
#else
	while (count--) {
   805ec:	b1a6      	cbz	r6, 80618 <ili9341_copy_pixels_to_screen+0x38>
   805ee:	1e75      	subs	r5, r6, #1
   805f0:	1ea0      	subs	r0, r4, #2
   805f2:	4b0f      	ldr	r3, [pc, #60]	; (80630 <ili9341_copy_pixels_to_screen+0x50>)
		ili9341_send_byte(*pixel);
   805f4:	7881      	ldrb	r1, [r0, #2]
   805f6:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   805f8:	f412 7f00 	tst.w	r2, #512	; 0x200
   805fc:	d0fb      	beq.n	805f6 <ili9341_copy_pixels_to_screen+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   805fe:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
   80600:	f830 1f02 	ldrh.w	r1, [r0, #2]!
   80604:	0a09      	lsrs	r1, r1, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80606:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80608:	f412 7f00 	tst.w	r2, #512	; 0x200
   8060c:	d0fb      	beq.n	80606 <ili9341_copy_pixels_to_screen+0x26>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8060e:	60d9      	str	r1, [r3, #12]
	while (count--) {
   80610:	3d01      	subs	r5, #1
   80612:	f1b5 3fff 	cmp.w	r5, #4294967295
   80616:	d1ed      	bne.n	805f4 <ili9341_copy_pixels_to_screen+0x14>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80618:	4a05      	ldr	r2, [pc, #20]	; (80630 <ili9341_copy_pixels_to_screen+0x50>)
   8061a:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8061c:	f413 7f00 	tst.w	r3, #512	; 0x200
   80620:	d0fb      	beq.n	8061a <ili9341_copy_pixels_to_screen+0x3a>
   80622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80626:	4b03      	ldr	r3, [pc, #12]	; (80634 <ili9341_copy_pixels_to_screen+0x54>)
   80628:	631a      	str	r2, [r3, #48]	; 0x30
   8062a:	bd70      	pop	{r4, r5, r6, pc}
   8062c:	000803f5 	.word	0x000803f5
   80630:	40008000 	.word	0x40008000
   80634:	400e1200 	.word	0x400e1200

00080638 <ili9341_duplicate_pixel>:
 *
 * \param color The color to write to the display
 * \param count The number of pixels to write with this color
 */
void ili9341_duplicate_pixel(const ili9341_color_t color, uint32_t count)
{
   80638:	b538      	push	{r3, r4, r5, lr}
   8063a:	4604      	mov	r4, r0
   8063c:	460d      	mov	r5, r1
	/* Sanity check to make sure that the pixel count is not zero */
	Assert(count > 0);

	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
   8063e:	202c      	movs	r0, #44	; 0x2c
   80640:	4b0f      	ldr	r3, [pc, #60]	; (80680 <ili9341_duplicate_pixel+0x48>)
   80642:	4798      	blx	r3
	pdc_disable_transfer(SPI_DMA, PERIPH_PTCR_TXTEN);
#  elif UC3
	pdca_disable(CONF_ILI9341_PDCA_CHANNEL);
#  endif
#else
	while (count--) {
   80644:	b18d      	cbz	r5, 8066a <ili9341_duplicate_pixel+0x32>
   80646:	1e69      	subs	r1, r5, #1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80648:	0a25      	lsrs	r5, r4, #8
		ili9341_send_byte(color);
   8064a:	b2e4      	uxtb	r4, r4
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8064c:	4b0d      	ldr	r3, [pc, #52]	; (80684 <ili9341_duplicate_pixel+0x4c>)
   8064e:	691a      	ldr	r2, [r3, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80650:	f412 7f00 	tst.w	r2, #512	; 0x200
   80654:	d0fb      	beq.n	8064e <ili9341_duplicate_pixel+0x16>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80656:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80658:	691a      	ldr	r2, [r3, #16]
   8065a:	f412 7f00 	tst.w	r2, #512	; 0x200
   8065e:	d0fb      	beq.n	80658 <ili9341_duplicate_pixel+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80660:	60dd      	str	r5, [r3, #12]
	while (count--) {
   80662:	3901      	subs	r1, #1
   80664:	f1b1 3fff 	cmp.w	r1, #4294967295
   80668:	d1f1      	bne.n	8064e <ili9341_duplicate_pixel+0x16>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8066a:	4a06      	ldr	r2, [pc, #24]	; (80684 <ili9341_duplicate_pixel+0x4c>)
   8066c:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   8066e:	f413 7f00 	tst.w	r3, #512	; 0x200
   80672:	d0fb      	beq.n	8066c <ili9341_duplicate_pixel+0x34>
   80674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80678:	4b03      	ldr	r3, [pc, #12]	; (80688 <ili9341_duplicate_pixel+0x50>)
   8067a:	631a      	str	r2, [r3, #48]	; 0x30
   8067c:	bd38      	pop	{r3, r4, r5, pc}
   8067e:	bf00      	nop
   80680:	000803f5 	.word	0x000803f5
   80684:	40008000 	.word	0x40008000
   80688:	400e1200 	.word	0x400e1200

0008068c <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
   8068c:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
   8068e:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
   80692:	f000 0301 	and.w	r3, r0, #1
		madctl &= ~(1 << 6);
   80696:	2b00      	cmp	r3, #0
   80698:	bf0c      	ite	eq
   8069a:	2448      	moveq	r4, #72	; 0x48
   8069c:	2408      	movne	r4, #8
	}

	if (flags & ILI9341_FLIP_Y) {
   8069e:	f010 0f02 	tst.w	r0, #2
		madctl |= 1 << 7;
   806a2:	bf18      	it	ne
   806a4:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
   806a8:	f010 0f04 	tst.w	r0, #4
		madctl |= 1 << 5;
   806ac:	bf18      	it	ne
   806ae:	f044 0420 	orrne.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
   806b2:	2036      	movs	r0, #54	; 0x36
   806b4:	4b09      	ldr	r3, [pc, #36]	; (806dc <ili9341_set_orientation+0x50>)
   806b6:	4798      	blx	r3
   806b8:	4a09      	ldr	r2, [pc, #36]	; (806e0 <ili9341_set_orientation+0x54>)
   806ba:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   806bc:	f413 7f00 	tst.w	r3, #512	; 0x200
   806c0:	d0fb      	beq.n	806ba <ili9341_set_orientation+0x2e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   806c2:	4b07      	ldr	r3, [pc, #28]	; (806e0 <ili9341_set_orientation+0x54>)
   806c4:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   806c6:	461a      	mov	r2, r3
   806c8:	6913      	ldr	r3, [r2, #16]
   806ca:	f413 7f00 	tst.w	r3, #512	; 0x200
   806ce:	d0fb      	beq.n	806c8 <ili9341_set_orientation+0x3c>
   806d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   806d4:	4b03      	ldr	r3, [pc, #12]	; (806e4 <ili9341_set_orientation+0x58>)
   806d6:	631a      	str	r2, [r3, #48]	; 0x30
   806d8:	bd10      	pop	{r4, pc}
   806da:	bf00      	nop
   806dc:	000803f5 	.word	0x000803f5
   806e0:	40008000 	.word	0x40008000
   806e4:	400e1200 	.word	0x400e1200

000806e8 <ili9341_init>:
{
   806e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806ec:	b084      	sub	sp, #16
	struct spi_device device = {
   806ee:	2500      	movs	r5, #0
   806f0:	ae04      	add	r6, sp, #16
   806f2:	f846 5d04 	str.w	r5, [r6, #-4]!
	spi_master_init(CONF_ILI9341_SPI);
   806f6:	4ca6      	ldr	r4, [pc, #664]	; (80990 <ili9341_init+0x2a8>)
   806f8:	4620      	mov	r0, r4
   806fa:	4ba6      	ldr	r3, [pc, #664]	; (80994 <ili9341_init+0x2ac>)
   806fc:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags,
   806fe:	9500      	str	r5, [sp, #0]
   80700:	4ba5      	ldr	r3, [pc, #660]	; (80998 <ili9341_init+0x2b0>)
   80702:	462a      	mov	r2, r5
   80704:	4631      	mov	r1, r6
   80706:	4620      	mov	r0, r4
   80708:	4ea4      	ldr	r6, [pc, #656]	; (8099c <ili9341_init+0x2b4>)
   8070a:	47b0      	blx	r6
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8070c:	2301      	movs	r3, #1
   8070e:	6023      	str	r3, [r4, #0]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80710:	60e5      	str	r5, [r4, #12]
   80712:	f504 2459 	add.w	r4, r4, #888832	; 0xd9000
   80716:	f504 7400 	add.w	r4, r4, #512	; 0x200
   8071a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   8071e:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(10);
   80720:	f64e 2060 	movw	r0, #60000	; 0xea60
   80724:	4d9e      	ldr	r5, [pc, #632]	; (809a0 <ili9341_init+0x2b8>)
   80726:	47a8      	blx	r5
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80728:	6366      	str	r6, [r4, #52]	; 0x34
	delay_ms(10);
   8072a:	f64e 2060 	movw	r0, #60000	; 0xea60
   8072e:	47a8      	blx	r5
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80730:	6326      	str	r6, [r4, #48]	; 0x30
	delay_ms(150);
   80732:	f8df 827c 	ldr.w	r8, [pc, #636]	; 809b0 <ili9341_init+0x2c8>
   80736:	4640      	mov	r0, r8
   80738:	47a8      	blx	r5
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
   8073a:	2011      	movs	r0, #17
   8073c:	4e99      	ldr	r6, [pc, #612]	; (809a4 <ili9341_init+0x2bc>)
   8073e:	47b0      	blx	r6
   80740:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
   80744:	6327      	str	r7, [r4, #48]	; 0x30
	delay_ms(150);
   80746:	4640      	mov	r0, r8
   80748:	47a8      	blx	r5
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
   8074a:	2029      	movs	r0, #41	; 0x29
   8074c:	47b0      	blx	r6
   8074e:	6327      	str	r7, [r4, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
   80750:	20cd      	movs	r0, #205	; 0xcd
   80752:	47b0      	blx	r6
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80754:	4a8e      	ldr	r2, [pc, #568]	; (80990 <ili9341_init+0x2a8>)
   80756:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80758:	f413 7f00 	tst.w	r3, #512	; 0x200
   8075c:	d0fb      	beq.n	80756 <ili9341_init+0x6e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8075e:	2239      	movs	r2, #57	; 0x39
   80760:	4b8b      	ldr	r3, [pc, #556]	; (80990 <ili9341_init+0x2a8>)
   80762:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80764:	461a      	mov	r2, r3
   80766:	6913      	ldr	r3, [r2, #16]
   80768:	f413 7f00 	tst.w	r3, #512	; 0x200
   8076c:	d0fb      	beq.n	80766 <ili9341_init+0x7e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8076e:	222c      	movs	r2, #44	; 0x2c
   80770:	4b87      	ldr	r3, [pc, #540]	; (80990 <ili9341_init+0x2a8>)
   80772:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80774:	461a      	mov	r2, r3
   80776:	6913      	ldr	r3, [r2, #16]
   80778:	f413 7f00 	tst.w	r3, #512	; 0x200
   8077c:	d0fb      	beq.n	80776 <ili9341_init+0x8e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8077e:	2200      	movs	r2, #0
   80780:	4b83      	ldr	r3, [pc, #524]	; (80990 <ili9341_init+0x2a8>)
   80782:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80784:	461a      	mov	r2, r3
   80786:	6913      	ldr	r3, [r2, #16]
   80788:	f413 7f00 	tst.w	r3, #512	; 0x200
   8078c:	d0fb      	beq.n	80786 <ili9341_init+0x9e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8078e:	2234      	movs	r2, #52	; 0x34
   80790:	4b7f      	ldr	r3, [pc, #508]	; (80990 <ili9341_init+0x2a8>)
   80792:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80794:	461a      	mov	r2, r3
   80796:	6913      	ldr	r3, [r2, #16]
   80798:	f413 7f00 	tst.w	r3, #512	; 0x200
   8079c:	d0fb      	beq.n	80796 <ili9341_init+0xae>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8079e:	2202      	movs	r2, #2
   807a0:	4b7b      	ldr	r3, [pc, #492]	; (80990 <ili9341_init+0x2a8>)
   807a2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807a4:	461a      	mov	r2, r3
   807a6:	6913      	ldr	r3, [r2, #16]
   807a8:	f413 7f00 	tst.w	r3, #512	; 0x200
   807ac:	d0fb      	beq.n	807a6 <ili9341_init+0xbe>
   807ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   807b2:	4b7d      	ldr	r3, [pc, #500]	; (809a8 <ili9341_init+0x2c0>)
   807b4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
   807b6:	20cf      	movs	r0, #207	; 0xcf
   807b8:	4b7a      	ldr	r3, [pc, #488]	; (809a4 <ili9341_init+0x2bc>)
   807ba:	4798      	blx	r3
   807bc:	4a74      	ldr	r2, [pc, #464]	; (80990 <ili9341_init+0x2a8>)
   807be:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   807c0:	f413 7f00 	tst.w	r3, #512	; 0x200
   807c4:	d0fb      	beq.n	807be <ili9341_init+0xd6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   807c6:	2200      	movs	r2, #0
   807c8:	4b71      	ldr	r3, [pc, #452]	; (80990 <ili9341_init+0x2a8>)
   807ca:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807cc:	461a      	mov	r2, r3
   807ce:	6913      	ldr	r3, [r2, #16]
   807d0:	f413 7f00 	tst.w	r3, #512	; 0x200
   807d4:	d0fb      	beq.n	807ce <ili9341_init+0xe6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   807d6:	22aa      	movs	r2, #170	; 0xaa
   807d8:	4b6d      	ldr	r3, [pc, #436]	; (80990 <ili9341_init+0x2a8>)
   807da:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807dc:	461a      	mov	r2, r3
   807de:	6913      	ldr	r3, [r2, #16]
   807e0:	f413 7f00 	tst.w	r3, #512	; 0x200
   807e4:	d0fb      	beq.n	807de <ili9341_init+0xf6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   807e6:	22b0      	movs	r2, #176	; 0xb0
   807e8:	4b69      	ldr	r3, [pc, #420]	; (80990 <ili9341_init+0x2a8>)
   807ea:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   807ec:	461a      	mov	r2, r3
   807ee:	6913      	ldr	r3, [r2, #16]
   807f0:	f413 7f00 	tst.w	r3, #512	; 0x200
   807f4:	d0fb      	beq.n	807ee <ili9341_init+0x106>
   807f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   807fa:	4b6b      	ldr	r3, [pc, #428]	; (809a8 <ili9341_init+0x2c0>)
   807fc:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
   807fe:	20f7      	movs	r0, #247	; 0xf7
   80800:	4b68      	ldr	r3, [pc, #416]	; (809a4 <ili9341_init+0x2bc>)
   80802:	4798      	blx	r3
   80804:	4a62      	ldr	r2, [pc, #392]	; (80990 <ili9341_init+0x2a8>)
   80806:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80808:	f413 7f00 	tst.w	r3, #512	; 0x200
   8080c:	d0fb      	beq.n	80806 <ili9341_init+0x11e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8080e:	2230      	movs	r2, #48	; 0x30
   80810:	4b5f      	ldr	r3, [pc, #380]	; (80990 <ili9341_init+0x2a8>)
   80812:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80814:	461a      	mov	r2, r3
   80816:	6913      	ldr	r3, [r2, #16]
   80818:	f413 7f00 	tst.w	r3, #512	; 0x200
   8081c:	d0fb      	beq.n	80816 <ili9341_init+0x12e>
   8081e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80822:	4b61      	ldr	r3, [pc, #388]	; (809a8 <ili9341_init+0x2c0>)
   80824:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
   80826:	20c0      	movs	r0, #192	; 0xc0
   80828:	4b5e      	ldr	r3, [pc, #376]	; (809a4 <ili9341_init+0x2bc>)
   8082a:	4798      	blx	r3
   8082c:	4a58      	ldr	r2, [pc, #352]	; (80990 <ili9341_init+0x2a8>)
   8082e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80830:	f413 7f00 	tst.w	r3, #512	; 0x200
   80834:	d0fb      	beq.n	8082e <ili9341_init+0x146>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80836:	2225      	movs	r2, #37	; 0x25
   80838:	4b55      	ldr	r3, [pc, #340]	; (80990 <ili9341_init+0x2a8>)
   8083a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8083c:	461a      	mov	r2, r3
   8083e:	6913      	ldr	r3, [r2, #16]
   80840:	f413 7f00 	tst.w	r3, #512	; 0x200
   80844:	d0fb      	beq.n	8083e <ili9341_init+0x156>
   80846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8084a:	4b57      	ldr	r3, [pc, #348]	; (809a8 <ili9341_init+0x2c0>)
   8084c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
   8084e:	20c1      	movs	r0, #193	; 0xc1
   80850:	4b54      	ldr	r3, [pc, #336]	; (809a4 <ili9341_init+0x2bc>)
   80852:	4798      	blx	r3
   80854:	4a4e      	ldr	r2, [pc, #312]	; (80990 <ili9341_init+0x2a8>)
   80856:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80858:	f413 7f00 	tst.w	r3, #512	; 0x200
   8085c:	d0fb      	beq.n	80856 <ili9341_init+0x16e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8085e:	2211      	movs	r2, #17
   80860:	4b4b      	ldr	r3, [pc, #300]	; (80990 <ili9341_init+0x2a8>)
   80862:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80864:	461a      	mov	r2, r3
   80866:	6913      	ldr	r3, [r2, #16]
   80868:	f413 7f00 	tst.w	r3, #512	; 0x200
   8086c:	d0fb      	beq.n	80866 <ili9341_init+0x17e>
   8086e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80872:	4b4d      	ldr	r3, [pc, #308]	; (809a8 <ili9341_init+0x2c0>)
   80874:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
   80876:	20c5      	movs	r0, #197	; 0xc5
   80878:	4b4a      	ldr	r3, [pc, #296]	; (809a4 <ili9341_init+0x2bc>)
   8087a:	4798      	blx	r3
   8087c:	4a44      	ldr	r2, [pc, #272]	; (80990 <ili9341_init+0x2a8>)
   8087e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80880:	f413 7f00 	tst.w	r3, #512	; 0x200
   80884:	d0fb      	beq.n	8087e <ili9341_init+0x196>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80886:	225c      	movs	r2, #92	; 0x5c
   80888:	4b41      	ldr	r3, [pc, #260]	; (80990 <ili9341_init+0x2a8>)
   8088a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8088c:	461a      	mov	r2, r3
   8088e:	6913      	ldr	r3, [r2, #16]
   80890:	f413 7f00 	tst.w	r3, #512	; 0x200
   80894:	d0fb      	beq.n	8088e <ili9341_init+0x1a6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80896:	224c      	movs	r2, #76	; 0x4c
   80898:	4b3d      	ldr	r3, [pc, #244]	; (80990 <ili9341_init+0x2a8>)
   8089a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8089c:	461a      	mov	r2, r3
   8089e:	6913      	ldr	r3, [r2, #16]
   808a0:	f413 7f00 	tst.w	r3, #512	; 0x200
   808a4:	d0fb      	beq.n	8089e <ili9341_init+0x1b6>
   808a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   808aa:	4b3f      	ldr	r3, [pc, #252]	; (809a8 <ili9341_init+0x2c0>)
   808ac:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
   808ae:	20c7      	movs	r0, #199	; 0xc7
   808b0:	4b3c      	ldr	r3, [pc, #240]	; (809a4 <ili9341_init+0x2bc>)
   808b2:	4798      	blx	r3
   808b4:	4a36      	ldr	r2, [pc, #216]	; (80990 <ili9341_init+0x2a8>)
   808b6:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   808b8:	f413 7f00 	tst.w	r3, #512	; 0x200
   808bc:	d0fb      	beq.n	808b6 <ili9341_init+0x1ce>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   808be:	2294      	movs	r2, #148	; 0x94
   808c0:	4b33      	ldr	r3, [pc, #204]	; (80990 <ili9341_init+0x2a8>)
   808c2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   808c4:	461a      	mov	r2, r3
   808c6:	6913      	ldr	r3, [r2, #16]
   808c8:	f413 7f00 	tst.w	r3, #512	; 0x200
   808cc:	d0fb      	beq.n	808c6 <ili9341_init+0x1de>
   808ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   808d2:	4b35      	ldr	r3, [pc, #212]	; (809a8 <ili9341_init+0x2c0>)
   808d4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
   808d6:	20e8      	movs	r0, #232	; 0xe8
   808d8:	4b32      	ldr	r3, [pc, #200]	; (809a4 <ili9341_init+0x2bc>)
   808da:	4798      	blx	r3
   808dc:	4a2c      	ldr	r2, [pc, #176]	; (80990 <ili9341_init+0x2a8>)
   808de:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   808e0:	f413 7f00 	tst.w	r3, #512	; 0x200
   808e4:	d0fb      	beq.n	808de <ili9341_init+0x1f6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   808e6:	2285      	movs	r2, #133	; 0x85
   808e8:	4b29      	ldr	r3, [pc, #164]	; (80990 <ili9341_init+0x2a8>)
   808ea:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   808ec:	461a      	mov	r2, r3
   808ee:	6913      	ldr	r3, [r2, #16]
   808f0:	f413 7f00 	tst.w	r3, #512	; 0x200
   808f4:	d0fb      	beq.n	808ee <ili9341_init+0x206>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   808f6:	2201      	movs	r2, #1
   808f8:	4b25      	ldr	r3, [pc, #148]	; (80990 <ili9341_init+0x2a8>)
   808fa:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   808fc:	461a      	mov	r2, r3
   808fe:	6913      	ldr	r3, [r2, #16]
   80900:	f413 7f00 	tst.w	r3, #512	; 0x200
   80904:	d0fb      	beq.n	808fe <ili9341_init+0x216>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80906:	2278      	movs	r2, #120	; 0x78
   80908:	4b21      	ldr	r3, [pc, #132]	; (80990 <ili9341_init+0x2a8>)
   8090a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8090c:	461a      	mov	r2, r3
   8090e:	6913      	ldr	r3, [r2, #16]
   80910:	f413 7f00 	tst.w	r3, #512	; 0x200
   80914:	d0fb      	beq.n	8090e <ili9341_init+0x226>
   80916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8091a:	4b23      	ldr	r3, [pc, #140]	; (809a8 <ili9341_init+0x2c0>)
   8091c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
   8091e:	20ea      	movs	r0, #234	; 0xea
   80920:	4b20      	ldr	r3, [pc, #128]	; (809a4 <ili9341_init+0x2bc>)
   80922:	4798      	blx	r3
   80924:	4a1a      	ldr	r2, [pc, #104]	; (80990 <ili9341_init+0x2a8>)
   80926:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80928:	f413 7f00 	tst.w	r3, #512	; 0x200
   8092c:	d0fb      	beq.n	80926 <ili9341_init+0x23e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8092e:	2200      	movs	r2, #0
   80930:	4b17      	ldr	r3, [pc, #92]	; (80990 <ili9341_init+0x2a8>)
   80932:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80934:	461a      	mov	r2, r3
   80936:	6913      	ldr	r3, [r2, #16]
   80938:	f413 7f00 	tst.w	r3, #512	; 0x200
   8093c:	d0fb      	beq.n	80936 <ili9341_init+0x24e>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   8093e:	2200      	movs	r2, #0
   80940:	4b13      	ldr	r3, [pc, #76]	; (80990 <ili9341_init+0x2a8>)
   80942:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   80944:	461a      	mov	r2, r3
   80946:	6913      	ldr	r3, [r2, #16]
   80948:	f413 7f00 	tst.w	r3, #512	; 0x200
   8094c:	d0fb      	beq.n	80946 <ili9341_init+0x25e>
   8094e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80952:	4b15      	ldr	r3, [pc, #84]	; (809a8 <ili9341_init+0x2c0>)
   80954:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
   80956:	203a      	movs	r0, #58	; 0x3a
   80958:	4b12      	ldr	r3, [pc, #72]	; (809a4 <ili9341_init+0x2bc>)
   8095a:	4798      	blx	r3
   8095c:	4a0c      	ldr	r2, [pc, #48]	; (80990 <ili9341_init+0x2a8>)
   8095e:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
   80960:	f413 7f00 	tst.w	r3, #512	; 0x200
   80964:	d0fb      	beq.n	8095e <ili9341_init+0x276>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   80966:	2205      	movs	r2, #5
   80968:	4b09      	ldr	r3, [pc, #36]	; (80990 <ili9341_init+0x2a8>)
   8096a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   8096c:	461a      	mov	r2, r3
   8096e:	6913      	ldr	r3, [r2, #16]
   80970:	f413 7f00 	tst.w	r3, #512	; 0x200
   80974:	d0fb      	beq.n	8096e <ili9341_init+0x286>
   80976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8097a:	4b0b      	ldr	r3, [pc, #44]	; (809a8 <ili9341_init+0x2c0>)
   8097c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
   8097e:	2000      	movs	r0, #0
   80980:	4b0a      	ldr	r3, [pc, #40]	; (809ac <ili9341_init+0x2c4>)
   80982:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
   80984:	23f0      	movs	r3, #240	; 0xf0
   80986:	f44f 72a0 	mov.w	r2, #320	; 0x140
   8098a:	2100      	movs	r1, #0
   8098c:	4608      	mov	r0, r1
   8098e:	e011      	b.n	809b4 <ili9341_init+0x2cc>
   80990:	40008000 	.word	0x40008000
   80994:	00081079 	.word	0x00081079
   80998:	007a1200 	.word	0x007a1200
   8099c:	000810cd 	.word	0x000810cd
   809a0:	20070001 	.word	0x20070001
   809a4:	000803f5 	.word	0x000803f5
   809a8:	400e1200 	.word	0x400e1200
   809ac:	0008068d 	.word	0x0008068d
   809b0:	000dbba0 	.word	0x000dbba0
   809b4:	4c02      	ldr	r4, [pc, #8]	; (809c0 <ili9341_init+0x2d8>)
   809b6:	47a0      	blx	r4
}
   809b8:	b004      	add	sp, #16
   809ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809be:	bf00      	nop
   809c0:	00080565 	.word	0x00080565

000809c4 <gfx_set_clipping>:
static gfx_ext_draw_handler_t gfx_ext_draw_func;

/* This function is documented in gfx.h */
void gfx_set_clipping(gfx_coord_t min_x, gfx_coord_t min_y,
		gfx_coord_t max_x, gfx_coord_t max_y)
{
   809c4:	b410      	push	{r4}
   809c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   809ca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

	if (min_y < 0) {
		min_y = 0;
	}

	if (max_x >= gfx_width) {
   809ce:	4c0d      	ldr	r4, [pc, #52]	; (80a04 <gfx_set_clipping+0x40>)
   809d0:	f9b4 4000 	ldrsh.w	r4, [r4]
   809d4:	4294      	cmp	r4, r2
		max_x = gfx_width - 1;
   809d6:	bfdc      	itt	le
   809d8:	f104 32ff 	addle.w	r2, r4, #4294967295
   809dc:	b212      	sxthle	r2, r2
	}

	if (max_y >= gfx_height) {
   809de:	4c0a      	ldr	r4, [pc, #40]	; (80a08 <gfx_set_clipping+0x44>)
   809e0:	f9b4 4000 	ldrsh.w	r4, [r4]
   809e4:	429c      	cmp	r4, r3
		max_y = gfx_height - 1;
   809e6:	bfdc      	itt	le
   809e8:	f104 34ff 	addle.w	r4, r4, #4294967295
   809ec:	b223      	sxthle	r3, r4
	}

	gfx_min_x = min_x;
   809ee:	4c07      	ldr	r4, [pc, #28]	; (80a0c <gfx_set_clipping+0x48>)
   809f0:	8020      	strh	r0, [r4, #0]
	gfx_min_y = min_y;
   809f2:	4807      	ldr	r0, [pc, #28]	; (80a10 <gfx_set_clipping+0x4c>)
   809f4:	8001      	strh	r1, [r0, #0]
	gfx_max_x = max_x;
   809f6:	4907      	ldr	r1, [pc, #28]	; (80a14 <gfx_set_clipping+0x50>)
   809f8:	800a      	strh	r2, [r1, #0]
	gfx_max_y = max_y;
   809fa:	4a07      	ldr	r2, [pc, #28]	; (80a18 <gfx_set_clipping+0x54>)
   809fc:	8013      	strh	r3, [r2, #0]
#endif
}
   809fe:	bc10      	pop	{r4}
   80a00:	4770      	bx	lr
   80a02:	bf00      	nop
   80a04:	20071458 	.word	0x20071458
   80a08:	20071462 	.word	0x20071462
   80a0c:	2007145c 	.word	0x2007145c
   80a10:	20071460 	.word	0x20071460
   80a14:	2007145a 	.word	0x2007145a
   80a18:	2007145e 	.word	0x2007145e

00080a1c <gfx_get_width>:

gfx_coord_t gfx_get_width(void)
{
	return gfx_width;
}
   80a1c:	4b01      	ldr	r3, [pc, #4]	; (80a24 <gfx_get_width+0x8>)
   80a1e:	f9b3 0000 	ldrsh.w	r0, [r3]
   80a22:	4770      	bx	lr
   80a24:	20071458 	.word	0x20071458

00080a28 <gfx_get_height>:

gfx_coord_t gfx_get_height(void)
{
	return gfx_height;
}
   80a28:	4b01      	ldr	r3, [pc, #4]	; (80a30 <gfx_get_height+0x8>)
   80a2a:	f9b3 0000 	ldrsh.w	r0, [r3]
   80a2e:	4770      	bx	lr
   80a30:	20071462 	.word	0x20071462

00080a34 <gfx_generic_draw_filled_rect>:
		gfx_color_t color)
{
	gfx_coord_t x2;
	gfx_coord_t y2;

	if ((width == 0) || (height == 0)) {
   80a34:	2a00      	cmp	r2, #0
   80a36:	d05c      	beq.n	80af2 <gfx_generic_draw_filled_rect+0xbe>
{
   80a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80a3a:	461c      	mov	r4, r3
   80a3c:	4615      	mov	r5, r2
	if ((width == 0) || (height == 0)) {
   80a3e:	2b00      	cmp	r3, #0
   80a40:	d048      	beq.n	80ad4 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Invert if width or height is negative. */
	if (width < 0) {
   80a42:	2a00      	cmp	r2, #0
   80a44:	db47      	blt.n	80ad6 <gfx_generic_draw_filled_rect+0xa2>
		width = -width;
		x -= width - 1;
	}

	if (height < 0) {
   80a46:	2c00      	cmp	r4, #0
   80a48:	db4c      	blt.n	80ae4 <gfx_generic_draw_filled_rect+0xb0>
		y -= height - 1;
	}

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   80a4a:	4b2a      	ldr	r3, [pc, #168]	; (80af4 <gfx_generic_draw_filled_rect+0xc0>)
   80a4c:	f9b3 6000 	ldrsh.w	r6, [r3]
   80a50:	42b0      	cmp	r0, r6
   80a52:	dc3f      	bgt.n	80ad4 <gfx_generic_draw_filled_rect+0xa0>
   80a54:	4b28      	ldr	r3, [pc, #160]	; (80af8 <gfx_generic_draw_filled_rect+0xc4>)
   80a56:	f9b3 7000 	ldrsh.w	r7, [r3]
   80a5a:	42b9      	cmp	r1, r7
   80a5c:	dc3a      	bgt.n	80ad4 <gfx_generic_draw_filled_rect+0xa0>
			((x + width) <= gfx_min_x) ||
   80a5e:	4b27      	ldr	r3, [pc, #156]	; (80afc <gfx_generic_draw_filled_rect+0xc8>)
   80a60:	f9b3 3000 	ldrsh.w	r3, [r3]
   80a64:	1942      	adds	r2, r0, r5
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   80a66:	429a      	cmp	r2, r3
   80a68:	dd34      	ble.n	80ad4 <gfx_generic_draw_filled_rect+0xa0>
			((y + height) <= gfx_min_y)) {
   80a6a:	4a25      	ldr	r2, [pc, #148]	; (80b00 <gfx_generic_draw_filled_rect+0xcc>)
   80a6c:	f9b2 2000 	ldrsh.w	r2, [r2]
   80a70:	eb01 0e04 	add.w	lr, r1, r4
			((x + width) <= gfx_min_x) ||
   80a74:	4596      	cmp	lr, r2
   80a76:	dd2d      	ble.n	80ad4 <gfx_generic_draw_filled_rect+0xa0>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
   80a78:	4298      	cmp	r0, r3
   80a7a:	da03      	bge.n	80a84 <gfx_generic_draw_filled_rect+0x50>
		width -= gfx_min_x - x;
   80a7c:	4405      	add	r5, r0
   80a7e:	1aed      	subs	r5, r5, r3
   80a80:	b22d      	sxth	r5, r5
		x = gfx_min_x;
   80a82:	4618      	mov	r0, r3
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
   80a84:	4291      	cmp	r1, r2
   80a86:	da03      	bge.n	80a90 <gfx_generic_draw_filled_rect+0x5c>
		height -= gfx_min_y - y;
   80a88:	440c      	add	r4, r1
   80a8a:	1aa4      	subs	r4, r4, r2
   80a8c:	b224      	sxth	r4, r4
		y = gfx_min_y;
   80a8e:	4611      	mov	r1, r2
	}
#endif

	/*  Compute bottom right point. */
	x2 = x + width - 1;
   80a90:	fa1f fc80 	uxth.w	ip, r0
   80a94:	eb0c 0205 	add.w	r2, ip, r5
   80a98:	3a01      	subs	r2, #1
   80a9a:	b212      	sxth	r2, r2
	y2 = y + height - 1;
   80a9c:	fa1f fe81 	uxth.w	lr, r1
   80aa0:	eb0e 0304 	add.w	r3, lr, r4
   80aa4:	3b01      	subs	r3, #1
   80aa6:	b21b      	sxth	r3, r3

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
   80aa8:	4296      	cmp	r6, r2
   80aaa:	da04      	bge.n	80ab6 <gfx_generic_draw_filled_rect+0x82>
		x2 = gfx_max_x;
		width = x2 - x + 1;
   80aac:	1c75      	adds	r5, r6, #1
   80aae:	eba5 050c 	sub.w	r5, r5, ip
   80ab2:	b22d      	sxth	r5, r5
		x2 = gfx_max_x;
   80ab4:	4632      	mov	r2, r6
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
   80ab6:	429f      	cmp	r7, r3
   80ab8:	da04      	bge.n	80ac4 <gfx_generic_draw_filled_rect+0x90>
		y2 = gfx_max_y;
		height = y2 - y + 1;
   80aba:	1c7c      	adds	r4, r7, #1
   80abc:	eba4 040e 	sub.w	r4, r4, lr
   80ac0:	b224      	sxth	r4, r4
		y2 = gfx_max_y;
   80ac2:	463b      	mov	r3, r7
	}
#endif

	/* Set up draw area and duplicate pixel color until area is full. */
	gfx_set_limits(x, y, x2, y2);
   80ac4:	4e0f      	ldr	r6, [pc, #60]	; (80b04 <gfx_generic_draw_filled_rect+0xd0>)
   80ac6:	47b0      	blx	r6
	gfx_duplicate_pixel(color, (uint32_t)width * height);
   80ac8:	fb04 f105 	mul.w	r1, r4, r5
   80acc:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   80ad0:	4b0d      	ldr	r3, [pc, #52]	; (80b08 <gfx_generic_draw_filled_rect+0xd4>)
   80ad2:	4798      	blx	r3
   80ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		width = -width;
   80ad6:	b293      	uxth	r3, r2
   80ad8:	425d      	negs	r5, r3
   80ada:	b22d      	sxth	r5, r5
		x -= width - 1;
   80adc:	3001      	adds	r0, #1
   80ade:	4418      	add	r0, r3
   80ae0:	b200      	sxth	r0, r0
   80ae2:	e7b0      	b.n	80a46 <gfx_generic_draw_filled_rect+0x12>
		height = -height;
   80ae4:	b2a3      	uxth	r3, r4
   80ae6:	425c      	negs	r4, r3
   80ae8:	b224      	sxth	r4, r4
		y -= height - 1;
   80aea:	3101      	adds	r1, #1
   80aec:	4419      	add	r1, r3
   80aee:	b209      	sxth	r1, r1
   80af0:	e7ab      	b.n	80a4a <gfx_generic_draw_filled_rect+0x16>
   80af2:	4770      	bx	lr
   80af4:	2007145a 	.word	0x2007145a
   80af8:	2007145e 	.word	0x2007145e
   80afc:	2007145c 	.word	0x2007145c
   80b00:	20071460 	.word	0x20071460
   80b04:	00080565 	.word	0x00080565
   80b08:	00080639 	.word	0x00080639

00080b0c <gfx_generic_put_bitmap>:

void gfx_generic_put_bitmap(const struct gfx_bitmap *bmp,
		gfx_coord_t map_x, gfx_coord_t map_y,
		gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height)
{
   80b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b10:	b083      	sub	sp, #12
   80b12:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
   80b16:	f9bd 4034 	ldrsh.w	r4, [sp, #52]	; 0x34
   80b1a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
#if XMEGA
	gfx_color_t PROGMEM_PTR_T progmem_pixmap;
#endif

	/* Nothing to do if width or height is zero. */
	if ((width == 0) || (height == 0)) {
   80b1e:	2c00      	cmp	r4, #0
   80b20:	d068      	beq.n	80bf4 <gfx_generic_put_bitmap+0xe8>
   80b22:	4688      	mov	r8, r1
   80b24:	461f      	mov	r7, r3
   80b26:	2e00      	cmp	r6, #0
   80b28:	d064      	beq.n	80bf4 <gfx_generic_put_bitmap+0xe8>
	Assert(width > 0);
	Assert(height > 0);

#ifdef CONF_GFX_USE_CLIPPING
	/* Nothing to do if entire rectangle is outside clipping region. */
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   80b2a:	4b55      	ldr	r3, [pc, #340]	; (80c80 <gfx_generic_put_bitmap+0x174>)
   80b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
   80b30:	42bb      	cmp	r3, r7
   80b32:	db5f      	blt.n	80bf4 <gfx_generic_put_bitmap+0xe8>
   80b34:	4953      	ldr	r1, [pc, #332]	; (80c84 <gfx_generic_put_bitmap+0x178>)
   80b36:	f9b1 e000 	ldrsh.w	lr, [r1]
   80b3a:	45ae      	cmp	lr, r5
   80b3c:	db5a      	blt.n	80bf4 <gfx_generic_put_bitmap+0xe8>
			((x + width) <= gfx_min_x) ||
   80b3e:	4952      	ldr	r1, [pc, #328]	; (80c88 <gfx_generic_put_bitmap+0x17c>)
   80b40:	f9b1 1000 	ldrsh.w	r1, [r1]
   80b44:	eb07 0c04 	add.w	ip, r7, r4
	if ((x > gfx_max_x) || (y > gfx_max_y) ||
   80b48:	458c      	cmp	ip, r1
   80b4a:	dd53      	ble.n	80bf4 <gfx_generic_put_bitmap+0xe8>
			((y + height) <= gfx_min_y)) {
   80b4c:	f8df c150 	ldr.w	ip, [pc, #336]	; 80ca0 <gfx_generic_put_bitmap+0x194>
   80b50:	f9bc c000 	ldrsh.w	ip, [ip]
   80b54:	eb05 0906 	add.w	r9, r5, r6
			((x + width) <= gfx_min_x) ||
   80b58:	45e1      	cmp	r9, ip
   80b5a:	dd4b      	ble.n	80bf4 <gfx_generic_put_bitmap+0xe8>
		return;
	}

	/* Clip if outside left X limit. */
	if (x < gfx_min_x) {
   80b5c:	428f      	cmp	r7, r1
   80b5e:	da0c      	bge.n	80b7a <gfx_generic_put_bitmap+0x6e>
		width -= gfx_min_x - x;
   80b60:	b2bf      	uxth	r7, r7
   80b62:	fa1f f981 	uxth.w	r9, r1
   80b66:	eba7 0a09 	sub.w	sl, r7, r9
   80b6a:	4454      	add	r4, sl
   80b6c:	b224      	sxth	r4, r4
		map_x += gfx_min_x - x;
   80b6e:	44c8      	add	r8, r9
   80b70:	eba8 0807 	sub.w	r8, r8, r7
   80b74:	fa0f f888 	sxth.w	r8, r8
		x = gfx_min_x;
   80b78:	460f      	mov	r7, r1
	}

	/* Clip if outside top Y limit. */
	if (y < gfx_min_y) {
   80b7a:	4565      	cmp	r5, ip
   80b7c:	da0a      	bge.n	80b94 <gfx_generic_put_bitmap+0x88>
		height -= gfx_min_y - y;
   80b7e:	b2ad      	uxth	r5, r5
   80b80:	fa1f f18c 	uxth.w	r1, ip
   80b84:	eba5 0901 	sub.w	r9, r5, r1
   80b88:	444e      	add	r6, r9
   80b8a:	b236      	sxth	r6, r6
		map_y += gfx_min_y - y;
   80b8c:	440a      	add	r2, r1
   80b8e:	1b52      	subs	r2, r2, r5
   80b90:	b212      	sxth	r2, r2
		y = gfx_min_y;
   80b92:	4665      	mov	r5, ip
	}

#endif

	/* Compute bottom right point. */
	x2 = x + width - 1;
   80b94:	fa1f fa87 	uxth.w	sl, r7
   80b98:	eb0a 0c04 	add.w	ip, sl, r4
   80b9c:	f10c 3cff 	add.w	ip, ip, #4294967295
   80ba0:	fa0f fc8c 	sxth.w	ip, ip
	y2 = y + height - 1;
   80ba4:	fa1f f985 	uxth.w	r9, r5
   80ba8:	eb09 0106 	add.w	r1, r9, r6
   80bac:	3901      	subs	r1, #1
   80bae:	b209      	sxth	r1, r1

#ifdef CONF_GFX_USE_CLIPPING
	/* Clip if outside right X limit. */
	if (x2 > gfx_max_x) {
   80bb0:	4563      	cmp	r3, ip
   80bb2:	da04      	bge.n	80bbe <gfx_generic_put_bitmap+0xb2>
		x2 = gfx_max_x;
		width = x2 - x + 1;
   80bb4:	1c5c      	adds	r4, r3, #1
   80bb6:	eba4 040a 	sub.w	r4, r4, sl
   80bba:	b224      	sxth	r4, r4
		x2 = gfx_max_x;
   80bbc:	469c      	mov	ip, r3
	}

	/* Clip if outside bottom Y limit. */
	if (y2 > gfx_max_y) {
   80bbe:	458e      	cmp	lr, r1
   80bc0:	da05      	bge.n	80bce <gfx_generic_put_bitmap+0xc2>
		y2 = gfx_max_y;
		height = y2 - y + 1;
   80bc2:	f10e 0601 	add.w	r6, lr, #1
   80bc6:	eba6 0609 	sub.w	r6, r6, r9
   80bca:	b236      	sxth	r6, r6
		y2 = gfx_max_y;
   80bcc:	4671      	mov	r1, lr
	}
#endif

	switch (bmp->type) {
   80bce:	7903      	ldrb	r3, [r0, #4]
   80bd0:	2b03      	cmp	r3, #3
   80bd2:	d80f      	bhi.n	80bf4 <gfx_generic_put_bitmap+0xe8>
   80bd4:	e8df f003 	tbb	[pc, r3]
   80bd8:	11202002 	.word	0x11202002
	case GFX_BITMAP_SOLID:
		gfx_draw_filled_rect(x, y, x2 - x, y2 - y, bmp->data.color);
   80bdc:	eba1 0309 	sub.w	r3, r1, r9
   80be0:	ebac 020a 	sub.w	r2, ip, sl
   80be4:	8901      	ldrh	r1, [r0, #8]
   80be6:	9100      	str	r1, [sp, #0]
   80be8:	b21b      	sxth	r3, r3
   80bea:	b212      	sxth	r2, r2
   80bec:	4629      	mov	r1, r5
   80bee:	4638      	mov	r0, r7
   80bf0:	4c26      	ldr	r4, [pc, #152]	; (80c8c <gfx_generic_put_bitmap+0x180>)
   80bf2:	47a0      	blx	r4
		}

		break;
#endif
	}
}
   80bf4:	b003      	add	sp, #12
   80bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (gfx_ext_draw_func != NULL) {
   80bfa:	4b25      	ldr	r3, [pc, #148]	; (80c90 <gfx_generic_put_bitmap+0x184>)
   80bfc:	681c      	ldr	r4, [r3, #0]
   80bfe:	2c00      	cmp	r4, #0
   80c00:	d0f8      	beq.n	80bf4 <gfx_generic_put_bitmap+0xe8>
			gfx_ext_draw_func(bmp, x, y, x2 - x, y2 - y);
   80c02:	ebac 030a 	sub.w	r3, ip, sl
   80c06:	eba1 0209 	sub.w	r2, r1, r9
   80c0a:	b212      	sxth	r2, r2
   80c0c:	9200      	str	r2, [sp, #0]
   80c0e:	b21b      	sxth	r3, r3
   80c10:	462a      	mov	r2, r5
   80c12:	4639      	mov	r1, r7
   80c14:	47a0      	blx	r4
   80c16:	e7ed      	b.n	80bf4 <gfx_generic_put_bitmap+0xe8>
	gfx_coord_t map_width = bmp->width;
   80c18:	f9b0 a000 	ldrsh.w	sl, [r0]
		pixmap = bmp->data.pixmap;
   80c1c:	6883      	ldr	r3, [r0, #8]
		pixmap += map_x;
   80c1e:	eb03 0b48 	add.w	fp, r3, r8, lsl #1
		if (map_y > 0) {
   80c22:	2a00      	cmp	r2, #0
			pixmap += (uint32_t)map_y * map_width;
   80c24:	bfc4      	itt	gt
   80c26:	ea4f 034a 	movgt.w	r3, sl, lsl #1
   80c2a:	fb02 bb03 	mlagt	fp, r2, r3, fp
		gfx_set_bottom_right_limit(x2, y2);
   80c2e:	4660      	mov	r0, ip
   80c30:	4b18      	ldr	r3, [pc, #96]	; (80c94 <gfx_generic_put_bitmap+0x188>)
   80c32:	4798      	blx	r3
		if ((map_width == width) && (map_x == 0)) {
   80c34:	4554      	cmp	r4, sl
   80c36:	d015      	beq.n	80c64 <gfx_generic_put_bitmap+0x158>
			while (lines_left > 0) {
   80c38:	2e00      	cmp	r6, #0
   80c3a:	dddb      	ble.n	80bf4 <gfx_generic_put_bitmap+0xe8>
				pixmap += map_width;
   80c3c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   80c40:	444e      	add	r6, r9
   80c42:	b236      	sxth	r6, r6
				gfx_set_top_left_limit(x, y);
   80c44:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80c98 <gfx_generic_put_bitmap+0x18c>
				gfx_copy_pixels_to_screen(pixmap, width);
   80c48:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80c9c <gfx_generic_put_bitmap+0x190>
				gfx_set_top_left_limit(x, y);
   80c4c:	4629      	mov	r1, r5
   80c4e:	4638      	mov	r0, r7
   80c50:	47c8      	blx	r9
   80c52:	3501      	adds	r5, #1
   80c54:	b22d      	sxth	r5, r5
				gfx_copy_pixels_to_screen(pixmap, width);
   80c56:	4621      	mov	r1, r4
   80c58:	4658      	mov	r0, fp
   80c5a:	47c0      	blx	r8
				pixmap += map_width;
   80c5c:	44d3      	add	fp, sl
			while (lines_left > 0) {
   80c5e:	42b5      	cmp	r5, r6
   80c60:	d1f4      	bne.n	80c4c <gfx_generic_put_bitmap+0x140>
   80c62:	e7c7      	b.n	80bf4 <gfx_generic_put_bitmap+0xe8>
		if ((map_width == width) && (map_x == 0)) {
   80c64:	f1b8 0f00 	cmp.w	r8, #0
   80c68:	d1e6      	bne.n	80c38 <gfx_generic_put_bitmap+0x12c>
			gfx_set_top_left_limit(x, y);
   80c6a:	4629      	mov	r1, r5
   80c6c:	4638      	mov	r0, r7
   80c6e:	4b0a      	ldr	r3, [pc, #40]	; (80c98 <gfx_generic_put_bitmap+0x18c>)
   80c70:	4798      	blx	r3
			gfx_copy_pixels_to_screen(pixmap,
   80c72:	fb06 f104 	mul.w	r1, r6, r4
   80c76:	4658      	mov	r0, fp
   80c78:	4b08      	ldr	r3, [pc, #32]	; (80c9c <gfx_generic_put_bitmap+0x190>)
   80c7a:	4798      	blx	r3
   80c7c:	e7ba      	b.n	80bf4 <gfx_generic_put_bitmap+0xe8>
   80c7e:	bf00      	nop
   80c80:	2007145a 	.word	0x2007145a
   80c84:	2007145e 	.word	0x2007145e
   80c88:	2007145c 	.word	0x2007145c
   80c8c:	00080a35 	.word	0x00080a35
   80c90:	20070bb8 	.word	0x20070bb8
   80c94:	00080545 	.word	0x00080545
   80c98:	00080525 	.word	0x00080525
   80c9c:	000805e1 	.word	0x000805e1
   80ca0:	20071460 	.word	0x20071460

00080ca4 <gfx_generic_draw_bitmap_tiled>:
{
   80ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ca8:	b087      	sub	sp, #28
   80caa:	4681      	mov	r9, r0
   80cac:	4608      	mov	r0, r1
   80cae:	4611      	mov	r1, r2
   80cb0:	4698      	mov	r8, r3
   80cb2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   80cb6:	9304      	str	r3, [sp, #16]
   80cb8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
   80cbc:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
	if (bmp->type == GFX_BITMAP_SOLID) {
   80cc0:	f899 3004 	ldrb.w	r3, [r9, #4]
   80cc4:	b1d3      	cbz	r3, 80cfc <gfx_generic_draw_bitmap_tiled+0x58>
	map_width = bmp->width;
   80cc6:	f9b9 5000 	ldrsh.w	r5, [r9]
	map_height = bmp->height;
   80cca:	f9b9 7002 	ldrsh.w	r7, [r9, #2]
	while (start_x <= (x1 - map_width)) {
   80cce:	1b43      	subs	r3, r0, r5
   80cd0:	459b      	cmp	fp, r3
   80cd2:	dc04      	bgt.n	80cde <gfx_generic_draw_bitmap_tiled+0x3a>
   80cd4:	44ab      	add	fp, r5
   80cd6:	fa0f fb8b 	sxth.w	fp, fp
   80cda:	459b      	cmp	fp, r3
   80cdc:	ddfa      	ble.n	80cd4 <gfx_generic_draw_bitmap_tiled+0x30>
	while (start_y <= (y1 - map_height)) {
   80cde:	1bcb      	subs	r3, r1, r7
   80ce0:	429e      	cmp	r6, r3
   80ce2:	dc03      	bgt.n	80cec <gfx_generic_draw_bitmap_tiled+0x48>
   80ce4:	443e      	add	r6, r7
   80ce6:	b236      	sxth	r6, r6
   80ce8:	429e      	cmp	r6, r3
   80cea:	ddfb      	ble.n	80ce4 <gfx_generic_draw_bitmap_tiled+0x40>
	for (index_y = start_y; index_y <= y2; index_y += map_height) {
   80cec:	9b04      	ldr	r3, [sp, #16]
   80cee:	42b3      	cmp	r3, r6
   80cf0:	db11      	blt.n	80d16 <gfx_generic_draw_bitmap_tiled+0x72>
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80cf2:	f8cd b014 	str.w	fp, [sp, #20]
			gfx_put_bitmap(bmp, 0, 0, index_x, index_y, map_width,
   80cf6:	f8df a054 	ldr.w	sl, [pc, #84]	; 80d4c <gfx_generic_draw_bitmap_tiled+0xa8>
   80cfa:	e021      	b.n	80d40 <gfx_generic_draw_bitmap_tiled+0x9c>
		gfx_draw_filled_rect(x1, y1, x2 - x1 + 1, y2 - y1 + 1,
   80cfc:	9b04      	ldr	r3, [sp, #16]
   80cfe:	1a9b      	subs	r3, r3, r2
   80d00:	3301      	adds	r3, #1
   80d02:	eba8 0200 	sub.w	r2, r8, r0
   80d06:	3201      	adds	r2, #1
   80d08:	f8b9 4008 	ldrh.w	r4, [r9, #8]
   80d0c:	9400      	str	r4, [sp, #0]
   80d0e:	b21b      	sxth	r3, r3
   80d10:	b212      	sxth	r2, r2
   80d12:	4c0d      	ldr	r4, [pc, #52]	; (80d48 <gfx_generic_draw_bitmap_tiled+0xa4>)
   80d14:	47a0      	blx	r4
}
   80d16:	b007      	add	sp, #28
   80d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80d1c:	9c05      	ldr	r4, [sp, #20]
			gfx_put_bitmap(bmp, 0, 0, index_x, index_y, map_width,
   80d1e:	9702      	str	r7, [sp, #8]
   80d20:	9501      	str	r5, [sp, #4]
   80d22:	9600      	str	r6, [sp, #0]
   80d24:	4623      	mov	r3, r4
   80d26:	2200      	movs	r2, #0
   80d28:	4611      	mov	r1, r2
   80d2a:	4648      	mov	r0, r9
   80d2c:	47d0      	blx	sl
   80d2e:	442c      	add	r4, r5
   80d30:	b224      	sxth	r4, r4
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80d32:	45a0      	cmp	r8, r4
   80d34:	daf3      	bge.n	80d1e <gfx_generic_draw_bitmap_tiled+0x7a>
   80d36:	443e      	add	r6, r7
   80d38:	b236      	sxth	r6, r6
	for (index_y = start_y; index_y <= y2; index_y += map_height) {
   80d3a:	9b04      	ldr	r3, [sp, #16]
   80d3c:	429e      	cmp	r6, r3
   80d3e:	dcea      	bgt.n	80d16 <gfx_generic_draw_bitmap_tiled+0x72>
		for (index_x = start_x; index_x <= x2; index_x += map_width) {
   80d40:	45d8      	cmp	r8, fp
   80d42:	daeb      	bge.n	80d1c <gfx_generic_draw_bitmap_tiled+0x78>
   80d44:	e7f7      	b.n	80d36 <gfx_generic_draw_bitmap_tiled+0x92>
   80d46:	bf00      	nop
   80d48:	00080a35 	.word	0x00080a35
   80d4c:	00080b0d 	.word	0x00080b0d

00080d50 <gfx_ili9341_draw_pixel>:

	return color;
}

void gfx_ili9341_draw_pixel(gfx_coord_t x, gfx_coord_t y, gfx_color_t color)
{
   80d50:	b538      	push	{r3, r4, r5, lr}
#ifdef CONF_GFX_USE_CLIPPING
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
   80d52:	4c0f      	ldr	r4, [pc, #60]	; (80d90 <gfx_ili9341_draw_pixel+0x40>)
   80d54:	f9b4 4000 	ldrsh.w	r4, [r4]
   80d58:	4284      	cmp	r4, r0
   80d5a:	dc0e      	bgt.n	80d7a <gfx_ili9341_draw_pixel+0x2a>
   80d5c:	4b0d      	ldr	r3, [pc, #52]	; (80d94 <gfx_ili9341_draw_pixel+0x44>)
   80d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
   80d62:	4283      	cmp	r3, r0
   80d64:	db09      	blt.n	80d7a <gfx_ili9341_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
   80d66:	4b0c      	ldr	r3, [pc, #48]	; (80d98 <gfx_ili9341_draw_pixel+0x48>)
	if ((x < gfx_min_x) || (x > gfx_max_x) ||
   80d68:	f9b3 3000 	ldrsh.w	r3, [r3]
   80d6c:	428b      	cmp	r3, r1
   80d6e:	dc04      	bgt.n	80d7a <gfx_ili9341_draw_pixel+0x2a>
			(y < gfx_min_y) || (y > gfx_max_y)) {
   80d70:	4b0a      	ldr	r3, [pc, #40]	; (80d9c <gfx_ili9341_draw_pixel+0x4c>)
   80d72:	f9b3 3000 	ldrsh.w	r3, [r3]
   80d76:	428b      	cmp	r3, r1
   80d78:	da00      	bge.n	80d7c <gfx_ili9341_draw_pixel+0x2c>
   80d7a:	bd38      	pop	{r3, r4, r5, pc}
   80d7c:	4614      	mov	r4, r2
		return;
	}
#endif

	/* Set up draw area and write the two bytes of pixel data. */
	gfx_set_limits(x, y, x, y);
   80d7e:	460b      	mov	r3, r1
   80d80:	4602      	mov	r2, r0
   80d82:	4d07      	ldr	r5, [pc, #28]	; (80da0 <gfx_ili9341_draw_pixel+0x50>)
   80d84:	47a8      	blx	r5
	ili9341_write_gram(color);
   80d86:	4620      	mov	r0, r4
   80d88:	4b06      	ldr	r3, [pc, #24]	; (80da4 <gfx_ili9341_draw_pixel+0x54>)
   80d8a:	4798      	blx	r3
   80d8c:	e7f5      	b.n	80d7a <gfx_ili9341_draw_pixel+0x2a>
   80d8e:	bf00      	nop
   80d90:	2007145c 	.word	0x2007145c
   80d94:	2007145a 	.word	0x2007145a
   80d98:	20071460 	.word	0x20071460
   80d9c:	2007145e 	.word	0x2007145e
   80da0:	00080565 	.word	0x00080565
   80da4:	00080595 	.word	0x00080595

00080da8 <gfx_ili9341_init>:
	gfx_set_top_left_limit(x, y);
	ili9341_write_gram(color);
}

void gfx_ili9341_init(void)
{
   80da8:	b570      	push	{r4, r5, r6, lr}
   80daa:	b082      	sub	sp, #8
	/* initialize globals */
	gfx_width = ILI9341_DEFAULT_WIDTH;
   80dac:	4c0f      	ldr	r4, [pc, #60]	; (80dec <gfx_ili9341_init+0x44>)
   80dae:	f44f 73a0 	mov.w	r3, #320	; 0x140
   80db2:	8023      	strh	r3, [r4, #0]
	gfx_height = ILI9341_DEFAULT_HEIGHT;
   80db4:	4d0e      	ldr	r5, [pc, #56]	; (80df0 <gfx_ili9341_init+0x48>)
   80db6:	23f0      	movs	r3, #240	; 0xf0
   80db8:	802b      	strh	r3, [r5, #0]

	ili9341_init();
   80dba:	4b0e      	ldr	r3, [pc, #56]	; (80df4 <gfx_ili9341_init+0x4c>)
   80dbc:	4798      	blx	r3
   80dbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80dc2:	4b0d      	ldr	r3, [pc, #52]	; (80df8 <gfx_ili9341_init+0x50>)
   80dc4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();

	/* Set clipping area to whole screen initially */
	gfx_set_clipping(0, 0, gfx_width, gfx_height);
   80dc6:	f9b5 3000 	ldrsh.w	r3, [r5]
   80dca:	f9b4 2000 	ldrsh.w	r2, [r4]
   80dce:	2100      	movs	r1, #0
   80dd0:	4608      	mov	r0, r1
   80dd2:	4e0a      	ldr	r6, [pc, #40]	; (80dfc <gfx_ili9341_init+0x54>)
   80dd4:	47b0      	blx	r6

	gfx_draw_filled_rect(0, 0, gfx_width, gfx_height,
   80dd6:	f9b5 3000 	ldrsh.w	r3, [r5]
   80dda:	f9b4 2000 	ldrsh.w	r2, [r4]
   80dde:	2000      	movs	r0, #0
   80de0:	9000      	str	r0, [sp, #0]
   80de2:	4601      	mov	r1, r0
   80de4:	4c06      	ldr	r4, [pc, #24]	; (80e00 <gfx_ili9341_init+0x58>)
   80de6:	47a0      	blx	r4
			GFX_COLOR_BLACK);
}
   80de8:	b002      	add	sp, #8
   80dea:	bd70      	pop	{r4, r5, r6, pc}
   80dec:	20071458 	.word	0x20071458
   80df0:	20071462 	.word	0x20071462
   80df4:	000806e9 	.word	0x000806e9
   80df8:	400e1200 	.word	0x400e1200
   80dfc:	000809c5 	.word	0x000809c5
   80e00:	00080a35 	.word	0x00080a35

00080e04 <gfx_draw_char>:
 * \param text_color  Foreground color to draw the text string in
 */
void gfx_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font, const gfx_color_t bg_color,
		const gfx_color_t text_color)
{
   80e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e08:	b085      	sub	sp, #20
   80e0a:	4604      	mov	r4, r0
   80e0c:	460f      	mov	r7, r1
   80e0e:	4691      	mov	r9, r2
   80e10:	469a      	mov	sl, r3
   80e12:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   80e16:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   80e1a:	9302      	str	r3, [sp, #8]
	if (bg_color != GFX_COLOR_TRANSPARENT) {
   80e1c:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   80e20:	4299      	cmp	r1, r3
   80e22:	d008      	beq.n	80e36 <gfx_draw_char+0x32>
		gfx_draw_filled_rect(x, y, font->width, font->height, bg_color);
   80e24:	f89a 3009 	ldrb.w	r3, [sl, #9]
   80e28:	f89a 2008 	ldrb.w	r2, [sl, #8]
   80e2c:	9100      	str	r1, [sp, #0]
   80e2e:	4649      	mov	r1, r9
   80e30:	4638      	mov	r0, r7
   80e32:	4d26      	ldr	r5, [pc, #152]	; (80ecc <gfx_draw_char+0xc8>)
   80e34:	47a8      	blx	r5
	}

	switch (font->type) {
   80e36:	f89a 3000 	ldrb.w	r3, [sl]
   80e3a:	b113      	cbz	r3, 80e42 <gfx_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
   80e3c:	b005      	add	sp, #20
   80e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   80e42:	f89a 3008 	ldrb.w	r3, [sl, #8]
   80e46:	08da      	lsrs	r2, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   80e48:	f013 0f07 	tst.w	r3, #7
		char_row_size++;
   80e4c:	bf18      	it	ne
   80e4e:	3201      	addne	r2, #1
	glyph_data_offset = char_row_size * font->height *
   80e50:	f89a 3009 	ldrb.w	r3, [sl, #9]
			((uint8_t)ch - font->first_char);
   80e54:	f89a 800a 	ldrb.w	r8, [sl, #10]
   80e58:	eba4 0808 	sub.w	r8, r4, r8
	glyph_data_offset = char_row_size * font->height *
   80e5c:	fb08 f803 	mul.w	r8, r8, r3
   80e60:	fb08 f802 	mul.w	r8, r8, r2
	glyph_data = font->data.progmem + glyph_data_offset;
   80e64:	fa1f f888 	uxth.w	r8, r8
   80e68:	f8da 2004 	ldr.w	r2, [sl, #4]
   80e6c:	4490      	add	r8, r2
   80e6e:	3b01      	subs	r3, #1
   80e70:	b2db      	uxtb	r3, r3
   80e72:	f109 0201 	add.w	r2, r9, #1
   80e76:	4413      	add	r3, r2
   80e78:	b29b      	uxth	r3, r3
   80e7a:	9303      	str	r3, [sp, #12]
				gfx_draw_pixel(inc_x, inc_y, color);
   80e7c:	f8df b050 	ldr.w	fp, [pc, #80]	; 80ed0 <gfx_draw_char+0xcc>
   80e80:	e01c      	b.n	80ebc <gfx_draw_char+0xb8>
			glyph_byte <<= 1;
   80e82:	0064      	lsls	r4, r4, #1
   80e84:	b2e4      	uxtb	r4, r4
   80e86:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
   80e88:	b2eb      	uxtb	r3, r5
   80e8a:	429e      	cmp	r6, r3
   80e8c:	d90d      	bls.n	80eaa <gfx_draw_char+0xa6>
   80e8e:	19e8      	adds	r0, r5, r7
   80e90:	b200      	sxth	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   80e92:	f015 0f07 	tst.w	r5, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   80e96:	bf08      	it	eq
   80e98:	f818 4b01 	ldrbeq.w	r4, [r8], #1
			if ((glyph_byte & 0x80)) {
   80e9c:	f014 0f80 	tst.w	r4, #128	; 0x80
   80ea0:	d0ef      	beq.n	80e82 <gfx_draw_char+0x7e>
				gfx_draw_pixel(inc_x, inc_y, color);
   80ea2:	9a02      	ldr	r2, [sp, #8]
   80ea4:	4649      	mov	r1, r9
   80ea6:	47d8      	blx	fp
   80ea8:	e7eb      	b.n	80e82 <gfx_draw_char+0x7e>
   80eaa:	f109 0901 	add.w	r9, r9, #1
   80eae:	fa1f f389 	uxth.w	r3, r9
		inc_y += 1;
   80eb2:	fa0f f983 	sxth.w	r9, r3
	} while (rows_left > 0);
   80eb6:	9a03      	ldr	r2, [sp, #12]
   80eb8:	429a      	cmp	r2, r3
   80eba:	d0bf      	beq.n	80e3c <gfx_draw_char+0x38>
		uint8_t pixelsToDraw = font->width;
   80ebc:	f89a 6008 	ldrb.w	r6, [sl, #8]
		for (i = 0; i < pixelsToDraw; i++) {
   80ec0:	2e00      	cmp	r6, #0
   80ec2:	d0f2      	beq.n	80eaa <gfx_draw_char+0xa6>
   80ec4:	2500      	movs	r5, #0
   80ec6:	462c      	mov	r4, r5
   80ec8:	e7e1      	b.n	80e8e <gfx_draw_char+0x8a>
   80eca:	bf00      	nop
   80ecc:	00080a35 	.word	0x00080a35
   80ed0:	00080d51 	.word	0x00080d51

00080ed4 <gfx_get_string_bounding_box>:
 * \param width    Pointer to width result
 * \param height   Pointer to height result
 */
void gfx_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
   80ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
	gfx_coord_t font_width = font->width;
   80ed6:	7a0f      	ldrb	r7, [r1, #8]
	gfx_coord_t font_height = font->height;
   80ed8:	f891 e009 	ldrb.w	lr, [r1, #9]
   80edc:	fa0f f58e 	sxth.w	r5, lr

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
	gfx_coord_t x = 0;
   80ee0:	2100      	movs	r1, #0
	gfx_coord_t max_width = 1;
   80ee2:	2601      	movs	r6, #1

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
   80ee4:	468c      	mov	ip, r1
   80ee6:	e005      	b.n	80ef4 <gfx_get_string_bounding_box+0x20>
			max_height += font_height;
   80ee8:	4475      	add	r5, lr
   80eea:	b22d      	sxth	r5, r5
			x = 0;
   80eec:	4661      	mov	r1, ip
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
   80eee:	f810 4f01 	ldrb.w	r4, [r0, #1]!
   80ef2:	b154      	cbz	r4, 80f0a <gfx_get_string_bounding_box+0x36>
		if (*str == '\n') {
   80ef4:	7804      	ldrb	r4, [r0, #0]
   80ef6:	2c0a      	cmp	r4, #10
   80ef8:	d0f6      	beq.n	80ee8 <gfx_get_string_bounding_box+0x14>
		} else if (*str == '\r') {
   80efa:	2c0d      	cmp	r4, #13
   80efc:	d0f7      	beq.n	80eee <gfx_get_string_bounding_box+0x1a>
			x += font_width;
   80efe:	4439      	add	r1, r7
   80f00:	b209      	sxth	r1, r1
   80f02:	428e      	cmp	r6, r1
   80f04:	bfb8      	it	lt
   80f06:	460e      	movlt	r6, r1
   80f08:	e7f1      	b.n	80eee <gfx_get_string_bounding_box+0x1a>

	/* Return values through references */
	*width = max_width;
   80f0a:	8016      	strh	r6, [r2, #0]
	*height = max_height;
   80f0c:	801d      	strh	r5, [r3, #0]
   80f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00080f10 <gfx_draw_string_aligned>:
{
   80f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f14:	b087      	sub	sp, #28
   80f16:	4606      	mov	r6, r0
   80f18:	9103      	str	r1, [sp, #12]
   80f1a:	4690      	mov	r8, r2
   80f1c:	461f      	mov	r7, r3
   80f1e:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
   80f22:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
   80f26:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
   80f2a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   80f2e:	9302      	str	r3, [sp, #8]
	gfx_get_string_bounding_box(str, font, &bounding_x, &bounding_y);
   80f30:	ab05      	add	r3, sp, #20
   80f32:	f10d 0216 	add.w	r2, sp, #22
   80f36:	4639      	mov	r1, r7
   80f38:	4d44      	ldr	r5, [pc, #272]	; (8104c <gfx_draw_string_aligned+0x13c>)
   80f3a:	47a8      	blx	r5
	if (text_pos & TEXT_POS_CENTER_Y) {
   80f3c:	f014 0f02 	tst.w	r4, #2
   80f40:	d019      	beq.n	80f76 <gfx_draw_string_aligned+0x66>
		y -= bounding_y / 2;
   80f42:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   80f46:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80f4a:	eba8 0863 	sub.w	r8, r8, r3, asr #1
   80f4e:	fa0f f888 	sxth.w	r8, r8
	if (text_pos & TEXT_POS_CENTER_X) {
   80f52:	f014 0f10 	tst.w	r4, #16
   80f56:	d018      	beq.n	80f8a <gfx_draw_string_aligned+0x7a>
		x -= bounding_x / 2;
   80f58:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   80f5c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80f60:	9a03      	ldr	r2, [sp, #12]
   80f62:	eba2 0363 	sub.w	r3, r2, r3, asr #1
   80f66:	b21b      	sxth	r3, r3
   80f68:	9303      	str	r3, [sp, #12]
	while (*str != '\0') {
   80f6a:	7833      	ldrb	r3, [r6, #0]
   80f6c:	2b00      	cmp	r3, #0
   80f6e:	d06a      	beq.n	81046 <gfx_draw_string_aligned+0x136>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
   80f70:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 81050 <gfx_draw_string_aligned+0x140>
   80f74:	e064      	b.n	81040 <gfx_draw_string_aligned+0x130>
	} else if (text_pos & TEXT_POS_BOTTOM) {
   80f76:	f014 0f04 	tst.w	r4, #4
   80f7a:	d0ea      	beq.n	80f52 <gfx_draw_string_aligned+0x42>
		y -= bounding_y;
   80f7c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   80f80:	eba8 0803 	sub.w	r8, r8, r3
   80f84:	fa0f f888 	sxth.w	r8, r8
   80f88:	e7e3      	b.n	80f52 <gfx_draw_string_aligned+0x42>
	} else if (text_pos & TEXT_POS_RIGHT) {
   80f8a:	f014 0f20 	tst.w	r4, #32
   80f8e:	d0ec      	beq.n	80f6a <gfx_draw_string_aligned+0x5a>
		x -= bounding_x;
   80f90:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   80f94:	9a03      	ldr	r2, [sp, #12]
   80f96:	1ad3      	subs	r3, r2, r3
   80f98:	b21b      	sxth	r3, r3
   80f9a:	9303      	str	r3, [sp, #12]
   80f9c:	e7e5      	b.n	80f6a <gfx_draw_string_aligned+0x5a>
				str++;
   80f9e:	3501      	adds	r5, #1
		if (text_align == TEXT_ALIGN_CENTER) {
   80fa0:	9a02      	ldr	r2, [sp, #8]
   80fa2:	2a02      	cmp	r2, #2
   80fa4:	d014      	beq.n	80fd0 <gfx_draw_string_aligned+0xc0>
		} else if (text_align == TEXT_ALIGN_RIGHT) {
   80fa6:	9a02      	ldr	r2, [sp, #8]
   80fa8:	2a01      	cmp	r2, #1
   80faa:	d021      	beq.n	80ff0 <gfx_draw_string_aligned+0xe0>
		gfx_coord_t curr_line_x = x;
   80fac:	9c03      	ldr	r4, [sp, #12]
   80fae:	464b      	mov	r3, r9
   80fb0:	46a9      	mov	r9, r5
   80fb2:	461d      	mov	r5, r3
   80fb4:	e029      	b.n	8100a <gfx_draw_string_aligned+0xfa>
		} while (*(++str) != '\0');
   80fb6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   80fba:	2a00      	cmp	r2, #0
   80fbc:	d0f0      	beq.n	80fa0 <gfx_draw_string_aligned+0x90>
			if (*str == '\n') {
   80fbe:	782a      	ldrb	r2, [r5, #0]
   80fc0:	2a0a      	cmp	r2, #10
   80fc2:	d0ec      	beq.n	80f9e <gfx_draw_string_aligned+0x8e>
			} else if (*str != '\r') {
   80fc4:	2a0d      	cmp	r2, #13
   80fc6:	d0f6      	beq.n	80fb6 <gfx_draw_string_aligned+0xa6>
				curr_line_width += font->width;
   80fc8:	7a3a      	ldrb	r2, [r7, #8]
   80fca:	4413      	add	r3, r2
   80fcc:	b21b      	sxth	r3, r3
   80fce:	e7f2      	b.n	80fb6 <gfx_draw_string_aligned+0xa6>
			curr_line_x += (bounding_x / 2) - (curr_line_width / 2);
   80fd0:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   80fd4:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
   80fd8:	9a03      	ldr	r2, [sp, #12]
   80fda:	eb02 0464 	add.w	r4, r2, r4, asr #1
   80fde:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80fe2:	eba4 0463 	sub.w	r4, r4, r3, asr #1
   80fe6:	b224      	sxth	r4, r4
   80fe8:	464b      	mov	r3, r9
   80fea:	46a9      	mov	r9, r5
   80fec:	461d      	mov	r5, r3
   80fee:	e00c      	b.n	8100a <gfx_draw_string_aligned+0xfa>
			curr_line_x += bounding_x - curr_line_width;
   80ff0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
   80ff4:	9a03      	ldr	r2, [sp, #12]
   80ff6:	4414      	add	r4, r2
   80ff8:	1ae4      	subs	r4, r4, r3
   80ffa:	b224      	sxth	r4, r4
   80ffc:	464b      	mov	r3, r9
   80ffe:	46a9      	mov	r9, r5
   81000:	461d      	mov	r5, r3
   81002:	e002      	b.n	8100a <gfx_draw_string_aligned+0xfa>
		} while (*(++curr_line_text) != '\0');
   81004:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   81008:	b17b      	cbz	r3, 8102a <gfx_draw_string_aligned+0x11a>
			if (*curr_line_text == '\n') {
   8100a:	7830      	ldrb	r0, [r6, #0]
   8100c:	280a      	cmp	r0, #10
   8100e:	d00c      	beq.n	8102a <gfx_draw_string_aligned+0x11a>
			} else if (*curr_line_text != '\r') {
   81010:	280d      	cmp	r0, #13
   81012:	d0f7      	beq.n	81004 <gfx_draw_string_aligned+0xf4>
				gfx_draw_char(*curr_line_text, curr_line_x, y,
   81014:	f8cd a004 	str.w	sl, [sp, #4]
   81018:	9500      	str	r5, [sp, #0]
   8101a:	463b      	mov	r3, r7
   8101c:	4642      	mov	r2, r8
   8101e:	4621      	mov	r1, r4
   81020:	47d8      	blx	fp
				curr_line_x += font->width;
   81022:	7a3b      	ldrb	r3, [r7, #8]
   81024:	441c      	add	r4, r3
   81026:	b224      	sxth	r4, r4
   81028:	e7ec      	b.n	81004 <gfx_draw_string_aligned+0xf4>
   8102a:	462b      	mov	r3, r5
   8102c:	464d      	mov	r5, r9
   8102e:	4699      	mov	r9, r3
		y += font->height + 1;
   81030:	7a7b      	ldrb	r3, [r7, #9]
   81032:	3301      	adds	r3, #1
   81034:	4498      	add	r8, r3
   81036:	fa0f f888 	sxth.w	r8, r8
	while (*str != '\0') {
   8103a:	782b      	ldrb	r3, [r5, #0]
   8103c:	b11b      	cbz	r3, 81046 <gfx_draw_string_aligned+0x136>
   8103e:	462e      	mov	r6, r5
   81040:	4635      	mov	r5, r6
   81042:	2300      	movs	r3, #0
   81044:	e7bb      	b.n	80fbe <gfx_draw_string_aligned+0xae>
}
   81046:	b007      	add	sp, #28
   81048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8104c:	00080ed5 	.word	0x00080ed5
   81050:	00080e05 	.word	0x00080e05

00081054 <gfx_draw_string>:
{
   81054:	b510      	push	{r4, lr}
   81056:	b084      	sub	sp, #16
	gfx_draw_string_aligned(str, x, y, font, bg_color, text_color,
   81058:	2400      	movs	r4, #0
   8105a:	9403      	str	r4, [sp, #12]
   8105c:	2408      	movs	r4, #8
   8105e:	9402      	str	r4, [sp, #8]
   81060:	f8bd 401c 	ldrh.w	r4, [sp, #28]
   81064:	9401      	str	r4, [sp, #4]
   81066:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   8106a:	9400      	str	r4, [sp, #0]
   8106c:	4c01      	ldr	r4, [pc, #4]	; (81074 <gfx_draw_string+0x20>)
   8106e:	47a0      	blx	r4
}
   81070:	b004      	add	sp, #16
   81072:	bd10      	pop	{r4, pc}
   81074:	00080f11 	.word	0x00080f11

00081078 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
   81078:	b510      	push	{r4, lr}
   8107a:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
   8107c:	4b10      	ldr	r3, [pc, #64]	; (810c0 <spi_master_init+0x48>)
   8107e:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   81080:	2380      	movs	r3, #128	; 0x80
   81082:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   81084:	6863      	ldr	r3, [r4, #4]
   81086:	f043 0301 	orr.w	r3, r3, #1
   8108a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8108c:	6863      	ldr	r3, [r4, #4]
   8108e:	f043 0310 	orr.w	r3, r3, #16
   81092:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   81094:	6863      	ldr	r3, [r4, #4]
   81096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8109a:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
   8109c:	2100      	movs	r1, #0
   8109e:	4620      	mov	r0, r4
   810a0:	4b08      	ldr	r3, [pc, #32]	; (810c4 <spi_master_init+0x4c>)
   810a2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
   810a4:	6863      	ldr	r3, [r4, #4]
   810a6:	f023 0302 	bic.w	r3, r3, #2
   810aa:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   810ac:	6863      	ldr	r3, [r4, #4]
   810ae:	f023 0304 	bic.w	r3, r3, #4
   810b2:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
   810b4:	2100      	movs	r1, #0
   810b6:	4620      	mov	r0, r4
   810b8:	4b03      	ldr	r3, [pc, #12]	; (810c8 <spi_master_init+0x50>)
   810ba:	4798      	blx	r3
   810bc:	bd10      	pop	{r4, pc}
   810be:	bf00      	nop
   810c0:	00082655 	.word	0x00082655
   810c4:	00082671 	.word	0x00082671
   810c8:	00082687 	.word	0x00082687

000810cc <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
   810cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810d0:	4604      	mov	r4, r0
   810d2:	460d      	mov	r5, r1
   810d4:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
   810d6:	4915      	ldr	r1, [pc, #84]	; (8112c <spi_master_setup_device+0x60>)
   810d8:	4618      	mov	r0, r3
   810da:	4b15      	ldr	r3, [pc, #84]	; (81130 <spi_master_setup_device+0x64>)
   810dc:	4798      	blx	r3
   810de:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
   810e0:	2300      	movs	r3, #0
   810e2:	461a      	mov	r2, r3
   810e4:	6829      	ldr	r1, [r5, #0]
   810e6:	4620      	mov	r0, r4
   810e8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 81148 <spi_master_setup_device+0x7c>
   810ec:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
   810ee:	2208      	movs	r2, #8
   810f0:	6829      	ldr	r1, [r5, #0]
   810f2:	4620      	mov	r0, r4
   810f4:	4b0f      	ldr	r3, [pc, #60]	; (81134 <spi_master_setup_device+0x68>)
   810f6:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
   810f8:	b2fa      	uxtb	r2, r7
   810fa:	6829      	ldr	r1, [r5, #0]
   810fc:	4620      	mov	r0, r4
   810fe:	4b0e      	ldr	r3, [pc, #56]	; (81138 <spi_master_setup_device+0x6c>)
   81100:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
   81102:	2208      	movs	r2, #8
   81104:	6829      	ldr	r1, [r5, #0]
   81106:	4620      	mov	r0, r4
   81108:	4b0c      	ldr	r3, [pc, #48]	; (8113c <spi_master_setup_device+0x70>)
   8110a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
   8110c:	0872      	lsrs	r2, r6, #1
   8110e:	6829      	ldr	r1, [r5, #0]
   81110:	4620      	mov	r0, r4
   81112:	4b0b      	ldr	r3, [pc, #44]	; (81140 <spi_master_setup_device+0x74>)
   81114:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
   81116:	f086 0201 	eor.w	r2, r6, #1
   8111a:	f002 0201 	and.w	r2, r2, #1
   8111e:	6829      	ldr	r1, [r5, #0]
   81120:	4620      	mov	r0, r4
   81122:	4b08      	ldr	r3, [pc, #32]	; (81144 <spi_master_setup_device+0x78>)
   81124:	4798      	blx	r3
   81126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8112a:	bf00      	nop
   8112c:	0501bd00 	.word	0x0501bd00
   81130:	0008272f 	.word	0x0008272f
   81134:	0008271b 	.word	0x0008271b
   81138:	00082745 	.word	0x00082745
   8113c:	000826d5 	.word	0x000826d5
   81140:	00082699 	.word	0x00082699
   81144:	000826b7 	.word	0x000826b7
   81148:	0008276b 	.word	0x0008276b

0008114c <win_is_visible>:
 *
 * \retval true \a win is visible.
 * \retval false \a win is not visible.
 */
static bool win_is_visible(const struct win_window *win)
{
   8114c:	4603      	mov	r3, r0
	/* Move up the window tree, search for unmapped windows. */
	do {
		/* Return false once an unmapped window is found. */
		if (!win->is_mapped) {
   8114e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
   81152:	b110      	cbz	r0, 8115a <win_is_visible+0xe>
			return false;
		}

		win = win->parent;
   81154:	699b      	ldr	r3, [r3, #24]
	} while (win != NULL);
   81156:	2b00      	cmp	r3, #0
   81158:	d1f9      	bne.n	8114e <win_is_visible+0x2>
	/*
	 * If we arrived here, all windows were mapped, ergo visible on
	 * screen, although maybe covered by other windows.
	 */
	return true;
}
   8115a:	4770      	bx	lr

0008115c <win_unlink>:
 * \param  win  Window to be unlinked from parent.
 */
static void win_unlink(struct win_window *win)
{
	/* If we are the only child, slightly easier handling. */
	if (win->next_sibling == win) {
   8115c:	6a03      	ldr	r3, [r0, #32]
   8115e:	4298      	cmp	r0, r3
   81160:	d00f      	beq.n	81182 <win_unlink+0x26>
		win->parent->top_child = NULL;
	} else {
		/* If we are the top child, set the next child as new top. */
		if (win->parent->top_child == win) {
   81162:	6982      	ldr	r2, [r0, #24]
   81164:	6a51      	ldr	r1, [r2, #36]	; 0x24
   81166:	4288      	cmp	r0, r1
			win->parent->top_child = win->next_sibling;
   81168:	bf08      	it	eq
   8116a:	6253      	streq	r3, [r2, #36]	; 0x24
		}

		/* Remove ourselves from the linked list of children. */
		win->next_sibling->prev_sibling = win->prev_sibling;
   8116c:	6a03      	ldr	r3, [r0, #32]
   8116e:	69c2      	ldr	r2, [r0, #28]
   81170:	61da      	str	r2, [r3, #28]
		win->prev_sibling->next_sibling = win->next_sibling;
   81172:	69c3      	ldr	r3, [r0, #28]
   81174:	6a02      	ldr	r2, [r0, #32]
   81176:	621a      	str	r2, [r3, #32]
	}

	/* Clean up, for consistency. */
	win->parent = NULL;
   81178:	2300      	movs	r3, #0
   8117a:	6183      	str	r3, [r0, #24]
	win->next_sibling = NULL;
   8117c:	6203      	str	r3, [r0, #32]
	win->prev_sibling = NULL;
   8117e:	61c3      	str	r3, [r0, #28]
   81180:	4770      	bx	lr
		win->parent->top_child = NULL;
   81182:	6983      	ldr	r3, [r0, #24]
   81184:	2200      	movs	r2, #0
   81186:	625a      	str	r2, [r3, #36]	; 0x24
   81188:	e7f6      	b.n	81178 <win_unlink+0x1c>

0008118a <win_add_top_child>:
 */
static void win_add_top_child(struct win_window *parent,
		struct win_window *child)
{
	/* If we are the first child, slightly easier handling. */
	if (parent->top_child == NULL) {
   8118a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   8118c:	b14b      	cbz	r3, 811a2 <win_add_top_child+0x18>
		/* We are the only child, so point to self. */
		child->next_sibling = child;
		child->prev_sibling = child;
	} else {
		/* Insert ourselves into the linked list at the top position. */
		child->next_sibling = parent->top_child;
   8118e:	620b      	str	r3, [r1, #32]
		child->prev_sibling = parent->top_child->prev_sibling;
   81190:	6a42      	ldr	r2, [r0, #36]	; 0x24
   81192:	69d2      	ldr	r2, [r2, #28]
   81194:	61ca      	str	r2, [r1, #28]

		child->next_sibling->prev_sibling = child;
   81196:	61d9      	str	r1, [r3, #28]
		child->prev_sibling->next_sibling = child;
   81198:	69cb      	ldr	r3, [r1, #28]
   8119a:	6219      	str	r1, [r3, #32]
	}

	/* Parent-child link, putting child at top of Z stack. */
	parent->top_child = child;
   8119c:	6241      	str	r1, [r0, #36]	; 0x24
	child->parent = parent;
   8119e:	6188      	str	r0, [r1, #24]
   811a0:	4770      	bx	lr
		child->next_sibling = child;
   811a2:	6209      	str	r1, [r1, #32]
		child->prev_sibling = child;
   811a4:	61c9      	str	r1, [r1, #28]
   811a6:	e7f9      	b.n	8119c <win_add_top_child+0x12>

000811a8 <win_handle_event>:
 * \retval false No event handler present or event handler doesn't
 *      accept event.
 */
static bool win_handle_event(struct win_window *win,
		enum win_event_type type, const void *data)
{
   811a8:	b508      	push	{r3, lr}
	win_event_handler_t handler = win->attributes.event_handler;
   811aa:	68c3      	ldr	r3, [r0, #12]

	if (handler) {
   811ac:	b10b      	cbz	r3, 811b2 <win_handle_event+0xa>
		return handler(win, type, data);
   811ae:	4798      	blx	r3
   811b0:	bd08      	pop	{r3, pc}
	} else {
		return false;
   811b2:	2000      	movs	r0, #0
	}
}
   811b4:	bd08      	pop	{r3, pc}
	...

000811b8 <win_queue_event>:
 * the queue, no extra work items will be added.
 *
 * \param  event  Event to add to the queue.
 */
static void win_queue_event(const struct win_event *event)
{
   811b8:	b4f0      	push	{r4, r5, r6, r7}
   811ba:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   811bc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   811c0:	fab3 f383 	clz	r3, r3
   811c4:	095b      	lsrs	r3, r3, #5
   811c6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   811c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   811ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   811ce:	2200      	movs	r2, #0
   811d0:	4b16      	ldr	r3, [pc, #88]	; (8122c <win_queue_event+0x74>)
   811d2:	701a      	strb	r2, [r3, #0]
	return flags;
   811d4:	9f01      	ldr	r7, [sp, #4]
	 * different contexts.
	 */
	iflags = cpu_irq_save();

	/* Drop event if queue is full. */
	if (win_event_queue.free == 0) {
   811d6:	4b16      	ldr	r3, [pc, #88]	; (81230 <win_queue_event+0x78>)
   811d8:	7c1c      	ldrb	r4, [r3, #16]
   811da:	b96c      	cbnz	r4, 811f8 <win_queue_event+0x40>
		++win_num_dropped_events;
   811dc:	4a15      	ldr	r2, [pc, #84]	; (81234 <win_queue_event+0x7c>)
   811de:	6813      	ldr	r3, [r2, #0]
   811e0:	3301      	adds	r3, #1
   811e2:	6013      	str	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   811e4:	b12f      	cbz	r7, 811f2 <win_queue_event+0x3a>
		cpu_irq_enable();
   811e6:	2201      	movs	r2, #1
   811e8:	4b10      	ldr	r3, [pc, #64]	; (8122c <win_queue_event+0x74>)
   811ea:	701a      	strb	r2, [r3, #0]
   811ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   811f0:	b662      	cpsie	i
		--(win_event_queue.free);
		++(win_event_queue.used);
	}

	cpu_irq_restore(iflags);
}
   811f2:	b002      	add	sp, #8
   811f4:	bcf0      	pop	{r4, r5, r6, r7}
   811f6:	4770      	bx	lr
		if (win_event_queue.back == win_event_queue.end) {
   811f8:	4a0d      	ldr	r2, [pc, #52]	; (81230 <win_queue_event+0x78>)
   811fa:	68d3      	ldr	r3, [r2, #12]
   811fc:	6852      	ldr	r2, [r2, #4]
   811fe:	4293      	cmp	r3, r2
   81200:	d00f      	beq.n	81222 <win_queue_event+0x6a>
			++(win_event_queue.back);
   81202:	3310      	adds	r3, #16
   81204:	4a0a      	ldr	r2, [pc, #40]	; (81230 <win_queue_event+0x78>)
   81206:	60d3      	str	r3, [r2, #12]
		*(win_event_queue.back) = *event;
   81208:	4e09      	ldr	r6, [pc, #36]	; (81230 <win_queue_event+0x78>)
   8120a:	68f5      	ldr	r5, [r6, #12]
   8120c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   8120e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		win_event_queue.back->timestamp = 0;
   81212:	2300      	movs	r3, #0
   81214:	802b      	strh	r3, [r5, #0]
		--(win_event_queue.free);
   81216:	3c01      	subs	r4, #1
   81218:	7434      	strb	r4, [r6, #16]
		++(win_event_queue.used);
   8121a:	7c73      	ldrb	r3, [r6, #17]
   8121c:	3301      	adds	r3, #1
   8121e:	7473      	strb	r3, [r6, #17]
   81220:	e7e0      	b.n	811e4 <win_queue_event+0x2c>
			win_event_queue.back = win_event_queue.start;
   81222:	4b03      	ldr	r3, [pc, #12]	; (81230 <win_queue_event+0x78>)
   81224:	681a      	ldr	r2, [r3, #0]
   81226:	60da      	str	r2, [r3, #12]
   81228:	e7ee      	b.n	81208 <win_queue_event+0x50>
   8122a:	bf00      	nop
   8122c:	200701a8 	.word	0x200701a8
   81230:	20070bbc 	.word	0x20070bbc
   81234:	20070d18 	.word	0x20070d18

00081238 <win_draw_contents>:
{
   81238:	b5f0      	push	{r4, r5, r6, r7, lr}
   8123a:	b085      	sub	sp, #20
   8123c:	4605      	mov	r5, r0
   8123e:	460e      	mov	r6, r1
	gfx_set_clipping(clip->NW.x, clip->NW.y, clip->SE.x, clip->SE.y);
   81240:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
   81244:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
   81248:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
   8124c:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
   81250:	4c15      	ldr	r4, [pc, #84]	; (812a8 <win_draw_contents+0x70>)
   81252:	47a0      	blx	r4
	if (win->attributes.background) {
   81254:	68a8      	ldr	r0, [r5, #8]
   81256:	b180      	cbz	r0, 8127a <win_draw_contents+0x42>
		gfx_draw_bitmap_tiled(win->attributes.background, clip->NW.x,
   81258:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
   8125c:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
   81260:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   81264:	f9b6 4002 	ldrsh.w	r4, [r6, #2]
   81268:	9402      	str	r4, [sp, #8]
   8126a:	f9b6 4000 	ldrsh.w	r4, [r6]
   8126e:	9401      	str	r4, [sp, #4]
   81270:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
   81274:	9400      	str	r4, [sp, #0]
   81276:	4c0d      	ldr	r4, [pc, #52]	; (812ac <win_draw_contents+0x74>)
   81278:	47a0      	blx	r4
	win_handle_event(win, WIN_EVENT_DRAW, clip);
   8127a:	4632      	mov	r2, r6
   8127c:	2107      	movs	r1, #7
   8127e:	4628      	mov	r0, r5
   81280:	4b0b      	ldr	r3, [pc, #44]	; (812b0 <win_draw_contents+0x78>)
   81282:	4798      	blx	r3
	child = win->top_child;
   81284:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	if (child != NULL) {
   81286:	b16c      	cbz	r4, 812a4 <win_draw_contents+0x6c>
				win_draw_child(child, clip);
   81288:	4f0a      	ldr	r7, [pc, #40]	; (812b4 <win_draw_contents+0x7c>)
   8128a:	e002      	b.n	81292 <win_draw_contents+0x5a>
		} while (child != win->top_child);
   8128c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   8128e:	429c      	cmp	r4, r3
   81290:	d008      	beq.n	812a4 <win_draw_contents+0x6c>
			child = child->prev_sibling;
   81292:	69e4      	ldr	r4, [r4, #28]
			if (child->is_mapped) {
   81294:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   81298:	2b00      	cmp	r3, #0
   8129a:	d0f7      	beq.n	8128c <win_draw_contents+0x54>
				win_draw_child(child, clip);
   8129c:	4631      	mov	r1, r6
   8129e:	4620      	mov	r0, r4
   812a0:	47b8      	blx	r7
   812a2:	e7f3      	b.n	8128c <win_draw_contents+0x54>
}
   812a4:	b005      	add	sp, #20
   812a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   812a8:	000809c5 	.word	0x000809c5
   812ac:	00080ca5 	.word	0x00080ca5
   812b0:	000811a9 	.word	0x000811a9
   812b4:	000812b9 	.word	0x000812b9

000812b8 <win_draw_child>:
{
   812b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   812ba:	b085      	sub	sp, #20
	clip.SE.x = child->attributes.area.pos.x
   812bc:	8804      	ldrh	r4, [r0, #0]
			+ child->attributes.area.size.x - 1;
   812be:	8882      	ldrh	r2, [r0, #4]
	clip.SE.y = child->attributes.area.pos.y
   812c0:	8846      	ldrh	r6, [r0, #2]
			+ child->attributes.area.size.y - 1;
   812c2:	88c3      	ldrh	r3, [r0, #6]
	clip.origin.x += parent_clip->origin.x;
   812c4:	880f      	ldrh	r7, [r1, #0]
   812c6:	19e5      	adds	r5, r4, r7
   812c8:	b22d      	sxth	r5, r5
   812ca:	f8ad 5004 	strh.w	r5, [sp, #4]
	clip.NW.x += parent_clip->origin.x;
   812ce:	f8ad 5008 	strh.w	r5, [sp, #8]
	clip.SE.x += parent_clip->origin.x;
   812d2:	3f01      	subs	r7, #1
   812d4:	443c      	add	r4, r7
   812d6:	4414      	add	r4, r2
   812d8:	b222      	sxth	r2, r4
   812da:	f8ad 200c 	strh.w	r2, [sp, #12]
	clip.origin.y += parent_clip->origin.y;
   812de:	884f      	ldrh	r7, [r1, #2]
   812e0:	19f4      	adds	r4, r6, r7
   812e2:	b224      	sxth	r4, r4
   812e4:	f8ad 4006 	strh.w	r4, [sp, #6]
	clip.NW.y += parent_clip->origin.y;
   812e8:	f8ad 400a 	strh.w	r4, [sp, #10]
	clip.SE.y += parent_clip->origin.y;
   812ec:	3f01      	subs	r7, #1
   812ee:	443e      	add	r6, r7
   812f0:	4433      	add	r3, r6
   812f2:	b21b      	sxth	r3, r3
   812f4:	f8ad 300e 	strh.w	r3, [sp, #14]
	if (clip.NW.x < parent_clip->NW.x) {
   812f8:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
   812fc:	42b5      	cmp	r5, r6
		clip.NW.x = parent_clip->NW.x;
   812fe:	bfb8      	it	lt
   81300:	f8ad 6008 	strhlt.w	r6, [sp, #8]
	if (clip.NW.y < parent_clip->NW.y) {
   81304:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
   81308:	42ac      	cmp	r4, r5
		clip.NW.y = parent_clip->NW.y;
   8130a:	bfb8      	it	lt
   8130c:	f8ad 500a 	strhlt.w	r5, [sp, #10]
	if (clip.SE.x > parent_clip->SE.x) {
   81310:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
   81314:	42a2      	cmp	r2, r4
		clip.SE.x = parent_clip->SE.x;
   81316:	bfc8      	it	gt
   81318:	f8ad 400c 	strhgt.w	r4, [sp, #12]
	if (clip.SE.y > parent_clip->SE.y) {
   8131c:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
   81320:	4293      	cmp	r3, r2
		clip.SE.y = parent_clip->SE.y;
   81322:	bfc8      	it	gt
   81324:	f8ad 200e 	strhgt.w	r2, [sp, #14]
	if ((clip.NW.x > clip.SE.x) || (clip.NW.y > clip.SE.y)) {
   81328:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   8132c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   81330:	429a      	cmp	r2, r3
   81332:	dc05      	bgt.n	81340 <win_draw_child+0x88>
   81334:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
   81338:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
   8133c:	429a      	cmp	r2, r3
   8133e:	dd01      	ble.n	81344 <win_draw_child+0x8c>
}
   81340:	b005      	add	sp, #20
   81342:	bdf0      	pop	{r4, r5, r6, r7, pc}
	win_draw_contents(child, &clip);
   81344:	a901      	add	r1, sp, #4
   81346:	4b01      	ldr	r3, [pc, #4]	; (8134c <win_draw_child+0x94>)
   81348:	4798      	blx	r3
   8134a:	e7f9      	b.n	81340 <win_draw_child+0x88>
   8134c:	00081239 	.word	0x00081239

00081350 <win_destroy_children>:
{
   81350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct win_window *child = win->top_child;
   81354:	6a44      	ldr	r4, [r0, #36]	; 0x24
	if (child != NULL) {
   81356:	b1ac      	cbz	r4, 81384 <win_destroy_children+0x34>
   81358:	4606      	mov	r6, r0
			win_handle_event(child, WIN_EVENT_DESTROY, NULL);
   8135a:	f04f 0900 	mov.w	r9, #0
   8135e:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8138c <win_destroy_children+0x3c>
			membag_free(child);
   81362:	4f09      	ldr	r7, [pc, #36]	; (81388 <win_destroy_children+0x38>)
			win_destroy_children(child);
   81364:	4620      	mov	r0, r4
   81366:	f7ff fff3 	bl	81350 <win_destroy_children>
			win_handle_event(child, WIN_EVENT_DESTROY, NULL);
   8136a:	464a      	mov	r2, r9
   8136c:	2109      	movs	r1, #9
   8136e:	4620      	mov	r0, r4
   81370:	47c0      	blx	r8
			next_sibling = child->next_sibling;
   81372:	6a25      	ldr	r5, [r4, #32]
			membag_free(child);
   81374:	4620      	mov	r0, r4
   81376:	47b8      	blx	r7
			child = next_sibling;
   81378:	462c      	mov	r4, r5
		} while (child != win->top_child);
   8137a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   8137c:	429d      	cmp	r5, r3
   8137e:	d1f1      	bne.n	81364 <win_destroy_children+0x14>
		win->top_child = NULL;
   81380:	2300      	movs	r3, #0
   81382:	6273      	str	r3, [r6, #36]	; 0x24
   81384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81388:	0008257d 	.word	0x0008257d
   8138c:	000811a9 	.word	0x000811a9

00081390 <win_init>:
{
   81390:	b570      	push	{r4, r5, r6, lr}
	win_root.attributes.area.size.x = gfx_get_width();
   81392:	4e10      	ldr	r6, [pc, #64]	; (813d4 <win_init+0x44>)
   81394:	47b0      	blx	r6
   81396:	4c10      	ldr	r4, [pc, #64]	; (813d8 <win_init+0x48>)
   81398:	80a0      	strh	r0, [r4, #4]
	win_root.attributes.area.size.y = gfx_get_height();
   8139a:	4d10      	ldr	r5, [pc, #64]	; (813dc <win_init+0x4c>)
   8139c:	47a8      	blx	r5
   8139e:	80e0      	strh	r0, [r4, #6]
	win_root.attributes.background = &win_root_background;
   813a0:	4b0f      	ldr	r3, [pc, #60]	; (813e0 <win_init+0x50>)
   813a2:	60a3      	str	r3, [r4, #8]
	win_event_queue.free = WIN_EVENT_QUEUE_SIZE;
   813a4:	4a0f      	ldr	r2, [pc, #60]	; (813e4 <win_init+0x54>)
   813a6:	230a      	movs	r3, #10
   813a8:	7413      	strb	r3, [r2, #16]
	win_event_queue.start = win_event_queue_buffer;
   813aa:	4b0f      	ldr	r3, [pc, #60]	; (813e8 <win_init+0x58>)
   813ac:	6013      	str	r3, [r2, #0]
	win_event_queue.front = win_event_queue_buffer;
   813ae:	6093      	str	r3, [r2, #8]
	win_event_queue.end = &win_event_queue_buffer[WIN_EVENT_QUEUE_SIZE - 1];
   813b0:	3390      	adds	r3, #144	; 0x90
   813b2:	6053      	str	r3, [r2, #4]
		= &win_event_queue_buffer[WIN_EVENT_QUEUE_SIZE - 1];
   813b4:	60d3      	str	r3, [r2, #12]
	win_keyboard_focus = &win_root;
   813b6:	4b0d      	ldr	r3, [pc, #52]	; (813ec <win_init+0x5c>)
   813b8:	601c      	str	r4, [r3, #0]
	win_last_pointer_pos.x = gfx_get_width() / 2;
   813ba:	47b0      	blx	r6
   813bc:	4c0c      	ldr	r4, [pc, #48]	; (813f0 <win_init+0x60>)
   813be:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   813c2:	1040      	asrs	r0, r0, #1
   813c4:	8020      	strh	r0, [r4, #0]
	win_last_pointer_pos.y = gfx_get_height() / 2;
   813c6:	47a8      	blx	r5
   813c8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   813cc:	1040      	asrs	r0, r0, #1
   813ce:	8060      	strh	r0, [r4, #2]
   813d0:	bd70      	pop	{r4, r5, r6, pc}
   813d2:	bf00      	nop
   813d4:	00080a1d 	.word	0x00080a1d
   813d8:	20070d20 	.word	0x20070d20
   813dc:	00080a29 	.word	0x00080a29
   813e0:	20070d4c 	.word	0x20070d4c
   813e4:	20070bbc 	.word	0x20070bbc
   813e8:	20070c70 	.word	0x20070c70
   813ec:	20070d10 	.word	0x20070d10
   813f0:	20070d14 	.word	0x20070d14

000813f4 <win_get_root>:
}
   813f4:	4800      	ldr	r0, [pc, #0]	; (813f8 <win_get_root+0x4>)
   813f6:	4770      	bx	lr
   813f8:	20070d20 	.word	0x20070d20

000813fc <win_get_attributes>:
}
   813fc:	4770      	bx	lr

000813fe <win_get_area>:
}
   813fe:	4770      	bx	lr

00081400 <win_get_custom_data>:
}
   81400:	6940      	ldr	r0, [r0, #20]
   81402:	4770      	bx	lr

00081404 <win_create>:
{
   81404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81406:	4607      	mov	r7, r0
   81408:	460c      	mov	r4, r1
	win = membag_alloc(sizeof(struct win_window));
   8140a:	202c      	movs	r0, #44	; 0x2c
   8140c:	4b0a      	ldr	r3, [pc, #40]	; (81438 <win_create+0x34>)
   8140e:	4798      	blx	r3
	if (!win) {
   81410:	4606      	mov	r6, r0
   81412:	b170      	cbz	r0, 81432 <win_create+0x2e>
	win->attributes = *attributes;
   81414:	4605      	mov	r5, r0
   81416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   81418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   8141a:	e894 0003 	ldmia.w	r4, {r0, r1}
   8141e:	e885 0003 	stmia.w	r5, {r0, r1}
	win->is_mapped = false;
   81422:	2300      	movs	r3, #0
   81424:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	win->top_child = NULL;
   81428:	6273      	str	r3, [r6, #36]	; 0x24
	win_add_top_child(parent, win);
   8142a:	4631      	mov	r1, r6
   8142c:	4638      	mov	r0, r7
   8142e:	4b03      	ldr	r3, [pc, #12]	; (8143c <win_create+0x38>)
   81430:	4798      	blx	r3
}
   81432:	4630      	mov	r0, r6
   81434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81436:	bf00      	nop
   81438:	000824fd 	.word	0x000824fd
   8143c:	0008118b 	.word	0x0008118b

00081440 <win_queue_command_event>:
{
   81440:	b500      	push	{lr}
   81442:	b085      	sub	sp, #20
	w_event.type = WIN_EVENT_COMMAND;
   81444:	2302      	movs	r3, #2
   81446:	f88d 3002 	strb.w	r3, [sp, #2]
	w_event.command = *event;
   8144a:	c807      	ldmia	r0, {r0, r1, r2}
   8144c:	ab04      	add	r3, sp, #16
   8144e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	win_queue_event(&w_event);
   81452:	4668      	mov	r0, sp
   81454:	4b02      	ldr	r3, [pc, #8]	; (81460 <win_queue_command_event+0x20>)
   81456:	4798      	blx	r3
}
   81458:	b005      	add	sp, #20
   8145a:	f85d fb04 	ldr.w	pc, [sp], #4
   8145e:	bf00      	nop
   81460:	000811b9 	.word	0x000811b9

00081464 <win_grab_pointer>:
	win_pointer_grabber = win;
   81464:	4b01      	ldr	r3, [pc, #4]	; (8146c <win_grab_pointer+0x8>)
   81466:	6018      	str	r0, [r3, #0]
   81468:	4770      	bx	lr
   8146a:	bf00      	nop
   8146c:	20070d1c 	.word	0x20070d1c

00081470 <win_inflate_area>:
	area->pos.x -= size;
   81470:	b289      	uxth	r1, r1
   81472:	8803      	ldrh	r3, [r0, #0]
   81474:	1a5b      	subs	r3, r3, r1
   81476:	8003      	strh	r3, [r0, #0]
	area->pos.y -= size;
   81478:	8843      	ldrh	r3, [r0, #2]
   8147a:	1a5b      	subs	r3, r3, r1
   8147c:	8043      	strh	r3, [r0, #2]
	area->size.x += size * 2;
   8147e:	0049      	lsls	r1, r1, #1
   81480:	b289      	uxth	r1, r1
   81482:	8883      	ldrh	r3, [r0, #4]
   81484:	440b      	add	r3, r1
   81486:	8083      	strh	r3, [r0, #4]
	area->size.y += size * 2;
   81488:	88c3      	ldrh	r3, [r0, #6]
   8148a:	4419      	add	r1, r3
   8148c:	80c1      	strh	r1, [r0, #6]
   8148e:	4770      	bx	lr

00081490 <win_is_inside_clip>:
	return (clip->NW.x <= point->x) &&
   81490:	f9b1 3000 	ldrsh.w	r3, [r1]
	       (point->x <= clip->SE.x) &&
   81494:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   81498:	429a      	cmp	r2, r3
   8149a:	dc10      	bgt.n	814be <win_is_inside_clip+0x2e>
	       (clip->NW.y <= point->y) &&
   8149c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
	return (clip->NW.x <= point->x) &&
   814a0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   814a4:	4291      	cmp	r1, r2
   814a6:	dc0c      	bgt.n	814c2 <win_is_inside_clip+0x32>
	       (clip->NW.y <= point->y) &&
   814a8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   814ac:	4299      	cmp	r1, r3
   814ae:	db0a      	blt.n	814c6 <win_is_inside_clip+0x36>
	       (point->x <= clip->SE.x) &&
   814b0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   814b4:	4290      	cmp	r0, r2
   814b6:	bfb4      	ite	lt
   814b8:	2000      	movlt	r0, #0
   814ba:	2001      	movge	r0, #1
   814bc:	4770      	bx	lr
   814be:	2000      	movs	r0, #0
   814c0:	4770      	bx	lr
   814c2:	2000      	movs	r0, #0
   814c4:	4770      	bx	lr
   814c6:	2000      	movs	r0, #0
}
   814c8:	4770      	bx	lr

000814ca <win_compute_union>:
{
   814ca:	b410      	push	{r4}
	expand_left = area->pos.x - merge->pos.x;
   814cc:	f9b1 2000 	ldrsh.w	r2, [r1]
   814d0:	8803      	ldrh	r3, [r0, #0]
   814d2:	1a9b      	subs	r3, r3, r2
   814d4:	b29b      	uxth	r3, r3
	if (expand_left > 0) {
   814d6:	b21c      	sxth	r4, r3
   814d8:	2c00      	cmp	r4, #0
   814da:	dd03      	ble.n	814e4 <win_compute_union+0x1a>
		area->pos.x -= expand_left;
   814dc:	8002      	strh	r2, [r0, #0]
		area->size.x += expand_left;
   814de:	8882      	ldrh	r2, [r0, #4]
   814e0:	4413      	add	r3, r2
   814e2:	8083      	strh	r3, [r0, #4]
	expand_top = area->pos.y - merge->pos.y;
   814e4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   814e8:	8843      	ldrh	r3, [r0, #2]
   814ea:	1a9b      	subs	r3, r3, r2
   814ec:	b29b      	uxth	r3, r3
	if (expand_top > 0) {
   814ee:	b21c      	sxth	r4, r3
   814f0:	2c00      	cmp	r4, #0
   814f2:	dd03      	ble.n	814fc <win_compute_union+0x32>
		area->pos.y -= expand_top;
   814f4:	8042      	strh	r2, [r0, #2]
		area->size.y += expand_top;
   814f6:	88c2      	ldrh	r2, [r0, #6]
   814f8:	4413      	add	r3, r2
   814fa:	80c3      	strh	r3, [r0, #6]
   814fc:	880b      	ldrh	r3, [r1, #0]
   814fe:	888a      	ldrh	r2, [r1, #4]
   81500:	4413      	add	r3, r2
   81502:	8802      	ldrh	r2, [r0, #0]
   81504:	1a9b      	subs	r3, r3, r2
   81506:	b29b      	uxth	r3, r3
			- (area->pos.x + area->size.x);
   81508:	8882      	ldrh	r2, [r0, #4]
   8150a:	1a9a      	subs	r2, r3, r2
	if (expand_width > 0) {
   8150c:	b212      	sxth	r2, r2
   8150e:	2a00      	cmp	r2, #0
		area->size.x += expand_width;
   81510:	bfc8      	it	gt
   81512:	8083      	strhgt	r3, [r0, #4]
   81514:	884b      	ldrh	r3, [r1, #2]
   81516:	88ca      	ldrh	r2, [r1, #6]
   81518:	4413      	add	r3, r2
   8151a:	8842      	ldrh	r2, [r0, #2]
   8151c:	1a9b      	subs	r3, r3, r2
   8151e:	b29b      	uxth	r3, r3
			- (area->pos.y + area->size.y);
   81520:	88c2      	ldrh	r2, [r0, #6]
   81522:	1a9a      	subs	r2, r3, r2
	if (expand_height > 0) {
   81524:	b212      	sxth	r2, r2
   81526:	2a00      	cmp	r2, #0
		area->size.y += expand_height;
   81528:	bfc8      	it	gt
   8152a:	80c3      	strhgt	r3, [r0, #6]
}
   8152c:	bc10      	pop	{r4}
   8152e:	4770      	bx	lr

00081530 <win_compute_intersection>:
{
   81530:	b5f0      	push	{r4, r5, r6, r7, lr}
	const gfx_coord_t right_x = area->pos.x + area->size.x - 1;
   81532:	f9b1 4000 	ldrsh.w	r4, [r1]
	if (clip->SE.x < area->pos.x) {
   81536:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   8153a:	42ac      	cmp	r4, r5
   8153c:	dc26      	bgt.n	8158c <win_compute_intersection+0x5c>
	const gfx_coord_t bottom_y = area->pos.y + area->size.y - 1;
   8153e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
	if (clip->SE.y < area->pos.y) {
   81542:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
   81546:	42b2      	cmp	r2, r6
   81548:	dc22      	bgt.n	81590 <win_compute_intersection+0x60>
	const gfx_coord_t right_x = area->pos.x + area->size.x - 1;
   8154a:	888b      	ldrh	r3, [r1, #4]
   8154c:	4423      	add	r3, r4
   8154e:	3b01      	subs	r3, #1
   81550:	b21b      	sxth	r3, r3
	if (clip->NW.x > right_x) {
   81552:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
   81556:	42bb      	cmp	r3, r7
   81558:	db1c      	blt.n	81594 <win_compute_intersection+0x64>
	const gfx_coord_t bottom_y = area->pos.y + area->size.y - 1;
   8155a:	f8b1 e006 	ldrh.w	lr, [r1, #6]
   8155e:	4472      	add	r2, lr
   81560:	3a01      	subs	r2, #1
   81562:	b212      	sxth	r2, r2
	if (clip->NW.y > bottom_y) {
   81564:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
   81568:	4572      	cmp	r2, lr
   8156a:	db15      	blt.n	81598 <win_compute_intersection+0x68>
	if (clip->NW.x < area->pos.x) {
   8156c:	42bc      	cmp	r4, r7
		clip->NW.x = area->pos.x;
   8156e:	bfc8      	it	gt
   81570:	8084      	strhgt	r4, [r0, #4]
	if (clip->NW.y < area->pos.y) {
   81572:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
   81576:	458e      	cmp	lr, r1
		clip->NW.y = area->pos.y;
   81578:	bfb8      	it	lt
   8157a:	80c1      	strhlt	r1, [r0, #6]
	if (clip->SE.x > right_x) {
   8157c:	42ab      	cmp	r3, r5
		clip->SE.x = right_x;
   8157e:	bfb8      	it	lt
   81580:	8103      	strhlt	r3, [r0, #8]
	if (clip->SE.y > bottom_y) {
   81582:	42b2      	cmp	r2, r6
   81584:	da0a      	bge.n	8159c <win_compute_intersection+0x6c>
		clip->SE.y = bottom_y;
   81586:	8142      	strh	r2, [r0, #10]
	return true;
   81588:	2001      	movs	r0, #1
   8158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   8158c:	2000      	movs	r0, #0
   8158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   81590:	2000      	movs	r0, #0
   81592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   81594:	2000      	movs	r0, #0
   81596:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   81598:	2000      	movs	r0, #0
   8159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   8159c:	2001      	movs	r0, #1
}
   8159e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000815a0 <win_compute_clipping>:
{
   815a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   815a4:	4605      	mov	r5, r0
   815a6:	4614      	mov	r4, r2
	clip->origin = win->attributes.area.pos;
   815a8:	6800      	ldr	r0, [r0, #0]
   815aa:	6010      	str	r0, [r2, #0]
	clip->NW = win->attributes.area.pos;
   815ac:	6828      	ldr	r0, [r5, #0]
   815ae:	6050      	str	r0, [r2, #4]
			+ win->attributes.area.size.x - 1;
   815b0:	882b      	ldrh	r3, [r5, #0]
   815b2:	88aa      	ldrh	r2, [r5, #4]
   815b4:	4413      	add	r3, r2
   815b6:	3b01      	subs	r3, #1
	clip->SE.x = win->attributes.area.pos.x
   815b8:	8123      	strh	r3, [r4, #8]
			+ win->attributes.area.size.y - 1;
   815ba:	886b      	ldrh	r3, [r5, #2]
   815bc:	88ea      	ldrh	r2, [r5, #6]
   815be:	4413      	add	r3, r2
   815c0:	3b01      	subs	r3, #1
	clip->SE.y = win->attributes.area.pos.y
   815c2:	8163      	strh	r3, [r4, #10]
	if (!win_compute_intersection(clip, dirty_area)) {
   815c4:	4620      	mov	r0, r4
   815c6:	4b2b      	ldr	r3, [pc, #172]	; (81674 <win_compute_clipping+0xd4>)
   815c8:	4798      	blx	r3
   815ca:	4607      	mov	r7, r0
   815cc:	2800      	cmp	r0, #0
   815ce:	d04c      	beq.n	8166a <win_compute_clipping+0xca>
	while (win != &win_root) {
   815d0:	4b29      	ldr	r3, [pc, #164]	; (81678 <win_compute_clipping+0xd8>)
   815d2:	429d      	cmp	r5, r3
   815d4:	d049      	beq.n	8166a <win_compute_clipping+0xca>
			clip->NW.x = 0;
   815d6:	f04f 0e00 	mov.w	lr, #0
	while (win != &win_root) {
   815da:	461e      	mov	r6, r3
		win = win->parent;
   815dc:	69ad      	ldr	r5, [r5, #24]
		if (clip->NW.x < 0) {
   815de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   815e2:	2b00      	cmp	r3, #0
			clip->NW.x = 0;
   815e4:	bfb8      	it	lt
   815e6:	f8a4 e004 	strhlt.w	lr, [r4, #4]
		if (clip->NW.y < 0) {
   815ea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   815ee:	2b00      	cmp	r3, #0
			clip->NW.y = 0;
   815f0:	bfb8      	it	lt
   815f2:	f8a4 e006 	strhlt.w	lr, [r4, #6]
		if (clip->SE.x >= win->attributes.area.size.x) {
   815f6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   815fa:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
   815fe:	429a      	cmp	r2, r3
			clip->SE.x = win->attributes.area.size.x - 1;
   81600:	bfa4      	itt	ge
   81602:	f103 33ff 	addge.w	r3, r3, #4294967295
   81606:	8123      	strhge	r3, [r4, #8]
		if (clip->SE.y >= win->attributes.area.size.y) {
   81608:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   8160c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   81610:	429a      	cmp	r2, r3
			clip->SE.y = win->attributes.area.size.y - 1;
   81612:	bfa4      	itt	ge
   81614:	f103 33ff 	addge.w	r3, r3, #4294967295
   81618:	8163      	strhge	r3, [r4, #10]
		if ((clip->NW.x > clip->SE.x) || (clip->NW.y > clip->SE.y)) {
   8161a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   8161e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   81622:	429a      	cmp	r2, r3
   81624:	dc20      	bgt.n	81668 <win_compute_clipping+0xc8>
   81626:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
   8162a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
   8162e:	4288      	cmp	r0, r1
   81630:	dc1e      	bgt.n	81670 <win_compute_clipping+0xd0>
		clip->origin.x += win->attributes.area.pos.x;
   81632:	f8b4 c000 	ldrh.w	ip, [r4]
   81636:	f8b5 8000 	ldrh.w	r8, [r5]
   8163a:	44c4      	add	ip, r8
   8163c:	f8a4 c000 	strh.w	ip, [r4]
		clip->NW.x += win->attributes.area.pos.x;
   81640:	f8b5 c000 	ldrh.w	ip, [r5]
   81644:	4462      	add	r2, ip
   81646:	80a2      	strh	r2, [r4, #4]
		clip->SE.x += win->attributes.area.pos.x;
   81648:	882a      	ldrh	r2, [r5, #0]
   8164a:	4413      	add	r3, r2
   8164c:	8123      	strh	r3, [r4, #8]
		clip->origin.y += win->attributes.area.pos.y;
   8164e:	8863      	ldrh	r3, [r4, #2]
   81650:	886a      	ldrh	r2, [r5, #2]
   81652:	4413      	add	r3, r2
   81654:	8063      	strh	r3, [r4, #2]
		clip->NW.y += win->attributes.area.pos.y;
   81656:	886b      	ldrh	r3, [r5, #2]
   81658:	4418      	add	r0, r3
   8165a:	80e0      	strh	r0, [r4, #6]
		clip->SE.y += win->attributes.area.pos.y;
   8165c:	886b      	ldrh	r3, [r5, #2]
   8165e:	4419      	add	r1, r3
   81660:	8161      	strh	r1, [r4, #10]
	while (win != &win_root) {
   81662:	42b5      	cmp	r5, r6
   81664:	d1ba      	bne.n	815dc <win_compute_clipping+0x3c>
   81666:	e000      	b.n	8166a <win_compute_clipping+0xca>
			return false;
   81668:	2700      	movs	r7, #0
}
   8166a:	4638      	mov	r0, r7
   8166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
   81670:	2700      	movs	r7, #0
   81672:	e7fa      	b.n	8166a <win_compute_clipping+0xca>
   81674:	00081531 	.word	0x00081531
   81678:	20070d20 	.word	0x20070d20

0008167c <win_draw>:
{
   8167c:	b570      	push	{r4, r5, r6, lr}
   8167e:	b084      	sub	sp, #16
   81680:	4604      	mov	r4, r0
   81682:	460d      	mov	r5, r1
	if (!win_compute_clipping(win, dirty_area, &clip)) {
   81684:	aa01      	add	r2, sp, #4
   81686:	4b1a      	ldr	r3, [pc, #104]	; (816f0 <win_draw+0x74>)
   81688:	4798      	blx	r3
   8168a:	b198      	cbz	r0, 816b4 <win_draw+0x38>
	if (win->parent && (win->attributes.behavior
   8168c:	69a3      	ldr	r3, [r4, #24]
   8168e:	b11b      	cbz	r3, 81698 <win_draw+0x1c>
   81690:	7c23      	ldrb	r3, [r4, #16]
   81692:	f013 0f02 	tst.w	r3, #2
   81696:	d109      	bne.n	816ac <win_draw+0x30>
	win_draw_contents(win, &clip);
   81698:	a901      	add	r1, sp, #4
   8169a:	4620      	mov	r0, r4
   8169c:	4b15      	ldr	r3, [pc, #84]	; (816f4 <win_draw+0x78>)
   8169e:	4798      	blx	r3
	while (win != &win_root) {
   816a0:	4b15      	ldr	r3, [pc, #84]	; (816f8 <win_draw+0x7c>)
   816a2:	429c      	cmp	r4, r3
   816a4:	d006      	beq.n	816b4 <win_draw+0x38>
				win_draw_child(win, &clip);
   816a6:	4d15      	ldr	r5, [pc, #84]	; (816fc <win_draw+0x80>)
	while (win != &win_root) {
   816a8:	461e      	mov	r6, r3
   816aa:	e008      	b.n	816be <win_draw+0x42>
		win_draw_parent(win, dirty_area);
   816ac:	4629      	mov	r1, r5
   816ae:	4620      	mov	r0, r4
   816b0:	4b13      	ldr	r3, [pc, #76]	; (81700 <win_draw+0x84>)
   816b2:	4798      	blx	r3
}
   816b4:	b004      	add	sp, #16
   816b6:	bd70      	pop	{r4, r5, r6, pc}
		while (win != win->parent->top_child) {
   816b8:	461c      	mov	r4, r3
	while (win != &win_root) {
   816ba:	42b3      	cmp	r3, r6
   816bc:	d0fa      	beq.n	816b4 <win_draw+0x38>
		clip.origin.x -= win->attributes.area.pos.x;
   816be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   816c2:	8822      	ldrh	r2, [r4, #0]
   816c4:	1a9b      	subs	r3, r3, r2
   816c6:	f8ad 3004 	strh.w	r3, [sp, #4]
		clip.origin.y -= win->attributes.area.pos.y;
   816ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   816ce:	8862      	ldrh	r2, [r4, #2]
   816d0:	1a9b      	subs	r3, r3, r2
   816d2:	f8ad 3006 	strh.w	r3, [sp, #6]
		while (win != win->parent->top_child) {
   816d6:	69a3      	ldr	r3, [r4, #24]
   816d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   816da:	4294      	cmp	r4, r2
   816dc:	d0ec      	beq.n	816b8 <win_draw+0x3c>
			win = win->prev_sibling;
   816de:	69e4      	ldr	r4, [r4, #28]
			if (win->is_mapped) {
   816e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   816e4:	2b00      	cmp	r3, #0
   816e6:	d0f6      	beq.n	816d6 <win_draw+0x5a>
				win_draw_child(win, &clip);
   816e8:	a901      	add	r1, sp, #4
   816ea:	4620      	mov	r0, r4
   816ec:	47a8      	blx	r5
   816ee:	e7f2      	b.n	816d6 <win_draw+0x5a>
   816f0:	000815a1 	.word	0x000815a1
   816f4:	00081239 	.word	0x00081239
   816f8:	20070d20 	.word	0x20070d20
   816fc:	000812b9 	.word	0x000812b9
   81700:	00081705 	.word	0x00081705

00081704 <win_draw_parent>:
{
   81704:	b510      	push	{r4, lr}
   81706:	b082      	sub	sp, #8
   81708:	4602      	mov	r2, r0
	struct win_area area = *dirty_area;
   8170a:	466b      	mov	r3, sp
   8170c:	6808      	ldr	r0, [r1, #0]
   8170e:	6849      	ldr	r1, [r1, #4]
   81710:	c303      	stmia	r3!, {r0, r1}
	if (win_translate_area_to_parent(&area, child->parent)) {
   81712:	6990      	ldr	r0, [r2, #24]
	if (area->pos.x < 0) {
   81714:	f9bd 3000 	ldrsh.w	r3, [sp]
   81718:	2b00      	cmp	r3, #0
   8171a:	db30      	blt.n	8177e <win_draw_parent+0x7a>
	if (area->pos.y < 0) {
   8171c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   81720:	2b00      	cmp	r3, #0
   81722:	db35      	blt.n	81790 <win_draw_parent+0x8c>
	if ((area->pos.x + area->size.x) > parent_area->size.x) {
   81724:	f9bd 2000 	ldrsh.w	r2, [sp]
   81728:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   8172c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   81730:	4413      	add	r3, r2
   81732:	428b      	cmp	r3, r1
		area->size.x = parent_area->size.x - area->pos.x;
   81734:	bfc4      	itt	gt
   81736:	1a89      	subgt	r1, r1, r2
   81738:	f8ad 1004 	strhgt.w	r1, [sp, #4]
	if ((area->pos.y + area->size.y) > parent_area->size.y) {
   8173c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
   81740:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
   81744:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
   81748:	4419      	add	r1, r3
   8174a:	42a1      	cmp	r1, r4
		area->size.y = parent_area->size.y - area->pos.y;
   8174c:	bfc4      	itt	gt
   8174e:	1ae4      	subgt	r4, r4, r3
   81750:	f8ad 4006 	strhgt.w	r4, [sp, #6]
	if ((area->size.x <= 0) || (area->size.y <= 0)) {
   81754:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   81758:	2900      	cmp	r1, #0
   8175a:	dd0e      	ble.n	8177a <win_draw_parent+0x76>
   8175c:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
   81760:	2900      	cmp	r1, #0
   81762:	dd0a      	ble.n	8177a <win_draw_parent+0x76>
	area->pos.x += parent_area->pos.x;
   81764:	8801      	ldrh	r1, [r0, #0]
   81766:	440a      	add	r2, r1
   81768:	f8ad 2000 	strh.w	r2, [sp]
	area->pos.y += parent_area->pos.y;
   8176c:	8842      	ldrh	r2, [r0, #2]
   8176e:	4413      	add	r3, r2
   81770:	f8ad 3002 	strh.w	r3, [sp, #2]
		win_draw(child->parent, &area);
   81774:	4669      	mov	r1, sp
   81776:	4b0b      	ldr	r3, [pc, #44]	; (817a4 <win_draw_parent+0xa0>)
   81778:	4798      	blx	r3
}
   8177a:	b002      	add	sp, #8
   8177c:	bd10      	pop	{r4, pc}
		area->size.x += area->pos.x;
   8177e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   81782:	4413      	add	r3, r2
   81784:	f8ad 3004 	strh.w	r3, [sp, #4]
		area->pos.x = 0;
   81788:	2300      	movs	r3, #0
   8178a:	f8ad 3000 	strh.w	r3, [sp]
   8178e:	e7c5      	b.n	8171c <win_draw_parent+0x18>
		area->size.y += area->pos.y;
   81790:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   81794:	4413      	add	r3, r2
   81796:	f8ad 3006 	strh.w	r3, [sp, #6]
		area->pos.y = 0;
   8179a:	2300      	movs	r3, #0
   8179c:	f8ad 3002 	strh.w	r3, [sp, #2]
   817a0:	e7c0      	b.n	81724 <win_draw_parent+0x20>
   817a2:	bf00      	nop
   817a4:	0008167d 	.word	0x0008167d

000817a8 <win_hide>:
	if (!win->is_mapped) {
   817a8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   817ac:	2b00      	cmp	r3, #0
   817ae:	d02e      	beq.n	8180e <win_hide+0x66>
{
   817b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   817b2:	b083      	sub	sp, #12
   817b4:	4604      	mov	r4, r0
	if (win == &win_root) {
   817b6:	4b16      	ldr	r3, [pc, #88]	; (81810 <win_hide+0x68>)
   817b8:	4298      	cmp	r0, r3
   817ba:	d007      	beq.n	817cc <win_hide+0x24>
		if (win_is_visible(win)) {
   817bc:	4b15      	ldr	r3, [pc, #84]	; (81814 <win_hide+0x6c>)
   817be:	4798      	blx	r3
   817c0:	b9e8      	cbnz	r0, 817fe <win_hide+0x56>
			win->is_mapped = false;
   817c2:	2300      	movs	r3, #0
   817c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   817c8:	b003      	add	sp, #12
   817ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		win->is_mapped = false;
   817cc:	2400      	movs	r4, #0
   817ce:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
		gfx_set_clipping(0, 0, gfx_get_width(), gfx_get_height());
   817d2:	4e11      	ldr	r6, [pc, #68]	; (81818 <win_hide+0x70>)
   817d4:	47b0      	blx	r6
   817d6:	4607      	mov	r7, r0
   817d8:	4d10      	ldr	r5, [pc, #64]	; (8181c <win_hide+0x74>)
   817da:	47a8      	blx	r5
   817dc:	4603      	mov	r3, r0
   817de:	463a      	mov	r2, r7
   817e0:	4621      	mov	r1, r4
   817e2:	4620      	mov	r0, r4
   817e4:	4f0e      	ldr	r7, [pc, #56]	; (81820 <win_hide+0x78>)
   817e6:	47b8      	blx	r7
		gfx_draw_filled_rect(0, 0, gfx_get_width(), gfx_get_height(),
   817e8:	47b0      	blx	r6
   817ea:	4606      	mov	r6, r0
   817ec:	47a8      	blx	r5
   817ee:	9400      	str	r4, [sp, #0]
   817f0:	4603      	mov	r3, r0
   817f2:	4632      	mov	r2, r6
   817f4:	4621      	mov	r1, r4
   817f6:	4620      	mov	r0, r4
   817f8:	4c0a      	ldr	r4, [pc, #40]	; (81824 <win_hide+0x7c>)
   817fa:	47a0      	blx	r4
   817fc:	e7e4      	b.n	817c8 <win_hide+0x20>
			win->is_mapped = false;
   817fe:	2300      	movs	r3, #0
   81800:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			win_draw_parent(win, &win->attributes.area);
   81804:	4621      	mov	r1, r4
   81806:	4620      	mov	r0, r4
   81808:	4b07      	ldr	r3, [pc, #28]	; (81828 <win_hide+0x80>)
   8180a:	4798      	blx	r3
   8180c:	e7dc      	b.n	817c8 <win_hide+0x20>
   8180e:	4770      	bx	lr
   81810:	20070d20 	.word	0x20070d20
   81814:	0008114d 	.word	0x0008114d
   81818:	00080a1d 	.word	0x00080a1d
   8181c:	00080a29 	.word	0x00080a29
   81820:	000809c5 	.word	0x000809c5
   81824:	00080a35 	.word	0x00080a35
   81828:	00081705 	.word	0x00081705

0008182c <win_destroy>:
{
   8182c:	b510      	push	{r4, lr}
   8182e:	4604      	mov	r4, r0
	if (win->is_mapped) {
   81830:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   81834:	b973      	cbnz	r3, 81854 <win_destroy+0x28>
	win_unlink(win);
   81836:	4620      	mov	r0, r4
   81838:	4b08      	ldr	r3, [pc, #32]	; (8185c <win_destroy+0x30>)
   8183a:	4798      	blx	r3
	win_destroy_children(win);
   8183c:	4620      	mov	r0, r4
   8183e:	4b08      	ldr	r3, [pc, #32]	; (81860 <win_destroy+0x34>)
   81840:	4798      	blx	r3
	win_handle_event(win, WIN_EVENT_DESTROY, NULL);
   81842:	2200      	movs	r2, #0
   81844:	2109      	movs	r1, #9
   81846:	4620      	mov	r0, r4
   81848:	4b06      	ldr	r3, [pc, #24]	; (81864 <win_destroy+0x38>)
   8184a:	4798      	blx	r3
	membag_free(win);
   8184c:	4620      	mov	r0, r4
   8184e:	4b06      	ldr	r3, [pc, #24]	; (81868 <win_destroy+0x3c>)
   81850:	4798      	blx	r3
   81852:	bd10      	pop	{r4, pc}
		win_hide(win);
   81854:	4b05      	ldr	r3, [pc, #20]	; (8186c <win_destroy+0x40>)
   81856:	4798      	blx	r3
   81858:	e7ed      	b.n	81836 <win_destroy+0xa>
   8185a:	bf00      	nop
   8185c:	0008115d 	.word	0x0008115d
   81860:	00081351 	.word	0x00081351
   81864:	000811a9 	.word	0x000811a9
   81868:	0008257d 	.word	0x0008257d
   8186c:	000817a9 	.word	0x000817a9

00081870 <win_set_area>:
{
   81870:	b570      	push	{r4, r5, r6, lr}
   81872:	b084      	sub	sp, #16
   81874:	4604      	mov	r4, r0
   81876:	460d      	mov	r5, r1
   81878:	f88d 2007 	strb.w	r2, [sp, #7]
	dirty_area = win->attributes.area;
   8187c:	c803      	ldmia	r0, {r0, r1}
   8187e:	ab04      	add	r3, sp, #16
   81880:	e903 0003 	stmdb	r3, {r0, r1}
	if (attribute_mask & WIN_ATTR_POSITION) {
   81884:	f012 0f01 	tst.w	r2, #1
   81888:	d129      	bne.n	818de <win_set_area+0x6e>
	bool exposed_areas = false;
   8188a:	2600      	movs	r6, #0
	if (attribute_mask & WIN_ATTR_SIZE) {
   8188c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   81890:	f013 0f02 	tst.w	r3, #2
   81894:	d012      	beq.n	818bc <win_set_area+0x4c>
		if ((new_area->size.x < win->attributes.area.size.x) ||
   81896:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
   8189a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   8189e:	429a      	cmp	r2, r3
   818a0:	db25      	blt.n	818ee <win_set_area+0x7e>
   818a2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
   818a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
			exposed_areas = true;
   818aa:	429a      	cmp	r2, r3
   818ac:	bfb8      	it	lt
   818ae:	2601      	movlt	r6, #1
		win->attributes.area.size = new_area->size;
   818b0:	6868      	ldr	r0, [r5, #4]
   818b2:	6060      	str	r0, [r4, #4]
		win_compute_union(&dirty_area, new_area);
   818b4:	4629      	mov	r1, r5
   818b6:	a802      	add	r0, sp, #8
   818b8:	4b10      	ldr	r3, [pc, #64]	; (818fc <win_set_area+0x8c>)
   818ba:	4798      	blx	r3
	win_handle_event(win, WIN_EVENT_ATTRIBUTES, &attribute_mask);
   818bc:	f10d 0207 	add.w	r2, sp, #7
   818c0:	2108      	movs	r1, #8
   818c2:	4620      	mov	r0, r4
   818c4:	4b0e      	ldr	r3, [pc, #56]	; (81900 <win_set_area+0x90>)
   818c6:	4798      	blx	r3
	if (win_is_visible(win)) {
   818c8:	4620      	mov	r0, r4
   818ca:	4b0e      	ldr	r3, [pc, #56]	; (81904 <win_set_area+0x94>)
   818cc:	4798      	blx	r3
   818ce:	b120      	cbz	r0, 818da <win_set_area+0x6a>
		if (exposed_areas) {
   818d0:	b97e      	cbnz	r6, 818f2 <win_set_area+0x82>
			win_draw(win, &dirty_area);
   818d2:	a902      	add	r1, sp, #8
   818d4:	4620      	mov	r0, r4
   818d6:	4b0c      	ldr	r3, [pc, #48]	; (81908 <win_set_area+0x98>)
   818d8:	4798      	blx	r3
}
   818da:	b004      	add	sp, #16
   818dc:	bd70      	pop	{r4, r5, r6, pc}
		win->attributes.area.pos = new_area->pos;
   818de:	6828      	ldr	r0, [r5, #0]
   818e0:	6020      	str	r0, [r4, #0]
		win_compute_union(&dirty_area, new_area);
   818e2:	4629      	mov	r1, r5
   818e4:	a802      	add	r0, sp, #8
   818e6:	4b05      	ldr	r3, [pc, #20]	; (818fc <win_set_area+0x8c>)
   818e8:	4798      	blx	r3
		exposed_areas = true;
   818ea:	2601      	movs	r6, #1
   818ec:	e7ce      	b.n	8188c <win_set_area+0x1c>
			exposed_areas = true;
   818ee:	2601      	movs	r6, #1
   818f0:	e7de      	b.n	818b0 <win_set_area+0x40>
			win_draw_parent(win, &dirty_area);
   818f2:	a902      	add	r1, sp, #8
   818f4:	4620      	mov	r0, r4
   818f6:	4b05      	ldr	r3, [pc, #20]	; (8190c <win_set_area+0x9c>)
   818f8:	4798      	blx	r3
   818fa:	e7ee      	b.n	818da <win_set_area+0x6a>
   818fc:	000814cb 	.word	0x000814cb
   81900:	000811a9 	.word	0x000811a9
   81904:	0008114d 	.word	0x0008114d
   81908:	0008167d 	.word	0x0008167d
   8190c:	00081705 	.word	0x00081705

00081910 <win_set_attributes>:
{
   81910:	b530      	push	{r4, r5, lr}
   81912:	b085      	sub	sp, #20
   81914:	4604      	mov	r4, r0
   81916:	460b      	mov	r3, r1
   81918:	f88d 2007 	strb.w	r2, [sp, #7]
	dirty_area = win->attributes.area;
   8191c:	c803      	ldmia	r0, {r0, r1}
   8191e:	ad04      	add	r5, sp, #16
   81920:	e905 0003 	stmdb	r5, {r0, r1}
	if (attribute_mask & WIN_ATTR_BACKGROUND) {
   81924:	f012 0f04 	tst.w	r2, #4
		win->attributes.background = new_attributes->background;
   81928:	bf1d      	ittte	ne
   8192a:	6899      	ldrne	r1, [r3, #8]
   8192c:	60a1      	strne	r1, [r4, #8]
		needs_redraw = true;
   8192e:	2501      	movne	r5, #1
	bool needs_redraw = false;
   81930:	2500      	moveq	r5, #0
	if (attribute_mask & WIN_ATTR_EVENTHANDLER) {
   81932:	f012 0f08 	tst.w	r2, #8
		win->attributes.event_handler = new_attributes->event_handler;
   81936:	bf1c      	itt	ne
   81938:	68d9      	ldrne	r1, [r3, #12]
   8193a:	60e1      	strne	r1, [r4, #12]
	if (attribute_mask & WIN_ATTR_BEHAVIOR) {
   8193c:	f012 0f10 	tst.w	r2, #16
		win->attributes.behavior = new_attributes->behavior;
   81940:	bf1c      	itt	ne
   81942:	7c19      	ldrbne	r1, [r3, #16]
   81944:	7421      	strbne	r1, [r4, #16]
	if (attribute_mask & WIN_ATTR_CUSTOM) {
   81946:	f012 0f20 	tst.w	r2, #32
		win->attributes.custom = new_attributes->custom;
   8194a:	bf1c      	itt	ne
   8194c:	6959      	ldrne	r1, [r3, #20]
   8194e:	6161      	strne	r1, [r4, #20]
	if (attribute_mask & (WIN_ATTR_POSITION | WIN_ATTR_SIZE)) {
   81950:	f012 0f03 	tst.w	r2, #3
   81954:	d10f      	bne.n	81976 <win_set_attributes+0x66>
		win_handle_event(win, WIN_EVENT_ATTRIBUTES, &attribute_mask);
   81956:	f10d 0207 	add.w	r2, sp, #7
   8195a:	2108      	movs	r1, #8
   8195c:	4620      	mov	r0, r4
   8195e:	4b09      	ldr	r3, [pc, #36]	; (81984 <win_set_attributes+0x74>)
   81960:	4798      	blx	r3
		if (needs_redraw && win_is_visible(win)) {
   81962:	b165      	cbz	r5, 8197e <win_set_attributes+0x6e>
   81964:	4620      	mov	r0, r4
   81966:	4b08      	ldr	r3, [pc, #32]	; (81988 <win_set_attributes+0x78>)
   81968:	4798      	blx	r3
   8196a:	b140      	cbz	r0, 8197e <win_set_attributes+0x6e>
			win_draw(win, &dirty_area);
   8196c:	a902      	add	r1, sp, #8
   8196e:	4620      	mov	r0, r4
   81970:	4b06      	ldr	r3, [pc, #24]	; (8198c <win_set_attributes+0x7c>)
   81972:	4798      	blx	r3
}
   81974:	e003      	b.n	8197e <win_set_attributes+0x6e>
		win_set_area(win, &(new_attributes->area), attribute_mask);
   81976:	4619      	mov	r1, r3
   81978:	4620      	mov	r0, r4
   8197a:	4b05      	ldr	r3, [pc, #20]	; (81990 <win_set_attributes+0x80>)
   8197c:	4798      	blx	r3
}
   8197e:	b005      	add	sp, #20
   81980:	bd30      	pop	{r4, r5, pc}
   81982:	bf00      	nop
   81984:	000811a9 	.word	0x000811a9
   81988:	0008114d 	.word	0x0008114d
   8198c:	0008167d 	.word	0x0008167d
   81990:	00081871 	.word	0x00081871

00081994 <win_redraw>:
{
   81994:	b510      	push	{r4, lr}
   81996:	4604      	mov	r4, r0
	if (win_is_visible(win)) {
   81998:	4b04      	ldr	r3, [pc, #16]	; (819ac <win_redraw+0x18>)
   8199a:	4798      	blx	r3
   8199c:	b900      	cbnz	r0, 819a0 <win_redraw+0xc>
   8199e:	bd10      	pop	{r4, pc}
		win_draw(win, dirty_area);
   819a0:	4621      	mov	r1, r4
   819a2:	4620      	mov	r0, r4
   819a4:	4b02      	ldr	r3, [pc, #8]	; (819b0 <win_redraw+0x1c>)
   819a6:	4798      	blx	r3
}
   819a8:	e7f9      	b.n	8199e <win_redraw+0xa>
   819aa:	bf00      	nop
   819ac:	0008114d 	.word	0x0008114d
   819b0:	0008167d 	.word	0x0008167d

000819b4 <win_show>:
{
   819b4:	b508      	push	{r3, lr}
	if (win->is_mapped) {
   819b6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   819ba:	b103      	cbz	r3, 819be <win_show+0xa>
   819bc:	bd08      	pop	{r3, pc}
	win->is_mapped = true;
   819be:	2301      	movs	r3, #1
   819c0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	win_redraw(win);
   819c4:	4b01      	ldr	r3, [pc, #4]	; (819cc <win_show+0x18>)
   819c6:	4798      	blx	r3
   819c8:	e7f8      	b.n	819bc <win_show+0x8>
   819ca:	bf00      	nop
   819cc:	00081995 	.word	0x00081995

000819d0 <win_is_inside_window>:
{
   819d0:	b510      	push	{r4, lr}
   819d2:	b084      	sub	sp, #16
   819d4:	460c      	mov	r4, r1
	win_compute_clipping(win, &win->attributes.area, &clip);
   819d6:	aa01      	add	r2, sp, #4
   819d8:	4601      	mov	r1, r0
   819da:	4b04      	ldr	r3, [pc, #16]	; (819ec <win_is_inside_window+0x1c>)
   819dc:	4798      	blx	r3
	return win_is_inside_clip(&clip, point);
   819de:	4621      	mov	r1, r4
   819e0:	a801      	add	r0, sp, #4
   819e2:	4b03      	ldr	r3, [pc, #12]	; (819f0 <win_is_inside_window+0x20>)
   819e4:	4798      	blx	r3
}
   819e6:	b004      	add	sp, #16
   819e8:	bd10      	pop	{r4, pc}
   819ea:	bf00      	nop
   819ec:	000815a1 	.word	0x000815a1
   819f0:	00081491 	.word	0x00081491

000819f4 <win_translate_win_to_root>:
	return_pos->x = start_win->attributes.area.pos.x;
   819f4:	f9b0 3000 	ldrsh.w	r3, [r0]
   819f8:	800b      	strh	r3, [r1, #0]
	return_pos->y = start_win->attributes.area.pos.y;
   819fa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   819fe:	804b      	strh	r3, [r1, #2]
	win = start_win->parent;
   81a00:	6983      	ldr	r3, [r0, #24]
	while (win) {
   81a02:	b153      	cbz	r3, 81a1a <win_translate_win_to_root+0x26>
		return_pos->x += win->attributes.area.pos.x;
   81a04:	880a      	ldrh	r2, [r1, #0]
   81a06:	8818      	ldrh	r0, [r3, #0]
   81a08:	4402      	add	r2, r0
   81a0a:	800a      	strh	r2, [r1, #0]
		return_pos->y += win->attributes.area.pos.y;
   81a0c:	884a      	ldrh	r2, [r1, #2]
   81a0e:	8858      	ldrh	r0, [r3, #2]
   81a10:	4402      	add	r2, r0
   81a12:	804a      	strh	r2, [r1, #2]
		win = win->parent;
   81a14:	699b      	ldr	r3, [r3, #24]
	while (win) {
   81a16:	2b00      	cmp	r3, #0
   81a18:	d1f4      	bne.n	81a04 <win_translate_win_to_root+0x10>
   81a1a:	4770      	bx	lr

00081a1c <wtk_rescale_value>:
	Assert(from_scale > 0);
	Assert(value <= from_scale);

	new_value = value;
	new_value *= to_scale;
	new_value /= from_scale;
   81a1c:	fb02 f000 	mul.w	r0, r2, r0
   81a20:	fb90 f0f1 	sdiv	r0, r0, r1

	return new_value;
}
   81a24:	b2c0      	uxtb	r0, r0
   81a26:	4770      	bx	lr

00081a28 <wtk_copy_string>:
{
	Assert(dest);
	Assert(source);

	/* Copy characters, including zero-terminator. */
	while (*source != '\0') {
   81a28:	780b      	ldrb	r3, [r1, #0]
   81a2a:	b12b      	cbz	r3, 81a38 <wtk_copy_string+0x10>
		*dest = *source;
   81a2c:	f800 3b01 	strb.w	r3, [r0], #1
	while (*source != '\0') {
   81a30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   81a34:	2b00      	cmp	r3, #0
   81a36:	d1f9      	bne.n	81a2c <wtk_copy_string+0x4>
		++dest;
		++source;
	}

	/* Copy the terminating zero. */
	*dest = *source;
   81a38:	2300      	movs	r3, #0
   81a3a:	7003      	strb	r3, [r0, #0]
   81a3c:	4770      	bx	lr
	...

00081a40 <wtk_basic_frame_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_basic_frame_handler(struct win_window *win,
		enum win_event_type type, const void *data)
{
   81a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81a42:	4606      	mov	r6, r0
   81a44:	460c      	mov	r4, r1
   81a46:	4617      	mov	r7, r2
	/* Custom data for windows of a widget points back to the widget itself. */
	struct wtk_basic_frame *frame;
	bool should_destroy;
	struct win_clip_region const *clip;

	frame = win_get_custom_data(win);
   81a48:	4b1d      	ldr	r3, [pc, #116]	; (81ac0 <wtk_basic_frame_handler+0x80>)
   81a4a:	4798      	blx	r3
   81a4c:	4605      	mov	r5, r0

	switch (type) {
   81a4e:	2c09      	cmp	r4, #9
   81a50:	d806      	bhi.n	81a60 <wtk_basic_frame_handler+0x20>
   81a52:	e8df f004 	tbb	[pc, r4]
   81a56:	052d      	.short	0x052d
   81a58:	0505051c 	.word	0x0505051c
   81a5c:	13050705 	.word	0x13050705
		 */
		return false;

	default:
		/* Reject unknown event types. */
		return false;
   81a60:	2400      	movs	r4, #0
   81a62:	e026      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
		if (win == frame->win) {
   81a64:	6803      	ldr	r3, [r0, #0]
   81a66:	429e      	cmp	r6, r3
   81a68:	d001      	beq.n	81a6e <wtk_basic_frame_handler+0x2e>
		return true;
   81a6a:	2401      	movs	r4, #1
   81a6c:	e021      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
			if (frame->draw_handler) {
   81a6e:	68c3      	ldr	r3, [r0, #12]
   81a70:	b30b      	cbz	r3, 81ab6 <wtk_basic_frame_handler+0x76>
				frame->draw_handler(win, clip);
   81a72:	4639      	mov	r1, r7
   81a74:	4630      	mov	r0, r6
   81a76:	4798      	blx	r3
		return true;
   81a78:	2401      	movs	r4, #1
   81a7a:	e01a      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
		if (win == frame->win) {
   81a7c:	6803      	ldr	r3, [r0, #0]
   81a7e:	429e      	cmp	r6, r3
		return true;
   81a80:	bf18      	it	ne
   81a82:	2401      	movne	r4, #1
		if (win == frame->win) {
   81a84:	d115      	bne.n	81ab2 <wtk_basic_frame_handler+0x72>
			membag_free(frame);
   81a86:	4b0f      	ldr	r3, [pc, #60]	; (81ac4 <wtk_basic_frame_handler+0x84>)
   81a88:	4798      	blx	r3
		return true;
   81a8a:	2401      	movs	r4, #1
   81a8c:	e011      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
		if (win == frame->win) {
   81a8e:	6803      	ldr	r3, [r0, #0]
   81a90:	429e      	cmp	r6, r3
   81a92:	d001      	beq.n	81a98 <wtk_basic_frame_handler+0x58>
		return false;
   81a94:	2400      	movs	r4, #0
   81a96:	e00c      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
			if (frame->frame_handler) {
   81a98:	6843      	ldr	r3, [r0, #4]
   81a9a:	b173      	cbz	r3, 81aba <wtk_basic_frame_handler+0x7a>
				should_destroy = frame->frame_handler(frame,
   81a9c:	4639      	mov	r1, r7
   81a9e:	4798      	blx	r3
				if (should_destroy) {
   81aa0:	4604      	mov	r4, r0
   81aa2:	b908      	cbnz	r0, 81aa8 <wtk_basic_frame_handler+0x68>
				return true;
   81aa4:	2401      	movs	r4, #1
   81aa6:	e004      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
					win_destroy(frame->win);
   81aa8:	6828      	ldr	r0, [r5, #0]
   81aaa:	4b07      	ldr	r3, [pc, #28]	; (81ac8 <wtk_basic_frame_handler+0x88>)
   81aac:	4798      	blx	r3
   81aae:	e000      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
		return true;
   81ab0:	2401      	movs	r4, #1
	}
}
   81ab2:	4620      	mov	r0, r4
   81ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
   81ab6:	2401      	movs	r4, #1
   81ab8:	e7fb      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
		return false;
   81aba:	2400      	movs	r4, #0
   81abc:	e7f9      	b.n	81ab2 <wtk_basic_frame_handler+0x72>
   81abe:	bf00      	nop
   81ac0:	00081401 	.word	0x00081401
   81ac4:	0008257d 	.word	0x0008257d
   81ac8:	0008182d 	.word	0x0008182d

00081acc <wtk_basic_frame_as_child>:
}
   81acc:	6800      	ldr	r0, [r0, #0]
   81ace:	4770      	bx	lr

00081ad0 <wtk_basic_frame_create>:
struct wtk_basic_frame *wtk_basic_frame_create(struct win_window *parent,
		const struct win_area *area, struct gfx_bitmap *background,
		wtk_basic_frame_draw_handler_t draw_handler,
		wtk_basic_frame_command_handler_t frame_handler,
		void *custom_data)
{
   81ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ad4:	b086      	sub	sp, #24
   81ad6:	4607      	mov	r7, r0
   81ad8:	460d      	mov	r5, r1
   81ada:	4616      	mov	r6, r2
   81adc:	4698      	mov	r8, r3

	Assert(area);
	Assert(parent);

	/* Allocate memory for frame control data. */
	basic_frame = membag_alloc(sizeof(struct wtk_basic_frame));
   81ade:	2010      	movs	r0, #16
   81ae0:	4b15      	ldr	r3, [pc, #84]	; (81b38 <wtk_basic_frame_create+0x68>)
   81ae2:	4798      	blx	r3
	if (!basic_frame) {
   81ae4:	4604      	mov	r4, r0
   81ae6:	b1b8      	cbz	r0, 81b18 <wtk_basic_frame_create+0x48>
		goto outofmem_basic_frame;
	}

	/* Set window attributes */
	basic_frame->frame_handler = frame_handler;
   81ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   81aea:	6043      	str	r3, [r0, #4]
	basic_frame->custom_data = custom_data;
   81aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   81aee:	6083      	str	r3, [r0, #8]
	basic_frame->draw_handler = draw_handler;
   81af0:	f8c0 800c 	str.w	r8, [r0, #12]

	/* Copy area info */
	attr.area = *area;
   81af4:	466b      	mov	r3, sp
   81af6:	6828      	ldr	r0, [r5, #0]
   81af8:	6869      	ldr	r1, [r5, #4]
   81afa:	c303      	stmia	r3!, {r0, r1}
	attr.event_handler = wtk_basic_frame_handler;
   81afc:	4b0f      	ldr	r3, [pc, #60]	; (81b3c <wtk_basic_frame_create+0x6c>)
   81afe:	9303      	str	r3, [sp, #12]
	attr.custom = basic_frame;
   81b00:	9405      	str	r4, [sp, #20]

	/* Set background for window */
	if (background) {
   81b02:	b16e      	cbz	r6, 81b20 <wtk_basic_frame_create+0x50>
		attr.background = background;
   81b04:	9602      	str	r6, [sp, #8]
		attr.behavior = 0;
   81b06:	2300      	movs	r3, #0
   81b08:	f88d 3010 	strb.w	r3, [sp, #16]
		attr.background = NULL;
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
	}

	/* Create the window */
	basic_frame->win = win_create(parent, &attr);
   81b0c:	4669      	mov	r1, sp
   81b0e:	4638      	mov	r0, r7
   81b10:	4b0b      	ldr	r3, [pc, #44]	; (81b40 <wtk_basic_frame_create+0x70>)
   81b12:	4798      	blx	r3
   81b14:	6020      	str	r0, [r4, #0]
	if (!basic_frame->win) {
   81b16:	b148      	cbz	r0, 81b2c <wtk_basic_frame_create+0x5c>
outofmem_win:
	membag_free(basic_frame);

outofmem_basic_frame:
	return NULL;
}
   81b18:	4620      	mov	r0, r4
   81b1a:	b006      	add	sp, #24
   81b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr.background = NULL;
   81b20:	2300      	movs	r3, #0
   81b22:	9302      	str	r3, [sp, #8]
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
   81b24:	2302      	movs	r3, #2
   81b26:	f88d 3010 	strb.w	r3, [sp, #16]
   81b2a:	e7ef      	b.n	81b0c <wtk_basic_frame_create+0x3c>
	membag_free(basic_frame);
   81b2c:	4620      	mov	r0, r4
   81b2e:	4b05      	ldr	r3, [pc, #20]	; (81b44 <wtk_basic_frame_create+0x74>)
   81b30:	4798      	blx	r3
	return NULL;
   81b32:	2400      	movs	r4, #0
   81b34:	e7f0      	b.n	81b18 <wtk_basic_frame_create+0x48>
   81b36:	bf00      	nop
   81b38:	000824fd 	.word	0x000824fd
   81b3c:	00081a41 	.word	0x00081a41
   81b40:	00081405 	.word	0x00081405
   81b44:	0008257d 	.word	0x0008257d

00081b48 <wtk_button_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_button_handler(struct win_window *win,
		enum win_event_type type, void const *data)
{
   81b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81b4c:	b08b      	sub	sp, #44	; 0x2c
   81b4e:	4607      	mov	r7, r0
   81b50:	460e      	mov	r6, r1
   81b52:	4614      	mov	r4, r2
	/* Custom data for windows of a widget points back to the widget itself. */
	struct wtk_button *button
   81b54:	4b59      	ldr	r3, [pc, #356]	; (81cbc <wtk_button_handler+0x174>)
   81b56:	4798      	blx	r3
   81b58:	4605      	mov	r5, r0
		= (struct wtk_button *)win_get_custom_data(win);

	switch (type) {
   81b5a:	2e07      	cmp	r6, #7
   81b5c:	d006      	beq.n	81b6c <wtk_button_handler+0x24>
   81b5e:	2e09      	cmp	r6, #9
   81b60:	f000 80a5 	beq.w	81cae <wtk_button_handler+0x166>
   81b64:	2e00      	cmp	r6, #0
   81b66:	d070      	beq.n	81c4a <wtk_button_handler+0x102>
		return true;
	}

	default:
		/* Reject unknown event types. */
		return false;
   81b68:	2400      	movs	r4, #0
   81b6a:	e06a      	b.n	81c42 <wtk_button_handler+0xfa>
		struct win_area const *area = win_get_area(win);
   81b6c:	4638      	mov	r0, r7
   81b6e:	4b54      	ldr	r3, [pc, #336]	; (81cc0 <wtk_button_handler+0x178>)
   81b70:	4798      	blx	r3
   81b72:	4607      	mov	r7, r0
		switch (button->state) {
   81b74:	7b2b      	ldrb	r3, [r5, #12]
			caption_color = WTK_BUTTON_CAPTION_COLOR;
   81b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81b7a:	f241 0184 	movw	r1, #4228	; 0x1084
   81b7e:	2b01      	cmp	r3, #1
   81b80:	bf18      	it	ne
   81b82:	4611      	movne	r1, r2
   81b84:	9105      	str	r1, [sp, #20]
   81b86:	f241 0284 	movw	r2, #4228	; 0x1084
   81b8a:	f64f 76ff 	movw	r6, #65535	; 0xffff
   81b8e:	2b01      	cmp	r3, #1
   81b90:	bf18      	it	ne
   81b92:	4616      	movne	r6, r2
		gfx_draw_filled_rect(clip->origin.x, clip->origin.y,
   81b94:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   81b98:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   81b9c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   81ba0:	f9b4 0000 	ldrsh.w	r0, [r4]
   81ba4:	9600      	str	r6, [sp, #0]
   81ba6:	f8df 8138 	ldr.w	r8, [pc, #312]	; 81ce0 <wtk_button_handler+0x198>
   81baa:	47c0      	blx	r8
		gfx_draw_rect(clip->origin.x, clip->origin.y,
   81bac:	f9b4 6000 	ldrsh.w	r6, [r4]
   81bb0:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
   81bb4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
   81bb8:	f9b7 b006 	ldrsh.w	fp, [r7, #6]
/*! Generic implementation of gfx_draw_horizontal_line(). */
__always_inline static void gfx_generic_draw_horizontal_line(
		gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
		gfx_color_t color)
{
	gfx_draw_filled_rect(x, y, length, 1, color);
   81bbc:	f04f 0a00 	mov.w	sl, #0
   81bc0:	f8cd a000 	str.w	sl, [sp]
   81bc4:	2301      	movs	r3, #1
   81bc6:	9104      	str	r1, [sp, #16]
   81bc8:	460a      	mov	r2, r1
   81bca:	4649      	mov	r1, r9
   81bcc:	4630      	mov	r0, r6
   81bce:	47c0      	blx	r8
__always_inline static void gfx_generic_draw_rect(gfx_coord_t x,
		gfx_coord_t y, gfx_coord_t width, gfx_coord_t height,
		gfx_color_t color)
{
	gfx_draw_horizontal_line(x, y, width, color);
	gfx_draw_horizontal_line(x, y + height - 1, width, color);
   81bd0:	f109 31ff 	add.w	r1, r9, #4294967295
   81bd4:	4459      	add	r1, fp
	gfx_draw_filled_rect(x, y, length, 1, color);
   81bd6:	f8cd a000 	str.w	sl, [sp]
   81bda:	2301      	movs	r3, #1
   81bdc:	9a04      	ldr	r2, [sp, #16]
   81bde:	b209      	sxth	r1, r1
   81be0:	4630      	mov	r0, r6
   81be2:	47c0      	blx	r8
	gfx_draw_filled_rect(x, y, 1, length, color);
   81be4:	f8cd a000 	str.w	sl, [sp]
   81be8:	465b      	mov	r3, fp
   81bea:	2201      	movs	r2, #1
   81bec:	4649      	mov	r1, r9
   81bee:	4630      	mov	r0, r6
   81bf0:	47c0      	blx	r8
	gfx_draw_vertical_line(x, y, height, color);
	gfx_draw_vertical_line(x + width - 1, y, height, color);
   81bf2:	1e70      	subs	r0, r6, #1
   81bf4:	9904      	ldr	r1, [sp, #16]
   81bf6:	4408      	add	r0, r1
	gfx_draw_filled_rect(x, y, 1, length, color);
   81bf8:	f8cd a000 	str.w	sl, [sp]
   81bfc:	465b      	mov	r3, fp
   81bfe:	2201      	movs	r2, #1
   81c00:	4649      	mov	r1, r9
   81c02:	b200      	sxth	r0, r0
   81c04:	47c0      	blx	r8
				clip->origin.y + (area->size.y / 2),
   81c06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   81c0a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   81c0e:	8863      	ldrh	r3, [r4, #2]
   81c10:	eb03 0262 	add.w	r2, r3, r2, asr #1
				clip->origin.x + (area->size.x / 2),
   81c14:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
   81c18:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   81c1c:	8823      	ldrh	r3, [r4, #0]
   81c1e:	eb03 0161 	add.w	r1, r3, r1, asr #1
		gfx_draw_string_aligned(button->caption,
   81c22:	6868      	ldr	r0, [r5, #4]
   81c24:	2302      	movs	r3, #2
   81c26:	9303      	str	r3, [sp, #12]
   81c28:	2312      	movs	r3, #18
   81c2a:	9302      	str	r3, [sp, #8]
   81c2c:	9b05      	ldr	r3, [sp, #20]
   81c2e:	9301      	str	r3, [sp, #4]
   81c30:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   81c34:	9300      	str	r3, [sp, #0]
   81c36:	4b23      	ldr	r3, [pc, #140]	; (81cc4 <wtk_button_handler+0x17c>)
   81c38:	b212      	sxth	r2, r2
   81c3a:	b209      	sxth	r1, r1
   81c3c:	4c22      	ldr	r4, [pc, #136]	; (81cc8 <wtk_button_handler+0x180>)
   81c3e:	47a0      	blx	r4
		return true;
   81c40:	2401      	movs	r4, #1
	}
}
   81c42:	4620      	mov	r0, r4
   81c44:	b00b      	add	sp, #44	; 0x2c
   81c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (event->type) {
   81c4a:	7ae3      	ldrb	r3, [r4, #11]
   81c4c:	b11b      	cbz	r3, 81c56 <wtk_button_handler+0x10e>
   81c4e:	2b02      	cmp	r3, #2
   81c50:	d00e      	beq.n	81c70 <wtk_button_handler+0x128>
		return true;
   81c52:	2401      	movs	r4, #1
   81c54:	e7f5      	b.n	81c42 <wtk_button_handler+0xfa>
			if (button->state == WTK_BUTTON_NORMAL) {
   81c56:	7b03      	ldrb	r3, [r0, #12]
   81c58:	b10b      	cbz	r3, 81c5e <wtk_button_handler+0x116>
		return true;
   81c5a:	2401      	movs	r4, #1
   81c5c:	e7f1      	b.n	81c42 <wtk_button_handler+0xfa>
				win_grab_pointer(button->container);
   81c5e:	6800      	ldr	r0, [r0, #0]
   81c60:	4b1a      	ldr	r3, [pc, #104]	; (81ccc <wtk_button_handler+0x184>)
   81c62:	4798      	blx	r3
				button->state = WTK_BUTTON_PRESSED;
   81c64:	2401      	movs	r4, #1
   81c66:	732c      	strb	r4, [r5, #12]
				win_redraw(button->container);
   81c68:	6828      	ldr	r0, [r5, #0]
   81c6a:	4b19      	ldr	r3, [pc, #100]	; (81cd0 <wtk_button_handler+0x188>)
   81c6c:	4798      	blx	r3
   81c6e:	e7e8      	b.n	81c42 <wtk_button_handler+0xfa>
			if (button->state == WTK_BUTTON_PRESSED) {
   81c70:	7b03      	ldrb	r3, [r0, #12]
   81c72:	2b01      	cmp	r3, #1
   81c74:	d001      	beq.n	81c7a <wtk_button_handler+0x132>
		return true;
   81c76:	2401      	movs	r4, #1
   81c78:	e7e3      	b.n	81c42 <wtk_button_handler+0xfa>
				win_grab_pointer(NULL);
   81c7a:	2000      	movs	r0, #0
   81c7c:	4b13      	ldr	r3, [pc, #76]	; (81ccc <wtk_button_handler+0x184>)
   81c7e:	4798      	blx	r3
				button->state = WTK_BUTTON_NORMAL;
   81c80:	2300      	movs	r3, #0
   81c82:	732b      	strb	r3, [r5, #12]
				win_redraw(button->container);
   81c84:	6828      	ldr	r0, [r5, #0]
   81c86:	4b12      	ldr	r3, [pc, #72]	; (81cd0 <wtk_button_handler+0x188>)
   81c88:	4798      	blx	r3
				bool isInside = win_is_inside_window
   81c8a:	4621      	mov	r1, r4
   81c8c:	6828      	ldr	r0, [r5, #0]
   81c8e:	4b11      	ldr	r3, [pc, #68]	; (81cd4 <wtk_button_handler+0x18c>)
   81c90:	4798      	blx	r3
				if (isInside) {
   81c92:	4604      	mov	r4, r0
   81c94:	b908      	cbnz	r0, 81c9a <wtk_button_handler+0x152>
		return true;
   81c96:	2401      	movs	r4, #1
   81c98:	e7d3      	b.n	81c42 <wtk_button_handler+0xfa>
					command.sender = button->
   81c9a:	682b      	ldr	r3, [r5, #0]
   81c9c:	9307      	str	r3, [sp, #28]
						= button->
   81c9e:	682b      	ldr	r3, [r5, #0]
   81ca0:	9308      	str	r3, [sp, #32]
					command.data = button->
   81ca2:	68ab      	ldr	r3, [r5, #8]
   81ca4:	9309      	str	r3, [sp, #36]	; 0x24
					win_queue_command_event
   81ca6:	a807      	add	r0, sp, #28
   81ca8:	4b0b      	ldr	r3, [pc, #44]	; (81cd8 <wtk_button_handler+0x190>)
   81caa:	4798      	blx	r3
   81cac:	e7c9      	b.n	81c42 <wtk_button_handler+0xfa>
		membag_free(button->caption);
   81cae:	6840      	ldr	r0, [r0, #4]
   81cb0:	4c0a      	ldr	r4, [pc, #40]	; (81cdc <wtk_button_handler+0x194>)
   81cb2:	47a0      	blx	r4
		membag_free(button);
   81cb4:	4628      	mov	r0, r5
   81cb6:	47a0      	blx	r4
		return true;
   81cb8:	2401      	movs	r4, #1
   81cba:	e7c2      	b.n	81c42 <wtk_button_handler+0xfa>
   81cbc:	00081401 	.word	0x00081401
   81cc0:	000813ff 	.word	0x000813ff
   81cc4:	20070138 	.word	0x20070138
   81cc8:	00080f11 	.word	0x00080f11
   81ccc:	00081465 	.word	0x00081465
   81cd0:	00081995 	.word	0x00081995
   81cd4:	000819d1 	.word	0x000819d1
   81cd8:	00081441 	.word	0x00081441
   81cdc:	0008257d 	.word	0x0008257d
   81ce0:	00080a35 	.word	0x00080a35

00081ce4 <wtk_button_as_child>:
}
   81ce4:	6800      	ldr	r0, [r0, #0]
   81ce6:	4770      	bx	lr

00081ce8 <wtk_button_create>:
 * \return Pointer to button, or NULL if failed.
 */
struct wtk_button *wtk_button_create(struct win_window *parent,
		struct win_area const *area,
		char const *caption, win_command_t command_data)
{
   81ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81cec:	b086      	sub	sp, #24
   81cee:	4607      	mov	r7, r0
   81cf0:	460e      	mov	r6, r1
   81cf2:	4615      	mov	r5, r2
   81cf4:	4698      	mov	r8, r3
	Assert(area);
	Assert(caption);
	Assert(parent);

	/* Allocate memory for button control data. */
	button = membag_alloc(sizeof(struct wtk_button));
   81cf6:	2010      	movs	r0, #16
   81cf8:	4b17      	ldr	r3, [pc, #92]	; (81d58 <wtk_button_create+0x70>)
   81cfa:	4798      	blx	r3
	if (!button) {
   81cfc:	4604      	mov	r4, r0
   81cfe:	b1f8      	cbz	r0, 81d40 <wtk_button_create+0x58>
		goto outofmem_button;
	}

	button->state = WTK_BUTTON_NORMAL;
   81d00:	2300      	movs	r3, #0
   81d02:	7303      	strb	r3, [r0, #12]
	button->command = command_data;
   81d04:	f8c0 8008 	str.w	r8, [r0, #8]

	/* Allocate memory for caption string, and copy text. */
	button->caption = membag_alloc((strlen(caption) + 1) * sizeof(char));
   81d08:	4628      	mov	r0, r5
   81d0a:	4b14      	ldr	r3, [pc, #80]	; (81d5c <wtk_button_create+0x74>)
   81d0c:	4798      	blx	r3
   81d0e:	3001      	adds	r0, #1
   81d10:	4b11      	ldr	r3, [pc, #68]	; (81d58 <wtk_button_create+0x70>)
   81d12:	4798      	blx	r3
   81d14:	6060      	str	r0, [r4, #4]
	if (!button->caption) {
   81d16:	b1d0      	cbz	r0, 81d4e <wtk_button_create+0x66>
		goto outofmem_caption;
	}

	wtk_copy_string(button->caption, caption);
   81d18:	4629      	mov	r1, r5
   81d1a:	4b11      	ldr	r3, [pc, #68]	; (81d60 <wtk_button_create+0x78>)
   81d1c:	4798      	blx	r3

	/* Handling information. */
	attr.event_handler = wtk_button_handler;
   81d1e:	4b11      	ldr	r3, [pc, #68]	; (81d64 <wtk_button_create+0x7c>)
   81d20:	9303      	str	r3, [sp, #12]
	attr.custom = button;
   81d22:	9405      	str	r4, [sp, #20]

	/* Prepare container frame. */
	attr.area = *area;
   81d24:	466b      	mov	r3, sp
   81d26:	6830      	ldr	r0, [r6, #0]
   81d28:	6871      	ldr	r1, [r6, #4]
   81d2a:	c303      	stmia	r3!, {r0, r1}
	attr.background = NULL;
   81d2c:	2300      	movs	r3, #0
   81d2e:	9302      	str	r3, [sp, #8]
	attr.behavior = 0x00;
   81d30:	f88d 3010 	strb.w	r3, [sp, #16]

	button->container = win_create(parent, &attr);
   81d34:	4669      	mov	r1, sp
   81d36:	4638      	mov	r0, r7
   81d38:	4b0b      	ldr	r3, [pc, #44]	; (81d68 <wtk_button_create+0x80>)
   81d3a:	4798      	blx	r3
   81d3c:	6020      	str	r0, [r4, #0]
	if (!button->container) {
   81d3e:	b118      	cbz	r0, 81d48 <wtk_button_create+0x60>
outofmem_caption:
	membag_free(button);

outofmem_button:
	return NULL;
}
   81d40:	4620      	mov	r0, r4
   81d42:	b006      	add	sp, #24
   81d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	membag_free(button->caption);
   81d48:	6860      	ldr	r0, [r4, #4]
   81d4a:	4b08      	ldr	r3, [pc, #32]	; (81d6c <wtk_button_create+0x84>)
   81d4c:	4798      	blx	r3
	membag_free(button);
   81d4e:	4620      	mov	r0, r4
   81d50:	4b06      	ldr	r3, [pc, #24]	; (81d6c <wtk_button_create+0x84>)
   81d52:	4798      	blx	r3
	return NULL;
   81d54:	2400      	movs	r4, #0
   81d56:	e7f3      	b.n	81d40 <wtk_button_create+0x58>
   81d58:	000824fd 	.word	0x000824fd
   81d5c:	0008389d 	.word	0x0008389d
   81d60:	00081a29 	.word	0x00081a29
   81d64:	00081b49 	.word	0x00081b49
   81d68:	00081405 	.word	0x00081405
   81d6c:	0008257d 	.word	0x0008257d

00081d70 <wtk_label_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_label_handler(struct win_window *win,
		enum win_event_type type, void const *data)
{
   81d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81d74:	b085      	sub	sp, #20
   81d76:	4607      	mov	r7, r0
   81d78:	460d      	mov	r5, r1
   81d7a:	4616      	mov	r6, r2
	/* Custom data for windows of a widget points back to the widget itself. */
	struct wtk_label *label = (struct wtk_label *)win_get_custom_data(win);
   81d7c:	4b22      	ldr	r3, [pc, #136]	; (81e08 <wtk_label_handler+0x98>)
   81d7e:	4798      	blx	r3
   81d80:	4604      	mov	r4, r0

	switch (type) {
   81d82:	2d07      	cmp	r5, #7
   81d84:	d003      	beq.n	81d8e <wtk_label_handler+0x1e>
   81d86:	2d09      	cmp	r5, #9
   81d88:	d033      	beq.n	81df2 <wtk_label_handler+0x82>
		 */
		return true;

	default:
		/* Reject unknown event types. */
		return false;
   81d8a:	2500      	movs	r5, #0
   81d8c:	e037      	b.n	81dfe <wtk_label_handler+0x8e>
		struct win_area const *area = win_get_area(win);
   81d8e:	4638      	mov	r0, r7
   81d90:	4b1e      	ldr	r3, [pc, #120]	; (81e0c <wtk_label_handler+0x9c>)
   81d92:	4798      	blx	r3
   81d94:	4607      	mov	r7, r0
		if (label->align_right == false) {
   81d96:	7a25      	ldrb	r5, [r4, #8]
   81d98:	b975      	cbnz	r5, 81db8 <wtk_label_handler+0x48>
			gfx_draw_string(label->caption,
   81d9a:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
   81d9e:	f9b6 1000 	ldrsh.w	r1, [r6]
   81da2:	6860      	ldr	r0, [r4, #4]
   81da4:	8963      	ldrh	r3, [r4, #10]
   81da6:	9301      	str	r3, [sp, #4]
   81da8:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   81dac:	9300      	str	r3, [sp, #0]
   81dae:	4b18      	ldr	r3, [pc, #96]	; (81e10 <wtk_label_handler+0xa0>)
   81db0:	4c18      	ldr	r4, [pc, #96]	; (81e14 <wtk_label_handler+0xa4>)
   81db2:	47a0      	blx	r4
		return true;
   81db4:	2501      	movs	r5, #1
   81db6:	e022      	b.n	81dfe <wtk_label_handler+0x8e>
			gfx_get_string_bounding_box(label->caption,
   81db8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 81e10 <wtk_label_handler+0xa0>
   81dbc:	f10d 030e 	add.w	r3, sp, #14
   81dc0:	aa03      	add	r2, sp, #12
   81dc2:	4641      	mov	r1, r8
   81dc4:	6860      	ldr	r0, [r4, #4]
   81dc6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 81e1c <wtk_label_handler+0xac>
   81dca:	47c8      	blx	r9
			gfx_draw_string(label->caption,
   81dcc:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
					clip->origin.x + area->size.x -
   81dd0:	8831      	ldrh	r1, [r6, #0]
   81dd2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81dd6:	1ac9      	subs	r1, r1, r3
   81dd8:	88bb      	ldrh	r3, [r7, #4]
   81dda:	4419      	add	r1, r3
			gfx_draw_string(label->caption,
   81ddc:	6860      	ldr	r0, [r4, #4]
   81dde:	8963      	ldrh	r3, [r4, #10]
   81de0:	9301      	str	r3, [sp, #4]
   81de2:	f641 63f0 	movw	r3, #7920	; 0x1ef0
   81de6:	9300      	str	r3, [sp, #0]
   81de8:	4643      	mov	r3, r8
   81dea:	b209      	sxth	r1, r1
   81dec:	4c09      	ldr	r4, [pc, #36]	; (81e14 <wtk_label_handler+0xa4>)
   81dee:	47a0      	blx	r4
   81df0:	e005      	b.n	81dfe <wtk_label_handler+0x8e>
		membag_free(label->caption);
   81df2:	6840      	ldr	r0, [r0, #4]
   81df4:	4d08      	ldr	r5, [pc, #32]	; (81e18 <wtk_label_handler+0xa8>)
   81df6:	47a8      	blx	r5
		membag_free(label);
   81df8:	4620      	mov	r0, r4
   81dfa:	47a8      	blx	r5
		return true;
   81dfc:	2501      	movs	r5, #1
	}
}
   81dfe:	4628      	mov	r0, r5
   81e00:	b005      	add	sp, #20
   81e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81e06:	bf00      	nop
   81e08:	00081401 	.word	0x00081401
   81e0c:	000813ff 	.word	0x000813ff
   81e10:	20070138 	.word	0x20070138
   81e14:	00081055 	.word	0x00081055
   81e18:	0008257d 	.word	0x0008257d
   81e1c:	00080ed5 	.word	0x00080ed5

00081e20 <wtk_label_as_child>:
}
   81e20:	6800      	ldr	r0, [r0, #0]
   81e22:	4770      	bx	lr

00081e24 <wtk_label_size_hint>:
 *
 * \retval size   Suggested size for the widget
 * \param caption Pointer to caption string to use for widget.
 */
void wtk_label_size_hint(struct win_point *size, const char *caption)
{
   81e24:	b510      	push	{r4, lr}
   81e26:	4602      	mov	r2, r0
   81e28:	4608      	mov	r0, r1
	Assert(size);
	Assert(caption);

	gfx_get_string_bounding_box(caption, &sysfont, &size->x, &size->y);
   81e2a:	1c93      	adds	r3, r2, #2
   81e2c:	4901      	ldr	r1, [pc, #4]	; (81e34 <wtk_label_size_hint+0x10>)
   81e2e:	4c02      	ldr	r4, [pc, #8]	; (81e38 <wtk_label_size_hint+0x14>)
   81e30:	47a0      	blx	r4
   81e32:	bd10      	pop	{r4, pc}
   81e34:	20070138 	.word	0x20070138
   81e38:	00080ed5 	.word	0x00080ed5

00081e3c <wtk_label_create>:
 */
struct wtk_label *wtk_label_create(struct win_window *parent,
		struct win_area const *area, char const *caption,
		gfx_color_t text_color, struct gfx_bitmap *background,
		bool align_right)
{
   81e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81e40:	b087      	sub	sp, #28
   81e42:	4680      	mov	r8, r0
   81e44:	460e      	mov	r6, r1
   81e46:	4615      	mov	r5, r2
   81e48:	4699      	mov	r9, r3
   81e4a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	Assert(area);
	Assert(caption);
	Assert(parent);

	/* Allocate memory for label control data. */
	label = membag_alloc(sizeof(struct wtk_label));
   81e4c:	200c      	movs	r0, #12
   81e4e:	4b1c      	ldr	r3, [pc, #112]	; (81ec0 <wtk_label_create+0x84>)
   81e50:	4798      	blx	r3
	if (!label) {
   81e52:	4604      	mov	r4, r0
   81e54:	b308      	cbz	r0, 81e9a <wtk_label_create+0x5e>
		goto outofmem_label;
	}

	label->text_color = text_color;
   81e56:	f8a0 900a 	strh.w	r9, [r0, #10]
	label->align_right = align_right;
   81e5a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   81e5e:	7203      	strb	r3, [r0, #8]

	/* Allocate memory for caption string, and copy text. */
	label->caption = membag_alloc((strlen(caption) + 1) * sizeof(char));
   81e60:	4628      	mov	r0, r5
   81e62:	4b18      	ldr	r3, [pc, #96]	; (81ec4 <wtk_label_create+0x88>)
   81e64:	4798      	blx	r3
   81e66:	3001      	adds	r0, #1
   81e68:	4b15      	ldr	r3, [pc, #84]	; (81ec0 <wtk_label_create+0x84>)
   81e6a:	4798      	blx	r3
   81e6c:	6060      	str	r0, [r4, #4]
	if (!label->caption) {
   81e6e:	b308      	cbz	r0, 81eb4 <wtk_label_create+0x78>
		goto outofmem_caption;
	}

	wtk_copy_string(label->caption, caption);
   81e70:	4629      	mov	r1, r5
   81e72:	4b15      	ldr	r3, [pc, #84]	; (81ec8 <wtk_label_create+0x8c>)
   81e74:	4798      	blx	r3
	
	/* Handling information. */
	attr.event_handler = wtk_label_handler;
   81e76:	4b15      	ldr	r3, [pc, #84]	; (81ecc <wtk_label_create+0x90>)
   81e78:	9303      	str	r3, [sp, #12]
	attr.custom = label;
   81e7a:	9405      	str	r4, [sp, #20]

	/* Prepare container frame. */
	attr.area = *area;
   81e7c:	466b      	mov	r3, sp
   81e7e:	6830      	ldr	r0, [r6, #0]
   81e80:	6871      	ldr	r1, [r6, #4]
   81e82:	c303      	stmia	r3!, {r0, r1}
	
	/* Set background for label. */
	if (background) {
   81e84:	b16f      	cbz	r7, 81ea2 <wtk_label_create+0x66>
		attr.background = background;
   81e86:	9702      	str	r7, [sp, #8]
		attr.behavior = 0;
   81e88:	2300      	movs	r3, #0
   81e8a:	f88d 3010 	strb.w	r3, [sp, #16]
	} else {
		attr.background = NULL;
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
	}
	
	label->container = win_create(parent, &attr);
   81e8e:	4669      	mov	r1, sp
   81e90:	4640      	mov	r0, r8
   81e92:	4b0f      	ldr	r3, [pc, #60]	; (81ed0 <wtk_label_create+0x94>)
   81e94:	4798      	blx	r3
   81e96:	6020      	str	r0, [r4, #0]
	if (!label->container) {
   81e98:	b148      	cbz	r0, 81eae <wtk_label_create+0x72>
outofmem_caption:
	membag_free(label);

outofmem_label:
	return NULL;
}
   81e9a:	4620      	mov	r0, r4
   81e9c:	b007      	add	sp, #28
   81e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		attr.background = NULL;
   81ea2:	2300      	movs	r3, #0
   81ea4:	9302      	str	r3, [sp, #8]
		attr.behavior = WIN_BEHAVIOR_REDRAW_PARENT;
   81ea6:	2302      	movs	r3, #2
   81ea8:	f88d 3010 	strb.w	r3, [sp, #16]
   81eac:	e7ef      	b.n	81e8e <wtk_label_create+0x52>
	membag_free(label->caption);
   81eae:	6860      	ldr	r0, [r4, #4]
   81eb0:	4b08      	ldr	r3, [pc, #32]	; (81ed4 <wtk_label_create+0x98>)
   81eb2:	4798      	blx	r3
	membag_free(label);
   81eb4:	4620      	mov	r0, r4
   81eb6:	4b07      	ldr	r3, [pc, #28]	; (81ed4 <wtk_label_create+0x98>)
   81eb8:	4798      	blx	r3
	return NULL;
   81eba:	2400      	movs	r4, #0
   81ebc:	e7ed      	b.n	81e9a <wtk_label_create+0x5e>
   81ebe:	bf00      	nop
   81ec0:	000824fd 	.word	0x000824fd
   81ec4:	0008389d 	.word	0x0008389d
   81ec8:	00081a29 	.word	0x00081a29
   81ecc:	00081d71 	.word	0x00081d71
   81ed0:	00081405 	.word	0x00081405
   81ed4:	0008257d 	.word	0x0008257d

00081ed8 <wtk_progress_bar_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_progress_bar_handler(struct win_window *win,
		enum win_event_type type, void const *data)
{
   81ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81edc:	b087      	sub	sp, #28
   81ede:	4607      	mov	r7, r0
   81ee0:	460c      	mov	r4, r1
   81ee2:	4615      	mov	r5, r2
	struct win_area const *area;
	struct wtk_progress_bar *bar;
	uint8_t position;
	uint8_t option;

	bar = (struct wtk_progress_bar *)win_get_custom_data(win);
   81ee4:	4b4b      	ldr	r3, [pc, #300]	; (82014 <wtk_progress_bar_handler+0x13c>)
   81ee6:	4798      	blx	r3
   81ee8:	4606      	mov	r6, r0

	/* Window receiving the event should be the widget's containing window. */
	Assert(win == bar->container);

	switch (type) {
   81eea:	2c07      	cmp	r4, #7
   81eec:	d004      	beq.n	81ef8 <wtk_progress_bar_handler+0x20>
   81eee:	2c09      	cmp	r4, #9
   81ef0:	f000 8089 	beq.w	82006 <wtk_progress_bar_handler+0x12e>
		 */
		membag_free(bar);
		return true;

	default:
		return false;
   81ef4:	2000      	movs	r0, #0
   81ef6:	e089      	b.n	8200c <wtk_progress_bar_handler+0x134>
		area = win_get_area(win);
   81ef8:	4638      	mov	r0, r7
   81efa:	4b47      	ldr	r3, [pc, #284]	; (82018 <wtk_progress_bar_handler+0x140>)
   81efc:	4798      	blx	r3
   81efe:	4607      	mov	r7, r0
		position = bar->position;
   81f00:	79b3      	ldrb	r3, [r6, #6]
   81f02:	9305      	str	r3, [sp, #20]
		option = bar->option;
   81f04:	79f2      	ldrb	r2, [r6, #7]
   81f06:	9204      	str	r2, [sp, #16]
		gfx_draw_rect(clip->origin.x, clip->origin.y, area->size.x,
   81f08:	f9b5 4000 	ldrsh.w	r4, [r5]
   81f0c:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
   81f10:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   81f14:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
	gfx_draw_filled_rect(x, y, length, 1, color);
   81f18:	f04f 0a00 	mov.w	sl, #0
   81f1c:	f8cd a000 	str.w	sl, [sp]
   81f20:	2301      	movs	r3, #1
   81f22:	9103      	str	r1, [sp, #12]
   81f24:	460a      	mov	r2, r1
   81f26:	4649      	mov	r1, r9
   81f28:	4620      	mov	r0, r4
   81f2a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8201c <wtk_progress_bar_handler+0x144>
   81f2e:	47c0      	blx	r8
	gfx_draw_horizontal_line(x, y + height - 1, width, color);
   81f30:	f109 31ff 	add.w	r1, r9, #4294967295
   81f34:	4459      	add	r1, fp
	gfx_draw_filled_rect(x, y, length, 1, color);
   81f36:	f8cd a000 	str.w	sl, [sp]
   81f3a:	2301      	movs	r3, #1
   81f3c:	9a03      	ldr	r2, [sp, #12]
   81f3e:	b209      	sxth	r1, r1
   81f40:	4620      	mov	r0, r4
   81f42:	47c0      	blx	r8
	gfx_draw_filled_rect(x, y, 1, length, color);
   81f44:	f8cd a000 	str.w	sl, [sp]
   81f48:	465b      	mov	r3, fp
   81f4a:	2201      	movs	r2, #1
   81f4c:	4649      	mov	r1, r9
   81f4e:	4620      	mov	r0, r4
   81f50:	47c0      	blx	r8
	gfx_draw_vertical_line(x + width - 1, y, height, color);
   81f52:	1e60      	subs	r0, r4, #1
   81f54:	9903      	ldr	r1, [sp, #12]
   81f56:	4408      	add	r0, r1
	gfx_draw_filled_rect(x, y, 1, length, color);
   81f58:	f8cd a000 	str.w	sl, [sp]
   81f5c:	465b      	mov	r3, fp
   81f5e:	2201      	movs	r2, #1
   81f60:	4649      	mov	r1, r9
   81f62:	b200      	sxth	r0, r0
   81f64:	47c0      	blx	r8
		if (option & WTK_PROGRESS_BAR_VERTICAL) {
   81f66:	9a04      	ldr	r2, [sp, #16]
   81f68:	f012 0f01 	tst.w	r2, #1
   81f6c:	d026      	beq.n	81fbc <wtk_progress_bar_handler+0xe4>
			gfx_draw_filled_rect(clip->origin.x + 1,
   81f6e:	88ba      	ldrh	r2, [r7, #4]
   81f70:	3a02      	subs	r2, #2
   81f72:	8869      	ldrh	r1, [r5, #2]
   81f74:	3101      	adds	r1, #1
   81f76:	8828      	ldrh	r0, [r5, #0]
   81f78:	3001      	adds	r0, #1
   81f7a:	8933      	ldrh	r3, [r6, #8]
   81f7c:	9300      	str	r3, [sp, #0]
   81f7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
   81f82:	4643      	mov	r3, r8
   81f84:	b212      	sxth	r2, r2
   81f86:	b209      	sxth	r1, r1
   81f88:	b200      	sxth	r0, r0
   81f8a:	4c24      	ldr	r4, [pc, #144]	; (8201c <wtk_progress_bar_handler+0x144>)
   81f8c:	47a0      	blx	r4
			gfx_draw_filled_rect(clip->origin.x + 1,
   81f8e:	fa1f f188 	uxth.w	r1, r8
   81f92:	f5c1 437f 	rsb	r3, r1, #65280	; 0xff00
   81f96:	33fe      	adds	r3, #254	; 0xfe
   81f98:	88fa      	ldrh	r2, [r7, #6]
   81f9a:	4413      	add	r3, r2
   81f9c:	88ba      	ldrh	r2, [r7, #4]
   81f9e:	3a02      	subs	r2, #2
   81fa0:	8868      	ldrh	r0, [r5, #2]
   81fa2:	3001      	adds	r0, #1
   81fa4:	4401      	add	r1, r0
   81fa6:	8828      	ldrh	r0, [r5, #0]
   81fa8:	3001      	adds	r0, #1
   81faa:	8975      	ldrh	r5, [r6, #10]
   81fac:	9500      	str	r5, [sp, #0]
   81fae:	b21b      	sxth	r3, r3
   81fb0:	b212      	sxth	r2, r2
   81fb2:	b209      	sxth	r1, r1
   81fb4:	b200      	sxth	r0, r0
   81fb6:	47a0      	blx	r4
		return true;
   81fb8:	2001      	movs	r0, #1
   81fba:	e027      	b.n	8200c <wtk_progress_bar_handler+0x134>
			gfx_draw_filled_rect(clip->origin.x + 1,
   81fbc:	88fb      	ldrh	r3, [r7, #6]
   81fbe:	3b02      	subs	r3, #2
   81fc0:	79b2      	ldrb	r2, [r6, #6]
   81fc2:	8869      	ldrh	r1, [r5, #2]
   81fc4:	3101      	adds	r1, #1
   81fc6:	8828      	ldrh	r0, [r5, #0]
   81fc8:	3001      	adds	r0, #1
   81fca:	8934      	ldrh	r4, [r6, #8]
   81fcc:	9400      	str	r4, [sp, #0]
   81fce:	b21b      	sxth	r3, r3
   81fd0:	b209      	sxth	r1, r1
   81fd2:	b200      	sxth	r0, r0
   81fd4:	4c11      	ldr	r4, [pc, #68]	; (8201c <wtk_progress_bar_handler+0x144>)
   81fd6:	47a0      	blx	r4
			gfx_draw_filled_rect(clip->origin.x + 1 + position,
   81fd8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   81fdc:	88fb      	ldrh	r3, [r7, #6]
   81fde:	3b02      	subs	r3, #2
   81fe0:	f5c0 427f 	rsb	r2, r0, #65280	; 0xff00
   81fe4:	32fe      	adds	r2, #254	; 0xfe
   81fe6:	88b9      	ldrh	r1, [r7, #4]
   81fe8:	440a      	add	r2, r1
   81fea:	8869      	ldrh	r1, [r5, #2]
   81fec:	3101      	adds	r1, #1
   81fee:	882d      	ldrh	r5, [r5, #0]
   81ff0:	3501      	adds	r5, #1
   81ff2:	4428      	add	r0, r5
   81ff4:	8975      	ldrh	r5, [r6, #10]
   81ff6:	9500      	str	r5, [sp, #0]
   81ff8:	b21b      	sxth	r3, r3
   81ffa:	b212      	sxth	r2, r2
   81ffc:	b209      	sxth	r1, r1
   81ffe:	b200      	sxth	r0, r0
   82000:	47a0      	blx	r4
		return true;
   82002:	2001      	movs	r0, #1
   82004:	e002      	b.n	8200c <wtk_progress_bar_handler+0x134>
		membag_free(bar);
   82006:	4b06      	ldr	r3, [pc, #24]	; (82020 <wtk_progress_bar_handler+0x148>)
   82008:	4798      	blx	r3
		return true;
   8200a:	2001      	movs	r0, #1
	}
}
   8200c:	b007      	add	sp, #28
   8200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82012:	bf00      	nop
   82014:	00081401 	.word	0x00081401
   82018:	000813ff 	.word	0x000813ff
   8201c:	00080a35 	.word	0x00080a35
   82020:	0008257d 	.word	0x0008257d

00082024 <wtk_progress_bar_as_child>:
}
   82024:	6800      	ldr	r0, [r0, #0]
   82026:	4770      	bx	lr

00082028 <wtk_progress_bar_set_value>:
{
   82028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (value != bar->value) {
   8202a:	7943      	ldrb	r3, [r0, #5]
   8202c:	428b      	cmp	r3, r1
   8202e:	d01d      	beq.n	8206c <wtk_progress_bar_set_value+0x44>
   82030:	4604      	mov	r4, r0
   82032:	460d      	mov	r5, r1
		bar->value = value;
   82034:	7161      	strb	r1, [r4, #5]
		option = bar->option;
   82036:	79c6      	ldrb	r6, [r0, #7]
		maximum = bar->maximum;
   82038:	7907      	ldrb	r7, [r0, #4]
		area = win_get_area(bar->container);
   8203a:	6800      	ldr	r0, [r0, #0]
   8203c:	4b0c      	ldr	r3, [pc, #48]	; (82070 <wtk_progress_bar_set_value+0x48>)
   8203e:	4798      	blx	r3
		if (option & WTK_PROGRESS_BAR_VERTICAL) {
   82040:	f016 0f01 	tst.w	r6, #1
			length = area->size.y;
   82044:	bf14      	ite	ne
   82046:	7982      	ldrbne	r2, [r0, #6]
			length = area->size.x;
   82048:	7902      	ldrbeq	r2, [r0, #4]
		length -= 2;
   8204a:	3a02      	subs	r2, #2
   8204c:	b2d2      	uxtb	r2, r2
		if (option & WTK_PROGRESS_BAR_INVERT) {
   8204e:	f016 0f02 	tst.w	r6, #2
			value = maximum - value;
   82052:	bf1c      	itt	ne
   82054:	1b7d      	subne	r5, r7, r5
   82056:	b2ed      	uxtbne	r5, r5
		bar->position = wtk_rescale_value(value, maximum, length);
   82058:	4639      	mov	r1, r7
   8205a:	4628      	mov	r0, r5
   8205c:	4b05      	ldr	r3, [pc, #20]	; (82074 <wtk_progress_bar_set_value+0x4c>)
   8205e:	4798      	blx	r3
   82060:	71a0      	strb	r0, [r4, #6]
		win_redraw(bar->container);
   82062:	6820      	ldr	r0, [r4, #0]
   82064:	4b04      	ldr	r3, [pc, #16]	; (82078 <wtk_progress_bar_set_value+0x50>)
   82066:	4798      	blx	r3
		return true;
   82068:	2001      	movs	r0, #1
   8206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   8206c:	2000      	movs	r0, #0
}
   8206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82070:	000813ff 	.word	0x000813ff
   82074:	00081a1d 	.word	0x00081a1d
   82078:	00081995 	.word	0x00081995

0008207c <wtk_progress_bar_create>:
 */
struct wtk_progress_bar *wtk_progress_bar_create(struct win_window *parent,
		struct win_area const *area, uint8_t maximum, uint8_t value,
		gfx_color_t fill_color, gfx_color_t background_color,
		uint8_t option)
{
   8207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82080:	b087      	sub	sp, #28
   82082:	4680      	mov	r8, r0
   82084:	4689      	mov	r9, r1
   82086:	4617      	mov	r7, r2
   82088:	461d      	mov	r5, r3
   8208a:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
   8208e:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
   82092:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48

	/* Attributes scratchpad. */
	struct win_attributes attr;

	/* Allocate memory for the control data. */
	struct wtk_progress_bar *bar
   82096:	200c      	movs	r0, #12
   82098:	4b1f      	ldr	r3, [pc, #124]	; (82118 <wtk_progress_bar_create+0x9c>)
   8209a:	4798      	blx	r3
		= membag_alloc(sizeof(struct wtk_progress_bar));
	if (!bar) {
   8209c:	4604      	mov	r4, r0
   8209e:	b360      	cbz	r0, 820fa <wtk_progress_bar_create+0x7e>
		goto outofmem_bar;
	}

	/* Initialize the progress bar data. */
	bar->maximum = maximum;
   820a0:	7107      	strb	r7, [r0, #4]
	bar->value = value;
   820a2:	7145      	strb	r5, [r0, #5]
	bar->option = option;
   820a4:	71c6      	strb	r6, [r0, #7]

	/* Set the progress bar's colors and prepare the value for computation
	 * of the bar's end position according to the invert option.
	 */
	if (option & WTK_PROGRESS_BAR_INVERT) {
   820a6:	f016 0f02 	tst.w	r6, #2
   820aa:	d02a      	beq.n	82102 <wtk_progress_bar_create+0x86>
		bar->fill_color = background_color;
   820ac:	f8a0 a008 	strh.w	sl, [r0, #8]
		bar->background_color = fill_color;
   820b0:	f8a0 b00a 	strh.w	fp, [r0, #10]
		value = maximum - value;
   820b4:	1b7d      	subs	r5, r7, r5
   820b6:	b2ed      	uxtb	r5, r5
		bar->fill_color = fill_color;
		bar->background_color = background_color;
	}

	/* Set up handling information. */
	attr.event_handler = wtk_progress_bar_handler;
   820b8:	4b18      	ldr	r3, [pc, #96]	; (8211c <wtk_progress_bar_create+0xa0>)
   820ba:	9303      	str	r3, [sp, #12]
	attr.custom = bar;
   820bc:	9405      	str	r4, [sp, #20]

	/* Do sanity check of specified window area parameters
	 * according to the orientation of the progress bar.
	 */
	attr.area = *area;
   820be:	466b      	mov	r3, sp
   820c0:	f8d9 0000 	ldr.w	r0, [r9]
   820c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   820c8:	c303      	stmia	r3!, {r0, r1}
	Assert(attr.area.size.x > 3);
	Assert(attr.area.size.y > 3);

	if (option & WTK_PROGRESS_BAR_VERTICAL) {
   820ca:	f016 0f01 	tst.w	r6, #1
		Assert(attr.area.size.y < (uint8_t) ~0);
		length = attr.area.size.y;
   820ce:	bf14      	ite	ne
   820d0:	f89d 2006 	ldrbne.w	r2, [sp, #6]
	} else {
		Assert(attr.area.size.x < (uint8_t) ~0);
		length = attr.area.size.x;
   820d4:	f89d 2004 	ldrbeq.w	r2, [sp, #4]
	}

	length -= 2;
   820d8:	3a02      	subs	r2, #2

	/* Set the progress bar's end position. */
	bar->position = wtk_rescale_value(value, maximum, length);
   820da:	b2d2      	uxtb	r2, r2
   820dc:	4639      	mov	r1, r7
   820de:	4628      	mov	r0, r5
   820e0:	4b0f      	ldr	r3, [pc, #60]	; (82120 <wtk_progress_bar_create+0xa4>)
   820e2:	4798      	blx	r3
   820e4:	71a0      	strb	r0, [r4, #6]

	/* All drawing is done in wtk_progress_bar_handler() so no background is
	 * needed.
	 */
	attr.background = NULL;
   820e6:	2300      	movs	r3, #0
   820e8:	9302      	str	r3, [sp, #8]

	/* Since the widget has no transparent areas, the parent does not need
	 * to be redrawn.
	 */
	attr.behavior = 0;
   820ea:	f88d 3010 	strb.w	r3, [sp, #16]

	/* Create a new window for the progress bar. */
	bar->container = win_create(parent, &attr);
   820ee:	4669      	mov	r1, sp
   820f0:	4640      	mov	r0, r8
   820f2:	4b0c      	ldr	r3, [pc, #48]	; (82124 <wtk_progress_bar_create+0xa8>)
   820f4:	4798      	blx	r3
   820f6:	6020      	str	r0, [r4, #0]
	if (!bar->container) {
   820f8:	b140      	cbz	r0, 8210c <wtk_progress_bar_create+0x90>
outofmem_container:
	membag_free(bar);

outofmem_bar:
	return NULL;
}
   820fa:	4620      	mov	r0, r4
   820fc:	b007      	add	sp, #28
   820fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bar->fill_color = fill_color;
   82102:	f8a0 b008 	strh.w	fp, [r0, #8]
		bar->background_color = background_color;
   82106:	f8a0 a00a 	strh.w	sl, [r0, #10]
   8210a:	e7d5      	b.n	820b8 <wtk_progress_bar_create+0x3c>
	membag_free(bar);
   8210c:	4620      	mov	r0, r4
   8210e:	4b06      	ldr	r3, [pc, #24]	; (82128 <wtk_progress_bar_create+0xac>)
   82110:	4798      	blx	r3
	return NULL;
   82112:	2400      	movs	r4, #0
   82114:	e7f1      	b.n	820fa <wtk_progress_bar_create+0x7e>
   82116:	bf00      	nop
   82118:	000824fd 	.word	0x000824fd
   8211c:	00081ed9 	.word	0x00081ed9
   82120:	00081a1d 	.word	0x00081a1d
   82124:	00081405 	.word	0x00081405
   82128:	0008257d 	.word	0x0008257d

0008212c <wtk_slider_handler>:
 *
 * \return True if the event was recognized and accepted.
 */
static bool wtk_slider_handler(struct win_window *win, enum win_event_type type,
		void const *data)
{
   8212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82130:	b091      	sub	sp, #68	; 0x44
   82132:	4607      	mov	r7, r0
   82134:	460d      	mov	r5, r1
   82136:	4616      	mov	r6, r2
	uint8_t new_position;
	struct win_area bg1_draw_area;
	struct win_area bg2_draw_area;
	struct win_area knob_draw_area;

	slider = (struct wtk_slider *)win_get_custom_data(win);
   82138:	4ba8      	ldr	r3, [pc, #672]	; (823dc <wtk_slider_handler+0x2b0>)
   8213a:	4798      	blx	r3
   8213c:	4604      	mov	r4, r0

	/* There should not be other windows in this widget. */
	Assert(win == slider->container);

	switch (type) {
   8213e:	2d07      	cmp	r5, #7
   82140:	d007      	beq.n	82152 <wtk_slider_handler+0x26>
   82142:	2d09      	cmp	r5, #9
   82144:	f000 8144 	beq.w	823d0 <wtk_slider_handler+0x2a4>
   82148:	2d00      	cmp	r5, #0
   8214a:	f000 80d7 	beq.w	822fc <wtk_slider_handler+0x1d0>
		 */
		return true;

	default:
		/* Reject unknown event types. */
		return false;
   8214e:	2500      	movs	r5, #0
   82150:	e0b7      	b.n	822c2 <wtk_slider_handler+0x196>
		area = win_get_area(win);
   82152:	4638      	mov	r0, r7
   82154:	4ba2      	ldr	r3, [pc, #648]	; (823e0 <wtk_slider_handler+0x2b4>)
   82156:	4798      	blx	r3
   82158:	4682      	mov	sl, r0
		option = slider->option;
   8215a:	7b25      	ldrb	r5, [r4, #12]
		if (slider->state == WTK_SLIDER_NORMAL) {
   8215c:	7a23      	ldrb	r3, [r4, #8]
			knob_color = WTK_SLIDER_KNOB_COLOR_MOVING;
   8215e:	2b00      	cmp	r3, #0
   82160:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82164:	bf08      	it	eq
   82166:	23f8      	moveq	r3, #248	; 0xf8
   82168:	9307      	str	r3, [sp, #28]
		knob_draw_area.pos = clip->origin;
   8216a:	aa09      	add	r2, sp, #36	; 0x24
   8216c:	6830      	ldr	r0, [r6, #0]
   8216e:	9009      	str	r0, [sp, #36]	; 0x24
		knob_draw_area.size = area->size;
   82170:	f8da 0004 	ldr.w	r0, [sl, #4]
   82174:	900a      	str	r0, [sp, #40]	; 0x28
		bg1_draw_area = knob_draw_area;
   82176:	ab0b      	add	r3, sp, #44	; 0x2c
   82178:	e892 0003 	ldmia.w	r2, {r0, r1}
   8217c:	e883 0003 	stmia.w	r3, {r0, r1}
		win_inflate_area(&bg1_draw_area, -1);
   82180:	f04f 31ff 	mov.w	r1, #4294967295
   82184:	4618      	mov	r0, r3
   82186:	4b97      	ldr	r3, [pc, #604]	; (823e4 <wtk_slider_handler+0x2b8>)
   82188:	4798      	blx	r3
		bg2_draw_area = bg1_draw_area;
   8218a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   8218e:	9303      	str	r3, [sp, #12]
   82190:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   82194:	4618      	mov	r0, r3
   82196:	9305      	str	r3, [sp, #20]
   82198:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   8219c:	9304      	str	r3, [sp, #16]
   8219e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
   821a2:	461f      	mov	r7, r3
   821a4:	9306      	str	r3, [sp, #24]
		if (option & WTK_SLIDER_VERTICAL) {
   821a6:	f015 0f04 	tst.w	r5, #4
   821aa:	f000 808e 	beq.w	822ca <wtk_slider_handler+0x19e>
			knob_draw_area.pos.y += slider->position + 1;
   821ae:	7ae1      	ldrb	r1, [r4, #11]
   821b0:	b28a      	uxth	r2, r1
   821b2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   821b6:	3301      	adds	r3, #1
   821b8:	4413      	add	r3, r2
   821ba:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			knob_draw_area.size.y = WTK_SLIDER_KNOB_WIDTH;
   821be:	230a      	movs	r3, #10
   821c0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
			bg1_draw_area.size.y = slider->position;
   821c4:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
			bg2_draw_area.pos.y += slider->position +
   821c8:	4603      	mov	r3, r0
   821ca:	330a      	adds	r3, #10
   821cc:	4413      	add	r3, r2
   821ce:	b21b      	sxth	r3, r3
   821d0:	9305      	str	r3, [sp, #20]
			bg2_draw_area.size.y -= slider->position +
   821d2:	f1a7 080a 	sub.w	r8, r7, #10
   821d6:	eba8 0802 	sub.w	r8, r8, r2
   821da:	fa0f f388 	sxth.w	r3, r8
   821de:	9306      	str	r3, [sp, #24]
		gfx_draw_rect(knob_draw_area.pos.x, knob_draw_area.pos.y,
   821e0:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
   821e4:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
   821e8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   821ec:	f9bd b02a 	ldrsh.w	fp, [sp, #42]	; 0x2a
	gfx_draw_filled_rect(x, y, length, 1, color);
   821f0:	2500      	movs	r5, #0
   821f2:	9500      	str	r5, [sp, #0]
   821f4:	2301      	movs	r3, #1
   821f6:	463a      	mov	r2, r7
   821f8:	4649      	mov	r1, r9
   821fa:	4640      	mov	r0, r8
   821fc:	4c7a      	ldr	r4, [pc, #488]	; (823e8 <wtk_slider_handler+0x2bc>)
   821fe:	47a0      	blx	r4
	gfx_draw_horizontal_line(x, y + height - 1, width, color);
   82200:	eb09 010b 	add.w	r1, r9, fp
   82204:	3901      	subs	r1, #1
	gfx_draw_filled_rect(x, y, length, 1, color);
   82206:	9500      	str	r5, [sp, #0]
   82208:	2301      	movs	r3, #1
   8220a:	463a      	mov	r2, r7
   8220c:	b209      	sxth	r1, r1
   8220e:	4640      	mov	r0, r8
   82210:	47a0      	blx	r4
	gfx_draw_filled_rect(x, y, 1, length, color);
   82212:	9500      	str	r5, [sp, #0]
   82214:	465b      	mov	r3, fp
   82216:	2201      	movs	r2, #1
   82218:	4649      	mov	r1, r9
   8221a:	4640      	mov	r0, r8
   8221c:	47a0      	blx	r4
	gfx_draw_vertical_line(x + width - 1, y, height, color);
   8221e:	eb08 0007 	add.w	r0, r8, r7
   82222:	3801      	subs	r0, #1
	gfx_draw_filled_rect(x, y, 1, length, color);
   82224:	9500      	str	r5, [sp, #0]
   82226:	465b      	mov	r3, fp
   82228:	2201      	movs	r2, #1
   8222a:	4649      	mov	r1, r9
   8222c:	b200      	sxth	r0, r0
   8222e:	47a0      	blx	r4
		win_inflate_area(&knob_draw_area, -1);
   82230:	f04f 31ff 	mov.w	r1, #4294967295
   82234:	a809      	add	r0, sp, #36	; 0x24
   82236:	4b6b      	ldr	r3, [pc, #428]	; (823e4 <wtk_slider_handler+0x2b8>)
   82238:	4798      	blx	r3
		gfx_draw_filled_rect(knob_draw_area.pos.x, knob_draw_area.pos.y,
   8223a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
   8223e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   82242:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
   82246:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
   8224a:	9f07      	ldr	r7, [sp, #28]
   8224c:	9700      	str	r7, [sp, #0]
   8224e:	47a0      	blx	r4
		gfx_draw_filled_rect(bg1_draw_area.pos.x, bg1_draw_area.pos.y,
   82250:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
   82254:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   82258:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
   8225c:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	; 0x2c
   82260:	f241 0984 	movw	r9, #4228	; 0x1084
   82264:	f8cd 9000 	str.w	r9, [sp]
   82268:	47a0      	blx	r4
		gfx_draw_filled_rect(bg2_draw_area.pos.x, bg2_draw_area.pos.y,
   8226a:	f8cd 9000 	str.w	r9, [sp]
   8226e:	9b06      	ldr	r3, [sp, #24]
   82270:	9a04      	ldr	r2, [sp, #16]
   82272:	9905      	ldr	r1, [sp, #20]
   82274:	9803      	ldr	r0, [sp, #12]
   82276:	47a0      	blx	r4
		gfx_draw_rect(clip->origin.x,
   82278:	f9b6 7000 	ldrsh.w	r7, [r6]
   8227c:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
   82280:	f9ba 9004 	ldrsh.w	r9, [sl, #4]
   82284:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
	gfx_draw_filled_rect(x, y, length, 1, color);
   82288:	9500      	str	r5, [sp, #0]
   8228a:	2301      	movs	r3, #1
   8228c:	464a      	mov	r2, r9
   8228e:	4631      	mov	r1, r6
   82290:	4638      	mov	r0, r7
   82292:	47a0      	blx	r4
	gfx_draw_horizontal_line(x, y + height - 1, width, color);
   82294:	1e71      	subs	r1, r6, #1
   82296:	4441      	add	r1, r8
	gfx_draw_filled_rect(x, y, length, 1, color);
   82298:	9500      	str	r5, [sp, #0]
   8229a:	2301      	movs	r3, #1
   8229c:	464a      	mov	r2, r9
   8229e:	b209      	sxth	r1, r1
   822a0:	4638      	mov	r0, r7
   822a2:	47a0      	blx	r4
	gfx_draw_filled_rect(x, y, 1, length, color);
   822a4:	9500      	str	r5, [sp, #0]
   822a6:	4643      	mov	r3, r8
   822a8:	2201      	movs	r2, #1
   822aa:	4631      	mov	r1, r6
   822ac:	4638      	mov	r0, r7
   822ae:	47a0      	blx	r4
	gfx_draw_vertical_line(x + width - 1, y, height, color);
   822b0:	1e78      	subs	r0, r7, #1
   822b2:	4448      	add	r0, r9
	gfx_draw_filled_rect(x, y, 1, length, color);
   822b4:	9500      	str	r5, [sp, #0]
   822b6:	4643      	mov	r3, r8
   822b8:	2201      	movs	r2, #1
   822ba:	4631      	mov	r1, r6
   822bc:	b200      	sxth	r0, r0
   822be:	47a0      	blx	r4
		return true;
   822c0:	2501      	movs	r5, #1
	}
}
   822c2:	4628      	mov	r0, r5
   822c4:	b011      	add	sp, #68	; 0x44
   822c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			knob_draw_area.pos.x += slider->position + 1;
   822ca:	7ae1      	ldrb	r1, [r4, #11]
   822cc:	b28a      	uxth	r2, r1
   822ce:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   822d2:	3301      	adds	r3, #1
   822d4:	4413      	add	r3, r2
   822d6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
			knob_draw_area.size.x = WTK_SLIDER_KNOB_WIDTH;
   822da:	230a      	movs	r3, #10
   822dc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
			bg1_draw_area.size.x = slider->position;
   822e0:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
			bg2_draw_area.pos.x += slider->position +
   822e4:	9b03      	ldr	r3, [sp, #12]
   822e6:	330a      	adds	r3, #10
   822e8:	4413      	add	r3, r2
   822ea:	b21b      	sxth	r3, r3
   822ec:	9303      	str	r3, [sp, #12]
			bg2_draw_area.size.x -= slider->position +
   822ee:	9b04      	ldr	r3, [sp, #16]
   822f0:	f1a3 070a 	sub.w	r7, r3, #10
   822f4:	1abf      	subs	r7, r7, r2
   822f6:	b23b      	sxth	r3, r7
   822f8:	9304      	str	r3, [sp, #16]
   822fa:	e771      	b.n	821e0 <wtk_slider_handler+0xb4>
		area = win_get_area(win);
   822fc:	4638      	mov	r0, r7
   822fe:	4b38      	ldr	r3, [pc, #224]	; (823e0 <wtk_slider_handler+0x2b4>)
   82300:	4798      	blx	r3
		option = slider->option;
   82302:	7b25      	ldrb	r5, [r4, #12]
		switch (event->type) {
   82304:	7af3      	ldrb	r3, [r6, #11]
   82306:	2b01      	cmp	r3, #1
   82308:	d01b      	beq.n	82342 <wtk_slider_handler+0x216>
   8230a:	b173      	cbz	r3, 8232a <wtk_slider_handler+0x1fe>
   8230c:	2b02      	cmp	r3, #2
   8230e:	d050      	beq.n	823b2 <wtk_slider_handler+0x286>
		send_command = false;
   82310:	2500      	movs	r5, #0
		if (send_command) {
   82312:	2d00      	cmp	r5, #0
   82314:	d060      	beq.n	823d8 <wtk_slider_handler+0x2ac>
			command.sender = slider->container;
   82316:	6823      	ldr	r3, [r4, #0]
   82318:	930d      	str	r3, [sp, #52]	; 0x34
			command.recipient = slider->container;
   8231a:	6823      	ldr	r3, [r4, #0]
   8231c:	930e      	str	r3, [sp, #56]	; 0x38
			command.data = slider->command;
   8231e:	6923      	ldr	r3, [r4, #16]
   82320:	930f      	str	r3, [sp, #60]	; 0x3c
			win_queue_command_event(&command);
   82322:	a80d      	add	r0, sp, #52	; 0x34
   82324:	4b31      	ldr	r3, [pc, #196]	; (823ec <wtk_slider_handler+0x2c0>)
   82326:	4798      	blx	r3
   82328:	e7cb      	b.n	822c2 <wtk_slider_handler+0x196>
			if (slider->state == WTK_SLIDER_NORMAL) {
   8232a:	7a23      	ldrb	r3, [r4, #8]
   8232c:	2b00      	cmp	r3, #0
   8232e:	d143      	bne.n	823b8 <wtk_slider_handler+0x28c>
				slider->state = WTK_SLIDER_MOVING;
   82330:	2301      	movs	r3, #1
   82332:	7223      	strb	r3, [r4, #8]
				win_grab_pointer(win);
   82334:	4638      	mov	r0, r7
   82336:	4b2e      	ldr	r3, [pc, #184]	; (823f0 <wtk_slider_handler+0x2c4>)
   82338:	4798      	blx	r3
				win_redraw(win);
   8233a:	4638      	mov	r0, r7
   8233c:	4b2d      	ldr	r3, [pc, #180]	; (823f4 <wtk_slider_handler+0x2c8>)
   8233e:	4798      	blx	r3
   82340:	e03a      	b.n	823b8 <wtk_slider_handler+0x28c>
			if (slider->state == WTK_SLIDER_MOVING) {
   82342:	7a23      	ldrb	r3, [r4, #8]
   82344:	2b01      	cmp	r3, #1
   82346:	d137      	bne.n	823b8 <wtk_slider_handler+0x28c>
				if (option & WTK_SLIDER_VERTICAL) {
   82348:	f015 0f04 	tst.w	r5, #4
   8234c:	d022      	beq.n	82394 <wtk_slider_handler+0x268>
					position = event->pos.y - origin.y;
   8234e:	8873      	ldrh	r3, [r6, #2]
   82350:	88e2      	ldrh	r2, [r4, #6]
   82352:	1a9b      	subs	r3, r3, r2
   82354:	b21b      	sxth	r3, r3
					length = area->size.y;
   82356:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
				position -= WTK_SLIDER_KNOB_WIDTH / 2;
   8235a:	1f58      	subs	r0, r3, #5
   8235c:	b280      	uxth	r0, r0
   8235e:	b203      	sxth	r3, r0
				length -= WTK_SLIDER_KNOB_WIDTH;
   82360:	3e0a      	subs	r6, #10
   82362:	b2b6      	uxth	r6, r6
				if (position < 0) {
   82364:	2b00      	cmp	r3, #0
   82366:	db22      	blt.n	823ae <wtk_slider_handler+0x282>
				} else if (position > length) {
   82368:	b232      	sxth	r2, r6
   8236a:	4293      	cmp	r3, r2
   8236c:	dd19      	ble.n	823a2 <wtk_slider_handler+0x276>
					value = slider->maximum;
   8236e:	7a60      	ldrb	r0, [r4, #9]
				if (slider->value != value) {
   82370:	7aa3      	ldrb	r3, [r4, #10]
   82372:	4283      	cmp	r3, r0
   82374:	d020      	beq.n	823b8 <wtk_slider_handler+0x28c>
					slider->value = value;
   82376:	72a0      	strb	r0, [r4, #10]
					new_position = wtk_rescale_value(
   82378:	b2f2      	uxtb	r2, r6
   8237a:	7a61      	ldrb	r1, [r4, #9]
   8237c:	4b1e      	ldr	r3, [pc, #120]	; (823f8 <wtk_slider_handler+0x2cc>)
   8237e:	4798      	blx	r3
					if (option & WTK_SLIDER_CMD_MOVE) {
   82380:	f005 0501 	and.w	r5, r5, #1
					if (new_position != slider->position) {
   82384:	7ae3      	ldrb	r3, [r4, #11]
   82386:	4283      	cmp	r3, r0
   82388:	d0c3      	beq.n	82312 <wtk_slider_handler+0x1e6>
						slider->position = new_position;
   8238a:	72e0      	strb	r0, [r4, #11]
						win_redraw(win);
   8238c:	4638      	mov	r0, r7
   8238e:	4b19      	ldr	r3, [pc, #100]	; (823f4 <wtk_slider_handler+0x2c8>)
   82390:	4798      	blx	r3
   82392:	e7be      	b.n	82312 <wtk_slider_handler+0x1e6>
					position = event->pos.x - origin.x;
   82394:	8833      	ldrh	r3, [r6, #0]
   82396:	88a2      	ldrh	r2, [r4, #4]
   82398:	1a9b      	subs	r3, r3, r2
   8239a:	b21b      	sxth	r3, r3
					length = area->size.x;
   8239c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
   823a0:	e7db      	b.n	8235a <wtk_slider_handler+0x22e>
					value = wtk_rescale_value(position,
   823a2:	7a62      	ldrb	r2, [r4, #9]
   823a4:	b2f1      	uxtb	r1, r6
   823a6:	b2c0      	uxtb	r0, r0
   823a8:	4b13      	ldr	r3, [pc, #76]	; (823f8 <wtk_slider_handler+0x2cc>)
   823aa:	4798      	blx	r3
   823ac:	e7e0      	b.n	82370 <wtk_slider_handler+0x244>
					value = 0;
   823ae:	2000      	movs	r0, #0
   823b0:	e7de      	b.n	82370 <wtk_slider_handler+0x244>
			if (slider->state == WTK_SLIDER_MOVING) {
   823b2:	7a23      	ldrb	r3, [r4, #8]
   823b4:	2b01      	cmp	r3, #1
   823b6:	d001      	beq.n	823bc <wtk_slider_handler+0x290>
		return true;
   823b8:	2501      	movs	r5, #1
   823ba:	e782      	b.n	822c2 <wtk_slider_handler+0x196>
				slider->state = WTK_SLIDER_NORMAL;
   823bc:	2000      	movs	r0, #0
   823be:	7220      	strb	r0, [r4, #8]
				win_grab_pointer(NULL);
   823c0:	4b0b      	ldr	r3, [pc, #44]	; (823f0 <wtk_slider_handler+0x2c4>)
   823c2:	4798      	blx	r3
				win_redraw(win);
   823c4:	4638      	mov	r0, r7
   823c6:	4b0b      	ldr	r3, [pc, #44]	; (823f4 <wtk_slider_handler+0x2c8>)
   823c8:	4798      	blx	r3
				if (option & WTK_SLIDER_CMD_RELEASE) {
   823ca:	f3c5 0540 	ubfx	r5, r5, #1, #1
   823ce:	e7a0      	b.n	82312 <wtk_slider_handler+0x1e6>
		membag_free(slider);
   823d0:	4b0a      	ldr	r3, [pc, #40]	; (823fc <wtk_slider_handler+0x2d0>)
   823d2:	4798      	blx	r3
		return true;
   823d4:	2501      	movs	r5, #1
   823d6:	e774      	b.n	822c2 <wtk_slider_handler+0x196>
		return true;
   823d8:	2501      	movs	r5, #1
   823da:	e772      	b.n	822c2 <wtk_slider_handler+0x196>
   823dc:	00081401 	.word	0x00081401
   823e0:	000813ff 	.word	0x000813ff
   823e4:	00081471 	.word	0x00081471
   823e8:	00080a35 	.word	0x00080a35
   823ec:	00081441 	.word	0x00081441
   823f0:	00081465 	.word	0x00081465
   823f4:	00081995 	.word	0x00081995
   823f8:	00081a1d 	.word	0x00081a1d
   823fc:	0008257d 	.word	0x0008257d

00082400 <wtk_slider_as_child>:
}
   82400:	6800      	ldr	r0, [r0, #0]
   82402:	4770      	bx	lr

00082404 <wtk_slider_get_value>:
	if (slider->option & WTK_SLIDER_INVERT) {
   82404:	7b03      	ldrb	r3, [r0, #12]
   82406:	f013 0f08 	tst.w	r3, #8
   8240a:	d101      	bne.n	82410 <wtk_slider_get_value+0xc>
		return slider->value;
   8240c:	7a80      	ldrb	r0, [r0, #10]
}
   8240e:	4770      	bx	lr
		return slider->maximum - slider->value;
   82410:	7a43      	ldrb	r3, [r0, #9]
   82412:	7a80      	ldrb	r0, [r0, #10]
   82414:	1a18      	subs	r0, r3, r0
   82416:	b2c0      	uxtb	r0, r0
   82418:	4770      	bx	lr
	...

0008241c <wtk_slider_create>:
 * \return Pointer to new slider, if memory allocation was successful.
 */
struct wtk_slider *wtk_slider_create(struct win_window *parent,
		struct win_area const *area, uint8_t maximum, uint8_t value,
		uint8_t option, win_command_t command)
{
   8241c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82420:	b087      	sub	sp, #28
   82422:	4680      	mov	r8, r0
   82424:	4689      	mov	r9, r1
   82426:	4617      	mov	r7, r2
   82428:	461d      	mov	r5, r3
   8242a:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
	Assert(maximum > 0);
	Assert(area);
	Assert(parent);

	/* Allocate memory for the control data. */
	slider = membag_alloc(sizeof(struct wtk_slider));
   8242e:	2014      	movs	r0, #20
   82430:	4b20      	ldr	r3, [pc, #128]	; (824b4 <wtk_slider_create+0x98>)
   82432:	4798      	blx	r3
	if (!slider) {
   82434:	4604      	mov	r4, r0
   82436:	2800      	cmp	r0, #0
   82438:	d032      	beq.n	824a0 <wtk_slider_create+0x84>
		goto outofmem_slider;
	}

	/* Initialize the slider data. */
	slider->state = WTK_SLIDER_NORMAL;
   8243a:	2300      	movs	r3, #0
   8243c:	7203      	strb	r3, [r0, #8]
	slider->maximum = maximum;
   8243e:	7247      	strb	r7, [r0, #9]
	slider->value = value;
	slider->option = option;
   82440:	7306      	strb	r6, [r0, #12]

	/* Invert the initial value if slider is inverted. */
	if (option & WTK_SLIDER_INVERT) {
   82442:	f016 0f08 	tst.w	r6, #8
		value = maximum - value;
   82446:	bf1c      	itt	ne
   82448:	1b7d      	subne	r5, r7, r5
   8244a:	b2ed      	uxtbne	r5, r5
	}

	slider->value = value;
   8244c:	7285      	strb	r5, [r0, #10]

	/* Enforce a non-zero command value, if these are enabled. */
	if (option & (WTK_SLIDER_CMD_MOVE | WTK_SLIDER_CMD_RELEASE)) {
   8244e:	f016 0f03 	tst.w	r6, #3
		Assert(command > 0);
		slider->command = command;
   82452:	bf1c      	itt	ne
   82454:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
   82456:	6103      	strne	r3, [r0, #16]
	}

	/* Set up event handling for the widget window. */
	attr.event_handler = wtk_slider_handler;
   82458:	4b17      	ldr	r3, [pc, #92]	; (824b8 <wtk_slider_create+0x9c>)
   8245a:	9303      	str	r3, [sp, #12]
	attr.custom = slider;
   8245c:	9005      	str	r0, [sp, #20]

	/* Do a sanity check of the specified window area parameters. */
	attr.area = *area;
   8245e:	466b      	mov	r3, sp
   82460:	f8d9 0000 	ldr.w	r0, [r9]
   82464:	f8d9 1004 	ldr.w	r1, [r9, #4]
   82468:	c303      	stmia	r3!, {r0, r1}
	Assert(attr.area.size.x > 0);
	Assert(attr.area.size.y > 0);

	if (option & WTK_SLIDER_VERTICAL) {
   8246a:	f016 0f04 	tst.w	r6, #4
		Assert(attr.area.size.x > 3);
		Assert(attr.area.size.x <= (uint8_t) ~0);
		Assert(attr.area.size.y > WTK_SLIDER_KNOB_WIDTH);
		length = attr.area.size.y;
   8246e:	bf14      	ite	ne
   82470:	f89d 2006 	ldrbne.w	r2, [sp, #6]
	} else {
		Assert(attr.area.size.x > WTK_SLIDER_KNOB_WIDTH);
		Assert(attr.area.size.y <= (uint8_t) ~0);
		Assert(attr.area.size.y > 3);
		length = attr.area.size.x;
   82474:	f89d 2004 	ldrbeq.w	r2, [sp, #4]
	}

	/* Set slider knob position according to initial value. */
	length -= WTK_SLIDER_KNOB_WIDTH;
   82478:	3a0a      	subs	r2, #10
	slider->position = wtk_rescale_value(value, maximum, length);
   8247a:	b2d2      	uxtb	r2, r2
   8247c:	4639      	mov	r1, r7
   8247e:	4628      	mov	r0, r5
   82480:	4b0e      	ldr	r3, [pc, #56]	; (824bc <wtk_slider_create+0xa0>)
   82482:	4798      	blx	r3
   82484:	72e0      	strb	r0, [r4, #11]

	/* All drawing is done in wtk_slider_handler() to reduce overhead.
	 * Slider has no transparent areas, so parent does not need redrawing.
	 */
	attr.background = NULL;
   82486:	2300      	movs	r3, #0
   82488:	9302      	str	r3, [sp, #8]
	attr.behavior = 0;
   8248a:	f88d 3010 	strb.w	r3, [sp, #16]

	/* Create the widget window. */
	slider->container = win_create(parent, &attr);
   8248e:	4669      	mov	r1, sp
   82490:	4640      	mov	r0, r8
   82492:	4b0b      	ldr	r3, [pc, #44]	; (824c0 <wtk_slider_create+0xa4>)
   82494:	4798      	blx	r3
   82496:	6020      	str	r0, [r4, #0]
	if (!slider->container) {
   82498:	b130      	cbz	r0, 824a8 <wtk_slider_create+0x8c>
		goto outofmem_container;
	}

	/* Store absolute position */
	win_translate_win_to_root(slider->container, &slider->root_pos);
   8249a:	1d21      	adds	r1, r4, #4
   8249c:	4b09      	ldr	r3, [pc, #36]	; (824c4 <wtk_slider_create+0xa8>)
   8249e:	4798      	blx	r3
outofmem_container:
	membag_free(slider);

outofmem_slider:
	return NULL;
}
   824a0:	4620      	mov	r0, r4
   824a2:	b007      	add	sp, #28
   824a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	membag_free(slider);
   824a8:	4620      	mov	r0, r4
   824aa:	4b07      	ldr	r3, [pc, #28]	; (824c8 <wtk_slider_create+0xac>)
   824ac:	4798      	blx	r3
	return NULL;
   824ae:	2400      	movs	r4, #0
   824b0:	e7f6      	b.n	824a0 <wtk_slider_create+0x84>
   824b2:	bf00      	nop
   824b4:	000824fd 	.word	0x000824fd
   824b8:	0008212d 	.word	0x0008212d
   824bc:	00081a1d 	.word	0x00081a1d
   824c0:	00081405 	.word	0x00081405
   824c4:	000819f5 	.word	0x000819f5
   824c8:	0008257d 	.word	0x0008257d

000824cc <membag_init>:
 * This function sets up the membags, allocates memory from the memory pool, and
 * initializes them. Any existing allocations are destroyed and all memory pools
 * reset to their initial states.
 */
void membag_init(void)
{
   824cc:	b430      	push	{r4, r5}
	uint8_t i;
	uintptr_t poolptr;

	poolptr = (uintptr_t)membag_pool;
   824ce:	4a09      	ldr	r2, [pc, #36]	; (824f4 <membag_init+0x28>)
   824d0:	4b09      	ldr	r3, [pc, #36]	; (824f8 <membag_init+0x2c>)
   824d2:	f103 0560 	add.w	r5, r3, #96	; 0x60
				membag_list[i].num_blocks);
		membag_list[i].end = poolptr;
		membag_list[i].blocks_free = membag_list[i].num_blocks;

		/* Mark all blocks as free. */
		membag_list[i].allocated = 0;
   824d6:	2400      	movs	r4, #0
		membag_list[i].start = poolptr;
   824d8:	609a      	str	r2, [r3, #8]
				membag_list[i].num_blocks);
   824da:	6859      	ldr	r1, [r3, #4]
		poolptr += (membag_list[i].block_size *
   824dc:	6818      	ldr	r0, [r3, #0]
   824de:	fb00 2201 	mla	r2, r0, r1, r2
		membag_list[i].end = poolptr;
   824e2:	60da      	str	r2, [r3, #12]
		membag_list[i].blocks_free = membag_list[i].num_blocks;
   824e4:	7519      	strb	r1, [r3, #20]
		membag_list[i].allocated = 0;
   824e6:	611c      	str	r4, [r3, #16]
   824e8:	3318      	adds	r3, #24
	for (i = 0; i < ARRAY_LEN(membag_list); i++) {
   824ea:	42ab      	cmp	r3, r5
   824ec:	d1f4      	bne.n	824d8 <membag_init+0xc>
	}
}
   824ee:	bc30      	pop	{r4, r5}
   824f0:	4770      	bx	lr
   824f2:	bf00      	nop
   824f4:	20070d58 	.word	0x20070d58
   824f8:	20070144 	.word	0x20070144

000824fc <membag_alloc>:
 *
 * \return Pointer to the start of an allocated block if one was found in the
 *         Membag pool, NULL if no suitable block was found.
 */
void *membag_alloc(const size_t size)
{
   824fc:	b4f0      	push	{r4, r5, r6, r7}
   824fe:	4b1e      	ldr	r3, [pc, #120]	; (82578 <membag_alloc+0x7c>)
   82500:	f103 0160 	add.w	r1, r3, #96	; 0x60
	uint8_t i;
	struct membag *smallest_bag = NULL;
   82504:	2600      	movs	r6, #0
   82506:	e003      	b.n	82510 <membag_alloc+0x14>
		}

		if (membag_list[i].block_size >= size) {
			if (!smallest_bag ||
					(smallest_bag->block_size > membag_list[i].block_size)) {
				smallest_bag = &membag_list[i];
   82508:	461e      	mov	r6, r3
   8250a:	3318      	adds	r3, #24
	for (i = 0; i < ARRAY_LEN(membag_list); i++) {
   8250c:	4299      	cmp	r1, r3
   8250e:	d00c      	beq.n	8252a <membag_alloc+0x2e>
		if (membag_list[i].blocks_free == 0) {
   82510:	7d1a      	ldrb	r2, [r3, #20]
   82512:	2a00      	cmp	r2, #0
   82514:	d0f9      	beq.n	8250a <membag_alloc+0xe>
		if (membag_list[i].block_size >= size) {
   82516:	681a      	ldr	r2, [r3, #0]
   82518:	4282      	cmp	r2, r0
   8251a:	d3f6      	bcc.n	8250a <membag_alloc+0xe>
			if (!smallest_bag ||
   8251c:	2e00      	cmp	r6, #0
   8251e:	d0f3      	beq.n	82508 <membag_alloc+0xc>
   82520:	6835      	ldr	r5, [r6, #0]
				smallest_bag = &membag_list[i];
   82522:	42aa      	cmp	r2, r5
   82524:	bf38      	it	cc
   82526:	461e      	movcc	r6, r3
   82528:	e7ef      	b.n	8250a <membag_alloc+0xe>
	}

	/* We return the first available block in the bag that has one, and if
	 * there is none, we return NULL.
	 */
	if (smallest_bag) {
   8252a:	b30e      	cbz	r6, 82570 <membag_alloc+0x74>
		/* We know that there is a free block within the membag's
		 * memory, and we simply return the first one available.
		 */
		p = smallest_bag->start;
   8252c:	68b0      	ldr	r0, [r6, #8]

		for (i = 0; i < smallest_bag->num_blocks; i++) {
   8252e:	6871      	ldr	r1, [r6, #4]
   82530:	b301      	cbz	r1, 82574 <membag_alloc+0x78>
			/* Check the allocation byte to see whether the block is
			 * in use. */
			if (!(smallest_bag->allocated & ((uint32_t)1 << i))) {
   82532:	6934      	ldr	r4, [r6, #16]
   82534:	f014 0f01 	tst.w	r4, #1
   82538:	d016      	beq.n	82568 <membag_alloc+0x6c>
				smallest_bag->blocks_free--;

				return (void *)(p);
			}

			p += smallest_bag->block_size;
   8253a:	6835      	ldr	r5, [r6, #0]
   8253c:	2300      	movs	r3, #0
   8253e:	4428      	add	r0, r5
		for (i = 0; i < smallest_bag->num_blocks; i++) {
   82540:	3301      	adds	r3, #1
   82542:	b2db      	uxtb	r3, r3
   82544:	428b      	cmp	r3, r1
   82546:	d211      	bcs.n	8256c <membag_alloc+0x70>
			if (!(smallest_bag->allocated & ((uint32_t)1 << i))) {
   82548:	461f      	mov	r7, r3
   8254a:	fa24 f203 	lsr.w	r2, r4, r3
   8254e:	f012 0f01 	tst.w	r2, #1
   82552:	d1f4      	bne.n	8253e <membag_alloc+0x42>
				smallest_bag->allocated |= ((uint32_t)1 << i);
   82554:	2301      	movs	r3, #1
   82556:	fa03 f707 	lsl.w	r7, r3, r7
   8255a:	433c      	orrs	r4, r7
   8255c:	6134      	str	r4, [r6, #16]
				smallest_bag->blocks_free--;
   8255e:	7d33      	ldrb	r3, [r6, #20]
   82560:	3b01      	subs	r3, #1
   82562:	7533      	strb	r3, [r6, #20]
		}
	}

	/* There is no available memory. Return NULL. */
	return NULL;
}
   82564:	bcf0      	pop	{r4, r5, r6, r7}
   82566:	4770      	bx	lr
			if (!(smallest_bag->allocated & ((uint32_t)1 << i))) {
   82568:	2700      	movs	r7, #0
   8256a:	e7f3      	b.n	82554 <membag_alloc+0x58>
	return NULL;
   8256c:	2000      	movs	r0, #0
   8256e:	e7f9      	b.n	82564 <membag_alloc+0x68>
   82570:	2000      	movs	r0, #0
   82572:	e7f7      	b.n	82564 <membag_alloc+0x68>
   82574:	2000      	movs	r0, #0
   82576:	e7f5      	b.n	82564 <membag_alloc+0x68>
   82578:	20070144 	.word	0x20070144

0008257c <membag_free>:
 *       allocation request may take a variable amount of cycles to complete.
 *
 * \param ptr Pointer to an allocated memory block to free
 */
void membag_free(const void *ptr)
{
   8257c:	b4f0      	push	{r4, r5, r6, r7}
   8257e:	4a11      	ldr	r2, [pc, #68]	; (825c4 <membag_free+0x48>)
	uint8_t i;
	uintptr_t p = (uintptr_t)ptr;
   82580:	2300      	movs	r3, #0
   82582:	e003      	b.n	8258c <membag_free+0x10>
   82584:	3301      	adds	r3, #1
   82586:	3218      	adds	r2, #24
	uint8_t block_index;

	for (i = 0; i < ARRAY_LEN(membag_list); i++) {
   82588:	2b04      	cmp	r3, #4
   8258a:	d019      	beq.n	825c0 <membag_free+0x44>
		if (p >= membag_list[i].start && p < membag_list[i].end) {
   8258c:	6891      	ldr	r1, [r2, #8]
   8258e:	4288      	cmp	r0, r1
   82590:	d3f8      	bcc.n	82584 <membag_free+0x8>
   82592:	68d5      	ldr	r5, [r2, #12]
   82594:	42a8      	cmp	r0, r5
   82596:	d2f5      	bcs.n	82584 <membag_free+0x8>
			block_index = (p - membag_list[i].start) / membag_list[i].block_size;
			
			/* Mark the memory as free. */
			membag_list[i].allocated &= ~((uint32_t)1 << block_index);
   82598:	4a0a      	ldr	r2, [pc, #40]	; (825c4 <membag_free+0x48>)
   8259a:	005d      	lsls	r5, r3, #1
   8259c:	18ee      	adds	r6, r5, r3
   8259e:	00f6      	lsls	r6, r6, #3
   825a0:	1997      	adds	r7, r2, r6
			block_index = (p - membag_list[i].start) / membag_list[i].block_size;
   825a2:	1a43      	subs	r3, r0, r1
   825a4:	5991      	ldr	r1, [r2, r6]
   825a6:	fbb3 f3f1 	udiv	r3, r3, r1
			membag_list[i].allocated &= ~((uint32_t)1 << block_index);
   825aa:	b2db      	uxtb	r3, r3
   825ac:	2101      	movs	r1, #1
   825ae:	fa01 f303 	lsl.w	r3, r1, r3
   825b2:	6939      	ldr	r1, [r7, #16]
   825b4:	ea21 0103 	bic.w	r1, r1, r3
   825b8:	6139      	str	r1, [r7, #16]
			membag_list[i].blocks_free++;
   825ba:	7d3b      	ldrb	r3, [r7, #20]
   825bc:	3301      	adds	r3, #1
   825be:	753b      	strb	r3, [r7, #20]

			return;
		}
	}
}
   825c0:	bcf0      	pop	{r4, r5, r6, r7}
   825c2:	4770      	bx	lr
   825c4:	20070144 	.word	0x20070144

000825c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   825c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   825cc:	b980      	cbnz	r0, 825f0 <_read+0x28>
   825ce:	460c      	mov	r4, r1
   825d0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   825d2:	2a00      	cmp	r2, #0
   825d4:	dd0f      	ble.n	825f6 <_read+0x2e>
   825d6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   825d8:	4e08      	ldr	r6, [pc, #32]	; (825fc <_read+0x34>)
   825da:	4d09      	ldr	r5, [pc, #36]	; (82600 <_read+0x38>)
   825dc:	6830      	ldr	r0, [r6, #0]
   825de:	4621      	mov	r1, r4
   825e0:	682b      	ldr	r3, [r5, #0]
   825e2:	4798      	blx	r3
		ptr++;
   825e4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   825e6:	42bc      	cmp	r4, r7
   825e8:	d1f8      	bne.n	825dc <_read+0x14>
		nChars++;
	}
	return nChars;
}
   825ea:	4640      	mov	r0, r8
   825ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   825f0:	f04f 38ff 	mov.w	r8, #4294967295
   825f4:	e7f9      	b.n	825ea <_read+0x22>
	for (; len > 0; --len) {
   825f6:	4680      	mov	r8, r0
   825f8:	e7f7      	b.n	825ea <_read+0x22>
   825fa:	bf00      	nop
   825fc:	2007146c 	.word	0x2007146c
   82600:	20071464 	.word	0x20071464

00082604 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82604:	3801      	subs	r0, #1
   82606:	2802      	cmp	r0, #2
   82608:	d815      	bhi.n	82636 <_write+0x32>
{
   8260a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8260e:	460e      	mov	r6, r1
   82610:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   82612:	b19a      	cbz	r2, 8263c <_write+0x38>
   82614:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   82616:	f8df 8038 	ldr.w	r8, [pc, #56]	; 82650 <_write+0x4c>
   8261a:	4f0c      	ldr	r7, [pc, #48]	; (8264c <_write+0x48>)
   8261c:	f8d8 0000 	ldr.w	r0, [r8]
   82620:	f815 1b01 	ldrb.w	r1, [r5], #1
   82624:	683b      	ldr	r3, [r7, #0]
   82626:	4798      	blx	r3
   82628:	2800      	cmp	r0, #0
   8262a:	db0a      	blt.n	82642 <_write+0x3e>
   8262c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8262e:	3c01      	subs	r4, #1
   82630:	d1f4      	bne.n	8261c <_write+0x18>
   82632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   82636:	f04f 30ff 	mov.w	r0, #4294967295
   8263a:	4770      	bx	lr
	for (; len != 0; --len) {
   8263c:	4610      	mov	r0, r2
   8263e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   82642:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   82646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8264a:	bf00      	nop
   8264c:	20071468 	.word	0x20071468
   82650:	2007146c 	.word	0x2007146c

00082654 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   82654:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   82656:	4b04      	ldr	r3, [pc, #16]	; (82668 <spi_enable_clock+0x14>)
   82658:	4298      	cmp	r0, r3
   8265a:	d000      	beq.n	8265e <spi_enable_clock+0xa>
   8265c:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8265e:	2018      	movs	r0, #24
   82660:	4b02      	ldr	r3, [pc, #8]	; (8266c <spi_enable_clock+0x18>)
   82662:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   82664:	e7fa      	b.n	8265c <spi_enable_clock+0x8>
   82666:	bf00      	nop
   82668:	40008000 	.word	0x40008000
   8266c:	00082f4d 	.word	0x00082f4d

00082670 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   82670:	6843      	ldr	r3, [r0, #4]
   82672:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   82676:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   82678:	6843      	ldr	r3, [r0, #4]
   8267a:	0409      	lsls	r1, r1, #16
   8267c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   82680:	4319      	orrs	r1, r3
   82682:	6041      	str	r1, [r0, #4]
   82684:	4770      	bx	lr

00082686 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   82686:	6843      	ldr	r3, [r0, #4]
   82688:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8268c:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   8268e:	6843      	ldr	r3, [r0, #4]
   82690:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   82694:	6041      	str	r1, [r0, #4]
   82696:	4770      	bx	lr

00082698 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   82698:	b932      	cbnz	r2, 826a8 <spi_set_clock_polarity+0x10>
   8269a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8269e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826a0:	f023 0301 	bic.w	r3, r3, #1
   826a4:	6303      	str	r3, [r0, #48]	; 0x30
   826a6:	4770      	bx	lr
   826a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   826ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826ae:	f043 0301 	orr.w	r3, r3, #1
   826b2:	6303      	str	r3, [r0, #48]	; 0x30
   826b4:	4770      	bx	lr

000826b6 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   826b6:	b932      	cbnz	r2, 826c6 <spi_set_clock_phase+0x10>
   826b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   826bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826be:	f023 0302 	bic.w	r3, r3, #2
   826c2:	6303      	str	r3, [r0, #48]	; 0x30
   826c4:	4770      	bx	lr
   826c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   826ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826cc:	f043 0302 	orr.w	r3, r3, #2
   826d0:	6303      	str	r3, [r0, #48]	; 0x30
   826d2:	4770      	bx	lr

000826d4 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   826d4:	2a04      	cmp	r2, #4
   826d6:	d003      	beq.n	826e0 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   826d8:	b16a      	cbz	r2, 826f6 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   826da:	2a08      	cmp	r2, #8
   826dc:	d016      	beq.n	8270c <spi_configure_cs_behavior+0x38>
   826de:	4770      	bx	lr
   826e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   826e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826e6:	f023 0308 	bic.w	r3, r3, #8
   826ea:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   826ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826ee:	f043 0304 	orr.w	r3, r3, #4
   826f2:	6303      	str	r3, [r0, #48]	; 0x30
   826f4:	4770      	bx	lr
   826f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   826fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
   826fc:	f023 0308 	bic.w	r3, r3, #8
   82700:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   82702:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82704:	f023 0304 	bic.w	r3, r3, #4
   82708:	6303      	str	r3, [r0, #48]	; 0x30
   8270a:	4770      	bx	lr
   8270c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   82710:	6b03      	ldr	r3, [r0, #48]	; 0x30
   82712:	f043 0308 	orr.w	r3, r3, #8
   82716:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   82718:	e7e1      	b.n	826de <spi_configure_cs_behavior+0xa>

0008271a <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   8271a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8271e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   82724:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   82726:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82728:	431a      	orrs	r2, r3
   8272a:	630a      	str	r2, [r1, #48]	; 0x30
   8272c:	4770      	bx	lr

0008272e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
   8272e:	1e43      	subs	r3, r0, #1
   82730:	4419      	add	r1, r3
   82732:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   82736:	1e43      	subs	r3, r0, #1
   82738:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   8273a:	bf94      	ite	ls
   8273c:	b200      	sxthls	r0, r0
		return -1;
   8273e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   82742:	4770      	bx	lr

00082744 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
   82744:	b172      	cbz	r2, 82764 <spi_set_baudrate_div+0x20>
{
   82746:	b410      	push	{r4}
   82748:	4614      	mov	r4, r2
   8274a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8274e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   82754:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   82756:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   82758:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   8275c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   8275e:	2000      	movs	r0, #0
}
   82760:	bc10      	pop	{r4}
   82762:	4770      	bx	lr
        return -1;
   82764:	f04f 30ff 	mov.w	r0, #4294967295
   82768:	4770      	bx	lr

0008276a <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8276a:	b410      	push	{r4}
   8276c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   82770:	6b08      	ldr	r0, [r1, #48]	; 0x30
   82772:	b280      	uxth	r0, r0
   82774:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   82776:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   82778:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   8277c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   82780:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   82782:	bc10      	pop	{r4}
   82784:	4770      	bx	lr

00082786 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82786:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82788:	23ac      	movs	r3, #172	; 0xac
   8278a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8278c:	680b      	ldr	r3, [r1, #0]
   8278e:	684a      	ldr	r2, [r1, #4]
   82790:	fbb3 f3f2 	udiv	r3, r3, r2
   82794:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82796:	1e5c      	subs	r4, r3, #1
   82798:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8279c:	4294      	cmp	r4, r2
   8279e:	d80b      	bhi.n	827b8 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   827a0:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   827a2:	688b      	ldr	r3, [r1, #8]
   827a4:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   827a6:	f240 2302 	movw	r3, #514	; 0x202
   827aa:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   827ae:	2350      	movs	r3, #80	; 0x50
   827b0:	6003      	str	r3, [r0, #0]

	return 0;
   827b2:	2000      	movs	r0, #0
}
   827b4:	bc10      	pop	{r4}
   827b6:	4770      	bx	lr
		return 1;
   827b8:	2001      	movs	r0, #1
   827ba:	e7fb      	b.n	827b4 <uart_init+0x2e>

000827bc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   827bc:	6943      	ldr	r3, [r0, #20]
   827be:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   827c2:	bf1a      	itte	ne
   827c4:	61c1      	strne	r1, [r0, #28]
	return 0;
   827c6:	2000      	movne	r0, #0
		return 1;
   827c8:	2001      	moveq	r0, #1
}
   827ca:	4770      	bx	lr

000827cc <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   827cc:	6943      	ldr	r3, [r0, #20]
   827ce:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   827d2:	bf1d      	ittte	ne
   827d4:	6983      	ldrne	r3, [r0, #24]
   827d6:	700b      	strbne	r3, [r1, #0]
	return 0;
   827d8:	2000      	movne	r0, #0
		return 1;
   827da:	2001      	moveq	r0, #1
}
   827dc:	4770      	bx	lr

000827de <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   827de:	6943      	ldr	r3, [r0, #20]
   827e0:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   827e4:	bf1d      	ittte	ne
   827e6:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   827ea:	61c1      	strne	r1, [r0, #28]
	return 0;
   827ec:	2000      	movne	r0, #0
		return 1;
   827ee:	2001      	moveq	r0, #1
}
   827f0:	4770      	bx	lr

000827f2 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   827f2:	6943      	ldr	r3, [r0, #20]
   827f4:	f013 0f01 	tst.w	r3, #1
   827f8:	d005      	beq.n	82806 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   827fa:	6983      	ldr	r3, [r0, #24]
   827fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   82800:	600b      	str	r3, [r1, #0]

	return 0;
   82802:	2000      	movs	r0, #0
   82804:	4770      	bx	lr
		return 1;
   82806:	2001      	movs	r0, #1
}
   82808:	4770      	bx	lr

0008280a <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8280a:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8280c:	685a      	ldr	r2, [r3, #4]
   8280e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   82810:	6842      	ldr	r2, [r0, #4]
   82812:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   82814:	685a      	ldr	r2, [r3, #4]
   82816:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   82818:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8281a:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8281c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8281e:	6803      	ldr	r3, [r0, #0]
   82820:	3301      	adds	r3, #1
   82822:	6003      	str	r3, [r0, #0]
   82824:	4770      	bx	lr

00082826 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82826:	6843      	ldr	r3, [r0, #4]
   82828:	6882      	ldr	r2, [r0, #8]
   8282a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8282c:	6883      	ldr	r3, [r0, #8]
   8282e:	6842      	ldr	r2, [r0, #4]
   82830:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   82832:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82834:	685a      	ldr	r2, [r3, #4]
   82836:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82838:	bf04      	itt	eq
   8283a:	6882      	ldreq	r2, [r0, #8]
   8283c:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8283e:	2200      	movs	r2, #0
   82840:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   82842:	681a      	ldr	r2, [r3, #0]
   82844:	3a01      	subs	r2, #1
   82846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82848:	6818      	ldr	r0, [r3, #0]
}
   8284a:	4770      	bx	lr

0008284c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   8284c:	4b06      	ldr	r3, [pc, #24]	; (82868 <pxCurrentTCBConst2>)
   8284e:	6819      	ldr	r1, [r3, #0]
   82850:	6808      	ldr	r0, [r1, #0]
   82852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82856:	f380 8809 	msr	PSP, r0
   8285a:	f04f 0000 	mov.w	r0, #0
   8285e:	f380 8811 	msr	BASEPRI, r0
   82862:	f04e 0e0d 	orr.w	lr, lr, #13
   82866:	4770      	bx	lr

00082868 <pxCurrentTCBConst2>:
   82868:	20071328 	.word	0x20071328

0008286c <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   8286c:	f3ef 8011 	mrs	r0, BASEPRI
   82870:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82874:	f381 8811 	msr	BASEPRI, r1
   82878:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8287a:	2000      	movs	r0, #0

0008287c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8287c:	f380 8811 	msr	BASEPRI, r0
   82880:	4770      	bx	lr
	...

00082884 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   82884:	f3ef 8009 	mrs	r0, PSP
   82888:	4b0c      	ldr	r3, [pc, #48]	; (828bc <pxCurrentTCBConst>)
   8288a:	681a      	ldr	r2, [r3, #0]
   8288c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82890:	6010      	str	r0, [r2, #0]
   82892:	e92d 4008 	stmdb	sp!, {r3, lr}
   82896:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8289a:	f380 8811 	msr	BASEPRI, r0
   8289e:	f000 f8b9 	bl	82a14 <vTaskSwitchContext>
   828a2:	f04f 0000 	mov.w	r0, #0
   828a6:	f380 8811 	msr	BASEPRI, r0
   828aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   828ae:	6819      	ldr	r1, [r3, #0]
   828b0:	6808      	ldr	r0, [r1, #0]
   828b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   828b6:	f380 8809 	msr	PSP, r0
   828ba:	4770      	bx	lr

000828bc <pxCurrentTCBConst>:
   828bc:	20071328 	.word	0x20071328

000828c0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   828c0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   828c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   828c6:	4b05      	ldr	r3, [pc, #20]	; (828dc <SysTick_Handler+0x1c>)
   828c8:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   828ca:	4b05      	ldr	r3, [pc, #20]	; (828e0 <SysTick_Handler+0x20>)
   828cc:	4798      	blx	r3
	{
		vTaskIncrementTick();
   828ce:	4b05      	ldr	r3, [pc, #20]	; (828e4 <SysTick_Handler+0x24>)
   828d0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   828d2:	2000      	movs	r0, #0
   828d4:	4b04      	ldr	r3, [pc, #16]	; (828e8 <SysTick_Handler+0x28>)
   828d6:	4798      	blx	r3
   828d8:	bd08      	pop	{r3, pc}
   828da:	bf00      	nop
   828dc:	e000ed04 	.word	0xe000ed04
   828e0:	0008286d 	.word	0x0008286d
   828e4:	000828ed 	.word	0x000828ed
   828e8:	0008287d 	.word	0x0008287d

000828ec <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   828ec:	4b3d      	ldr	r3, [pc, #244]	; (829e4 <vTaskIncrementTick+0xf8>)
   828ee:	681b      	ldr	r3, [r3, #0]
   828f0:	2b00      	cmp	r3, #0
   828f2:	d16f      	bne.n	829d4 <vTaskIncrementTick+0xe8>
{
   828f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   828f8:	4b3b      	ldr	r3, [pc, #236]	; (829e8 <vTaskIncrementTick+0xfc>)
   828fa:	681a      	ldr	r2, [r3, #0]
   828fc:	3201      	adds	r2, #1
   828fe:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   82900:	681b      	ldr	r3, [r3, #0]
   82902:	b9ab      	cbnz	r3, 82930 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   82904:	4b39      	ldr	r3, [pc, #228]	; (829ec <vTaskIncrementTick+0x100>)
   82906:	681b      	ldr	r3, [r3, #0]
   82908:	681b      	ldr	r3, [r3, #0]
   8290a:	2b00      	cmp	r3, #0
   8290c:	d128      	bne.n	82960 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   8290e:	4b37      	ldr	r3, [pc, #220]	; (829ec <vTaskIncrementTick+0x100>)
   82910:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   82912:	4a37      	ldr	r2, [pc, #220]	; (829f0 <vTaskIncrementTick+0x104>)
   82914:	6810      	ldr	r0, [r2, #0]
   82916:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   82918:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8291a:	4936      	ldr	r1, [pc, #216]	; (829f4 <vTaskIncrementTick+0x108>)
   8291c:	680a      	ldr	r2, [r1, #0]
   8291e:	3201      	adds	r2, #1
   82920:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82922:	681b      	ldr	r3, [r3, #0]
   82924:	681b      	ldr	r3, [r3, #0]
   82926:	b9fb      	cbnz	r3, 82968 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   82928:	f04f 32ff 	mov.w	r2, #4294967295
   8292c:	4b32      	ldr	r3, [pc, #200]	; (829f8 <vTaskIncrementTick+0x10c>)
   8292e:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   82930:	4b2d      	ldr	r3, [pc, #180]	; (829e8 <vTaskIncrementTick+0xfc>)
   82932:	681a      	ldr	r2, [r3, #0]
   82934:	4b30      	ldr	r3, [pc, #192]	; (829f8 <vTaskIncrementTick+0x10c>)
   82936:	681b      	ldr	r3, [r3, #0]
   82938:	429a      	cmp	r2, r3
   8293a:	d350      	bcc.n	829de <vTaskIncrementTick+0xf2>
   8293c:	4b2b      	ldr	r3, [pc, #172]	; (829ec <vTaskIncrementTick+0x100>)
   8293e:	681b      	ldr	r3, [r3, #0]
   82940:	681b      	ldr	r3, [r3, #0]
   82942:	b1cb      	cbz	r3, 82978 <vTaskIncrementTick+0x8c>
   82944:	4b29      	ldr	r3, [pc, #164]	; (829ec <vTaskIncrementTick+0x100>)
   82946:	681b      	ldr	r3, [r3, #0]
   82948:	68db      	ldr	r3, [r3, #12]
   8294a:	68dc      	ldr	r4, [r3, #12]
   8294c:	6863      	ldr	r3, [r4, #4]
   8294e:	4a26      	ldr	r2, [pc, #152]	; (829e8 <vTaskIncrementTick+0xfc>)
   82950:	6812      	ldr	r2, [r2, #0]
   82952:	4293      	cmp	r3, r2
   82954:	d816      	bhi.n	82984 <vTaskIncrementTick+0x98>
   82956:	4e29      	ldr	r6, [pc, #164]	; (829fc <vTaskIncrementTick+0x110>)
   82958:	4f29      	ldr	r7, [pc, #164]	; (82a00 <vTaskIncrementTick+0x114>)
   8295a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 82a10 <vTaskIncrementTick+0x124>
   8295e:	e02f      	b.n	829c0 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   82960:	4b28      	ldr	r3, [pc, #160]	; (82a04 <vTaskIncrementTick+0x118>)
   82962:	4798      	blx	r3
   82964:	bf00      	nop
   82966:	e7fd      	b.n	82964 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82968:	4b20      	ldr	r3, [pc, #128]	; (829ec <vTaskIncrementTick+0x100>)
   8296a:	681b      	ldr	r3, [r3, #0]
   8296c:	68db      	ldr	r3, [r3, #12]
   8296e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82970:	685a      	ldr	r2, [r3, #4]
   82972:	4b21      	ldr	r3, [pc, #132]	; (829f8 <vTaskIncrementTick+0x10c>)
   82974:	601a      	str	r2, [r3, #0]
   82976:	e7db      	b.n	82930 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   82978:	f04f 32ff 	mov.w	r2, #4294967295
   8297c:	4b1e      	ldr	r3, [pc, #120]	; (829f8 <vTaskIncrementTick+0x10c>)
   8297e:	601a      	str	r2, [r3, #0]
   82980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82984:	4a1c      	ldr	r2, [pc, #112]	; (829f8 <vTaskIncrementTick+0x10c>)
   82986:	6013      	str	r3, [r2, #0]
   82988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8298c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8298e:	683b      	ldr	r3, [r7, #0]
   82990:	4298      	cmp	r0, r3
   82992:	bf88      	it	hi
   82994:	6038      	strhi	r0, [r7, #0]
   82996:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8299a:	4629      	mov	r1, r5
   8299c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   829a0:	4b19      	ldr	r3, [pc, #100]	; (82a08 <vTaskIncrementTick+0x11c>)
   829a2:	4798      	blx	r3
   829a4:	4b11      	ldr	r3, [pc, #68]	; (829ec <vTaskIncrementTick+0x100>)
   829a6:	681b      	ldr	r3, [r3, #0]
   829a8:	681b      	ldr	r3, [r3, #0]
   829aa:	2b00      	cmp	r3, #0
   829ac:	d0e4      	beq.n	82978 <vTaskIncrementTick+0x8c>
   829ae:	4b0f      	ldr	r3, [pc, #60]	; (829ec <vTaskIncrementTick+0x100>)
   829b0:	681b      	ldr	r3, [r3, #0]
   829b2:	68db      	ldr	r3, [r3, #12]
   829b4:	68dc      	ldr	r4, [r3, #12]
   829b6:	6863      	ldr	r3, [r4, #4]
   829b8:	4a0b      	ldr	r2, [pc, #44]	; (829e8 <vTaskIncrementTick+0xfc>)
   829ba:	6812      	ldr	r2, [r2, #0]
   829bc:	4293      	cmp	r3, r2
   829be:	d8e1      	bhi.n	82984 <vTaskIncrementTick+0x98>
   829c0:	1d25      	adds	r5, r4, #4
   829c2:	4628      	mov	r0, r5
   829c4:	47b0      	blx	r6
   829c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   829c8:	2b00      	cmp	r3, #0
   829ca:	d0df      	beq.n	8298c <vTaskIncrementTick+0xa0>
   829cc:	f104 0018 	add.w	r0, r4, #24
   829d0:	47b0      	blx	r6
   829d2:	e7db      	b.n	8298c <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   829d4:	4a0d      	ldr	r2, [pc, #52]	; (82a0c <vTaskIncrementTick+0x120>)
   829d6:	6813      	ldr	r3, [r2, #0]
   829d8:	3301      	adds	r3, #1
   829da:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   829dc:	4770      	bx	lr
   829de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829e2:	bf00      	nop
   829e4:	2007139c 	.word	0x2007139c
   829e8:	200713ac 	.word	0x200713ac
   829ec:	2007132c 	.word	0x2007132c
   829f0:	20071330 	.word	0x20071330
   829f4:	200713a8 	.word	0x200713a8
   829f8:	200701a4 	.word	0x200701a4
   829fc:	00082827 	.word	0x00082827
   82a00:	200713a0 	.word	0x200713a0
   82a04:	0008286d 	.word	0x0008286d
   82a08:	0008280b 	.word	0x0008280b
   82a0c:	20071398 	.word	0x20071398
   82a10:	20071334 	.word	0x20071334

00082a14 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82a14:	4b21      	ldr	r3, [pc, #132]	; (82a9c <vTaskSwitchContext+0x88>)
   82a16:	681b      	ldr	r3, [r3, #0]
   82a18:	b9eb      	cbnz	r3, 82a56 <vTaskSwitchContext+0x42>
{
   82a1a:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   82a1c:	4b20      	ldr	r3, [pc, #128]	; (82aa0 <vTaskSwitchContext+0x8c>)
   82a1e:	681b      	ldr	r3, [r3, #0]
   82a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82a24:	009b      	lsls	r3, r3, #2
   82a26:	4a1f      	ldr	r2, [pc, #124]	; (82aa4 <vTaskSwitchContext+0x90>)
   82a28:	58d3      	ldr	r3, [r2, r3]
   82a2a:	b9c3      	cbnz	r3, 82a5e <vTaskSwitchContext+0x4a>
   82a2c:	4b1c      	ldr	r3, [pc, #112]	; (82aa0 <vTaskSwitchContext+0x8c>)
   82a2e:	681b      	ldr	r3, [r3, #0]
   82a30:	b16b      	cbz	r3, 82a4e <vTaskSwitchContext+0x3a>
   82a32:	4a1b      	ldr	r2, [pc, #108]	; (82aa0 <vTaskSwitchContext+0x8c>)
   82a34:	491b      	ldr	r1, [pc, #108]	; (82aa4 <vTaskSwitchContext+0x90>)
   82a36:	6813      	ldr	r3, [r2, #0]
   82a38:	3b01      	subs	r3, #1
   82a3a:	6013      	str	r3, [r2, #0]
   82a3c:	6813      	ldr	r3, [r2, #0]
   82a3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82a42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   82a46:	b953      	cbnz	r3, 82a5e <vTaskSwitchContext+0x4a>
   82a48:	6813      	ldr	r3, [r2, #0]
   82a4a:	2b00      	cmp	r3, #0
   82a4c:	d1f3      	bne.n	82a36 <vTaskSwitchContext+0x22>
   82a4e:	4b16      	ldr	r3, [pc, #88]	; (82aa8 <vTaskSwitchContext+0x94>)
   82a50:	4798      	blx	r3
   82a52:	bf00      	nop
   82a54:	e7fd      	b.n	82a52 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   82a56:	2201      	movs	r2, #1
   82a58:	4b14      	ldr	r3, [pc, #80]	; (82aac <vTaskSwitchContext+0x98>)
   82a5a:	601a      	str	r2, [r3, #0]
   82a5c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   82a5e:	4b10      	ldr	r3, [pc, #64]	; (82aa0 <vTaskSwitchContext+0x8c>)
   82a60:	681b      	ldr	r3, [r3, #0]
   82a62:	4a10      	ldr	r2, [pc, #64]	; (82aa4 <vTaskSwitchContext+0x90>)
   82a64:	0099      	lsls	r1, r3, #2
   82a66:	18c8      	adds	r0, r1, r3
   82a68:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   82a6c:	6844      	ldr	r4, [r0, #4]
   82a6e:	6864      	ldr	r4, [r4, #4]
   82a70:	6044      	str	r4, [r0, #4]
   82a72:	4419      	add	r1, r3
   82a74:	4602      	mov	r2, r0
   82a76:	3208      	adds	r2, #8
   82a78:	4294      	cmp	r4, r2
   82a7a:	d009      	beq.n	82a90 <vTaskSwitchContext+0x7c>
   82a7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82a80:	4a08      	ldr	r2, [pc, #32]	; (82aa4 <vTaskSwitchContext+0x90>)
   82a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   82a86:	685b      	ldr	r3, [r3, #4]
   82a88:	68da      	ldr	r2, [r3, #12]
   82a8a:	4b09      	ldr	r3, [pc, #36]	; (82ab0 <vTaskSwitchContext+0x9c>)
   82a8c:	601a      	str	r2, [r3, #0]
   82a8e:	bd10      	pop	{r4, pc}
   82a90:	6860      	ldr	r0, [r4, #4]
   82a92:	4a04      	ldr	r2, [pc, #16]	; (82aa4 <vTaskSwitchContext+0x90>)
   82a94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   82a98:	6050      	str	r0, [r2, #4]
   82a9a:	e7ef      	b.n	82a7c <vTaskSwitchContext+0x68>
   82a9c:	2007139c 	.word	0x2007139c
   82aa0:	200713a0 	.word	0x200713a0
   82aa4:	20071334 	.word	0x20071334
   82aa8:	0008286d 	.word	0x0008286d
   82aac:	200713a4 	.word	0x200713a4
   82ab0:	20071328 	.word	0x20071328

00082ab4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82ab4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82ab6:	480e      	ldr	r0, [pc, #56]	; (82af0 <sysclk_init+0x3c>)
   82ab8:	4b0e      	ldr	r3, [pc, #56]	; (82af4 <sysclk_init+0x40>)
   82aba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82abc:	213e      	movs	r1, #62	; 0x3e
   82abe:	2000      	movs	r0, #0
   82ac0:	4b0d      	ldr	r3, [pc, #52]	; (82af8 <sysclk_init+0x44>)
   82ac2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82ac4:	4c0d      	ldr	r4, [pc, #52]	; (82afc <sysclk_init+0x48>)
   82ac6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82ac8:	2800      	cmp	r0, #0
   82aca:	d0fc      	beq.n	82ac6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82acc:	4b0c      	ldr	r3, [pc, #48]	; (82b00 <sysclk_init+0x4c>)
   82ace:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82ad0:	4a0c      	ldr	r2, [pc, #48]	; (82b04 <sysclk_init+0x50>)
   82ad2:	4b0d      	ldr	r3, [pc, #52]	; (82b08 <sysclk_init+0x54>)
   82ad4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82ad6:	4c0d      	ldr	r4, [pc, #52]	; (82b0c <sysclk_init+0x58>)
   82ad8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82ada:	2800      	cmp	r0, #0
   82adc:	d0fc      	beq.n	82ad8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82ade:	2010      	movs	r0, #16
   82ae0:	4b0b      	ldr	r3, [pc, #44]	; (82b10 <sysclk_init+0x5c>)
   82ae2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82ae4:	4b0b      	ldr	r3, [pc, #44]	; (82b14 <sysclk_init+0x60>)
   82ae6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82ae8:	4801      	ldr	r0, [pc, #4]	; (82af0 <sysclk_init+0x3c>)
   82aea:	4b02      	ldr	r3, [pc, #8]	; (82af4 <sysclk_init+0x40>)
   82aec:	4798      	blx	r3
   82aee:	bd10      	pop	{r4, pc}
   82af0:	0501bd00 	.word	0x0501bd00
   82af4:	200700b1 	.word	0x200700b1
   82af8:	00082ec9 	.word	0x00082ec9
   82afc:	00082f1d 	.word	0x00082f1d
   82b00:	00082f2d 	.word	0x00082f2d
   82b04:	200d3f01 	.word	0x200d3f01
   82b08:	400e0600 	.word	0x400e0600
   82b0c:	00082f3d 	.word	0x00082f3d
   82b10:	00082e65 	.word	0x00082e65
   82b14:	0008303d 	.word	0x0008303d

00082b18 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82b18:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82b1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82b1e:	4b1e      	ldr	r3, [pc, #120]	; (82b98 <board_init+0x80>)
   82b20:	605a      	str	r2, [r3, #4]
   82b22:	200b      	movs	r0, #11
   82b24:	4c1d      	ldr	r4, [pc, #116]	; (82b9c <board_init+0x84>)
   82b26:	47a0      	blx	r4
   82b28:	200c      	movs	r0, #12
   82b2a:	47a0      	blx	r4
   82b2c:	200d      	movs	r0, #13
   82b2e:	47a0      	blx	r4
   82b30:	200e      	movs	r0, #14
   82b32:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82b34:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82b38:	203b      	movs	r0, #59	; 0x3b
   82b3a:	4c19      	ldr	r4, [pc, #100]	; (82ba0 <board_init+0x88>)
   82b3c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82b3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82b42:	2055      	movs	r0, #85	; 0x55
   82b44:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82b46:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82b4a:	2056      	movs	r0, #86	; 0x56
   82b4c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82b4e:	4915      	ldr	r1, [pc, #84]	; (82ba4 <board_init+0x8c>)
   82b50:	2068      	movs	r0, #104	; 0x68
   82b52:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82b54:	4914      	ldr	r1, [pc, #80]	; (82ba8 <board_init+0x90>)
   82b56:	205c      	movs	r0, #92	; 0x5c
   82b58:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82b5a:	4a14      	ldr	r2, [pc, #80]	; (82bac <board_init+0x94>)
   82b5c:	f44f 7140 	mov.w	r1, #768	; 0x300
   82b60:	4813      	ldr	r0, [pc, #76]	; (82bb0 <board_init+0x98>)
   82b62:	4b14      	ldr	r3, [pc, #80]	; (82bb4 <board_init+0x9c>)
   82b64:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   82b66:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b6a:	2019      	movs	r0, #25
   82b6c:	47a0      	blx	r4
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   82b6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b72:	201a      	movs	r0, #26
   82b74:	47a0      	blx	r4
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   82b76:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b7a:	201b      	movs	r0, #27
   82b7c:	47a0      	blx	r4
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   82b7e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b82:	201c      	movs	r0, #28
   82b84:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82b86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b8a:	202b      	movs	r0, #43	; 0x2b
   82b8c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82b8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b92:	202a      	movs	r0, #42	; 0x2a
   82b94:	47a0      	blx	r4
   82b96:	bd10      	pop	{r4, pc}
   82b98:	400e1a50 	.word	0x400e1a50
   82b9c:	00082f4d 	.word	0x00082f4d
   82ba0:	00082c59 	.word	0x00082c59
   82ba4:	28000079 	.word	0x28000079
   82ba8:	28000001 	.word	0x28000001
   82bac:	08000001 	.word	0x08000001
   82bb0:	400e0e00 	.word	0x400e0e00
   82bb4:	00082d29 	.word	0x00082d29

00082bb8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82bb8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82bba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82bbe:	d016      	beq.n	82bee <pio_set_peripheral+0x36>
   82bc0:	d80b      	bhi.n	82bda <pio_set_peripheral+0x22>
   82bc2:	b149      	cbz	r1, 82bd8 <pio_set_peripheral+0x20>
   82bc4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82bc8:	d105      	bne.n	82bd6 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82bca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82bcc:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82bce:	400b      	ands	r3, r1
   82bd0:	ea23 0302 	bic.w	r3, r3, r2
   82bd4:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82bd6:	6042      	str	r2, [r0, #4]
   82bd8:	4770      	bx	lr
	switch (ul_type) {
   82bda:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82bde:	d0fb      	beq.n	82bd8 <pio_set_peripheral+0x20>
   82be0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82be4:	d0f8      	beq.n	82bd8 <pio_set_peripheral+0x20>
   82be6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82bea:	d1f4      	bne.n	82bd6 <pio_set_peripheral+0x1e>
   82bec:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   82bee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82bf0:	4313      	orrs	r3, r2
   82bf2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82bf4:	e7ef      	b.n	82bd6 <pio_set_peripheral+0x1e>

00082bf6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82bf6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82bf8:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82bfc:	bf14      	ite	ne
   82bfe:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82c00:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82c02:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82c06:	bf14      	ite	ne
   82c08:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   82c0a:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   82c0c:	f012 0f02 	tst.w	r2, #2
   82c10:	d107      	bne.n	82c22 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   82c12:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82c16:	bf18      	it	ne
   82c18:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   82c1c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82c1e:	6001      	str	r1, [r0, #0]
   82c20:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   82c22:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82c26:	e7f9      	b.n	82c1c <pio_set_input+0x26>

00082c28 <pio_set_output>:
{
   82c28:	b410      	push	{r4}
   82c2a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82c2c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82c2e:	b944      	cbnz	r4, 82c42 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   82c30:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   82c32:	b143      	cbz	r3, 82c46 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82c34:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   82c36:	b942      	cbnz	r2, 82c4a <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   82c38:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   82c3a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82c3c:	6001      	str	r1, [r0, #0]
}
   82c3e:	bc10      	pop	{r4}
   82c40:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   82c42:	6641      	str	r1, [r0, #100]	; 0x64
   82c44:	e7f5      	b.n	82c32 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   82c46:	6541      	str	r1, [r0, #84]	; 0x54
   82c48:	e7f5      	b.n	82c36 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   82c4a:	6301      	str	r1, [r0, #48]	; 0x30
   82c4c:	e7f5      	b.n	82c3a <pio_set_output+0x12>

00082c4e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82c4e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82c50:	4770      	bx	lr

00082c52 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82c52:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82c54:	4770      	bx	lr
	...

00082c58 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82c58:	b570      	push	{r4, r5, r6, lr}
   82c5a:	b082      	sub	sp, #8
   82c5c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82c5e:	0943      	lsrs	r3, r0, #5
   82c60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82c64:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82c68:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82c6a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82c6e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82c72:	d031      	beq.n	82cd8 <pio_configure_pin+0x80>
   82c74:	d816      	bhi.n	82ca4 <pio_configure_pin+0x4c>
   82c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82c7a:	d01b      	beq.n	82cb4 <pio_configure_pin+0x5c>
   82c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82c80:	d116      	bne.n	82cb0 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82c82:	f000 001f 	and.w	r0, r0, #31
   82c86:	2601      	movs	r6, #1
   82c88:	4086      	lsls	r6, r0
   82c8a:	4632      	mov	r2, r6
   82c8c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82c90:	4620      	mov	r0, r4
   82c92:	4b22      	ldr	r3, [pc, #136]	; (82d1c <pio_configure_pin+0xc4>)
   82c94:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82c96:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82c9a:	bf14      	ite	ne
   82c9c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82c9e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82ca0:	2001      	movs	r0, #1
   82ca2:	e017      	b.n	82cd4 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82ca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82ca8:	d021      	beq.n	82cee <pio_configure_pin+0x96>
   82caa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82cae:	d01e      	beq.n	82cee <pio_configure_pin+0x96>
		return 0;
   82cb0:	2000      	movs	r0, #0
   82cb2:	e00f      	b.n	82cd4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82cb4:	f000 001f 	and.w	r0, r0, #31
   82cb8:	2601      	movs	r6, #1
   82cba:	4086      	lsls	r6, r0
   82cbc:	4632      	mov	r2, r6
   82cbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82cc2:	4620      	mov	r0, r4
   82cc4:	4b15      	ldr	r3, [pc, #84]	; (82d1c <pio_configure_pin+0xc4>)
   82cc6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82cc8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82ccc:	bf14      	ite	ne
   82cce:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82cd0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82cd2:	2001      	movs	r0, #1
}
   82cd4:	b002      	add	sp, #8
   82cd6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82cd8:	f000 011f 	and.w	r1, r0, #31
   82cdc:	2601      	movs	r6, #1
   82cde:	462a      	mov	r2, r5
   82ce0:	fa06 f101 	lsl.w	r1, r6, r1
   82ce4:	4620      	mov	r0, r4
   82ce6:	4b0e      	ldr	r3, [pc, #56]	; (82d20 <pio_configure_pin+0xc8>)
   82ce8:	4798      	blx	r3
	return 1;
   82cea:	4630      	mov	r0, r6
		break;
   82cec:	e7f2      	b.n	82cd4 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82cee:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82cf2:	f000 011f 	and.w	r1, r0, #31
   82cf6:	2601      	movs	r6, #1
   82cf8:	ea05 0306 	and.w	r3, r5, r6
   82cfc:	9300      	str	r3, [sp, #0]
   82cfe:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82d02:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82d06:	bf14      	ite	ne
   82d08:	2200      	movne	r2, #0
   82d0a:	2201      	moveq	r2, #1
   82d0c:	fa06 f101 	lsl.w	r1, r6, r1
   82d10:	4620      	mov	r0, r4
   82d12:	4c04      	ldr	r4, [pc, #16]	; (82d24 <pio_configure_pin+0xcc>)
   82d14:	47a0      	blx	r4
	return 1;
   82d16:	4630      	mov	r0, r6
		break;
   82d18:	e7dc      	b.n	82cd4 <pio_configure_pin+0x7c>
   82d1a:	bf00      	nop
   82d1c:	00082bb9 	.word	0x00082bb9
   82d20:	00082bf7 	.word	0x00082bf7
   82d24:	00082c29 	.word	0x00082c29

00082d28 <pio_configure_pin_group>:
{
   82d28:	b570      	push	{r4, r5, r6, lr}
   82d2a:	b082      	sub	sp, #8
   82d2c:	4605      	mov	r5, r0
   82d2e:	460e      	mov	r6, r1
   82d30:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   82d32:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82d36:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82d3a:	d027      	beq.n	82d8c <pio_configure_pin_group+0x64>
   82d3c:	d811      	bhi.n	82d62 <pio_configure_pin_group+0x3a>
   82d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82d42:	d016      	beq.n	82d72 <pio_configure_pin_group+0x4a>
   82d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82d48:	d111      	bne.n	82d6e <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82d4a:	460a      	mov	r2, r1
   82d4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82d50:	4b19      	ldr	r3, [pc, #100]	; (82db8 <pio_configure_pin_group+0x90>)
   82d52:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82d54:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82d58:	bf14      	ite	ne
   82d5a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82d5c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82d5e:	2001      	movs	r0, #1
   82d60:	e012      	b.n	82d88 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   82d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82d66:	d015      	beq.n	82d94 <pio_configure_pin_group+0x6c>
   82d68:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82d6c:	d012      	beq.n	82d94 <pio_configure_pin_group+0x6c>
		return 0;
   82d6e:	2000      	movs	r0, #0
   82d70:	e00a      	b.n	82d88 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82d72:	460a      	mov	r2, r1
   82d74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d78:	4b0f      	ldr	r3, [pc, #60]	; (82db8 <pio_configure_pin_group+0x90>)
   82d7a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82d7c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82d80:	bf14      	ite	ne
   82d82:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82d84:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82d86:	2001      	movs	r0, #1
}
   82d88:	b002      	add	sp, #8
   82d8a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82d8c:	4b0b      	ldr	r3, [pc, #44]	; (82dbc <pio_configure_pin_group+0x94>)
   82d8e:	4798      	blx	r3
	return 1;
   82d90:	2001      	movs	r0, #1
		break;
   82d92:	e7f9      	b.n	82d88 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82d94:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82d98:	f004 0301 	and.w	r3, r4, #1
   82d9c:	9300      	str	r3, [sp, #0]
   82d9e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82da2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82da6:	bf14      	ite	ne
   82da8:	2200      	movne	r2, #0
   82daa:	2201      	moveq	r2, #1
   82dac:	4631      	mov	r1, r6
   82dae:	4628      	mov	r0, r5
   82db0:	4c03      	ldr	r4, [pc, #12]	; (82dc0 <pio_configure_pin_group+0x98>)
   82db2:	47a0      	blx	r4
	return 1;
   82db4:	2001      	movs	r0, #1
		break;
   82db6:	e7e7      	b.n	82d88 <pio_configure_pin_group+0x60>
   82db8:	00082bb9 	.word	0x00082bb9
   82dbc:	00082bf7 	.word	0x00082bf7
   82dc0:	00082c29 	.word	0x00082c29

00082dc4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82dc8:	4604      	mov	r4, r0
   82dca:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82dcc:	4b0e      	ldr	r3, [pc, #56]	; (82e08 <pio_handler_process+0x44>)
   82dce:	4798      	blx	r3
   82dd0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82dd2:	4620      	mov	r0, r4
   82dd4:	4b0d      	ldr	r3, [pc, #52]	; (82e0c <pio_handler_process+0x48>)
   82dd6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82dd8:	4005      	ands	r5, r0
   82dda:	d013      	beq.n	82e04 <pio_handler_process+0x40>
   82ddc:	4c0c      	ldr	r4, [pc, #48]	; (82e10 <pio_handler_process+0x4c>)
   82dde:	f104 0660 	add.w	r6, r4, #96	; 0x60
   82de2:	e003      	b.n	82dec <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82de4:	42b4      	cmp	r4, r6
   82de6:	d00d      	beq.n	82e04 <pio_handler_process+0x40>
   82de8:	3410      	adds	r4, #16
		while (status != 0) {
   82dea:	b15d      	cbz	r5, 82e04 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82dec:	6820      	ldr	r0, [r4, #0]
   82dee:	4540      	cmp	r0, r8
   82df0:	d1f8      	bne.n	82de4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82df2:	6861      	ldr	r1, [r4, #4]
   82df4:	4229      	tst	r1, r5
   82df6:	d0f5      	beq.n	82de4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82df8:	68e3      	ldr	r3, [r4, #12]
   82dfa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82dfc:	6863      	ldr	r3, [r4, #4]
   82dfe:	ea25 0503 	bic.w	r5, r5, r3
   82e02:	e7ef      	b.n	82de4 <pio_handler_process+0x20>
   82e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82e08:	00082c4f 	.word	0x00082c4f
   82e0c:	00082c53 	.word	0x00082c53
   82e10:	200713b0 	.word	0x200713b0

00082e14 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82e14:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82e16:	210b      	movs	r1, #11
   82e18:	4801      	ldr	r0, [pc, #4]	; (82e20 <PIOA_Handler+0xc>)
   82e1a:	4b02      	ldr	r3, [pc, #8]	; (82e24 <PIOA_Handler+0x10>)
   82e1c:	4798      	blx	r3
   82e1e:	bd08      	pop	{r3, pc}
   82e20:	400e0e00 	.word	0x400e0e00
   82e24:	00082dc5 	.word	0x00082dc5

00082e28 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82e28:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82e2a:	210c      	movs	r1, #12
   82e2c:	4801      	ldr	r0, [pc, #4]	; (82e34 <PIOB_Handler+0xc>)
   82e2e:	4b02      	ldr	r3, [pc, #8]	; (82e38 <PIOB_Handler+0x10>)
   82e30:	4798      	blx	r3
   82e32:	bd08      	pop	{r3, pc}
   82e34:	400e1000 	.word	0x400e1000
   82e38:	00082dc5 	.word	0x00082dc5

00082e3c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82e3c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82e3e:	210d      	movs	r1, #13
   82e40:	4801      	ldr	r0, [pc, #4]	; (82e48 <PIOC_Handler+0xc>)
   82e42:	4b02      	ldr	r3, [pc, #8]	; (82e4c <PIOC_Handler+0x10>)
   82e44:	4798      	blx	r3
   82e46:	bd08      	pop	{r3, pc}
   82e48:	400e1200 	.word	0x400e1200
   82e4c:	00082dc5 	.word	0x00082dc5

00082e50 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82e50:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82e52:	210e      	movs	r1, #14
   82e54:	4801      	ldr	r0, [pc, #4]	; (82e5c <PIOD_Handler+0xc>)
   82e56:	4b02      	ldr	r3, [pc, #8]	; (82e60 <PIOD_Handler+0x10>)
   82e58:	4798      	blx	r3
   82e5a:	bd08      	pop	{r3, pc}
   82e5c:	400e1400 	.word	0x400e1400
   82e60:	00082dc5 	.word	0x00082dc5

00082e64 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82e64:	4a17      	ldr	r2, [pc, #92]	; (82ec4 <pmc_switch_mck_to_pllack+0x60>)
   82e66:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82e6c:	4318      	orrs	r0, r3
   82e6e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e70:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82e72:	f013 0f08 	tst.w	r3, #8
   82e76:	d10a      	bne.n	82e8e <pmc_switch_mck_to_pllack+0x2a>
   82e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82e7c:	4911      	ldr	r1, [pc, #68]	; (82ec4 <pmc_switch_mck_to_pllack+0x60>)
   82e7e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82e80:	f012 0f08 	tst.w	r2, #8
   82e84:	d103      	bne.n	82e8e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82e86:	3b01      	subs	r3, #1
   82e88:	d1f9      	bne.n	82e7e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82e8a:	2001      	movs	r0, #1
   82e8c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82e8e:	4a0d      	ldr	r2, [pc, #52]	; (82ec4 <pmc_switch_mck_to_pllack+0x60>)
   82e90:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82e92:	f023 0303 	bic.w	r3, r3, #3
   82e96:	f043 0302 	orr.w	r3, r3, #2
   82e9a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82e9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82e9e:	f013 0f08 	tst.w	r3, #8
   82ea2:	d10a      	bne.n	82eba <pmc_switch_mck_to_pllack+0x56>
   82ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82ea8:	4906      	ldr	r1, [pc, #24]	; (82ec4 <pmc_switch_mck_to_pllack+0x60>)
   82eaa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82eac:	f012 0f08 	tst.w	r2, #8
   82eb0:	d105      	bne.n	82ebe <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82eb2:	3b01      	subs	r3, #1
   82eb4:	d1f9      	bne.n	82eaa <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82eb6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82eb8:	4770      	bx	lr
	return 0;
   82eba:	2000      	movs	r0, #0
   82ebc:	4770      	bx	lr
   82ebe:	2000      	movs	r0, #0
   82ec0:	4770      	bx	lr
   82ec2:	bf00      	nop
   82ec4:	400e0600 	.word	0x400e0600

00082ec8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82ec8:	b9c8      	cbnz	r0, 82efe <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82eca:	4a11      	ldr	r2, [pc, #68]	; (82f10 <pmc_switch_mainck_to_xtal+0x48>)
   82ecc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82ece:	0209      	lsls	r1, r1, #8
   82ed0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82ed2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82ed6:	f023 0303 	bic.w	r3, r3, #3
   82eda:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82ede:	f043 0301 	orr.w	r3, r3, #1
   82ee2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82ee4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82ee6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82ee8:	f013 0f01 	tst.w	r3, #1
   82eec:	d0fb      	beq.n	82ee6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82eee:	4a08      	ldr	r2, [pc, #32]	; (82f10 <pmc_switch_mainck_to_xtal+0x48>)
   82ef0:	6a13      	ldr	r3, [r2, #32]
   82ef2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82efa:	6213      	str	r3, [r2, #32]
   82efc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82efe:	4904      	ldr	r1, [pc, #16]	; (82f10 <pmc_switch_mainck_to_xtal+0x48>)
   82f00:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82f02:	4a04      	ldr	r2, [pc, #16]	; (82f14 <pmc_switch_mainck_to_xtal+0x4c>)
   82f04:	401a      	ands	r2, r3
   82f06:	4b04      	ldr	r3, [pc, #16]	; (82f18 <pmc_switch_mainck_to_xtal+0x50>)
   82f08:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82f0a:	620b      	str	r3, [r1, #32]
   82f0c:	4770      	bx	lr
   82f0e:	bf00      	nop
   82f10:	400e0600 	.word	0x400e0600
   82f14:	fec8fffc 	.word	0xfec8fffc
   82f18:	01370002 	.word	0x01370002

00082f1c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82f1c:	4b02      	ldr	r3, [pc, #8]	; (82f28 <pmc_osc_is_ready_mainck+0xc>)
   82f1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82f20:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82f24:	4770      	bx	lr
   82f26:	bf00      	nop
   82f28:	400e0600 	.word	0x400e0600

00082f2c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82f2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82f30:	4b01      	ldr	r3, [pc, #4]	; (82f38 <pmc_disable_pllack+0xc>)
   82f32:	629a      	str	r2, [r3, #40]	; 0x28
   82f34:	4770      	bx	lr
   82f36:	bf00      	nop
   82f38:	400e0600 	.word	0x400e0600

00082f3c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82f3c:	4b02      	ldr	r3, [pc, #8]	; (82f48 <pmc_is_locked_pllack+0xc>)
   82f3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82f40:	f000 0002 	and.w	r0, r0, #2
   82f44:	4770      	bx	lr
   82f46:	bf00      	nop
   82f48:	400e0600 	.word	0x400e0600

00082f4c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82f4c:	282c      	cmp	r0, #44	; 0x2c
   82f4e:	d81e      	bhi.n	82f8e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82f50:	281f      	cmp	r0, #31
   82f52:	d80c      	bhi.n	82f6e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82f54:	4b11      	ldr	r3, [pc, #68]	; (82f9c <pmc_enable_periph_clk+0x50>)
   82f56:	699a      	ldr	r2, [r3, #24]
   82f58:	2301      	movs	r3, #1
   82f5a:	4083      	lsls	r3, r0
   82f5c:	4393      	bics	r3, r2
   82f5e:	d018      	beq.n	82f92 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82f60:	2301      	movs	r3, #1
   82f62:	fa03 f000 	lsl.w	r0, r3, r0
   82f66:	4b0d      	ldr	r3, [pc, #52]	; (82f9c <pmc_enable_periph_clk+0x50>)
   82f68:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82f6a:	2000      	movs	r0, #0
   82f6c:	4770      	bx	lr
		ul_id -= 32;
   82f6e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82f70:	4b0a      	ldr	r3, [pc, #40]	; (82f9c <pmc_enable_periph_clk+0x50>)
   82f72:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82f76:	2301      	movs	r3, #1
   82f78:	4083      	lsls	r3, r0
   82f7a:	4393      	bics	r3, r2
   82f7c:	d00b      	beq.n	82f96 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   82f7e:	2301      	movs	r3, #1
   82f80:	fa03 f000 	lsl.w	r0, r3, r0
   82f84:	4b05      	ldr	r3, [pc, #20]	; (82f9c <pmc_enable_periph_clk+0x50>)
   82f86:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   82f8a:	2000      	movs	r0, #0
   82f8c:	4770      	bx	lr
		return 1;
   82f8e:	2001      	movs	r0, #1
   82f90:	4770      	bx	lr
	return 0;
   82f92:	2000      	movs	r0, #0
   82f94:	4770      	bx	lr
   82f96:	2000      	movs	r0, #0
}
   82f98:	4770      	bx	lr
   82f9a:	bf00      	nop
   82f9c:	400e0600 	.word	0x400e0600

00082fa0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82fa0:	e7fe      	b.n	82fa0 <Dummy_Handler>
	...

00082fa4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82fa4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82fa6:	4b1c      	ldr	r3, [pc, #112]	; (83018 <Reset_Handler+0x74>)
   82fa8:	4a1c      	ldr	r2, [pc, #112]	; (8301c <Reset_Handler+0x78>)
   82faa:	429a      	cmp	r2, r3
   82fac:	d010      	beq.n	82fd0 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   82fae:	4b1c      	ldr	r3, [pc, #112]	; (83020 <Reset_Handler+0x7c>)
   82fb0:	4a19      	ldr	r2, [pc, #100]	; (83018 <Reset_Handler+0x74>)
   82fb2:	429a      	cmp	r2, r3
   82fb4:	d20c      	bcs.n	82fd0 <Reset_Handler+0x2c>
   82fb6:	3b01      	subs	r3, #1
   82fb8:	1a9b      	subs	r3, r3, r2
   82fba:	f023 0303 	bic.w	r3, r3, #3
   82fbe:	3304      	adds	r3, #4
   82fc0:	4413      	add	r3, r2
   82fc2:	4916      	ldr	r1, [pc, #88]	; (8301c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82fc4:	f851 0b04 	ldr.w	r0, [r1], #4
   82fc8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82fcc:	429a      	cmp	r2, r3
   82fce:	d1f9      	bne.n	82fc4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82fd0:	4b14      	ldr	r3, [pc, #80]	; (83024 <Reset_Handler+0x80>)
   82fd2:	4a15      	ldr	r2, [pc, #84]	; (83028 <Reset_Handler+0x84>)
   82fd4:	429a      	cmp	r2, r3
   82fd6:	d20a      	bcs.n	82fee <Reset_Handler+0x4a>
   82fd8:	3b01      	subs	r3, #1
   82fda:	1a9b      	subs	r3, r3, r2
   82fdc:	f023 0303 	bic.w	r3, r3, #3
   82fe0:	3304      	adds	r3, #4
   82fe2:	4413      	add	r3, r2
		*pDest++ = 0;
   82fe4:	2100      	movs	r1, #0
   82fe6:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82fea:	4293      	cmp	r3, r2
   82fec:	d1fb      	bne.n	82fe6 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82fee:	4b0f      	ldr	r3, [pc, #60]	; (8302c <Reset_Handler+0x88>)
   82ff0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82ff4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82ff8:	490d      	ldr	r1, [pc, #52]	; (83030 <Reset_Handler+0x8c>)
   82ffa:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82ffc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   83000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   83004:	d203      	bcs.n	8300e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83006:	688b      	ldr	r3, [r1, #8]
   83008:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8300c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8300e:	4b09      	ldr	r3, [pc, #36]	; (83034 <Reset_Handler+0x90>)
   83010:	4798      	blx	r3

	/* Branch to main function */
	main();
   83012:	4b09      	ldr	r3, [pc, #36]	; (83038 <Reset_Handler+0x94>)
   83014:	4798      	blx	r3
   83016:	e7fe      	b.n	83016 <Reset_Handler+0x72>
   83018:	20070000 	.word	0x20070000
   8301c:	0008a2c4 	.word	0x0008a2c4
   83020:	20070b68 	.word	0x20070b68
   83024:	20071498 	.word	0x20071498
   83028:	20070b68 	.word	0x20070b68
   8302c:	00080000 	.word	0x00080000
   83030:	e000ed00 	.word	0xe000ed00
   83034:	00083491 	.word	0x00083491
   83038:	00083365 	.word	0x00083365

0008303c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8303c:	4b3d      	ldr	r3, [pc, #244]	; (83134 <SystemCoreClockUpdate+0xf8>)
   8303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83040:	f003 0303 	and.w	r3, r3, #3
   83044:	2b03      	cmp	r3, #3
   83046:	d80e      	bhi.n	83066 <SystemCoreClockUpdate+0x2a>
   83048:	e8df f003 	tbb	[pc, r3]
   8304c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83050:	4b39      	ldr	r3, [pc, #228]	; (83138 <SystemCoreClockUpdate+0xfc>)
   83052:	695b      	ldr	r3, [r3, #20]
   83054:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83058:	bf14      	ite	ne
   8305a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8305e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   83062:	4b36      	ldr	r3, [pc, #216]	; (8313c <SystemCoreClockUpdate+0x100>)
   83064:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83066:	4b33      	ldr	r3, [pc, #204]	; (83134 <SystemCoreClockUpdate+0xf8>)
   83068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8306a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8306e:	2b70      	cmp	r3, #112	; 0x70
   83070:	d057      	beq.n	83122 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83072:	4b30      	ldr	r3, [pc, #192]	; (83134 <SystemCoreClockUpdate+0xf8>)
   83074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83076:	4931      	ldr	r1, [pc, #196]	; (8313c <SystemCoreClockUpdate+0x100>)
   83078:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8307c:	680b      	ldr	r3, [r1, #0]
   8307e:	40d3      	lsrs	r3, r2
   83080:	600b      	str	r3, [r1, #0]
   83082:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83084:	4b2b      	ldr	r3, [pc, #172]	; (83134 <SystemCoreClockUpdate+0xf8>)
   83086:	6a1b      	ldr	r3, [r3, #32]
   83088:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8308c:	d003      	beq.n	83096 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8308e:	4a2c      	ldr	r2, [pc, #176]	; (83140 <SystemCoreClockUpdate+0x104>)
   83090:	4b2a      	ldr	r3, [pc, #168]	; (8313c <SystemCoreClockUpdate+0x100>)
   83092:	601a      	str	r2, [r3, #0]
   83094:	e7e7      	b.n	83066 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83096:	4a2b      	ldr	r2, [pc, #172]	; (83144 <SystemCoreClockUpdate+0x108>)
   83098:	4b28      	ldr	r3, [pc, #160]	; (8313c <SystemCoreClockUpdate+0x100>)
   8309a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8309c:	4b25      	ldr	r3, [pc, #148]	; (83134 <SystemCoreClockUpdate+0xf8>)
   8309e:	6a1b      	ldr	r3, [r3, #32]
   830a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   830a4:	2b10      	cmp	r3, #16
   830a6:	d005      	beq.n	830b4 <SystemCoreClockUpdate+0x78>
   830a8:	2b20      	cmp	r3, #32
   830aa:	d1dc      	bne.n	83066 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   830ac:	4a24      	ldr	r2, [pc, #144]	; (83140 <SystemCoreClockUpdate+0x104>)
   830ae:	4b23      	ldr	r3, [pc, #140]	; (8313c <SystemCoreClockUpdate+0x100>)
   830b0:	601a      	str	r2, [r3, #0]
				break;
   830b2:	e7d8      	b.n	83066 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   830b4:	4a24      	ldr	r2, [pc, #144]	; (83148 <SystemCoreClockUpdate+0x10c>)
   830b6:	4b21      	ldr	r3, [pc, #132]	; (8313c <SystemCoreClockUpdate+0x100>)
   830b8:	601a      	str	r2, [r3, #0]
				break;
   830ba:	e7d4      	b.n	83066 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   830bc:	4b1d      	ldr	r3, [pc, #116]	; (83134 <SystemCoreClockUpdate+0xf8>)
   830be:	6a1b      	ldr	r3, [r3, #32]
   830c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   830c4:	d00c      	beq.n	830e0 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   830c6:	4a1e      	ldr	r2, [pc, #120]	; (83140 <SystemCoreClockUpdate+0x104>)
   830c8:	4b1c      	ldr	r3, [pc, #112]	; (8313c <SystemCoreClockUpdate+0x100>)
   830ca:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   830cc:	4b19      	ldr	r3, [pc, #100]	; (83134 <SystemCoreClockUpdate+0xf8>)
   830ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830d0:	f003 0303 	and.w	r3, r3, #3
   830d4:	2b02      	cmp	r3, #2
   830d6:	d016      	beq.n	83106 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   830d8:	4a1c      	ldr	r2, [pc, #112]	; (8314c <SystemCoreClockUpdate+0x110>)
   830da:	4b18      	ldr	r3, [pc, #96]	; (8313c <SystemCoreClockUpdate+0x100>)
   830dc:	601a      	str	r2, [r3, #0]
   830de:	e7c2      	b.n	83066 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   830e0:	4a18      	ldr	r2, [pc, #96]	; (83144 <SystemCoreClockUpdate+0x108>)
   830e2:	4b16      	ldr	r3, [pc, #88]	; (8313c <SystemCoreClockUpdate+0x100>)
   830e4:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   830e6:	4b13      	ldr	r3, [pc, #76]	; (83134 <SystemCoreClockUpdate+0xf8>)
   830e8:	6a1b      	ldr	r3, [r3, #32]
   830ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   830ee:	2b10      	cmp	r3, #16
   830f0:	d005      	beq.n	830fe <SystemCoreClockUpdate+0xc2>
   830f2:	2b20      	cmp	r3, #32
   830f4:	d1ea      	bne.n	830cc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   830f6:	4a12      	ldr	r2, [pc, #72]	; (83140 <SystemCoreClockUpdate+0x104>)
   830f8:	4b10      	ldr	r3, [pc, #64]	; (8313c <SystemCoreClockUpdate+0x100>)
   830fa:	601a      	str	r2, [r3, #0]
				break;
   830fc:	e7e6      	b.n	830cc <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   830fe:	4a12      	ldr	r2, [pc, #72]	; (83148 <SystemCoreClockUpdate+0x10c>)
   83100:	4b0e      	ldr	r3, [pc, #56]	; (8313c <SystemCoreClockUpdate+0x100>)
   83102:	601a      	str	r2, [r3, #0]
				break;
   83104:	e7e2      	b.n	830cc <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83106:	4a0b      	ldr	r2, [pc, #44]	; (83134 <SystemCoreClockUpdate+0xf8>)
   83108:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8310a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8310c:	480b      	ldr	r0, [pc, #44]	; (8313c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8310e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   83112:	6803      	ldr	r3, [r0, #0]
   83114:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83118:	b2d2      	uxtb	r2, r2
   8311a:	fbb3 f3f2 	udiv	r3, r3, r2
   8311e:	6003      	str	r3, [r0, #0]
   83120:	e7a1      	b.n	83066 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   83122:	4a06      	ldr	r2, [pc, #24]	; (8313c <SystemCoreClockUpdate+0x100>)
   83124:	6813      	ldr	r3, [r2, #0]
   83126:	490a      	ldr	r1, [pc, #40]	; (83150 <SystemCoreClockUpdate+0x114>)
   83128:	fba1 1303 	umull	r1, r3, r1, r3
   8312c:	085b      	lsrs	r3, r3, #1
   8312e:	6013      	str	r3, [r2, #0]
   83130:	4770      	bx	lr
   83132:	bf00      	nop
   83134:	400e0600 	.word	0x400e0600
   83138:	400e1a10 	.word	0x400e1a10
   8313c:	200701ac 	.word	0x200701ac
   83140:	00b71b00 	.word	0x00b71b00
   83144:	003d0900 	.word	0x003d0900
   83148:	007a1200 	.word	0x007a1200
   8314c:	0e4e1c00 	.word	0x0e4e1c00
   83150:	aaaaaaab 	.word	0xaaaaaaab

00083154 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83154:	4b0a      	ldr	r3, [pc, #40]	; (83180 <_sbrk+0x2c>)
   83156:	681b      	ldr	r3, [r3, #0]
   83158:	b153      	cbz	r3, 83170 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8315a:	4b09      	ldr	r3, [pc, #36]	; (83180 <_sbrk+0x2c>)
   8315c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8315e:	181a      	adds	r2, r3, r0
   83160:	4908      	ldr	r1, [pc, #32]	; (83184 <_sbrk+0x30>)
   83162:	4291      	cmp	r1, r2
   83164:	db08      	blt.n	83178 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   83166:	4610      	mov	r0, r2
   83168:	4a05      	ldr	r2, [pc, #20]	; (83180 <_sbrk+0x2c>)
   8316a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8316c:	4618      	mov	r0, r3
   8316e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   83170:	4a05      	ldr	r2, [pc, #20]	; (83188 <_sbrk+0x34>)
   83172:	4b03      	ldr	r3, [pc, #12]	; (83180 <_sbrk+0x2c>)
   83174:	601a      	str	r2, [r3, #0]
   83176:	e7f0      	b.n	8315a <_sbrk+0x6>
		return (caddr_t) -1;	
   83178:	f04f 30ff 	mov.w	r0, #4294967295
}
   8317c:	4770      	bx	lr
   8317e:	bf00      	nop
   83180:	20071420 	.word	0x20071420
   83184:	20087ffc 	.word	0x20087ffc
   83188:	20073498 	.word	0x20073498

0008318c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8318c:	f04f 30ff 	mov.w	r0, #4294967295
   83190:	4770      	bx	lr

00083192 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   83192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   83196:	604b      	str	r3, [r1, #4]

	return 0;
}
   83198:	2000      	movs	r0, #0
   8319a:	4770      	bx	lr

0008319c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8319c:	2000      	movs	r0, #0
   8319e:	4770      	bx	lr

000831a0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   831a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   831a2:	b083      	sub	sp, #12
   831a4:	4604      	mov	r4, r0
   831a6:	460d      	mov	r5, r1
	uint32_t val = 0;
   831a8:	2300      	movs	r3, #0
   831aa:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   831ac:	4b20      	ldr	r3, [pc, #128]	; (83230 <usart_serial_getchar+0x90>)
   831ae:	4298      	cmp	r0, r3
   831b0:	d00d      	beq.n	831ce <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   831b2:	4b20      	ldr	r3, [pc, #128]	; (83234 <usart_serial_getchar+0x94>)
   831b4:	4298      	cmp	r0, r3
   831b6:	d012      	beq.n	831de <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   831b8:	4b1f      	ldr	r3, [pc, #124]	; (83238 <usart_serial_getchar+0x98>)
   831ba:	4298      	cmp	r0, r3
   831bc:	d019      	beq.n	831f2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   831be:	4b1f      	ldr	r3, [pc, #124]	; (8323c <usart_serial_getchar+0x9c>)
   831c0:	429c      	cmp	r4, r3
   831c2:	d020      	beq.n	83206 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   831c4:	4b1e      	ldr	r3, [pc, #120]	; (83240 <usart_serial_getchar+0xa0>)
   831c6:	429c      	cmp	r4, r3
   831c8:	d027      	beq.n	8321a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   831ca:	b003      	add	sp, #12
   831cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   831ce:	461f      	mov	r7, r3
   831d0:	4e1c      	ldr	r6, [pc, #112]	; (83244 <usart_serial_getchar+0xa4>)
   831d2:	4629      	mov	r1, r5
   831d4:	4638      	mov	r0, r7
   831d6:	47b0      	blx	r6
   831d8:	2800      	cmp	r0, #0
   831da:	d1fa      	bne.n	831d2 <usart_serial_getchar+0x32>
   831dc:	e7ef      	b.n	831be <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   831de:	461f      	mov	r7, r3
   831e0:	4e19      	ldr	r6, [pc, #100]	; (83248 <usart_serial_getchar+0xa8>)
   831e2:	a901      	add	r1, sp, #4
   831e4:	4638      	mov	r0, r7
   831e6:	47b0      	blx	r6
   831e8:	2800      	cmp	r0, #0
   831ea:	d1fa      	bne.n	831e2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   831ec:	9b01      	ldr	r3, [sp, #4]
   831ee:	702b      	strb	r3, [r5, #0]
   831f0:	e7e8      	b.n	831c4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   831f2:	461e      	mov	r6, r3
   831f4:	4c14      	ldr	r4, [pc, #80]	; (83248 <usart_serial_getchar+0xa8>)
   831f6:	a901      	add	r1, sp, #4
   831f8:	4630      	mov	r0, r6
   831fa:	47a0      	blx	r4
   831fc:	2800      	cmp	r0, #0
   831fe:	d1fa      	bne.n	831f6 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   83200:	9b01      	ldr	r3, [sp, #4]
   83202:	702b      	strb	r3, [r5, #0]
   83204:	e7e1      	b.n	831ca <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   83206:	461e      	mov	r6, r3
   83208:	4c0f      	ldr	r4, [pc, #60]	; (83248 <usart_serial_getchar+0xa8>)
   8320a:	a901      	add	r1, sp, #4
   8320c:	4630      	mov	r0, r6
   8320e:	47a0      	blx	r4
   83210:	2800      	cmp	r0, #0
   83212:	d1fa      	bne.n	8320a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   83214:	9b01      	ldr	r3, [sp, #4]
   83216:	702b      	strb	r3, [r5, #0]
   83218:	e7d7      	b.n	831ca <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8321a:	461e      	mov	r6, r3
   8321c:	4c0a      	ldr	r4, [pc, #40]	; (83248 <usart_serial_getchar+0xa8>)
   8321e:	a901      	add	r1, sp, #4
   83220:	4630      	mov	r0, r6
   83222:	47a0      	blx	r4
   83224:	2800      	cmp	r0, #0
   83226:	d1fa      	bne.n	8321e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   83228:	9b01      	ldr	r3, [sp, #4]
   8322a:	702b      	strb	r3, [r5, #0]
}
   8322c:	e7cd      	b.n	831ca <usart_serial_getchar+0x2a>
   8322e:	bf00      	nop
   83230:	400e0800 	.word	0x400e0800
   83234:	40098000 	.word	0x40098000
   83238:	4009c000 	.word	0x4009c000
   8323c:	400a0000 	.word	0x400a0000
   83240:	400a4000 	.word	0x400a4000
   83244:	000827cd 	.word	0x000827cd
   83248:	000827f3 	.word	0x000827f3

0008324c <usart_serial_putchar>:
{
   8324c:	b570      	push	{r4, r5, r6, lr}
   8324e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   83250:	4b1e      	ldr	r3, [pc, #120]	; (832cc <usart_serial_putchar+0x80>)
   83252:	4298      	cmp	r0, r3
   83254:	d00d      	beq.n	83272 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   83256:	4b1e      	ldr	r3, [pc, #120]	; (832d0 <usart_serial_putchar+0x84>)
   83258:	4298      	cmp	r0, r3
   8325a:	d013      	beq.n	83284 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8325c:	4b1d      	ldr	r3, [pc, #116]	; (832d4 <usart_serial_putchar+0x88>)
   8325e:	4298      	cmp	r0, r3
   83260:	d019      	beq.n	83296 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   83262:	4b1d      	ldr	r3, [pc, #116]	; (832d8 <usart_serial_putchar+0x8c>)
   83264:	4298      	cmp	r0, r3
   83266:	d01f      	beq.n	832a8 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   83268:	4b1c      	ldr	r3, [pc, #112]	; (832dc <usart_serial_putchar+0x90>)
   8326a:	4298      	cmp	r0, r3
   8326c:	d025      	beq.n	832ba <usart_serial_putchar+0x6e>
	return 0;
   8326e:	2000      	movs	r0, #0
}
   83270:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   83272:	461e      	mov	r6, r3
   83274:	4d1a      	ldr	r5, [pc, #104]	; (832e0 <usart_serial_putchar+0x94>)
   83276:	4621      	mov	r1, r4
   83278:	4630      	mov	r0, r6
   8327a:	47a8      	blx	r5
   8327c:	2800      	cmp	r0, #0
   8327e:	d1fa      	bne.n	83276 <usart_serial_putchar+0x2a>
		return 1;
   83280:	2001      	movs	r0, #1
   83282:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   83284:	461e      	mov	r6, r3
   83286:	4d17      	ldr	r5, [pc, #92]	; (832e4 <usart_serial_putchar+0x98>)
   83288:	4621      	mov	r1, r4
   8328a:	4630      	mov	r0, r6
   8328c:	47a8      	blx	r5
   8328e:	2800      	cmp	r0, #0
   83290:	d1fa      	bne.n	83288 <usart_serial_putchar+0x3c>
		return 1;
   83292:	2001      	movs	r0, #1
   83294:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   83296:	461e      	mov	r6, r3
   83298:	4d12      	ldr	r5, [pc, #72]	; (832e4 <usart_serial_putchar+0x98>)
   8329a:	4621      	mov	r1, r4
   8329c:	4630      	mov	r0, r6
   8329e:	47a8      	blx	r5
   832a0:	2800      	cmp	r0, #0
   832a2:	d1fa      	bne.n	8329a <usart_serial_putchar+0x4e>
		return 1;
   832a4:	2001      	movs	r0, #1
   832a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   832a8:	461e      	mov	r6, r3
   832aa:	4d0e      	ldr	r5, [pc, #56]	; (832e4 <usart_serial_putchar+0x98>)
   832ac:	4621      	mov	r1, r4
   832ae:	4630      	mov	r0, r6
   832b0:	47a8      	blx	r5
   832b2:	2800      	cmp	r0, #0
   832b4:	d1fa      	bne.n	832ac <usart_serial_putchar+0x60>
		return 1;
   832b6:	2001      	movs	r0, #1
   832b8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   832ba:	461e      	mov	r6, r3
   832bc:	4d09      	ldr	r5, [pc, #36]	; (832e4 <usart_serial_putchar+0x98>)
   832be:	4621      	mov	r1, r4
   832c0:	4630      	mov	r0, r6
   832c2:	47a8      	blx	r5
   832c4:	2800      	cmp	r0, #0
   832c6:	d1fa      	bne.n	832be <usart_serial_putchar+0x72>
		return 1;
   832c8:	2001      	movs	r0, #1
   832ca:	bd70      	pop	{r4, r5, r6, pc}
   832cc:	400e0800 	.word	0x400e0800
   832d0:	40098000 	.word	0x40098000
   832d4:	4009c000 	.word	0x4009c000
   832d8:	400a0000 	.word	0x400a0000
   832dc:	400a4000 	.word	0x400a4000
   832e0:	000827bd 	.word	0x000827bd
   832e4:	000827df 	.word	0x000827df

000832e8 <config_console_uart>:
#include "AddWidget.h"



void config_console_uart(void)
{
   832e8:	b530      	push	{r4, r5, lr}
   832ea:	b085      	sub	sp, #20
   832ec:	2008      	movs	r0, #8
   832ee:	4d12      	ldr	r5, [pc, #72]	; (83338 <config_console_uart+0x50>)
   832f0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   832f2:	4c12      	ldr	r4, [pc, #72]	; (8333c <config_console_uart+0x54>)
   832f4:	4b12      	ldr	r3, [pc, #72]	; (83340 <config_console_uart+0x58>)
   832f6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   832f8:	4a12      	ldr	r2, [pc, #72]	; (83344 <config_console_uart+0x5c>)
   832fa:	4b13      	ldr	r3, [pc, #76]	; (83348 <config_console_uart+0x60>)
   832fc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   832fe:	4a13      	ldr	r2, [pc, #76]	; (8334c <config_console_uart+0x64>)
   83300:	4b13      	ldr	r3, [pc, #76]	; (83350 <config_console_uart+0x68>)
   83302:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83304:	4b13      	ldr	r3, [pc, #76]	; (83354 <config_console_uart+0x6c>)
   83306:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   83308:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8330c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8330e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83312:	9303      	str	r3, [sp, #12]
   83314:	2008      	movs	r0, #8
   83316:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   83318:	a901      	add	r1, sp, #4
   8331a:	4620      	mov	r0, r4
   8331c:	4b0e      	ldr	r3, [pc, #56]	; (83358 <config_console_uart+0x70>)
   8331e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   83320:	4d0e      	ldr	r5, [pc, #56]	; (8335c <config_console_uart+0x74>)
   83322:	682b      	ldr	r3, [r5, #0]
   83324:	2100      	movs	r1, #0
   83326:	6898      	ldr	r0, [r3, #8]
   83328:	4c0d      	ldr	r4, [pc, #52]	; (83360 <config_console_uart+0x78>)
   8332a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8332c:	682b      	ldr	r3, [r5, #0]
   8332e:	2100      	movs	r1, #0
   83330:	6858      	ldr	r0, [r3, #4]
   83332:	47a0      	blx	r4
	};
	
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
	
}
   83334:	b005      	add	sp, #20
   83336:	bd30      	pop	{r4, r5, pc}
   83338:	00082f4d 	.word	0x00082f4d
   8333c:	400e0800 	.word	0x400e0800
   83340:	2007146c 	.word	0x2007146c
   83344:	0008324d 	.word	0x0008324d
   83348:	20071468 	.word	0x20071468
   8334c:	000831a1 	.word	0x000831a1
   83350:	20071464 	.word	0x20071464
   83354:	0501bd00 	.word	0x0501bd00
   83358:	00082787 	.word	0x00082787
   8335c:	200701bc 	.word	0x200701bc
   83360:	00083669 	.word	0x00083669

00083364 <main>:

//--------------------------------------------------------------------//


int main (void)
{
   83364:	b5f0      	push	{r4, r5, r6, r7, lr}
   83366:	b087      	sub	sp, #28
	/* Insert system clock initialization code here (sysclk_init()). */
	
	sysclk_init();
   83368:	4b33      	ldr	r3, [pc, #204]	; (83438 <main+0xd4>)
   8336a:	4798      	blx	r3

	board_init();
   8336c:	4b33      	ldr	r3, [pc, #204]	; (8343c <main+0xd8>)
   8336e:	4798      	blx	r3
	
	config_console_uart();
   83370:	4b33      	ldr	r3, [pc, #204]	; (83440 <main+0xdc>)
   83372:	4798      	blx	r3
	
	//printf("This is Arduino Console UART Application.\n");
	
	
		//GPIOS INITIALIZATION AS OUTPUT FOR DC/RESET/LED <- Will go into the function to init my connections
		pmc_enable_periph_clk(ID_PIOC);
   83374:	200d      	movs	r0, #13
   83376:	4e33      	ldr	r6, [pc, #204]	; (83444 <main+0xe0>)
   83378:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOA);
   8337a:	200b      	movs	r0, #11
   8337c:	47b0      	blx	r6
		
		gpio_configure_pin(PIO_PC23_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   8337e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83382:	2057      	movs	r0, #87	; 0x57
   83384:	4c30      	ldr	r4, [pc, #192]	; (83448 <main+0xe4>)
   83386:	47a0      	blx	r4
		gpio_configure_pin(PIO_PC24_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   83388:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8338c:	2058      	movs	r0, #88	; 0x58
   8338e:	47a0      	blx	r4
		gpio_configure_pin(PIO_PC25_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   83390:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83394:	2059      	movs	r0, #89	; 0x59
   83396:	47a0      	blx	r4
		gpio_configure_pin(PIO_PC28_IDX,PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT);
   83398:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8339c:	205c      	movs	r0, #92	; 0x5c
   8339e:	47a0      	blx	r4
		
		pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA25A_SPI0_MISO);
   833a0:	4d2a      	ldr	r5, [pc, #168]	; (8344c <main+0xe8>)
   833a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   833a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   833aa:	4628      	mov	r0, r5
   833ac:	4c28      	ldr	r4, [pc, #160]	; (83450 <main+0xec>)
   833ae:	47a0      	blx	r4
		pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA26A_SPI0_MOSI);
   833b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   833b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   833b8:	4628      	mov	r0, r5
   833ba:	47a0      	blx	r4
		pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA27A_SPI0_SPCK);
   833bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   833c0:	4611      	mov	r1, r2
   833c2:	4628      	mov	r0, r5
   833c4:	47a0      	blx	r4
		pio_set_peripheral(PIOA,PIO_PERIPH_A, PIO_PA28A_SPI0_NPCS0);
   833c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   833ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   833ce:	4628      	mov	r0, r5
   833d0:	47a0      	blx	r4
		
		pmc_enable_periph_clk(ID_SPI0);
   833d2:	2018      	movs	r0, #24
   833d4:	47b0      	blx	r6
		
		
		spi_master_init(SPI0);
   833d6:	4c1f      	ldr	r4, [pc, #124]	; (83454 <main+0xf0>)
   833d8:	4620      	mov	r0, r4
   833da:	4b1f      	ldr	r3, [pc, #124]	; (83458 <main+0xf4>)
   833dc:	4798      	blx	r3
		
		//gpio_configure_pin(SPI0_NPCS0_GPIO ,SPI0_NPCS0_FLAGS);
	
	
	 char * str ="hello";
	 membag_init();
   833de:	4b1f      	ldr	r3, [pc, #124]	; (8345c <main+0xf8>)
   833e0:	4798      	blx	r3
	 
	ili9341_init();
   833e2:	4b1f      	ldr	r3, [pc, #124]	; (83460 <main+0xfc>)
   833e4:	4798      	blx	r3
	
	gfx_init();
   833e6:	4b1f      	ldr	r3, [pc, #124]	; (83464 <main+0x100>)
   833e8:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
   833ea:	2301      	movs	r3, #1
   833ec:	6023      	str	r3, [r4, #0]
	//spi_enable_clock(SPI0);
	spi_enable(SPI0);
	
	//struct win_window wx;
	
	win_init();
   833ee:	4b1e      	ldr	r3, [pc, #120]	; (83468 <main+0x104>)
   833f0:	4798      	blx	r3
	
	struct win_attributes root_attr;
	struct win_window *win_root;

	win_root = win_get_root();
   833f2:	4b1e      	ldr	r3, [pc, #120]	; (8346c <main+0x108>)
   833f4:	4798      	blx	r3
   833f6:	4606      	mov	r6, r0
	root_attr = *win_get_attributes(win_root);
   833f8:	4b1d      	ldr	r3, [pc, #116]	; (83470 <main+0x10c>)
   833fa:	4798      	blx	r3
   833fc:	466c      	mov	r4, sp
   833fe:	4605      	mov	r5, r0
   83400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83404:	e895 0003 	ldmia.w	r5, {r0, r1}
   83408:	e884 0003 	stmia.w	r4, {r0, r1}
	root_attr.background = &atmel_logo_small;
   8340c:	4b19      	ldr	r3, [pc, #100]	; (83474 <main+0x110>)
   8340e:	9302      	str	r3, [sp, #8]
	win_set_attributes(win_root, &root_attr, WIN_ATTR_BACKGROUND);
   83410:	2204      	movs	r2, #4
   83412:	4669      	mov	r1, sp
   83414:	4630      	mov	r0, r6
   83416:	4b18      	ldr	r3, [pc, #96]	; (83478 <main+0x114>)
   83418:	4798      	blx	r3

	win_show(win_root);
   8341a:	4630      	mov	r0, r6
   8341c:	4b17      	ldr	r3, [pc, #92]	; (8347c <main+0x118>)
   8341e:	4798      	blx	r3
	
	//wx = win_get_root();
	
	app_widget_launch();
   83420:	4b17      	ldr	r3, [pc, #92]	; (83480 <main+0x11c>)
   83422:	4798      	blx	r3
   83424:	4f17      	ldr	r7, [pc, #92]	; (83484 <main+0x120>)
   83426:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
//		if (!btn) {
			//goto error_widget;
//		}
//		win_show(wtk_button_as_child(btn));
		
		delay_ms(1000);
   8342a:	4d17      	ldr	r5, [pc, #92]	; (83488 <main+0x124>)
   8342c:	4c17      	ldr	r4, [pc, #92]	; (8348c <main+0x128>)
   8342e:	633e      	str	r6, [r7, #48]	; 0x30
   83430:	4628      	mov	r0, r5
   83432:	47a0      	blx	r4
   83434:	e7fb      	b.n	8342e <main+0xca>
   83436:	bf00      	nop
   83438:	00082ab5 	.word	0x00082ab5
   8343c:	00082b19 	.word	0x00082b19
   83440:	000832e9 	.word	0x000832e9
   83444:	00082f4d 	.word	0x00082f4d
   83448:	00082c59 	.word	0x00082c59
   8344c:	400e0e00 	.word	0x400e0e00
   83450:	00082bb9 	.word	0x00082bb9
   83454:	40008000 	.word	0x40008000
   83458:	00081079 	.word	0x00081079
   8345c:	000824cd 	.word	0x000824cd
   83460:	000806e9 	.word	0x000806e9
   83464:	00080da9 	.word	0x00080da9
   83468:	00081391 	.word	0x00081391
   8346c:	000813f5 	.word	0x000813f5
   83470:	000813fd 	.word	0x000813fd
   83474:	200701b0 	.word	0x200701b0
   83478:	00081911 	.word	0x00081911
   8347c:	000819b5 	.word	0x000819b5
   83480:	00080209 	.word	0x00080209
   83484:	400e1200 	.word	0x400e1200
   83488:	005b8d80 	.word	0x005b8d80
   8348c:	20070001 	.word	0x20070001

00083490 <__libc_init_array>:
   83490:	b570      	push	{r4, r5, r6, lr}
   83492:	4e0f      	ldr	r6, [pc, #60]	; (834d0 <__libc_init_array+0x40>)
   83494:	4d0f      	ldr	r5, [pc, #60]	; (834d4 <__libc_init_array+0x44>)
   83496:	1b76      	subs	r6, r6, r5
   83498:	10b6      	asrs	r6, r6, #2
   8349a:	bf18      	it	ne
   8349c:	2400      	movne	r4, #0
   8349e:	d005      	beq.n	834ac <__libc_init_array+0x1c>
   834a0:	3401      	adds	r4, #1
   834a2:	f855 3b04 	ldr.w	r3, [r5], #4
   834a6:	4798      	blx	r3
   834a8:	42a6      	cmp	r6, r4
   834aa:	d1f9      	bne.n	834a0 <__libc_init_array+0x10>
   834ac:	4e0a      	ldr	r6, [pc, #40]	; (834d8 <__libc_init_array+0x48>)
   834ae:	4d0b      	ldr	r5, [pc, #44]	; (834dc <__libc_init_array+0x4c>)
   834b0:	f006 fef2 	bl	8a298 <_init>
   834b4:	1b76      	subs	r6, r6, r5
   834b6:	10b6      	asrs	r6, r6, #2
   834b8:	bf18      	it	ne
   834ba:	2400      	movne	r4, #0
   834bc:	d006      	beq.n	834cc <__libc_init_array+0x3c>
   834be:	3401      	adds	r4, #1
   834c0:	f855 3b04 	ldr.w	r3, [r5], #4
   834c4:	4798      	blx	r3
   834c6:	42a6      	cmp	r6, r4
   834c8:	d1f9      	bne.n	834be <__libc_init_array+0x2e>
   834ca:	bd70      	pop	{r4, r5, r6, pc}
   834cc:	bd70      	pop	{r4, r5, r6, pc}
   834ce:	bf00      	nop
   834d0:	0008a2a4 	.word	0x0008a2a4
   834d4:	0008a2a4 	.word	0x0008a2a4
   834d8:	0008a2ac 	.word	0x0008a2ac
   834dc:	0008a2a4 	.word	0x0008a2a4

000834e0 <memcpy>:
   834e0:	4684      	mov	ip, r0
   834e2:	ea41 0300 	orr.w	r3, r1, r0
   834e6:	f013 0303 	ands.w	r3, r3, #3
   834ea:	d149      	bne.n	83580 <memcpy+0xa0>
   834ec:	3a40      	subs	r2, #64	; 0x40
   834ee:	d323      	bcc.n	83538 <memcpy+0x58>
   834f0:	680b      	ldr	r3, [r1, #0]
   834f2:	6003      	str	r3, [r0, #0]
   834f4:	684b      	ldr	r3, [r1, #4]
   834f6:	6043      	str	r3, [r0, #4]
   834f8:	688b      	ldr	r3, [r1, #8]
   834fa:	6083      	str	r3, [r0, #8]
   834fc:	68cb      	ldr	r3, [r1, #12]
   834fe:	60c3      	str	r3, [r0, #12]
   83500:	690b      	ldr	r3, [r1, #16]
   83502:	6103      	str	r3, [r0, #16]
   83504:	694b      	ldr	r3, [r1, #20]
   83506:	6143      	str	r3, [r0, #20]
   83508:	698b      	ldr	r3, [r1, #24]
   8350a:	6183      	str	r3, [r0, #24]
   8350c:	69cb      	ldr	r3, [r1, #28]
   8350e:	61c3      	str	r3, [r0, #28]
   83510:	6a0b      	ldr	r3, [r1, #32]
   83512:	6203      	str	r3, [r0, #32]
   83514:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83516:	6243      	str	r3, [r0, #36]	; 0x24
   83518:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8351a:	6283      	str	r3, [r0, #40]	; 0x28
   8351c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8351e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83520:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83522:	6303      	str	r3, [r0, #48]	; 0x30
   83524:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83526:	6343      	str	r3, [r0, #52]	; 0x34
   83528:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8352a:	6383      	str	r3, [r0, #56]	; 0x38
   8352c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8352e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83530:	3040      	adds	r0, #64	; 0x40
   83532:	3140      	adds	r1, #64	; 0x40
   83534:	3a40      	subs	r2, #64	; 0x40
   83536:	d2db      	bcs.n	834f0 <memcpy+0x10>
   83538:	3230      	adds	r2, #48	; 0x30
   8353a:	d30b      	bcc.n	83554 <memcpy+0x74>
   8353c:	680b      	ldr	r3, [r1, #0]
   8353e:	6003      	str	r3, [r0, #0]
   83540:	684b      	ldr	r3, [r1, #4]
   83542:	6043      	str	r3, [r0, #4]
   83544:	688b      	ldr	r3, [r1, #8]
   83546:	6083      	str	r3, [r0, #8]
   83548:	68cb      	ldr	r3, [r1, #12]
   8354a:	60c3      	str	r3, [r0, #12]
   8354c:	3010      	adds	r0, #16
   8354e:	3110      	adds	r1, #16
   83550:	3a10      	subs	r2, #16
   83552:	d2f3      	bcs.n	8353c <memcpy+0x5c>
   83554:	320c      	adds	r2, #12
   83556:	d305      	bcc.n	83564 <memcpy+0x84>
   83558:	f851 3b04 	ldr.w	r3, [r1], #4
   8355c:	f840 3b04 	str.w	r3, [r0], #4
   83560:	3a04      	subs	r2, #4
   83562:	d2f9      	bcs.n	83558 <memcpy+0x78>
   83564:	3204      	adds	r2, #4
   83566:	d008      	beq.n	8357a <memcpy+0x9a>
   83568:	07d2      	lsls	r2, r2, #31
   8356a:	bf1c      	itt	ne
   8356c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83570:	f800 3b01 	strbne.w	r3, [r0], #1
   83574:	d301      	bcc.n	8357a <memcpy+0x9a>
   83576:	880b      	ldrh	r3, [r1, #0]
   83578:	8003      	strh	r3, [r0, #0]
   8357a:	4660      	mov	r0, ip
   8357c:	4770      	bx	lr
   8357e:	bf00      	nop
   83580:	2a08      	cmp	r2, #8
   83582:	d313      	bcc.n	835ac <memcpy+0xcc>
   83584:	078b      	lsls	r3, r1, #30
   83586:	d0b1      	beq.n	834ec <memcpy+0xc>
   83588:	f010 0303 	ands.w	r3, r0, #3
   8358c:	d0ae      	beq.n	834ec <memcpy+0xc>
   8358e:	f1c3 0304 	rsb	r3, r3, #4
   83592:	1ad2      	subs	r2, r2, r3
   83594:	07db      	lsls	r3, r3, #31
   83596:	bf1c      	itt	ne
   83598:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8359c:	f800 3b01 	strbne.w	r3, [r0], #1
   835a0:	d3a4      	bcc.n	834ec <memcpy+0xc>
   835a2:	f831 3b02 	ldrh.w	r3, [r1], #2
   835a6:	f820 3b02 	strh.w	r3, [r0], #2
   835aa:	e79f      	b.n	834ec <memcpy+0xc>
   835ac:	3a04      	subs	r2, #4
   835ae:	d3d9      	bcc.n	83564 <memcpy+0x84>
   835b0:	3a01      	subs	r2, #1
   835b2:	f811 3b01 	ldrb.w	r3, [r1], #1
   835b6:	f800 3b01 	strb.w	r3, [r0], #1
   835ba:	d2f9      	bcs.n	835b0 <memcpy+0xd0>
   835bc:	780b      	ldrb	r3, [r1, #0]
   835be:	7003      	strb	r3, [r0, #0]
   835c0:	784b      	ldrb	r3, [r1, #1]
   835c2:	7043      	strb	r3, [r0, #1]
   835c4:	788b      	ldrb	r3, [r1, #2]
   835c6:	7083      	strb	r3, [r0, #2]
   835c8:	4660      	mov	r0, ip
   835ca:	4770      	bx	lr

000835cc <memset>:
   835cc:	b470      	push	{r4, r5, r6}
   835ce:	0786      	lsls	r6, r0, #30
   835d0:	d046      	beq.n	83660 <memset+0x94>
   835d2:	1e54      	subs	r4, r2, #1
   835d4:	2a00      	cmp	r2, #0
   835d6:	d041      	beq.n	8365c <memset+0x90>
   835d8:	b2ca      	uxtb	r2, r1
   835da:	4603      	mov	r3, r0
   835dc:	e002      	b.n	835e4 <memset+0x18>
   835de:	f114 34ff 	adds.w	r4, r4, #4294967295
   835e2:	d33b      	bcc.n	8365c <memset+0x90>
   835e4:	f803 2b01 	strb.w	r2, [r3], #1
   835e8:	079d      	lsls	r5, r3, #30
   835ea:	d1f8      	bne.n	835de <memset+0x12>
   835ec:	2c03      	cmp	r4, #3
   835ee:	d92e      	bls.n	8364e <memset+0x82>
   835f0:	b2cd      	uxtb	r5, r1
   835f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   835f6:	2c0f      	cmp	r4, #15
   835f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   835fc:	d919      	bls.n	83632 <memset+0x66>
   835fe:	4626      	mov	r6, r4
   83600:	f103 0210 	add.w	r2, r3, #16
   83604:	3e10      	subs	r6, #16
   83606:	2e0f      	cmp	r6, #15
   83608:	f842 5c10 	str.w	r5, [r2, #-16]
   8360c:	f842 5c0c 	str.w	r5, [r2, #-12]
   83610:	f842 5c08 	str.w	r5, [r2, #-8]
   83614:	f842 5c04 	str.w	r5, [r2, #-4]
   83618:	f102 0210 	add.w	r2, r2, #16
   8361c:	d8f2      	bhi.n	83604 <memset+0x38>
   8361e:	f1a4 0210 	sub.w	r2, r4, #16
   83622:	f022 020f 	bic.w	r2, r2, #15
   83626:	f004 040f 	and.w	r4, r4, #15
   8362a:	3210      	adds	r2, #16
   8362c:	2c03      	cmp	r4, #3
   8362e:	4413      	add	r3, r2
   83630:	d90d      	bls.n	8364e <memset+0x82>
   83632:	461e      	mov	r6, r3
   83634:	4622      	mov	r2, r4
   83636:	3a04      	subs	r2, #4
   83638:	2a03      	cmp	r2, #3
   8363a:	f846 5b04 	str.w	r5, [r6], #4
   8363e:	d8fa      	bhi.n	83636 <memset+0x6a>
   83640:	1f22      	subs	r2, r4, #4
   83642:	f022 0203 	bic.w	r2, r2, #3
   83646:	3204      	adds	r2, #4
   83648:	4413      	add	r3, r2
   8364a:	f004 0403 	and.w	r4, r4, #3
   8364e:	b12c      	cbz	r4, 8365c <memset+0x90>
   83650:	b2c9      	uxtb	r1, r1
   83652:	441c      	add	r4, r3
   83654:	f803 1b01 	strb.w	r1, [r3], #1
   83658:	429c      	cmp	r4, r3
   8365a:	d1fb      	bne.n	83654 <memset+0x88>
   8365c:	bc70      	pop	{r4, r5, r6}
   8365e:	4770      	bx	lr
   83660:	4614      	mov	r4, r2
   83662:	4603      	mov	r3, r0
   83664:	e7c2      	b.n	835ec <memset+0x20>
   83666:	bf00      	nop

00083668 <setbuf>:
   83668:	2900      	cmp	r1, #0
   8366a:	bf0c      	ite	eq
   8366c:	2202      	moveq	r2, #2
   8366e:	2200      	movne	r2, #0
   83670:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83674:	f000 b800 	b.w	83678 <setvbuf>

00083678 <setvbuf>:
   83678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8367c:	4d61      	ldr	r5, [pc, #388]	; (83804 <setvbuf+0x18c>)
   8367e:	b083      	sub	sp, #12
   83680:	682d      	ldr	r5, [r5, #0]
   83682:	4604      	mov	r4, r0
   83684:	460f      	mov	r7, r1
   83686:	4690      	mov	r8, r2
   83688:	461e      	mov	r6, r3
   8368a:	b115      	cbz	r5, 83692 <setvbuf+0x1a>
   8368c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8368e:	2b00      	cmp	r3, #0
   83690:	d064      	beq.n	8375c <setvbuf+0xe4>
   83692:	f1b8 0f02 	cmp.w	r8, #2
   83696:	d006      	beq.n	836a6 <setvbuf+0x2e>
   83698:	f1b8 0f01 	cmp.w	r8, #1
   8369c:	f200 809f 	bhi.w	837de <setvbuf+0x166>
   836a0:	2e00      	cmp	r6, #0
   836a2:	f2c0 809c 	blt.w	837de <setvbuf+0x166>
   836a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   836a8:	07d8      	lsls	r0, r3, #31
   836aa:	d534      	bpl.n	83716 <setvbuf+0x9e>
   836ac:	4621      	mov	r1, r4
   836ae:	4628      	mov	r0, r5
   836b0:	f002 fc04 	bl	85ebc <_fflush_r>
   836b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   836b6:	b141      	cbz	r1, 836ca <setvbuf+0x52>
   836b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   836bc:	4299      	cmp	r1, r3
   836be:	d002      	beq.n	836c6 <setvbuf+0x4e>
   836c0:	4628      	mov	r0, r5
   836c2:	f002 fcf9 	bl	860b8 <_free_r>
   836c6:	2300      	movs	r3, #0
   836c8:	6323      	str	r3, [r4, #48]	; 0x30
   836ca:	2200      	movs	r2, #0
   836cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   836d0:	61a2      	str	r2, [r4, #24]
   836d2:	6062      	str	r2, [r4, #4]
   836d4:	061a      	lsls	r2, r3, #24
   836d6:	d43a      	bmi.n	8374e <setvbuf+0xd6>
   836d8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   836dc:	f023 0303 	bic.w	r3, r3, #3
   836e0:	f1b8 0f02 	cmp.w	r8, #2
   836e4:	81a3      	strh	r3, [r4, #12]
   836e6:	d01d      	beq.n	83724 <setvbuf+0xac>
   836e8:	ab01      	add	r3, sp, #4
   836ea:	466a      	mov	r2, sp
   836ec:	4621      	mov	r1, r4
   836ee:	4628      	mov	r0, r5
   836f0:	f002 fe06 	bl	86300 <__swhatbuf_r>
   836f4:	89a3      	ldrh	r3, [r4, #12]
   836f6:	4318      	orrs	r0, r3
   836f8:	81a0      	strh	r0, [r4, #12]
   836fa:	2e00      	cmp	r6, #0
   836fc:	d132      	bne.n	83764 <setvbuf+0xec>
   836fe:	9e00      	ldr	r6, [sp, #0]
   83700:	4630      	mov	r0, r6
   83702:	f002 fe2b 	bl	8635c <malloc>
   83706:	4607      	mov	r7, r0
   83708:	2800      	cmp	r0, #0
   8370a:	d06b      	beq.n	837e4 <setvbuf+0x16c>
   8370c:	89a3      	ldrh	r3, [r4, #12]
   8370e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83712:	81a3      	strh	r3, [r4, #12]
   83714:	e028      	b.n	83768 <setvbuf+0xf0>
   83716:	89a3      	ldrh	r3, [r4, #12]
   83718:	0599      	lsls	r1, r3, #22
   8371a:	d4c7      	bmi.n	836ac <setvbuf+0x34>
   8371c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8371e:	f002 fdeb 	bl	862f8 <__retarget_lock_acquire_recursive>
   83722:	e7c3      	b.n	836ac <setvbuf+0x34>
   83724:	2500      	movs	r5, #0
   83726:	2600      	movs	r6, #0
   83728:	2001      	movs	r0, #1
   8372a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8372c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83730:	f043 0302 	orr.w	r3, r3, #2
   83734:	60a6      	str	r6, [r4, #8]
   83736:	07ce      	lsls	r6, r1, #31
   83738:	81a3      	strh	r3, [r4, #12]
   8373a:	6160      	str	r0, [r4, #20]
   8373c:	6022      	str	r2, [r4, #0]
   8373e:	6122      	str	r2, [r4, #16]
   83740:	d401      	bmi.n	83746 <setvbuf+0xce>
   83742:	0598      	lsls	r0, r3, #22
   83744:	d53e      	bpl.n	837c4 <setvbuf+0x14c>
   83746:	4628      	mov	r0, r5
   83748:	b003      	add	sp, #12
   8374a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8374e:	6921      	ldr	r1, [r4, #16]
   83750:	4628      	mov	r0, r5
   83752:	f002 fcb1 	bl	860b8 <_free_r>
   83756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8375a:	e7bd      	b.n	836d8 <setvbuf+0x60>
   8375c:	4628      	mov	r0, r5
   8375e:	f002 fc05 	bl	85f6c <__sinit>
   83762:	e796      	b.n	83692 <setvbuf+0x1a>
   83764:	2f00      	cmp	r7, #0
   83766:	d0cb      	beq.n	83700 <setvbuf+0x88>
   83768:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8376a:	2b00      	cmp	r3, #0
   8376c:	d033      	beq.n	837d6 <setvbuf+0x15e>
   8376e:	9b00      	ldr	r3, [sp, #0]
   83770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83774:	429e      	cmp	r6, r3
   83776:	bf1c      	itt	ne
   83778:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   8377c:	81a2      	strhne	r2, [r4, #12]
   8377e:	f1b8 0f01 	cmp.w	r8, #1
   83782:	bf04      	itt	eq
   83784:	f042 0201 	orreq.w	r2, r2, #1
   83788:	81a2      	strheq	r2, [r4, #12]
   8378a:	b292      	uxth	r2, r2
   8378c:	f012 0308 	ands.w	r3, r2, #8
   83790:	6027      	str	r7, [r4, #0]
   83792:	6127      	str	r7, [r4, #16]
   83794:	6166      	str	r6, [r4, #20]
   83796:	d00e      	beq.n	837b6 <setvbuf+0x13e>
   83798:	07d1      	lsls	r1, r2, #31
   8379a:	d51a      	bpl.n	837d2 <setvbuf+0x15a>
   8379c:	2300      	movs	r3, #0
   8379e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   837a0:	4276      	negs	r6, r6
   837a2:	f015 0501 	ands.w	r5, r5, #1
   837a6:	61a6      	str	r6, [r4, #24]
   837a8:	60a3      	str	r3, [r4, #8]
   837aa:	d009      	beq.n	837c0 <setvbuf+0x148>
   837ac:	2500      	movs	r5, #0
   837ae:	4628      	mov	r0, r5
   837b0:	b003      	add	sp, #12
   837b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   837b6:	60a3      	str	r3, [r4, #8]
   837b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   837ba:	f015 0501 	ands.w	r5, r5, #1
   837be:	d1f5      	bne.n	837ac <setvbuf+0x134>
   837c0:	0593      	lsls	r3, r2, #22
   837c2:	d4c0      	bmi.n	83746 <setvbuf+0xce>
   837c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   837c6:	f002 fd99 	bl	862fc <__retarget_lock_release_recursive>
   837ca:	4628      	mov	r0, r5
   837cc:	b003      	add	sp, #12
   837ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   837d2:	60a6      	str	r6, [r4, #8]
   837d4:	e7f0      	b.n	837b8 <setvbuf+0x140>
   837d6:	4628      	mov	r0, r5
   837d8:	f002 fbc8 	bl	85f6c <__sinit>
   837dc:	e7c7      	b.n	8376e <setvbuf+0xf6>
   837de:	f04f 35ff 	mov.w	r5, #4294967295
   837e2:	e7b0      	b.n	83746 <setvbuf+0xce>
   837e4:	f8dd 9000 	ldr.w	r9, [sp]
   837e8:	45b1      	cmp	r9, r6
   837ea:	d004      	beq.n	837f6 <setvbuf+0x17e>
   837ec:	4648      	mov	r0, r9
   837ee:	f002 fdb5 	bl	8635c <malloc>
   837f2:	4607      	mov	r7, r0
   837f4:	b920      	cbnz	r0, 83800 <setvbuf+0x188>
   837f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   837fa:	f04f 35ff 	mov.w	r5, #4294967295
   837fe:	e792      	b.n	83726 <setvbuf+0xae>
   83800:	464e      	mov	r6, r9
   83802:	e783      	b.n	8370c <setvbuf+0x94>
   83804:	200701bc 	.word	0x200701bc

00083808 <snprintf>:
   83808:	b40c      	push	{r2, r3}
   8380a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8380c:	4b22      	ldr	r3, [pc, #136]	; (83898 <snprintf+0x90>)
   8380e:	1e0c      	subs	r4, r1, #0
   83810:	b09d      	sub	sp, #116	; 0x74
   83812:	681d      	ldr	r5, [r3, #0]
   83814:	db3b      	blt.n	8388e <snprintf+0x86>
   83816:	f44f 7302 	mov.w	r3, #520	; 0x208
   8381a:	9002      	str	r0, [sp, #8]
   8381c:	9006      	str	r0, [sp, #24]
   8381e:	f8ad 3014 	strh.w	r3, [sp, #20]
   83822:	f64f 77ff 	movw	r7, #65535	; 0xffff
   83826:	ae23      	add	r6, sp, #140	; 0x8c
   83828:	d015      	beq.n	83856 <snprintf+0x4e>
   8382a:	3c01      	subs	r4, #1
   8382c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8382e:	4633      	mov	r3, r6
   83830:	a902      	add	r1, sp, #8
   83832:	4628      	mov	r0, r5
   83834:	9404      	str	r4, [sp, #16]
   83836:	9407      	str	r4, [sp, #28]
   83838:	f8ad 7016 	strh.w	r7, [sp, #22]
   8383c:	9601      	str	r6, [sp, #4]
   8383e:	f000 f85b 	bl	838f8 <_svfprintf_r>
   83842:	1c42      	adds	r2, r0, #1
   83844:	db19      	blt.n	8387a <snprintf+0x72>
   83846:	2200      	movs	r2, #0
   83848:	9b02      	ldr	r3, [sp, #8]
   8384a:	701a      	strb	r2, [r3, #0]
   8384c:	b01d      	add	sp, #116	; 0x74
   8384e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83852:	b002      	add	sp, #8
   83854:	4770      	bx	lr
   83856:	4633      	mov	r3, r6
   83858:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8385a:	a902      	add	r1, sp, #8
   8385c:	4628      	mov	r0, r5
   8385e:	9404      	str	r4, [sp, #16]
   83860:	9407      	str	r4, [sp, #28]
   83862:	f8ad 7016 	strh.w	r7, [sp, #22]
   83866:	9601      	str	r6, [sp, #4]
   83868:	f000 f846 	bl	838f8 <_svfprintf_r>
   8386c:	1c43      	adds	r3, r0, #1
   8386e:	db07      	blt.n	83880 <snprintf+0x78>
   83870:	b01d      	add	sp, #116	; 0x74
   83872:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   83876:	b002      	add	sp, #8
   83878:	4770      	bx	lr
   8387a:	238b      	movs	r3, #139	; 0x8b
   8387c:	602b      	str	r3, [r5, #0]
   8387e:	e7e2      	b.n	83846 <snprintf+0x3e>
   83880:	238b      	movs	r3, #139	; 0x8b
   83882:	602b      	str	r3, [r5, #0]
   83884:	b01d      	add	sp, #116	; 0x74
   83886:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8388a:	b002      	add	sp, #8
   8388c:	4770      	bx	lr
   8388e:	238b      	movs	r3, #139	; 0x8b
   83890:	f04f 30ff 	mov.w	r0, #4294967295
   83894:	602b      	str	r3, [r5, #0]
   83896:	e7eb      	b.n	83870 <snprintf+0x68>
   83898:	200701bc 	.word	0x200701bc

0008389c <strlen>:
   8389c:	f020 0103 	bic.w	r1, r0, #3
   838a0:	f010 0003 	ands.w	r0, r0, #3
   838a4:	f1c0 0000 	rsb	r0, r0, #0
   838a8:	f851 3b04 	ldr.w	r3, [r1], #4
   838ac:	f100 0c04 	add.w	ip, r0, #4
   838b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   838b4:	f06f 0200 	mvn.w	r2, #0
   838b8:	bf1c      	itt	ne
   838ba:	fa22 f20c 	lsrne.w	r2, r2, ip
   838be:	4313      	orrne	r3, r2
   838c0:	f04f 0c01 	mov.w	ip, #1
   838c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   838c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   838cc:	eba3 020c 	sub.w	r2, r3, ip
   838d0:	ea22 0203 	bic.w	r2, r2, r3
   838d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   838d8:	bf04      	itt	eq
   838da:	f851 3b04 	ldreq.w	r3, [r1], #4
   838de:	3004      	addeq	r0, #4
   838e0:	d0f4      	beq.n	838cc <strlen+0x30>
   838e2:	f1c2 0100 	rsb	r1, r2, #0
   838e6:	ea02 0201 	and.w	r2, r2, r1
   838ea:	fab2 f282 	clz	r2, r2
   838ee:	f1c2 021f 	rsb	r2, r2, #31
   838f2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   838f6:	4770      	bx	lr

000838f8 <_svfprintf_r>:
   838f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   838fc:	b0c3      	sub	sp, #268	; 0x10c
   838fe:	460c      	mov	r4, r1
   83900:	910b      	str	r1, [sp, #44]	; 0x2c
   83902:	4692      	mov	sl, r2
   83904:	930f      	str	r3, [sp, #60]	; 0x3c
   83906:	900c      	str	r0, [sp, #48]	; 0x30
   83908:	f002 fce4 	bl	862d4 <_localeconv_r>
   8390c:	6803      	ldr	r3, [r0, #0]
   8390e:	4618      	mov	r0, r3
   83910:	931a      	str	r3, [sp, #104]	; 0x68
   83912:	f7ff ffc3 	bl	8389c <strlen>
   83916:	89a3      	ldrh	r3, [r4, #12]
   83918:	9019      	str	r0, [sp, #100]	; 0x64
   8391a:	0619      	lsls	r1, r3, #24
   8391c:	d503      	bpl.n	83926 <_svfprintf_r+0x2e>
   8391e:	6923      	ldr	r3, [r4, #16]
   83920:	2b00      	cmp	r3, #0
   83922:	f001 8035 	beq.w	84990 <_svfprintf_r+0x1098>
   83926:	2300      	movs	r3, #0
   83928:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8392c:	46c8      	mov	r8, r9
   8392e:	9315      	str	r3, [sp, #84]	; 0x54
   83930:	9313      	str	r3, [sp, #76]	; 0x4c
   83932:	9314      	str	r3, [sp, #80]	; 0x50
   83934:	9318      	str	r3, [sp, #96]	; 0x60
   83936:	931b      	str	r3, [sp, #108]	; 0x6c
   83938:	9309      	str	r3, [sp, #36]	; 0x24
   8393a:	9316      	str	r3, [sp, #88]	; 0x58
   8393c:	9317      	str	r3, [sp, #92]	; 0x5c
   8393e:	9327      	str	r3, [sp, #156]	; 0x9c
   83940:	9326      	str	r3, [sp, #152]	; 0x98
   83942:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   83946:	f89a 3000 	ldrb.w	r3, [sl]
   8394a:	4654      	mov	r4, sl
   8394c:	b1eb      	cbz	r3, 8398a <_svfprintf_r+0x92>
   8394e:	2b25      	cmp	r3, #37	; 0x25
   83950:	d102      	bne.n	83958 <_svfprintf_r+0x60>
   83952:	e01a      	b.n	8398a <_svfprintf_r+0x92>
   83954:	2b25      	cmp	r3, #37	; 0x25
   83956:	d003      	beq.n	83960 <_svfprintf_r+0x68>
   83958:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8395c:	2b00      	cmp	r3, #0
   8395e:	d1f9      	bne.n	83954 <_svfprintf_r+0x5c>
   83960:	eba4 050a 	sub.w	r5, r4, sl
   83964:	b18d      	cbz	r5, 8398a <_svfprintf_r+0x92>
   83966:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83968:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8396a:	3301      	adds	r3, #1
   8396c:	442a      	add	r2, r5
   8396e:	2b07      	cmp	r3, #7
   83970:	f8c8 a000 	str.w	sl, [r8]
   83974:	f8c8 5004 	str.w	r5, [r8, #4]
   83978:	9227      	str	r2, [sp, #156]	; 0x9c
   8397a:	9326      	str	r3, [sp, #152]	; 0x98
   8397c:	f300 808a 	bgt.w	83a94 <_svfprintf_r+0x19c>
   83980:	f108 0808 	add.w	r8, r8, #8
   83984:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83986:	442b      	add	r3, r5
   83988:	9309      	str	r3, [sp, #36]	; 0x24
   8398a:	7823      	ldrb	r3, [r4, #0]
   8398c:	2b00      	cmp	r3, #0
   8398e:	f000 8089 	beq.w	83aa4 <_svfprintf_r+0x1ac>
   83992:	2300      	movs	r3, #0
   83994:	f04f 30ff 	mov.w	r0, #4294967295
   83998:	461a      	mov	r2, r3
   8399a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8399e:	4619      	mov	r1, r3
   839a0:	930d      	str	r3, [sp, #52]	; 0x34
   839a2:	469b      	mov	fp, r3
   839a4:	7863      	ldrb	r3, [r4, #1]
   839a6:	f104 0a01 	add.w	sl, r4, #1
   839aa:	900a      	str	r0, [sp, #40]	; 0x28
   839ac:	f10a 0a01 	add.w	sl, sl, #1
   839b0:	f1a3 0020 	sub.w	r0, r3, #32
   839b4:	2858      	cmp	r0, #88	; 0x58
   839b6:	f200 83b7 	bhi.w	84128 <_svfprintf_r+0x830>
   839ba:	e8df f010 	tbh	[pc, r0, lsl #1]
   839be:	034c      	.short	0x034c
   839c0:	03b503b5 	.word	0x03b503b5
   839c4:	03b50354 	.word	0x03b50354
   839c8:	03b503b5 	.word	0x03b503b5
   839cc:	03b503b5 	.word	0x03b503b5
   839d0:	005903b5 	.word	0x005903b5
   839d4:	03b50359 	.word	0x03b50359
   839d8:	02140066 	.word	0x02140066
   839dc:	022f03b5 	.word	0x022f03b5
   839e0:	03a503a5 	.word	0x03a503a5
   839e4:	03a503a5 	.word	0x03a503a5
   839e8:	03a503a5 	.word	0x03a503a5
   839ec:	03a503a5 	.word	0x03a503a5
   839f0:	03b503a5 	.word	0x03b503a5
   839f4:	03b503b5 	.word	0x03b503b5
   839f8:	03b503b5 	.word	0x03b503b5
   839fc:	03b503b5 	.word	0x03b503b5
   83a00:	03b503b5 	.word	0x03b503b5
   83a04:	028b03b5 	.word	0x028b03b5
   83a08:	03b502d3 	.word	0x03b502d3
   83a0c:	03b502d3 	.word	0x03b502d3
   83a10:	03b503b5 	.word	0x03b503b5
   83a14:	031b03b5 	.word	0x031b03b5
   83a18:	03b503b5 	.word	0x03b503b5
   83a1c:	03b50320 	.word	0x03b50320
   83a20:	03b503b5 	.word	0x03b503b5
   83a24:	03b503b5 	.word	0x03b503b5
   83a28:	03b50234 	.word	0x03b50234
   83a2c:	024b03b5 	.word	0x024b03b5
   83a30:	03b503b5 	.word	0x03b503b5
   83a34:	03b503b5 	.word	0x03b503b5
   83a38:	03b503b5 	.word	0x03b503b5
   83a3c:	03b503b5 	.word	0x03b503b5
   83a40:	03b503b5 	.word	0x03b503b5
   83a44:	039e0276 	.word	0x039e0276
   83a48:	02d302d3 	.word	0x02d302d3
   83a4c:	036302d3 	.word	0x036302d3
   83a50:	03b5039e 	.word	0x03b5039e
   83a54:	036803b5 	.word	0x036803b5
   83a58:	037503b5 	.word	0x037503b5
   83a5c:	038c01dd 	.word	0x038c01dd
   83a60:	03b5035e 	.word	0x03b5035e
   83a64:	03b501f2 	.word	0x03b501f2
   83a68:	03b50087 	.word	0x03b50087
   83a6c:	033203b5 	.word	0x033203b5
   83a70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83a72:	6823      	ldr	r3, [r4, #0]
   83a74:	4618      	mov	r0, r3
   83a76:	930d      	str	r3, [sp, #52]	; 0x34
   83a78:	4623      	mov	r3, r4
   83a7a:	2800      	cmp	r0, #0
   83a7c:	f103 0304 	add.w	r3, r3, #4
   83a80:	930f      	str	r3, [sp, #60]	; 0x3c
   83a82:	da04      	bge.n	83a8e <_svfprintf_r+0x196>
   83a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83a86:	425b      	negs	r3, r3
   83a88:	930d      	str	r3, [sp, #52]	; 0x34
   83a8a:	f04b 0b04 	orr.w	fp, fp, #4
   83a8e:	f89a 3000 	ldrb.w	r3, [sl]
   83a92:	e78b      	b.n	839ac <_svfprintf_r+0xb4>
   83a94:	aa25      	add	r2, sp, #148	; 0x94
   83a96:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83a98:	980c      	ldr	r0, [sp, #48]	; 0x30
   83a9a:	f003 faad 	bl	86ff8 <__ssprint_r>
   83a9e:	b940      	cbnz	r0, 83ab2 <_svfprintf_r+0x1ba>
   83aa0:	46c8      	mov	r8, r9
   83aa2:	e76f      	b.n	83984 <_svfprintf_r+0x8c>
   83aa4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   83aa6:	b123      	cbz	r3, 83ab2 <_svfprintf_r+0x1ba>
   83aa8:	980c      	ldr	r0, [sp, #48]	; 0x30
   83aaa:	aa25      	add	r2, sp, #148	; 0x94
   83aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83aae:	f003 faa3 	bl	86ff8 <__ssprint_r>
   83ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83ab4:	899b      	ldrh	r3, [r3, #12]
   83ab6:	f013 0f40 	tst.w	r3, #64	; 0x40
   83aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83abc:	bf18      	it	ne
   83abe:	f04f 33ff 	movne.w	r3, #4294967295
   83ac2:	9309      	str	r3, [sp, #36]	; 0x24
   83ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
   83ac6:	b043      	add	sp, #268	; 0x10c
   83ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83acc:	f01b 0f20 	tst.w	fp, #32
   83ad0:	9311      	str	r3, [sp, #68]	; 0x44
   83ad2:	f040 81af 	bne.w	83e34 <_svfprintf_r+0x53c>
   83ad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83ad8:	f01b 0f10 	tst.w	fp, #16
   83adc:	4613      	mov	r3, r2
   83ade:	f040 859a 	bne.w	84616 <_svfprintf_r+0xd1e>
   83ae2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83ae6:	f000 8596 	beq.w	84616 <_svfprintf_r+0xd1e>
   83aea:	2500      	movs	r5, #0
   83aec:	2301      	movs	r3, #1
   83aee:	8814      	ldrh	r4, [r2, #0]
   83af0:	3204      	adds	r2, #4
   83af2:	920f      	str	r2, [sp, #60]	; 0x3c
   83af4:	2200      	movs	r2, #0
   83af6:	4617      	mov	r7, r2
   83af8:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   83afc:	990a      	ldr	r1, [sp, #40]	; 0x28
   83afe:	1c4a      	adds	r2, r1, #1
   83b00:	f000 8210 	beq.w	83f24 <_svfprintf_r+0x62c>
   83b04:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   83b08:	9207      	str	r2, [sp, #28]
   83b0a:	ea54 0205 	orrs.w	r2, r4, r5
   83b0e:	f040 820f 	bne.w	83f30 <_svfprintf_r+0x638>
   83b12:	2900      	cmp	r1, #0
   83b14:	f040 8431 	bne.w	8437a <_svfprintf_r+0xa82>
   83b18:	2b00      	cmp	r3, #0
   83b1a:	f040 8539 	bne.w	84590 <_svfprintf_r+0xc98>
   83b1e:	f01b 0301 	ands.w	r3, fp, #1
   83b22:	930e      	str	r3, [sp, #56]	; 0x38
   83b24:	f000 8662 	beq.w	847ec <_svfprintf_r+0xef4>
   83b28:	2330      	movs	r3, #48	; 0x30
   83b2a:	ae42      	add	r6, sp, #264	; 0x108
   83b2c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   83b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83b34:	4293      	cmp	r3, r2
   83b36:	bfb8      	it	lt
   83b38:	4613      	movlt	r3, r2
   83b3a:	9308      	str	r3, [sp, #32]
   83b3c:	2300      	movs	r3, #0
   83b3e:	9312      	str	r3, [sp, #72]	; 0x48
   83b40:	b117      	cbz	r7, 83b48 <_svfprintf_r+0x250>
   83b42:	9b08      	ldr	r3, [sp, #32]
   83b44:	3301      	adds	r3, #1
   83b46:	9308      	str	r3, [sp, #32]
   83b48:	9b07      	ldr	r3, [sp, #28]
   83b4a:	f013 0302 	ands.w	r3, r3, #2
   83b4e:	9310      	str	r3, [sp, #64]	; 0x40
   83b50:	d002      	beq.n	83b58 <_svfprintf_r+0x260>
   83b52:	9b08      	ldr	r3, [sp, #32]
   83b54:	3302      	adds	r3, #2
   83b56:	9308      	str	r3, [sp, #32]
   83b58:	9b07      	ldr	r3, [sp, #28]
   83b5a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   83b5e:	f040 8310 	bne.w	84182 <_svfprintf_r+0x88a>
   83b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83b64:	9a08      	ldr	r2, [sp, #32]
   83b66:	eba3 0b02 	sub.w	fp, r3, r2
   83b6a:	f1bb 0f00 	cmp.w	fp, #0
   83b6e:	f340 8308 	ble.w	84182 <_svfprintf_r+0x88a>
   83b72:	f1bb 0f10 	cmp.w	fp, #16
   83b76:	f340 87b2 	ble.w	84ade <_svfprintf_r+0x11e6>
   83b7a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83b7c:	4643      	mov	r3, r8
   83b7e:	4621      	mov	r1, r4
   83b80:	46a8      	mov	r8, r5
   83b82:	2710      	movs	r7, #16
   83b84:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83b86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83b88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83b8a:	e006      	b.n	83b9a <_svfprintf_r+0x2a2>
   83b8c:	f1ab 0b10 	sub.w	fp, fp, #16
   83b90:	f1bb 0f10 	cmp.w	fp, #16
   83b94:	f103 0308 	add.w	r3, r3, #8
   83b98:	dd18      	ble.n	83bcc <_svfprintf_r+0x2d4>
   83b9a:	3201      	adds	r2, #1
   83b9c:	48ab      	ldr	r0, [pc, #684]	; (83e4c <_svfprintf_r+0x554>)
   83b9e:	3110      	adds	r1, #16
   83ba0:	2a07      	cmp	r2, #7
   83ba2:	9127      	str	r1, [sp, #156]	; 0x9c
   83ba4:	9226      	str	r2, [sp, #152]	; 0x98
   83ba6:	e883 0081 	stmia.w	r3, {r0, r7}
   83baa:	ddef      	ble.n	83b8c <_svfprintf_r+0x294>
   83bac:	aa25      	add	r2, sp, #148	; 0x94
   83bae:	4629      	mov	r1, r5
   83bb0:	4620      	mov	r0, r4
   83bb2:	f003 fa21 	bl	86ff8 <__ssprint_r>
   83bb6:	2800      	cmp	r0, #0
   83bb8:	f47f af7b 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   83bbc:	f1ab 0b10 	sub.w	fp, fp, #16
   83bc0:	f1bb 0f10 	cmp.w	fp, #16
   83bc4:	464b      	mov	r3, r9
   83bc6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83bc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83bca:	dce6      	bgt.n	83b9a <_svfprintf_r+0x2a2>
   83bcc:	4645      	mov	r5, r8
   83bce:	460c      	mov	r4, r1
   83bd0:	4698      	mov	r8, r3
   83bd2:	3201      	adds	r2, #1
   83bd4:	4b9d      	ldr	r3, [pc, #628]	; (83e4c <_svfprintf_r+0x554>)
   83bd6:	445c      	add	r4, fp
   83bd8:	2a07      	cmp	r2, #7
   83bda:	9427      	str	r4, [sp, #156]	; 0x9c
   83bdc:	9226      	str	r2, [sp, #152]	; 0x98
   83bde:	e888 0808 	stmia.w	r8, {r3, fp}
   83be2:	f300 82c3 	bgt.w	8416c <_svfprintf_r+0x874>
   83be6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83bea:	f108 0808 	add.w	r8, r8, #8
   83bee:	b187      	cbz	r7, 83c12 <_svfprintf_r+0x31a>
   83bf0:	2101      	movs	r1, #1
   83bf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83bf4:	440c      	add	r4, r1
   83bf6:	440b      	add	r3, r1
   83bf8:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   83bfc:	2b07      	cmp	r3, #7
   83bfe:	9427      	str	r4, [sp, #156]	; 0x9c
   83c00:	9326      	str	r3, [sp, #152]	; 0x98
   83c02:	f8c8 1004 	str.w	r1, [r8, #4]
   83c06:	f8c8 2000 	str.w	r2, [r8]
   83c0a:	f300 83cd 	bgt.w	843a8 <_svfprintf_r+0xab0>
   83c0e:	f108 0808 	add.w	r8, r8, #8
   83c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83c14:	b17b      	cbz	r3, 83c36 <_svfprintf_r+0x33e>
   83c16:	2102      	movs	r1, #2
   83c18:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83c1a:	440c      	add	r4, r1
   83c1c:	3301      	adds	r3, #1
   83c1e:	aa1e      	add	r2, sp, #120	; 0x78
   83c20:	2b07      	cmp	r3, #7
   83c22:	9427      	str	r4, [sp, #156]	; 0x9c
   83c24:	9326      	str	r3, [sp, #152]	; 0x98
   83c26:	f8c8 1004 	str.w	r1, [r8, #4]
   83c2a:	f8c8 2000 	str.w	r2, [r8]
   83c2e:	f300 8411 	bgt.w	84454 <_svfprintf_r+0xb5c>
   83c32:	f108 0808 	add.w	r8, r8, #8
   83c36:	2d80      	cmp	r5, #128	; 0x80
   83c38:	f000 8304 	beq.w	84244 <_svfprintf_r+0x94c>
   83c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83c40:	1a9f      	subs	r7, r3, r2
   83c42:	2f00      	cmp	r7, #0
   83c44:	dd37      	ble.n	83cb6 <_svfprintf_r+0x3be>
   83c46:	2f10      	cmp	r7, #16
   83c48:	f340 8679 	ble.w	8493e <_svfprintf_r+0x1046>
   83c4c:	4d80      	ldr	r5, [pc, #512]	; (83e50 <_svfprintf_r+0x558>)
   83c4e:	4642      	mov	r2, r8
   83c50:	4621      	mov	r1, r4
   83c52:	46b0      	mov	r8, r6
   83c54:	f04f 0b10 	mov.w	fp, #16
   83c58:	462e      	mov	r6, r5
   83c5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83c5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83c5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   83c60:	e004      	b.n	83c6c <_svfprintf_r+0x374>
   83c62:	3f10      	subs	r7, #16
   83c64:	2f10      	cmp	r7, #16
   83c66:	f102 0208 	add.w	r2, r2, #8
   83c6a:	dd15      	ble.n	83c98 <_svfprintf_r+0x3a0>
   83c6c:	3301      	adds	r3, #1
   83c6e:	3110      	adds	r1, #16
   83c70:	2b07      	cmp	r3, #7
   83c72:	9127      	str	r1, [sp, #156]	; 0x9c
   83c74:	9326      	str	r3, [sp, #152]	; 0x98
   83c76:	e882 0840 	stmia.w	r2, {r6, fp}
   83c7a:	ddf2      	ble.n	83c62 <_svfprintf_r+0x36a>
   83c7c:	aa25      	add	r2, sp, #148	; 0x94
   83c7e:	4629      	mov	r1, r5
   83c80:	4620      	mov	r0, r4
   83c82:	f003 f9b9 	bl	86ff8 <__ssprint_r>
   83c86:	2800      	cmp	r0, #0
   83c88:	f47f af13 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   83c8c:	3f10      	subs	r7, #16
   83c8e:	2f10      	cmp	r7, #16
   83c90:	464a      	mov	r2, r9
   83c92:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83c94:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83c96:	dce9      	bgt.n	83c6c <_svfprintf_r+0x374>
   83c98:	4635      	mov	r5, r6
   83c9a:	460c      	mov	r4, r1
   83c9c:	4646      	mov	r6, r8
   83c9e:	4690      	mov	r8, r2
   83ca0:	3301      	adds	r3, #1
   83ca2:	443c      	add	r4, r7
   83ca4:	2b07      	cmp	r3, #7
   83ca6:	9427      	str	r4, [sp, #156]	; 0x9c
   83ca8:	9326      	str	r3, [sp, #152]	; 0x98
   83caa:	e888 00a0 	stmia.w	r8, {r5, r7}
   83cae:	f300 8370 	bgt.w	84392 <_svfprintf_r+0xa9a>
   83cb2:	f108 0808 	add.w	r8, r8, #8
   83cb6:	9b07      	ldr	r3, [sp, #28]
   83cb8:	05df      	lsls	r7, r3, #23
   83cba:	f100 8264 	bmi.w	84186 <_svfprintf_r+0x88e>
   83cbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
   83cc2:	3301      	adds	r3, #1
   83cc4:	440c      	add	r4, r1
   83cc6:	2b07      	cmp	r3, #7
   83cc8:	9427      	str	r4, [sp, #156]	; 0x9c
   83cca:	f8c8 6000 	str.w	r6, [r8]
   83cce:	f8c8 1004 	str.w	r1, [r8, #4]
   83cd2:	9326      	str	r3, [sp, #152]	; 0x98
   83cd4:	f300 83b3 	bgt.w	8443e <_svfprintf_r+0xb46>
   83cd8:	f108 0808 	add.w	r8, r8, #8
   83cdc:	9b07      	ldr	r3, [sp, #28]
   83cde:	075b      	lsls	r3, r3, #29
   83ce0:	d53b      	bpl.n	83d5a <_svfprintf_r+0x462>
   83ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83ce4:	9a08      	ldr	r2, [sp, #32]
   83ce6:	1a9d      	subs	r5, r3, r2
   83ce8:	2d00      	cmp	r5, #0
   83cea:	dd36      	ble.n	83d5a <_svfprintf_r+0x462>
   83cec:	2d10      	cmp	r5, #16
   83cee:	f340 8721 	ble.w	84b34 <_svfprintf_r+0x123c>
   83cf2:	2610      	movs	r6, #16
   83cf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83cf6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   83cf8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   83cfc:	e004      	b.n	83d08 <_svfprintf_r+0x410>
   83cfe:	3d10      	subs	r5, #16
   83d00:	2d10      	cmp	r5, #16
   83d02:	f108 0808 	add.w	r8, r8, #8
   83d06:	dd16      	ble.n	83d36 <_svfprintf_r+0x43e>
   83d08:	3301      	adds	r3, #1
   83d0a:	4a50      	ldr	r2, [pc, #320]	; (83e4c <_svfprintf_r+0x554>)
   83d0c:	3410      	adds	r4, #16
   83d0e:	2b07      	cmp	r3, #7
   83d10:	9427      	str	r4, [sp, #156]	; 0x9c
   83d12:	9326      	str	r3, [sp, #152]	; 0x98
   83d14:	e888 0044 	stmia.w	r8, {r2, r6}
   83d18:	ddf1      	ble.n	83cfe <_svfprintf_r+0x406>
   83d1a:	aa25      	add	r2, sp, #148	; 0x94
   83d1c:	4659      	mov	r1, fp
   83d1e:	4638      	mov	r0, r7
   83d20:	f003 f96a 	bl	86ff8 <__ssprint_r>
   83d24:	2800      	cmp	r0, #0
   83d26:	f47f aec4 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   83d2a:	3d10      	subs	r5, #16
   83d2c:	2d10      	cmp	r5, #16
   83d2e:	46c8      	mov	r8, r9
   83d30:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83d32:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83d34:	dce8      	bgt.n	83d08 <_svfprintf_r+0x410>
   83d36:	3301      	adds	r3, #1
   83d38:	4a44      	ldr	r2, [pc, #272]	; (83e4c <_svfprintf_r+0x554>)
   83d3a:	442c      	add	r4, r5
   83d3c:	2b07      	cmp	r3, #7
   83d3e:	9427      	str	r4, [sp, #156]	; 0x9c
   83d40:	9326      	str	r3, [sp, #152]	; 0x98
   83d42:	e888 0024 	stmia.w	r8, {r2, r5}
   83d46:	dd08      	ble.n	83d5a <_svfprintf_r+0x462>
   83d48:	aa25      	add	r2, sp, #148	; 0x94
   83d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83d4c:	980c      	ldr	r0, [sp, #48]	; 0x30
   83d4e:	f003 f953 	bl	86ff8 <__ssprint_r>
   83d52:	2800      	cmp	r0, #0
   83d54:	f47f aead 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   83d58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   83d5e:	9908      	ldr	r1, [sp, #32]
   83d60:	428a      	cmp	r2, r1
   83d62:	bfac      	ite	ge
   83d64:	189b      	addge	r3, r3, r2
   83d66:	185b      	addlt	r3, r3, r1
   83d68:	9309      	str	r3, [sp, #36]	; 0x24
   83d6a:	2c00      	cmp	r4, #0
   83d6c:	f040 82fb 	bne.w	84366 <_svfprintf_r+0xa6e>
   83d70:	2300      	movs	r3, #0
   83d72:	46c8      	mov	r8, r9
   83d74:	9326      	str	r3, [sp, #152]	; 0x98
   83d76:	e5e6      	b.n	83946 <_svfprintf_r+0x4e>
   83d78:	9311      	str	r3, [sp, #68]	; 0x44
   83d7a:	f01b 0320 	ands.w	r3, fp, #32
   83d7e:	f040 8145 	bne.w	8400c <_svfprintf_r+0x714>
   83d82:	f01b 0210 	ands.w	r2, fp, #16
   83d86:	f040 8466 	bne.w	84656 <_svfprintf_r+0xd5e>
   83d8a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   83d8e:	f000 8462 	beq.w	84656 <_svfprintf_r+0xd5e>
   83d92:	990f      	ldr	r1, [sp, #60]	; 0x3c
   83d94:	4613      	mov	r3, r2
   83d96:	460a      	mov	r2, r1
   83d98:	3204      	adds	r2, #4
   83d9a:	880c      	ldrh	r4, [r1, #0]
   83d9c:	2500      	movs	r5, #0
   83d9e:	920f      	str	r2, [sp, #60]	; 0x3c
   83da0:	e6a8      	b.n	83af4 <_svfprintf_r+0x1fc>
   83da2:	2500      	movs	r5, #0
   83da4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83da6:	9311      	str	r3, [sp, #68]	; 0x44
   83da8:	6816      	ldr	r6, [r2, #0]
   83daa:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   83dae:	1d14      	adds	r4, r2, #4
   83db0:	2e00      	cmp	r6, #0
   83db2:	f000 86cd 	beq.w	84b50 <_svfprintf_r+0x1258>
   83db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83db8:	1c53      	adds	r3, r2, #1
   83dba:	f000 861b 	beq.w	849f4 <_svfprintf_r+0x10fc>
   83dbe:	4629      	mov	r1, r5
   83dc0:	4630      	mov	r0, r6
   83dc2:	f002 fd75 	bl	868b0 <memchr>
   83dc6:	2800      	cmp	r0, #0
   83dc8:	f000 870d 	beq.w	84be6 <_svfprintf_r+0x12ee>
   83dcc:	1b83      	subs	r3, r0, r6
   83dce:	950a      	str	r5, [sp, #40]	; 0x28
   83dd0:	930e      	str	r3, [sp, #56]	; 0x38
   83dd2:	940f      	str	r4, [sp, #60]	; 0x3c
   83dd4:	f8cd b01c 	str.w	fp, [sp, #28]
   83dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83ddc:	9308      	str	r3, [sp, #32]
   83dde:	9512      	str	r5, [sp, #72]	; 0x48
   83de0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83de4:	e6ac      	b.n	83b40 <_svfprintf_r+0x248>
   83de6:	f89a 3000 	ldrb.w	r3, [sl]
   83dea:	f10a 0401 	add.w	r4, sl, #1
   83dee:	2b2a      	cmp	r3, #42	; 0x2a
   83df0:	f000 87c2 	beq.w	84d78 <_svfprintf_r+0x1480>
   83df4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83df8:	2809      	cmp	r0, #9
   83dfa:	46a2      	mov	sl, r4
   83dfc:	f200 8718 	bhi.w	84c30 <_svfprintf_r+0x1338>
   83e00:	2300      	movs	r3, #0
   83e02:	461c      	mov	r4, r3
   83e04:	f81a 3b01 	ldrb.w	r3, [sl], #1
   83e08:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83e0c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   83e10:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   83e14:	2809      	cmp	r0, #9
   83e16:	d9f5      	bls.n	83e04 <_svfprintf_r+0x50c>
   83e18:	940a      	str	r4, [sp, #40]	; 0x28
   83e1a:	e5c9      	b.n	839b0 <_svfprintf_r+0xb8>
   83e1c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   83e20:	f89a 3000 	ldrb.w	r3, [sl]
   83e24:	e5c2      	b.n	839ac <_svfprintf_r+0xb4>
   83e26:	f04b 0b10 	orr.w	fp, fp, #16
   83e2a:	f01b 0f20 	tst.w	fp, #32
   83e2e:	9311      	str	r3, [sp, #68]	; 0x44
   83e30:	f43f ae51 	beq.w	83ad6 <_svfprintf_r+0x1de>
   83e34:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83e36:	3407      	adds	r4, #7
   83e38:	f024 0307 	bic.w	r3, r4, #7
   83e3c:	f103 0208 	add.w	r2, r3, #8
   83e40:	e9d3 4500 	ldrd	r4, r5, [r3]
   83e44:	920f      	str	r2, [sp, #60]	; 0x3c
   83e46:	2301      	movs	r3, #1
   83e48:	e654      	b.n	83af4 <_svfprintf_r+0x1fc>
   83e4a:	bf00      	nop
   83e4c:	0008a058 	.word	0x0008a058
   83e50:	0008a068 	.word	0x0008a068
   83e54:	9311      	str	r3, [sp, #68]	; 0x44
   83e56:	2a00      	cmp	r2, #0
   83e58:	f040 87ad 	bne.w	84db6 <_svfprintf_r+0x14be>
   83e5c:	4bbe      	ldr	r3, [pc, #760]	; (84158 <_svfprintf_r+0x860>)
   83e5e:	f01b 0f20 	tst.w	fp, #32
   83e62:	9318      	str	r3, [sp, #96]	; 0x60
   83e64:	f040 80e7 	bne.w	84036 <_svfprintf_r+0x73e>
   83e68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e6a:	f01b 0f10 	tst.w	fp, #16
   83e6e:	4613      	mov	r3, r2
   83e70:	f040 83d8 	bne.w	84624 <_svfprintf_r+0xd2c>
   83e74:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83e78:	f000 83d4 	beq.w	84624 <_svfprintf_r+0xd2c>
   83e7c:	2500      	movs	r5, #0
   83e7e:	3304      	adds	r3, #4
   83e80:	8814      	ldrh	r4, [r2, #0]
   83e82:	930f      	str	r3, [sp, #60]	; 0x3c
   83e84:	f01b 0f01 	tst.w	fp, #1
   83e88:	f000 80e3 	beq.w	84052 <_svfprintf_r+0x75a>
   83e8c:	ea54 0305 	orrs.w	r3, r4, r5
   83e90:	f000 80df 	beq.w	84052 <_svfprintf_r+0x75a>
   83e94:	2330      	movs	r3, #48	; 0x30
   83e96:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   83e9a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   83e9e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   83ea2:	f04b 0b02 	orr.w	fp, fp, #2
   83ea6:	2302      	movs	r3, #2
   83ea8:	e624      	b.n	83af4 <_svfprintf_r+0x1fc>
   83eaa:	2201      	movs	r2, #1
   83eac:	9311      	str	r3, [sp, #68]	; 0x44
   83eae:	2300      	movs	r3, #0
   83eb0:	4611      	mov	r1, r2
   83eb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   83eb4:	9208      	str	r2, [sp, #32]
   83eb6:	6802      	ldr	r2, [r0, #0]
   83eb8:	461f      	mov	r7, r3
   83eba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83ebe:	930a      	str	r3, [sp, #40]	; 0x28
   83ec0:	9312      	str	r3, [sp, #72]	; 0x48
   83ec2:	1d03      	adds	r3, r0, #4
   83ec4:	f8cd b01c 	str.w	fp, [sp, #28]
   83ec8:	910e      	str	r1, [sp, #56]	; 0x38
   83eca:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   83ece:	930f      	str	r3, [sp, #60]	; 0x3c
   83ed0:	ae28      	add	r6, sp, #160	; 0xa0
   83ed2:	e639      	b.n	83b48 <_svfprintf_r+0x250>
   83ed4:	9311      	str	r3, [sp, #68]	; 0x44
   83ed6:	2a00      	cmp	r2, #0
   83ed8:	f040 8784 	bne.w	84de4 <_svfprintf_r+0x14ec>
   83edc:	f04b 0b10 	orr.w	fp, fp, #16
   83ee0:	f01b 0f20 	tst.w	fp, #32
   83ee4:	f040 8475 	bne.w	847d2 <_svfprintf_r+0xeda>
   83ee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83eea:	f01b 0f10 	tst.w	fp, #16
   83eee:	4613      	mov	r3, r2
   83ef0:	f040 839d 	bne.w	8462e <_svfprintf_r+0xd36>
   83ef4:	f01b 0f40 	tst.w	fp, #64	; 0x40
   83ef8:	f000 8399 	beq.w	8462e <_svfprintf_r+0xd36>
   83efc:	f9b2 4000 	ldrsh.w	r4, [r2]
   83f00:	3304      	adds	r3, #4
   83f02:	17e5      	asrs	r5, r4, #31
   83f04:	930f      	str	r3, [sp, #60]	; 0x3c
   83f06:	4622      	mov	r2, r4
   83f08:	462b      	mov	r3, r5
   83f0a:	2a00      	cmp	r2, #0
   83f0c:	f173 0300 	sbcs.w	r3, r3, #0
   83f10:	f2c0 8398 	blt.w	84644 <_svfprintf_r+0xd4c>
   83f14:	990a      	ldr	r1, [sp, #40]	; 0x28
   83f16:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83f1a:	1c4a      	adds	r2, r1, #1
   83f1c:	f04f 0301 	mov.w	r3, #1
   83f20:	f47f adf0 	bne.w	83b04 <_svfprintf_r+0x20c>
   83f24:	ea54 0205 	orrs.w	r2, r4, r5
   83f28:	f000 8229 	beq.w	8437e <_svfprintf_r+0xa86>
   83f2c:	f8cd b01c 	str.w	fp, [sp, #28]
   83f30:	2b01      	cmp	r3, #1
   83f32:	f000 830e 	beq.w	84552 <_svfprintf_r+0xc5a>
   83f36:	2b02      	cmp	r3, #2
   83f38:	f040 829c 	bne.w	84474 <_svfprintf_r+0xb7c>
   83f3c:	464e      	mov	r6, r9
   83f3e:	9818      	ldr	r0, [sp, #96]	; 0x60
   83f40:	0923      	lsrs	r3, r4, #4
   83f42:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   83f46:	0929      	lsrs	r1, r5, #4
   83f48:	f004 020f 	and.w	r2, r4, #15
   83f4c:	460d      	mov	r5, r1
   83f4e:	461c      	mov	r4, r3
   83f50:	5c83      	ldrb	r3, [r0, r2]
   83f52:	f806 3d01 	strb.w	r3, [r6, #-1]!
   83f56:	ea54 0305 	orrs.w	r3, r4, r5
   83f5a:	d1f1      	bne.n	83f40 <_svfprintf_r+0x648>
   83f5c:	eba9 0306 	sub.w	r3, r9, r6
   83f60:	930e      	str	r3, [sp, #56]	; 0x38
   83f62:	e5e5      	b.n	83b30 <_svfprintf_r+0x238>
   83f64:	9311      	str	r3, [sp, #68]	; 0x44
   83f66:	2a00      	cmp	r2, #0
   83f68:	f040 8738 	bne.w	84ddc <_svfprintf_r+0x14e4>
   83f6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83f6e:	f01b 0f08 	tst.w	fp, #8
   83f72:	f104 0407 	add.w	r4, r4, #7
   83f76:	f000 84cf 	beq.w	84918 <_svfprintf_r+0x1020>
   83f7a:	f024 0307 	bic.w	r3, r4, #7
   83f7e:	f103 0208 	add.w	r2, r3, #8
   83f82:	920f      	str	r2, [sp, #60]	; 0x3c
   83f84:	681a      	ldr	r2, [r3, #0]
   83f86:	685b      	ldr	r3, [r3, #4]
   83f88:	9215      	str	r2, [sp, #84]	; 0x54
   83f8a:	9314      	str	r3, [sp, #80]	; 0x50
   83f8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83f8e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   83f90:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   83f94:	4628      	mov	r0, r5
   83f96:	4621      	mov	r1, r4
   83f98:	f04f 32ff 	mov.w	r2, #4294967295
   83f9c:	4b6f      	ldr	r3, [pc, #444]	; (8415c <_svfprintf_r+0x864>)
   83f9e:	f004 f893 	bl	880c8 <__aeabi_dcmpun>
   83fa2:	2800      	cmp	r0, #0
   83fa4:	f040 8434 	bne.w	84810 <_svfprintf_r+0xf18>
   83fa8:	4628      	mov	r0, r5
   83faa:	4621      	mov	r1, r4
   83fac:	f04f 32ff 	mov.w	r2, #4294967295
   83fb0:	4b6a      	ldr	r3, [pc, #424]	; (8415c <_svfprintf_r+0x864>)
   83fb2:	f004 f86b 	bl	8808c <__aeabi_dcmple>
   83fb6:	2800      	cmp	r0, #0
   83fb8:	f040 842a 	bne.w	84810 <_svfprintf_r+0xf18>
   83fbc:	a815      	add	r0, sp, #84	; 0x54
   83fbe:	c80d      	ldmia	r0, {r0, r2, r3}
   83fc0:	9914      	ldr	r1, [sp, #80]	; 0x50
   83fc2:	f004 f859 	bl	88078 <__aeabi_dcmplt>
   83fc6:	2800      	cmp	r0, #0
   83fc8:	f040 85d4 	bne.w	84b74 <_svfprintf_r+0x127c>
   83fcc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83fd0:	2303      	movs	r3, #3
   83fd2:	461a      	mov	r2, r3
   83fd4:	9308      	str	r3, [sp, #32]
   83fd6:	2300      	movs	r3, #0
   83fd8:	4e61      	ldr	r6, [pc, #388]	; (84160 <_svfprintf_r+0x868>)
   83fda:	4619      	mov	r1, r3
   83fdc:	930a      	str	r3, [sp, #40]	; 0x28
   83fde:	4b61      	ldr	r3, [pc, #388]	; (84164 <_svfprintf_r+0x86c>)
   83fe0:	920e      	str	r2, [sp, #56]	; 0x38
   83fe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83fe4:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   83fe8:	9007      	str	r0, [sp, #28]
   83fea:	9112      	str	r1, [sp, #72]	; 0x48
   83fec:	2a47      	cmp	r2, #71	; 0x47
   83fee:	bfd8      	it	le
   83ff0:	461e      	movle	r6, r3
   83ff2:	e5a5      	b.n	83b40 <_svfprintf_r+0x248>
   83ff4:	f04b 0b08 	orr.w	fp, fp, #8
   83ff8:	f89a 3000 	ldrb.w	r3, [sl]
   83ffc:	e4d6      	b.n	839ac <_svfprintf_r+0xb4>
   83ffe:	f04b 0b10 	orr.w	fp, fp, #16
   84002:	9311      	str	r3, [sp, #68]	; 0x44
   84004:	f01b 0320 	ands.w	r3, fp, #32
   84008:	f43f aebb 	beq.w	83d82 <_svfprintf_r+0x48a>
   8400c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8400e:	3407      	adds	r4, #7
   84010:	f024 0307 	bic.w	r3, r4, #7
   84014:	f103 0208 	add.w	r2, r3, #8
   84018:	e9d3 4500 	ldrd	r4, r5, [r3]
   8401c:	920f      	str	r2, [sp, #60]	; 0x3c
   8401e:	2300      	movs	r3, #0
   84020:	e568      	b.n	83af4 <_svfprintf_r+0x1fc>
   84022:	9311      	str	r3, [sp, #68]	; 0x44
   84024:	2a00      	cmp	r2, #0
   84026:	f040 86c2 	bne.w	84dae <_svfprintf_r+0x14b6>
   8402a:	4b4f      	ldr	r3, [pc, #316]	; (84168 <_svfprintf_r+0x870>)
   8402c:	f01b 0f20 	tst.w	fp, #32
   84030:	9318      	str	r3, [sp, #96]	; 0x60
   84032:	f43f af19 	beq.w	83e68 <_svfprintf_r+0x570>
   84036:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   84038:	f01b 0f01 	tst.w	fp, #1
   8403c:	f104 0407 	add.w	r4, r4, #7
   84040:	f024 0307 	bic.w	r3, r4, #7
   84044:	f103 0208 	add.w	r2, r3, #8
   84048:	920f      	str	r2, [sp, #60]	; 0x3c
   8404a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8404e:	f47f af1d 	bne.w	83e8c <_svfprintf_r+0x594>
   84052:	2302      	movs	r3, #2
   84054:	e54e      	b.n	83af4 <_svfprintf_r+0x1fc>
   84056:	f89a 3000 	ldrb.w	r3, [sl]
   8405a:	2900      	cmp	r1, #0
   8405c:	f47f aca6 	bne.w	839ac <_svfprintf_r+0xb4>
   84060:	2201      	movs	r2, #1
   84062:	2120      	movs	r1, #32
   84064:	e4a2      	b.n	839ac <_svfprintf_r+0xb4>
   84066:	f04b 0b01 	orr.w	fp, fp, #1
   8406a:	f89a 3000 	ldrb.w	r3, [sl]
   8406e:	e49d      	b.n	839ac <_svfprintf_r+0xb4>
   84070:	f89a 3000 	ldrb.w	r3, [sl]
   84074:	2201      	movs	r2, #1
   84076:	212b      	movs	r1, #43	; 0x2b
   84078:	e498      	b.n	839ac <_svfprintf_r+0xb4>
   8407a:	f04b 0b20 	orr.w	fp, fp, #32
   8407e:	f89a 3000 	ldrb.w	r3, [sl]
   84082:	e493      	b.n	839ac <_svfprintf_r+0xb4>
   84084:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   84088:	f89a 3000 	ldrb.w	r3, [sl]
   8408c:	e48e      	b.n	839ac <_svfprintf_r+0xb4>
   8408e:	f89a 3000 	ldrb.w	r3, [sl]
   84092:	2b6c      	cmp	r3, #108	; 0x6c
   84094:	bf03      	ittte	eq
   84096:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   8409a:	f04b 0b20 	orreq.w	fp, fp, #32
   8409e:	f10a 0a01 	addeq.w	sl, sl, #1
   840a2:	f04b 0b10 	orrne.w	fp, fp, #16
   840a6:	e481      	b.n	839ac <_svfprintf_r+0xb4>
   840a8:	2a00      	cmp	r2, #0
   840aa:	f040 867c 	bne.w	84da6 <_svfprintf_r+0x14ae>
   840ae:	f01b 0f20 	tst.w	fp, #32
   840b2:	f040 8452 	bne.w	8495a <_svfprintf_r+0x1062>
   840b6:	f01b 0f10 	tst.w	fp, #16
   840ba:	f040 8438 	bne.w	8492e <_svfprintf_r+0x1036>
   840be:	f01b 0f40 	tst.w	fp, #64	; 0x40
   840c2:	f000 8434 	beq.w	8492e <_svfprintf_r+0x1036>
   840c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   840c8:	6813      	ldr	r3, [r2, #0]
   840ca:	3204      	adds	r2, #4
   840cc:	920f      	str	r2, [sp, #60]	; 0x3c
   840ce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   840d2:	801a      	strh	r2, [r3, #0]
   840d4:	e437      	b.n	83946 <_svfprintf_r+0x4e>
   840d6:	2378      	movs	r3, #120	; 0x78
   840d8:	2230      	movs	r2, #48	; 0x30
   840da:	980f      	ldr	r0, [sp, #60]	; 0x3c
   840dc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   840e0:	9311      	str	r3, [sp, #68]	; 0x44
   840e2:	1d03      	adds	r3, r0, #4
   840e4:	930f      	str	r3, [sp, #60]	; 0x3c
   840e6:	4b20      	ldr	r3, [pc, #128]	; (84168 <_svfprintf_r+0x870>)
   840e8:	6804      	ldr	r4, [r0, #0]
   840ea:	9318      	str	r3, [sp, #96]	; 0x60
   840ec:	f04b 0b02 	orr.w	fp, fp, #2
   840f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   840f4:	2500      	movs	r5, #0
   840f6:	2302      	movs	r3, #2
   840f8:	e4fc      	b.n	83af4 <_svfprintf_r+0x1fc>
   840fa:	9311      	str	r3, [sp, #68]	; 0x44
   840fc:	2a00      	cmp	r2, #0
   840fe:	f43f aeef 	beq.w	83ee0 <_svfprintf_r+0x5e8>
   84102:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84106:	e6eb      	b.n	83ee0 <_svfprintf_r+0x5e8>
   84108:	2000      	movs	r0, #0
   8410a:	4604      	mov	r4, r0
   8410c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84110:	f81a 3b01 	ldrb.w	r3, [sl], #1
   84114:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84118:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   8411c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   84120:	2809      	cmp	r0, #9
   84122:	d9f5      	bls.n	84110 <_svfprintf_r+0x818>
   84124:	940d      	str	r4, [sp, #52]	; 0x34
   84126:	e443      	b.n	839b0 <_svfprintf_r+0xb8>
   84128:	9311      	str	r3, [sp, #68]	; 0x44
   8412a:	2a00      	cmp	r2, #0
   8412c:	f040 864a 	bne.w	84dc4 <_svfprintf_r+0x14cc>
   84130:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84132:	2a00      	cmp	r2, #0
   84134:	f43f acb6 	beq.w	83aa4 <_svfprintf_r+0x1ac>
   84138:	2300      	movs	r3, #0
   8413a:	2101      	movs	r1, #1
   8413c:	461f      	mov	r7, r3
   8413e:	9108      	str	r1, [sp, #32]
   84140:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   84144:	f8cd b01c 	str.w	fp, [sp, #28]
   84148:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8414c:	930a      	str	r3, [sp, #40]	; 0x28
   8414e:	9312      	str	r3, [sp, #72]	; 0x48
   84150:	910e      	str	r1, [sp, #56]	; 0x38
   84152:	ae28      	add	r6, sp, #160	; 0xa0
   84154:	e4f8      	b.n	83b48 <_svfprintf_r+0x250>
   84156:	bf00      	nop
   84158:	0008a024 	.word	0x0008a024
   8415c:	7fefffff 	.word	0x7fefffff
   84160:	0008a018 	.word	0x0008a018
   84164:	0008a014 	.word	0x0008a014
   84168:	0008a038 	.word	0x0008a038
   8416c:	aa25      	add	r2, sp, #148	; 0x94
   8416e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84170:	980c      	ldr	r0, [sp, #48]	; 0x30
   84172:	f002 ff41 	bl	86ff8 <__ssprint_r>
   84176:	2800      	cmp	r0, #0
   84178:	f47f ac9b 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   8417c:	46c8      	mov	r8, r9
   8417e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84182:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84184:	e533      	b.n	83bee <_svfprintf_r+0x2f6>
   84186:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84188:	2b65      	cmp	r3, #101	; 0x65
   8418a:	f340 809a 	ble.w	842c2 <_svfprintf_r+0x9ca>
   8418e:	a815      	add	r0, sp, #84	; 0x54
   84190:	c80d      	ldmia	r0, {r0, r2, r3}
   84192:	9914      	ldr	r1, [sp, #80]	; 0x50
   84194:	f003 ff66 	bl	88064 <__aeabi_dcmpeq>
   84198:	2800      	cmp	r0, #0
   8419a:	f000 8193 	beq.w	844c4 <_svfprintf_r+0xbcc>
   8419e:	2101      	movs	r1, #1
   841a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   841a2:	4ab5      	ldr	r2, [pc, #724]	; (84478 <_svfprintf_r+0xb80>)
   841a4:	440b      	add	r3, r1
   841a6:	440c      	add	r4, r1
   841a8:	2b07      	cmp	r3, #7
   841aa:	9427      	str	r4, [sp, #156]	; 0x9c
   841ac:	9326      	str	r3, [sp, #152]	; 0x98
   841ae:	f8c8 1004 	str.w	r1, [r8, #4]
   841b2:	f8c8 2000 	str.w	r2, [r8]
   841b6:	f300 83c6 	bgt.w	84946 <_svfprintf_r+0x104e>
   841ba:	f108 0808 	add.w	r8, r8, #8
   841be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   841c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   841c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   841c4:	4293      	cmp	r3, r2
   841c6:	db03      	blt.n	841d0 <_svfprintf_r+0x8d8>
   841c8:	9b07      	ldr	r3, [sp, #28]
   841ca:	07dd      	lsls	r5, r3, #31
   841cc:	f57f ad86 	bpl.w	83cdc <_svfprintf_r+0x3e4>
   841d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   841d2:	9919      	ldr	r1, [sp, #100]	; 0x64
   841d4:	3301      	adds	r3, #1
   841d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   841d8:	440c      	add	r4, r1
   841da:	2b07      	cmp	r3, #7
   841dc:	f8c8 2000 	str.w	r2, [r8]
   841e0:	f8c8 1004 	str.w	r1, [r8, #4]
   841e4:	9427      	str	r4, [sp, #156]	; 0x9c
   841e6:	9326      	str	r3, [sp, #152]	; 0x98
   841e8:	f300 83c4 	bgt.w	84974 <_svfprintf_r+0x107c>
   841ec:	f108 0808 	add.w	r8, r8, #8
   841f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   841f2:	1e5e      	subs	r6, r3, #1
   841f4:	2e00      	cmp	r6, #0
   841f6:	f77f ad71 	ble.w	83cdc <_svfprintf_r+0x3e4>
   841fa:	2e10      	cmp	r6, #16
   841fc:	f340 8575 	ble.w	84cea <_svfprintf_r+0x13f2>
   84200:	4622      	mov	r2, r4
   84202:	2710      	movs	r7, #16
   84204:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84206:	4d9d      	ldr	r5, [pc, #628]	; (8447c <_svfprintf_r+0xb84>)
   84208:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8420c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8420e:	e005      	b.n	8421c <_svfprintf_r+0x924>
   84210:	f108 0808 	add.w	r8, r8, #8
   84214:	3e10      	subs	r6, #16
   84216:	2e10      	cmp	r6, #16
   84218:	f340 8225 	ble.w	84666 <_svfprintf_r+0xd6e>
   8421c:	3301      	adds	r3, #1
   8421e:	3210      	adds	r2, #16
   84220:	2b07      	cmp	r3, #7
   84222:	9227      	str	r2, [sp, #156]	; 0x9c
   84224:	9326      	str	r3, [sp, #152]	; 0x98
   84226:	e888 00a0 	stmia.w	r8, {r5, r7}
   8422a:	ddf1      	ble.n	84210 <_svfprintf_r+0x918>
   8422c:	aa25      	add	r2, sp, #148	; 0x94
   8422e:	4621      	mov	r1, r4
   84230:	4658      	mov	r0, fp
   84232:	f002 fee1 	bl	86ff8 <__ssprint_r>
   84236:	2800      	cmp	r0, #0
   84238:	f47f ac3b 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   8423c:	46c8      	mov	r8, r9
   8423e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84240:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84242:	e7e7      	b.n	84214 <_svfprintf_r+0x91c>
   84244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84246:	9a08      	ldr	r2, [sp, #32]
   84248:	1a9f      	subs	r7, r3, r2
   8424a:	2f00      	cmp	r7, #0
   8424c:	f77f acf6 	ble.w	83c3c <_svfprintf_r+0x344>
   84250:	2f10      	cmp	r7, #16
   84252:	f340 84a8 	ble.w	84ba6 <_svfprintf_r+0x12ae>
   84256:	4d89      	ldr	r5, [pc, #548]	; (8447c <_svfprintf_r+0xb84>)
   84258:	4642      	mov	r2, r8
   8425a:	4621      	mov	r1, r4
   8425c:	46b0      	mov	r8, r6
   8425e:	f04f 0b10 	mov.w	fp, #16
   84262:	462e      	mov	r6, r5
   84264:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84266:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   84268:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8426a:	e004      	b.n	84276 <_svfprintf_r+0x97e>
   8426c:	3f10      	subs	r7, #16
   8426e:	2f10      	cmp	r7, #16
   84270:	f102 0208 	add.w	r2, r2, #8
   84274:	dd15      	ble.n	842a2 <_svfprintf_r+0x9aa>
   84276:	3301      	adds	r3, #1
   84278:	3110      	adds	r1, #16
   8427a:	2b07      	cmp	r3, #7
   8427c:	9127      	str	r1, [sp, #156]	; 0x9c
   8427e:	9326      	str	r3, [sp, #152]	; 0x98
   84280:	e882 0840 	stmia.w	r2, {r6, fp}
   84284:	ddf2      	ble.n	8426c <_svfprintf_r+0x974>
   84286:	aa25      	add	r2, sp, #148	; 0x94
   84288:	4629      	mov	r1, r5
   8428a:	4620      	mov	r0, r4
   8428c:	f002 feb4 	bl	86ff8 <__ssprint_r>
   84290:	2800      	cmp	r0, #0
   84292:	f47f ac0e 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84296:	3f10      	subs	r7, #16
   84298:	2f10      	cmp	r7, #16
   8429a:	464a      	mov	r2, r9
   8429c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8429e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   842a0:	dce9      	bgt.n	84276 <_svfprintf_r+0x97e>
   842a2:	4635      	mov	r5, r6
   842a4:	460c      	mov	r4, r1
   842a6:	4646      	mov	r6, r8
   842a8:	4690      	mov	r8, r2
   842aa:	3301      	adds	r3, #1
   842ac:	443c      	add	r4, r7
   842ae:	2b07      	cmp	r3, #7
   842b0:	9427      	str	r4, [sp, #156]	; 0x9c
   842b2:	9326      	str	r3, [sp, #152]	; 0x98
   842b4:	e888 00a0 	stmia.w	r8, {r5, r7}
   842b8:	f300 829e 	bgt.w	847f8 <_svfprintf_r+0xf00>
   842bc:	f108 0808 	add.w	r8, r8, #8
   842c0:	e4bc      	b.n	83c3c <_svfprintf_r+0x344>
   842c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   842c4:	2b01      	cmp	r3, #1
   842c6:	f340 824f 	ble.w	84768 <_svfprintf_r+0xe70>
   842ca:	2301      	movs	r3, #1
   842cc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   842ce:	441c      	add	r4, r3
   842d0:	441f      	add	r7, r3
   842d2:	2f07      	cmp	r7, #7
   842d4:	9427      	str	r4, [sp, #156]	; 0x9c
   842d6:	f8c8 6000 	str.w	r6, [r8]
   842da:	9726      	str	r7, [sp, #152]	; 0x98
   842dc:	f8c8 3004 	str.w	r3, [r8, #4]
   842e0:	f300 825f 	bgt.w	847a2 <_svfprintf_r+0xeaa>
   842e4:	f108 0808 	add.w	r8, r8, #8
   842e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   842ea:	3701      	adds	r7, #1
   842ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   842ee:	4414      	add	r4, r2
   842f0:	2f07      	cmp	r7, #7
   842f2:	9427      	str	r4, [sp, #156]	; 0x9c
   842f4:	9726      	str	r7, [sp, #152]	; 0x98
   842f6:	f8c8 3000 	str.w	r3, [r8]
   842fa:	f8c8 2004 	str.w	r2, [r8, #4]
   842fe:	f300 825c 	bgt.w	847ba <_svfprintf_r+0xec2>
   84302:	f108 0808 	add.w	r8, r8, #8
   84306:	a815      	add	r0, sp, #84	; 0x54
   84308:	c80d      	ldmia	r0, {r0, r2, r3}
   8430a:	9914      	ldr	r1, [sp, #80]	; 0x50
   8430c:	f003 feaa 	bl	88064 <__aeabi_dcmpeq>
   84310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84312:	2800      	cmp	r0, #0
   84314:	f040 8141 	bne.w	8459a <_svfprintf_r+0xca2>
   84318:	3b01      	subs	r3, #1
   8431a:	3701      	adds	r7, #1
   8431c:	3601      	adds	r6, #1
   8431e:	441c      	add	r4, r3
   84320:	2f07      	cmp	r7, #7
   84322:	f8c8 6000 	str.w	r6, [r8]
   84326:	9726      	str	r7, [sp, #152]	; 0x98
   84328:	9427      	str	r4, [sp, #156]	; 0x9c
   8432a:	f8c8 3004 	str.w	r3, [r8, #4]
   8432e:	f300 8166 	bgt.w	845fe <_svfprintf_r+0xd06>
   84332:	f108 0808 	add.w	r8, r8, #8
   84336:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   84338:	3701      	adds	r7, #1
   8433a:	4414      	add	r4, r2
   8433c:	ab21      	add	r3, sp, #132	; 0x84
   8433e:	2f07      	cmp	r7, #7
   84340:	9427      	str	r4, [sp, #156]	; 0x9c
   84342:	9726      	str	r7, [sp, #152]	; 0x98
   84344:	f8c8 2004 	str.w	r2, [r8, #4]
   84348:	f8c8 3000 	str.w	r3, [r8]
   8434c:	f77f acc4 	ble.w	83cd8 <_svfprintf_r+0x3e0>
   84350:	aa25      	add	r2, sp, #148	; 0x94
   84352:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84354:	980c      	ldr	r0, [sp, #48]	; 0x30
   84356:	f002 fe4f 	bl	86ff8 <__ssprint_r>
   8435a:	2800      	cmp	r0, #0
   8435c:	f47f aba9 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84360:	46c8      	mov	r8, r9
   84362:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84364:	e4ba      	b.n	83cdc <_svfprintf_r+0x3e4>
   84366:	aa25      	add	r2, sp, #148	; 0x94
   84368:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8436a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8436c:	f002 fe44 	bl	86ff8 <__ssprint_r>
   84370:	2800      	cmp	r0, #0
   84372:	f43f acfd 	beq.w	83d70 <_svfprintf_r+0x478>
   84376:	f7ff bb9c 	b.w	83ab2 <_svfprintf_r+0x1ba>
   8437a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8437e:	2b01      	cmp	r3, #1
   84380:	f000 817e 	beq.w	84680 <_svfprintf_r+0xd88>
   84384:	2b02      	cmp	r3, #2
   84386:	d171      	bne.n	8446c <_svfprintf_r+0xb74>
   84388:	f8cd b01c 	str.w	fp, [sp, #28]
   8438c:	2400      	movs	r4, #0
   8438e:	2500      	movs	r5, #0
   84390:	e5d4      	b.n	83f3c <_svfprintf_r+0x644>
   84392:	aa25      	add	r2, sp, #148	; 0x94
   84394:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84396:	980c      	ldr	r0, [sp, #48]	; 0x30
   84398:	f002 fe2e 	bl	86ff8 <__ssprint_r>
   8439c:	2800      	cmp	r0, #0
   8439e:	f47f ab88 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   843a2:	46c8      	mov	r8, r9
   843a4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   843a6:	e486      	b.n	83cb6 <_svfprintf_r+0x3be>
   843a8:	aa25      	add	r2, sp, #148	; 0x94
   843aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   843ac:	980c      	ldr	r0, [sp, #48]	; 0x30
   843ae:	f002 fe23 	bl	86ff8 <__ssprint_r>
   843b2:	2800      	cmp	r0, #0
   843b4:	f47f ab7d 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   843b8:	46c8      	mov	r8, r9
   843ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   843bc:	e429      	b.n	83c12 <_svfprintf_r+0x31a>
   843be:	2001      	movs	r0, #1
   843c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   843c2:	4a2d      	ldr	r2, [pc, #180]	; (84478 <_svfprintf_r+0xb80>)
   843c4:	4403      	add	r3, r0
   843c6:	4404      	add	r4, r0
   843c8:	2b07      	cmp	r3, #7
   843ca:	9427      	str	r4, [sp, #156]	; 0x9c
   843cc:	9326      	str	r3, [sp, #152]	; 0x98
   843ce:	f8c8 0004 	str.w	r0, [r8, #4]
   843d2:	f8c8 2000 	str.w	r2, [r8]
   843d6:	f340 82d8 	ble.w	8498a <_svfprintf_r+0x1092>
   843da:	aa25      	add	r2, sp, #148	; 0x94
   843dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   843de:	980c      	ldr	r0, [sp, #48]	; 0x30
   843e0:	f002 fe0a 	bl	86ff8 <__ssprint_r>
   843e4:	2800      	cmp	r0, #0
   843e6:	f47f ab64 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   843ea:	46c8      	mov	r8, r9
   843ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
   843ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   843f0:	b929      	cbnz	r1, 843fe <_svfprintf_r+0xb06>
   843f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   843f4:	b91b      	cbnz	r3, 843fe <_svfprintf_r+0xb06>
   843f6:	9b07      	ldr	r3, [sp, #28]
   843f8:	07d8      	lsls	r0, r3, #31
   843fa:	f57f ac6f 	bpl.w	83cdc <_svfprintf_r+0x3e4>
   843fe:	9819      	ldr	r0, [sp, #100]	; 0x64
   84400:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84402:	4602      	mov	r2, r0
   84404:	3301      	adds	r3, #1
   84406:	4422      	add	r2, r4
   84408:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   8440a:	2b07      	cmp	r3, #7
   8440c:	9227      	str	r2, [sp, #156]	; 0x9c
   8440e:	f8c8 4000 	str.w	r4, [r8]
   84412:	f8c8 0004 	str.w	r0, [r8, #4]
   84416:	9326      	str	r3, [sp, #152]	; 0x98
   84418:	f300 8431 	bgt.w	84c7e <_svfprintf_r+0x1386>
   8441c:	f108 0808 	add.w	r8, r8, #8
   84420:	2900      	cmp	r1, #0
   84422:	f2c0 8409 	blt.w	84c38 <_svfprintf_r+0x1340>
   84426:	9913      	ldr	r1, [sp, #76]	; 0x4c
   84428:	3301      	adds	r3, #1
   8442a:	188c      	adds	r4, r1, r2
   8442c:	2b07      	cmp	r3, #7
   8442e:	9427      	str	r4, [sp, #156]	; 0x9c
   84430:	9326      	str	r3, [sp, #152]	; 0x98
   84432:	f8c8 6000 	str.w	r6, [r8]
   84436:	f8c8 1004 	str.w	r1, [r8, #4]
   8443a:	f77f ac4d 	ble.w	83cd8 <_svfprintf_r+0x3e0>
   8443e:	aa25      	add	r2, sp, #148	; 0x94
   84440:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84442:	980c      	ldr	r0, [sp, #48]	; 0x30
   84444:	f002 fdd8 	bl	86ff8 <__ssprint_r>
   84448:	2800      	cmp	r0, #0
   8444a:	f47f ab32 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   8444e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84450:	46c8      	mov	r8, r9
   84452:	e443      	b.n	83cdc <_svfprintf_r+0x3e4>
   84454:	aa25      	add	r2, sp, #148	; 0x94
   84456:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84458:	980c      	ldr	r0, [sp, #48]	; 0x30
   8445a:	f002 fdcd 	bl	86ff8 <__ssprint_r>
   8445e:	2800      	cmp	r0, #0
   84460:	f47f ab27 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84464:	46c8      	mov	r8, r9
   84466:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84468:	f7ff bbe5 	b.w	83c36 <_svfprintf_r+0x33e>
   8446c:	2400      	movs	r4, #0
   8446e:	2500      	movs	r5, #0
   84470:	f8cd b01c 	str.w	fp, [sp, #28]
   84474:	4649      	mov	r1, r9
   84476:	e004      	b.n	84482 <_svfprintf_r+0xb8a>
   84478:	0008a054 	.word	0x0008a054
   8447c:	0008a068 	.word	0x0008a068
   84480:	4631      	mov	r1, r6
   84482:	08e2      	lsrs	r2, r4, #3
   84484:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84488:	08e8      	lsrs	r0, r5, #3
   8448a:	f004 0307 	and.w	r3, r4, #7
   8448e:	4605      	mov	r5, r0
   84490:	4614      	mov	r4, r2
   84492:	3330      	adds	r3, #48	; 0x30
   84494:	ea54 0205 	orrs.w	r2, r4, r5
   84498:	f801 3c01 	strb.w	r3, [r1, #-1]
   8449c:	f101 36ff 	add.w	r6, r1, #4294967295
   844a0:	d1ee      	bne.n	84480 <_svfprintf_r+0xb88>
   844a2:	9a07      	ldr	r2, [sp, #28]
   844a4:	07d2      	lsls	r2, r2, #31
   844a6:	f57f ad59 	bpl.w	83f5c <_svfprintf_r+0x664>
   844aa:	2b30      	cmp	r3, #48	; 0x30
   844ac:	f43f ad56 	beq.w	83f5c <_svfprintf_r+0x664>
   844b0:	2330      	movs	r3, #48	; 0x30
   844b2:	3902      	subs	r1, #2
   844b4:	f806 3c01 	strb.w	r3, [r6, #-1]
   844b8:	eba9 0301 	sub.w	r3, r9, r1
   844bc:	930e      	str	r3, [sp, #56]	; 0x38
   844be:	460e      	mov	r6, r1
   844c0:	f7ff bb36 	b.w	83b30 <_svfprintf_r+0x238>
   844c4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   844c6:	2900      	cmp	r1, #0
   844c8:	f77f af79 	ble.w	843be <_svfprintf_r+0xac6>
   844cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   844ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   844d0:	4293      	cmp	r3, r2
   844d2:	bfa8      	it	ge
   844d4:	4613      	movge	r3, r2
   844d6:	2b00      	cmp	r3, #0
   844d8:	461f      	mov	r7, r3
   844da:	dd0b      	ble.n	844f4 <_svfprintf_r+0xbfc>
   844dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   844de:	443c      	add	r4, r7
   844e0:	3301      	adds	r3, #1
   844e2:	2b07      	cmp	r3, #7
   844e4:	9427      	str	r4, [sp, #156]	; 0x9c
   844e6:	e888 00c0 	stmia.w	r8, {r6, r7}
   844ea:	9326      	str	r3, [sp, #152]	; 0x98
   844ec:	f300 82fb 	bgt.w	84ae6 <_svfprintf_r+0x11ee>
   844f0:	f108 0808 	add.w	r8, r8, #8
   844f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   844f6:	2f00      	cmp	r7, #0
   844f8:	bfa8      	it	ge
   844fa:	1bdb      	subge	r3, r3, r7
   844fc:	2b00      	cmp	r3, #0
   844fe:	461f      	mov	r7, r3
   84500:	f340 80d7 	ble.w	846b2 <_svfprintf_r+0xdba>
   84504:	2b10      	cmp	r3, #16
   84506:	f340 8434 	ble.w	84d72 <_svfprintf_r+0x147a>
   8450a:	4dba      	ldr	r5, [pc, #744]	; (847f4 <_svfprintf_r+0xefc>)
   8450c:	4642      	mov	r2, r8
   8450e:	4621      	mov	r1, r4
   84510:	46b0      	mov	r8, r6
   84512:	f04f 0b10 	mov.w	fp, #16
   84516:	462e      	mov	r6, r5
   84518:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8451a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8451c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8451e:	e004      	b.n	8452a <_svfprintf_r+0xc32>
   84520:	3208      	adds	r2, #8
   84522:	3f10      	subs	r7, #16
   84524:	2f10      	cmp	r7, #16
   84526:	f340 80b5 	ble.w	84694 <_svfprintf_r+0xd9c>
   8452a:	3301      	adds	r3, #1
   8452c:	3110      	adds	r1, #16
   8452e:	2b07      	cmp	r3, #7
   84530:	9127      	str	r1, [sp, #156]	; 0x9c
   84532:	9326      	str	r3, [sp, #152]	; 0x98
   84534:	e882 0840 	stmia.w	r2, {r6, fp}
   84538:	ddf2      	ble.n	84520 <_svfprintf_r+0xc28>
   8453a:	aa25      	add	r2, sp, #148	; 0x94
   8453c:	4629      	mov	r1, r5
   8453e:	4620      	mov	r0, r4
   84540:	f002 fd5a 	bl	86ff8 <__ssprint_r>
   84544:	2800      	cmp	r0, #0
   84546:	f47f aab4 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   8454a:	464a      	mov	r2, r9
   8454c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8454e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84550:	e7e7      	b.n	84522 <_svfprintf_r+0xc2a>
   84552:	2d00      	cmp	r5, #0
   84554:	bf08      	it	eq
   84556:	2c0a      	cmpeq	r4, #10
   84558:	f0c0 8090 	bcc.w	8467c <_svfprintf_r+0xd84>
   8455c:	464e      	mov	r6, r9
   8455e:	4620      	mov	r0, r4
   84560:	4629      	mov	r1, r5
   84562:	220a      	movs	r2, #10
   84564:	2300      	movs	r3, #0
   84566:	f003 fded 	bl	88144 <__aeabi_uldivmod>
   8456a:	3230      	adds	r2, #48	; 0x30
   8456c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   84570:	4620      	mov	r0, r4
   84572:	4629      	mov	r1, r5
   84574:	2300      	movs	r3, #0
   84576:	220a      	movs	r2, #10
   84578:	f003 fde4 	bl	88144 <__aeabi_uldivmod>
   8457c:	4604      	mov	r4, r0
   8457e:	460d      	mov	r5, r1
   84580:	ea54 0305 	orrs.w	r3, r4, r5
   84584:	d1eb      	bne.n	8455e <_svfprintf_r+0xc66>
   84586:	eba9 0306 	sub.w	r3, r9, r6
   8458a:	930e      	str	r3, [sp, #56]	; 0x38
   8458c:	f7ff bad0 	b.w	83b30 <_svfprintf_r+0x238>
   84590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84592:	464e      	mov	r6, r9
   84594:	930e      	str	r3, [sp, #56]	; 0x38
   84596:	f7ff bacb 	b.w	83b30 <_svfprintf_r+0x238>
   8459a:	1e5e      	subs	r6, r3, #1
   8459c:	2e00      	cmp	r6, #0
   8459e:	f77f aeca 	ble.w	84336 <_svfprintf_r+0xa3e>
   845a2:	2e10      	cmp	r6, #16
   845a4:	f340 83e3 	ble.w	84d6e <_svfprintf_r+0x1476>
   845a8:	4622      	mov	r2, r4
   845aa:	f04f 0b10 	mov.w	fp, #16
   845ae:	4d91      	ldr	r5, [pc, #580]	; (847f4 <_svfprintf_r+0xefc>)
   845b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   845b2:	e004      	b.n	845be <_svfprintf_r+0xcc6>
   845b4:	3e10      	subs	r6, #16
   845b6:	2e10      	cmp	r6, #16
   845b8:	f108 0808 	add.w	r8, r8, #8
   845bc:	dd15      	ble.n	845ea <_svfprintf_r+0xcf2>
   845be:	3701      	adds	r7, #1
   845c0:	3210      	adds	r2, #16
   845c2:	2f07      	cmp	r7, #7
   845c4:	9227      	str	r2, [sp, #156]	; 0x9c
   845c6:	9726      	str	r7, [sp, #152]	; 0x98
   845c8:	e888 0820 	stmia.w	r8, {r5, fp}
   845cc:	ddf2      	ble.n	845b4 <_svfprintf_r+0xcbc>
   845ce:	aa25      	add	r2, sp, #148	; 0x94
   845d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   845d2:	4620      	mov	r0, r4
   845d4:	f002 fd10 	bl	86ff8 <__ssprint_r>
   845d8:	2800      	cmp	r0, #0
   845da:	f47f aa6a 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   845de:	3e10      	subs	r6, #16
   845e0:	2e10      	cmp	r6, #16
   845e2:	46c8      	mov	r8, r9
   845e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   845e6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   845e8:	dce9      	bgt.n	845be <_svfprintf_r+0xcc6>
   845ea:	4614      	mov	r4, r2
   845ec:	3701      	adds	r7, #1
   845ee:	4434      	add	r4, r6
   845f0:	2f07      	cmp	r7, #7
   845f2:	9427      	str	r4, [sp, #156]	; 0x9c
   845f4:	9726      	str	r7, [sp, #152]	; 0x98
   845f6:	e888 0060 	stmia.w	r8, {r5, r6}
   845fa:	f77f ae9a 	ble.w	84332 <_svfprintf_r+0xa3a>
   845fe:	aa25      	add	r2, sp, #148	; 0x94
   84600:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84602:	980c      	ldr	r0, [sp, #48]	; 0x30
   84604:	f002 fcf8 	bl	86ff8 <__ssprint_r>
   84608:	2800      	cmp	r0, #0
   8460a:	f47f aa52 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   8460e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84610:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84612:	46c8      	mov	r8, r9
   84614:	e68f      	b.n	84336 <_svfprintf_r+0xa3e>
   84616:	3204      	adds	r2, #4
   84618:	681c      	ldr	r4, [r3, #0]
   8461a:	2500      	movs	r5, #0
   8461c:	2301      	movs	r3, #1
   8461e:	920f      	str	r2, [sp, #60]	; 0x3c
   84620:	f7ff ba68 	b.w	83af4 <_svfprintf_r+0x1fc>
   84624:	681c      	ldr	r4, [r3, #0]
   84626:	3304      	adds	r3, #4
   84628:	930f      	str	r3, [sp, #60]	; 0x3c
   8462a:	2500      	movs	r5, #0
   8462c:	e42a      	b.n	83e84 <_svfprintf_r+0x58c>
   8462e:	681c      	ldr	r4, [r3, #0]
   84630:	3304      	adds	r3, #4
   84632:	17e5      	asrs	r5, r4, #31
   84634:	4622      	mov	r2, r4
   84636:	930f      	str	r3, [sp, #60]	; 0x3c
   84638:	462b      	mov	r3, r5
   8463a:	2a00      	cmp	r2, #0
   8463c:	f173 0300 	sbcs.w	r3, r3, #0
   84640:	f6bf ac68 	bge.w	83f14 <_svfprintf_r+0x61c>
   84644:	272d      	movs	r7, #45	; 0x2d
   84646:	4264      	negs	r4, r4
   84648:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8464c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84650:	2301      	movs	r3, #1
   84652:	f7ff ba53 	b.w	83afc <_svfprintf_r+0x204>
   84656:	990f      	ldr	r1, [sp, #60]	; 0x3c
   84658:	2500      	movs	r5, #0
   8465a:	460a      	mov	r2, r1
   8465c:	3204      	adds	r2, #4
   8465e:	680c      	ldr	r4, [r1, #0]
   84660:	920f      	str	r2, [sp, #60]	; 0x3c
   84662:	f7ff ba47 	b.w	83af4 <_svfprintf_r+0x1fc>
   84666:	4614      	mov	r4, r2
   84668:	3301      	adds	r3, #1
   8466a:	4434      	add	r4, r6
   8466c:	2b07      	cmp	r3, #7
   8466e:	9427      	str	r4, [sp, #156]	; 0x9c
   84670:	9326      	str	r3, [sp, #152]	; 0x98
   84672:	e888 0060 	stmia.w	r8, {r5, r6}
   84676:	f77f ab2f 	ble.w	83cd8 <_svfprintf_r+0x3e0>
   8467a:	e6e0      	b.n	8443e <_svfprintf_r+0xb46>
   8467c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84680:	2301      	movs	r3, #1
   84682:	ae42      	add	r6, sp, #264	; 0x108
   84684:	3430      	adds	r4, #48	; 0x30
   84686:	f8cd b01c 	str.w	fp, [sp, #28]
   8468a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   8468e:	930e      	str	r3, [sp, #56]	; 0x38
   84690:	f7ff ba4e 	b.w	83b30 <_svfprintf_r+0x238>
   84694:	4635      	mov	r5, r6
   84696:	460c      	mov	r4, r1
   84698:	4646      	mov	r6, r8
   8469a:	4690      	mov	r8, r2
   8469c:	3301      	adds	r3, #1
   8469e:	443c      	add	r4, r7
   846a0:	2b07      	cmp	r3, #7
   846a2:	9427      	str	r4, [sp, #156]	; 0x9c
   846a4:	9326      	str	r3, [sp, #152]	; 0x98
   846a6:	e888 00a0 	stmia.w	r8, {r5, r7}
   846aa:	f300 8246 	bgt.w	84b3a <_svfprintf_r+0x1242>
   846ae:	f108 0808 	add.w	r8, r8, #8
   846b2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   846b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   846b6:	429a      	cmp	r2, r3
   846b8:	db45      	blt.n	84746 <_svfprintf_r+0xe4e>
   846ba:	9b07      	ldr	r3, [sp, #28]
   846bc:	07d9      	lsls	r1, r3, #31
   846be:	d442      	bmi.n	84746 <_svfprintf_r+0xe4e>
   846c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   846c2:	9812      	ldr	r0, [sp, #72]	; 0x48
   846c4:	1a9a      	subs	r2, r3, r2
   846c6:	1a1d      	subs	r5, r3, r0
   846c8:	4295      	cmp	r5, r2
   846ca:	bfa8      	it	ge
   846cc:	4615      	movge	r5, r2
   846ce:	2d00      	cmp	r5, #0
   846d0:	dd0e      	ble.n	846f0 <_svfprintf_r+0xdf8>
   846d2:	9926      	ldr	r1, [sp, #152]	; 0x98
   846d4:	4406      	add	r6, r0
   846d6:	3101      	adds	r1, #1
   846d8:	442c      	add	r4, r5
   846da:	2907      	cmp	r1, #7
   846dc:	f8c8 6000 	str.w	r6, [r8]
   846e0:	9427      	str	r4, [sp, #156]	; 0x9c
   846e2:	f8c8 5004 	str.w	r5, [r8, #4]
   846e6:	9126      	str	r1, [sp, #152]	; 0x98
   846e8:	f300 8216 	bgt.w	84b18 <_svfprintf_r+0x1220>
   846ec:	f108 0808 	add.w	r8, r8, #8
   846f0:	2d00      	cmp	r5, #0
   846f2:	bfb4      	ite	lt
   846f4:	4616      	movlt	r6, r2
   846f6:	1b56      	subge	r6, r2, r5
   846f8:	2e00      	cmp	r6, #0
   846fa:	f77f aaef 	ble.w	83cdc <_svfprintf_r+0x3e4>
   846fe:	2e10      	cmp	r6, #16
   84700:	f340 82f3 	ble.w	84cea <_svfprintf_r+0x13f2>
   84704:	4622      	mov	r2, r4
   84706:	2710      	movs	r7, #16
   84708:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8470a:	4d3a      	ldr	r5, [pc, #232]	; (847f4 <_svfprintf_r+0xefc>)
   8470c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84710:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84712:	e004      	b.n	8471e <_svfprintf_r+0xe26>
   84714:	f108 0808 	add.w	r8, r8, #8
   84718:	3e10      	subs	r6, #16
   8471a:	2e10      	cmp	r6, #16
   8471c:	dda3      	ble.n	84666 <_svfprintf_r+0xd6e>
   8471e:	3301      	adds	r3, #1
   84720:	3210      	adds	r2, #16
   84722:	2b07      	cmp	r3, #7
   84724:	9227      	str	r2, [sp, #156]	; 0x9c
   84726:	9326      	str	r3, [sp, #152]	; 0x98
   84728:	e888 00a0 	stmia.w	r8, {r5, r7}
   8472c:	ddf2      	ble.n	84714 <_svfprintf_r+0xe1c>
   8472e:	aa25      	add	r2, sp, #148	; 0x94
   84730:	4621      	mov	r1, r4
   84732:	4658      	mov	r0, fp
   84734:	f002 fc60 	bl	86ff8 <__ssprint_r>
   84738:	2800      	cmp	r0, #0
   8473a:	f47f a9ba 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   8473e:	46c8      	mov	r8, r9
   84740:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84742:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84744:	e7e8      	b.n	84718 <_svfprintf_r+0xe20>
   84746:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84748:	9819      	ldr	r0, [sp, #100]	; 0x64
   8474a:	3301      	adds	r3, #1
   8474c:	991a      	ldr	r1, [sp, #104]	; 0x68
   8474e:	4404      	add	r4, r0
   84750:	2b07      	cmp	r3, #7
   84752:	9427      	str	r4, [sp, #156]	; 0x9c
   84754:	f8c8 1000 	str.w	r1, [r8]
   84758:	f8c8 0004 	str.w	r0, [r8, #4]
   8475c:	9326      	str	r3, [sp, #152]	; 0x98
   8475e:	f300 81cf 	bgt.w	84b00 <_svfprintf_r+0x1208>
   84762:	f108 0808 	add.w	r8, r8, #8
   84766:	e7ab      	b.n	846c0 <_svfprintf_r+0xdc8>
   84768:	9b07      	ldr	r3, [sp, #28]
   8476a:	07da      	lsls	r2, r3, #31
   8476c:	f53f adad 	bmi.w	842ca <_svfprintf_r+0x9d2>
   84770:	2301      	movs	r3, #1
   84772:	9f26      	ldr	r7, [sp, #152]	; 0x98
   84774:	441c      	add	r4, r3
   84776:	441f      	add	r7, r3
   84778:	2f07      	cmp	r7, #7
   8477a:	9427      	str	r4, [sp, #156]	; 0x9c
   8477c:	f8c8 6000 	str.w	r6, [r8]
   84780:	9726      	str	r7, [sp, #152]	; 0x98
   84782:	f8c8 3004 	str.w	r3, [r8, #4]
   84786:	f77f add4 	ble.w	84332 <_svfprintf_r+0xa3a>
   8478a:	aa25      	add	r2, sp, #148	; 0x94
   8478c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8478e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84790:	f002 fc32 	bl	86ff8 <__ssprint_r>
   84794:	2800      	cmp	r0, #0
   84796:	f47f a98c 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   8479a:	46c8      	mov	r8, r9
   8479c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8479e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   847a0:	e5c9      	b.n	84336 <_svfprintf_r+0xa3e>
   847a2:	aa25      	add	r2, sp, #148	; 0x94
   847a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   847a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   847a8:	f002 fc26 	bl	86ff8 <__ssprint_r>
   847ac:	2800      	cmp	r0, #0
   847ae:	f47f a980 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   847b2:	46c8      	mov	r8, r9
   847b4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   847b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   847b8:	e596      	b.n	842e8 <_svfprintf_r+0x9f0>
   847ba:	aa25      	add	r2, sp, #148	; 0x94
   847bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   847be:	980c      	ldr	r0, [sp, #48]	; 0x30
   847c0:	f002 fc1a 	bl	86ff8 <__ssprint_r>
   847c4:	2800      	cmp	r0, #0
   847c6:	f47f a974 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   847ca:	46c8      	mov	r8, r9
   847cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   847ce:	9f26      	ldr	r7, [sp, #152]	; 0x98
   847d0:	e599      	b.n	84306 <_svfprintf_r+0xa0e>
   847d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   847d4:	3407      	adds	r4, #7
   847d6:	f024 0407 	bic.w	r4, r4, #7
   847da:	f104 0108 	add.w	r1, r4, #8
   847de:	e9d4 2300 	ldrd	r2, r3, [r4]
   847e2:	910f      	str	r1, [sp, #60]	; 0x3c
   847e4:	4614      	mov	r4, r2
   847e6:	461d      	mov	r5, r3
   847e8:	f7ff bb8f 	b.w	83f0a <_svfprintf_r+0x612>
   847ec:	464e      	mov	r6, r9
   847ee:	f7ff b99f 	b.w	83b30 <_svfprintf_r+0x238>
   847f2:	bf00      	nop
   847f4:	0008a068 	.word	0x0008a068
   847f8:	aa25      	add	r2, sp, #148	; 0x94
   847fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   847fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   847fe:	f002 fbfb 	bl	86ff8 <__ssprint_r>
   84802:	2800      	cmp	r0, #0
   84804:	f47f a955 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84808:	46c8      	mov	r8, r9
   8480a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8480c:	f7ff ba16 	b.w	83c3c <_svfprintf_r+0x344>
   84810:	9c15      	ldr	r4, [sp, #84]	; 0x54
   84812:	4622      	mov	r2, r4
   84814:	4620      	mov	r0, r4
   84816:	9c14      	ldr	r4, [sp, #80]	; 0x50
   84818:	4623      	mov	r3, r4
   8481a:	4621      	mov	r1, r4
   8481c:	f003 fc54 	bl	880c8 <__aeabi_dcmpun>
   84820:	2800      	cmp	r0, #0
   84822:	f040 8273 	bne.w	84d0c <_svfprintf_r+0x1414>
   84826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84828:	3301      	adds	r3, #1
   8482a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8482c:	f023 0320 	bic.w	r3, r3, #32
   84830:	930e      	str	r3, [sp, #56]	; 0x38
   84832:	f000 819c 	beq.w	84b6e <_svfprintf_r+0x1276>
   84836:	2b47      	cmp	r3, #71	; 0x47
   84838:	f000 80d6 	beq.w	849e8 <_svfprintf_r+0x10f0>
   8483c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   84840:	9307      	str	r3, [sp, #28]
   84842:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84844:	1e1f      	subs	r7, r3, #0
   84846:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84848:	9308      	str	r3, [sp, #32]
   8484a:	bfb7      	itett	lt
   8484c:	463b      	movlt	r3, r7
   8484e:	2300      	movge	r3, #0
   84850:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   84854:	232d      	movlt	r3, #45	; 0x2d
   84856:	9310      	str	r3, [sp, #64]	; 0x40
   84858:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8485a:	2b66      	cmp	r3, #102	; 0x66
   8485c:	f000 8190 	beq.w	84b80 <_svfprintf_r+0x1288>
   84860:	2b46      	cmp	r3, #70	; 0x46
   84862:	f000 80a4 	beq.w	849ae <_svfprintf_r+0x10b6>
   84866:	2002      	movs	r0, #2
   84868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8486a:	a923      	add	r1, sp, #140	; 0x8c
   8486c:	2b45      	cmp	r3, #69	; 0x45
   8486e:	bf0a      	itet	eq
   84870:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   84872:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   84874:	1c5d      	addeq	r5, r3, #1
   84876:	e88d 0021 	stmia.w	sp, {r0, r5}
   8487a:	9104      	str	r1, [sp, #16]
   8487c:	a820      	add	r0, sp, #128	; 0x80
   8487e:	a91f      	add	r1, sp, #124	; 0x7c
   84880:	463b      	mov	r3, r7
   84882:	9003      	str	r0, [sp, #12]
   84884:	9a08      	ldr	r2, [sp, #32]
   84886:	9102      	str	r1, [sp, #8]
   84888:	980c      	ldr	r0, [sp, #48]	; 0x30
   8488a:	f000 fb59 	bl	84f40 <_dtoa_r>
   8488e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84890:	4606      	mov	r6, r0
   84892:	2b67      	cmp	r3, #103	; 0x67
   84894:	f040 81ba 	bne.w	84c0c <_svfprintf_r+0x1314>
   84898:	f01b 0f01 	tst.w	fp, #1
   8489c:	f000 8223 	beq.w	84ce6 <_svfprintf_r+0x13ee>
   848a0:	1974      	adds	r4, r6, r5
   848a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   848a4:	9808      	ldr	r0, [sp, #32]
   848a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   848a8:	4639      	mov	r1, r7
   848aa:	f003 fbdb 	bl	88064 <__aeabi_dcmpeq>
   848ae:	2800      	cmp	r0, #0
   848b0:	f040 8124 	bne.w	84afc <_svfprintf_r+0x1204>
   848b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   848b6:	42a3      	cmp	r3, r4
   848b8:	d206      	bcs.n	848c8 <_svfprintf_r+0xfd0>
   848ba:	2130      	movs	r1, #48	; 0x30
   848bc:	1c5a      	adds	r2, r3, #1
   848be:	9223      	str	r2, [sp, #140]	; 0x8c
   848c0:	7019      	strb	r1, [r3, #0]
   848c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   848c4:	429c      	cmp	r4, r3
   848c6:	d8f9      	bhi.n	848bc <_svfprintf_r+0xfc4>
   848c8:	1b9b      	subs	r3, r3, r6
   848ca:	9313      	str	r3, [sp, #76]	; 0x4c
   848cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   848ce:	2b47      	cmp	r3, #71	; 0x47
   848d0:	f000 80a2 	beq.w	84a18 <_svfprintf_r+0x1120>
   848d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   848d6:	2b65      	cmp	r3, #101	; 0x65
   848d8:	f340 81a7 	ble.w	84c2a <_svfprintf_r+0x1332>
   848dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   848de:	2b66      	cmp	r3, #102	; 0x66
   848e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   848e2:	9312      	str	r3, [sp, #72]	; 0x48
   848e4:	f000 8171 	beq.w	84bca <_svfprintf_r+0x12d2>
   848e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   848ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   848ec:	4619      	mov	r1, r3
   848ee:	4291      	cmp	r1, r2
   848f0:	f300 815d 	bgt.w	84bae <_svfprintf_r+0x12b6>
   848f4:	f01b 0f01 	tst.w	fp, #1
   848f8:	f040 81f0 	bne.w	84cdc <_svfprintf_r+0x13e4>
   848fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   84900:	9308      	str	r3, [sp, #32]
   84902:	2367      	movs	r3, #103	; 0x67
   84904:	920e      	str	r2, [sp, #56]	; 0x38
   84906:	9311      	str	r3, [sp, #68]	; 0x44
   84908:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8490a:	2b00      	cmp	r3, #0
   8490c:	d17d      	bne.n	84a0a <_svfprintf_r+0x1112>
   8490e:	930a      	str	r3, [sp, #40]	; 0x28
   84910:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84914:	f7ff b914 	b.w	83b40 <_svfprintf_r+0x248>
   84918:	f024 0407 	bic.w	r4, r4, #7
   8491c:	6823      	ldr	r3, [r4, #0]
   8491e:	9315      	str	r3, [sp, #84]	; 0x54
   84920:	6863      	ldr	r3, [r4, #4]
   84922:	9314      	str	r3, [sp, #80]	; 0x50
   84924:	f104 0308 	add.w	r3, r4, #8
   84928:	930f      	str	r3, [sp, #60]	; 0x3c
   8492a:	f7ff bb2f 	b.w	83f8c <_svfprintf_r+0x694>
   8492e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84930:	6813      	ldr	r3, [r2, #0]
   84932:	3204      	adds	r2, #4
   84934:	920f      	str	r2, [sp, #60]	; 0x3c
   84936:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84938:	601a      	str	r2, [r3, #0]
   8493a:	f7ff b804 	b.w	83946 <_svfprintf_r+0x4e>
   8493e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84940:	4daf      	ldr	r5, [pc, #700]	; (84c00 <_svfprintf_r+0x1308>)
   84942:	f7ff b9ad 	b.w	83ca0 <_svfprintf_r+0x3a8>
   84946:	aa25      	add	r2, sp, #148	; 0x94
   84948:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8494a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8494c:	f002 fb54 	bl	86ff8 <__ssprint_r>
   84950:	2800      	cmp	r0, #0
   84952:	f47f a8ae 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84956:	46c8      	mov	r8, r9
   84958:	e431      	b.n	841be <_svfprintf_r+0x8c6>
   8495a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8495c:	4613      	mov	r3, r2
   8495e:	3304      	adds	r3, #4
   84960:	930f      	str	r3, [sp, #60]	; 0x3c
   84962:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84964:	6811      	ldr	r1, [r2, #0]
   84966:	17dd      	asrs	r5, r3, #31
   84968:	461a      	mov	r2, r3
   8496a:	462b      	mov	r3, r5
   8496c:	e9c1 2300 	strd	r2, r3, [r1]
   84970:	f7fe bfe9 	b.w	83946 <_svfprintf_r+0x4e>
   84974:	aa25      	add	r2, sp, #148	; 0x94
   84976:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84978:	980c      	ldr	r0, [sp, #48]	; 0x30
   8497a:	f002 fb3d 	bl	86ff8 <__ssprint_r>
   8497e:	2800      	cmp	r0, #0
   84980:	f47f a897 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84984:	46c8      	mov	r8, r9
   84986:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84988:	e432      	b.n	841f0 <_svfprintf_r+0x8f8>
   8498a:	f108 0808 	add.w	r8, r8, #8
   8498e:	e52f      	b.n	843f0 <_svfprintf_r+0xaf8>
   84990:	2140      	movs	r1, #64	; 0x40
   84992:	980c      	ldr	r0, [sp, #48]	; 0x30
   84994:	f001 fcea 	bl	8636c <_malloc_r>
   84998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8499a:	6010      	str	r0, [r2, #0]
   8499c:	6110      	str	r0, [r2, #16]
   8499e:	2800      	cmp	r0, #0
   849a0:	f000 8214 	beq.w	84dcc <_svfprintf_r+0x14d4>
   849a4:	2340      	movs	r3, #64	; 0x40
   849a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   849a8:	6153      	str	r3, [r2, #20]
   849aa:	f7fe bfbc 	b.w	83926 <_svfprintf_r+0x2e>
   849ae:	2003      	movs	r0, #3
   849b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   849b2:	a923      	add	r1, sp, #140	; 0x8c
   849b4:	e88d 0011 	stmia.w	sp, {r0, r4}
   849b8:	9104      	str	r1, [sp, #16]
   849ba:	a820      	add	r0, sp, #128	; 0x80
   849bc:	a91f      	add	r1, sp, #124	; 0x7c
   849be:	9003      	str	r0, [sp, #12]
   849c0:	9a08      	ldr	r2, [sp, #32]
   849c2:	463b      	mov	r3, r7
   849c4:	9102      	str	r1, [sp, #8]
   849c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   849c8:	f000 faba 	bl	84f40 <_dtoa_r>
   849cc:	4625      	mov	r5, r4
   849ce:	4606      	mov	r6, r0
   849d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   849d2:	1974      	adds	r4, r6, r5
   849d4:	2b46      	cmp	r3, #70	; 0x46
   849d6:	f47f af64 	bne.w	848a2 <_svfprintf_r+0xfaa>
   849da:	7833      	ldrb	r3, [r6, #0]
   849dc:	2b30      	cmp	r3, #48	; 0x30
   849de:	f000 8187 	beq.w	84cf0 <_svfprintf_r+0x13f8>
   849e2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   849e4:	442c      	add	r4, r5
   849e6:	e75c      	b.n	848a2 <_svfprintf_r+0xfaa>
   849e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   849ea:	2b00      	cmp	r3, #0
   849ec:	bf08      	it	eq
   849ee:	2301      	moveq	r3, #1
   849f0:	930a      	str	r3, [sp, #40]	; 0x28
   849f2:	e723      	b.n	8483c <_svfprintf_r+0xf44>
   849f4:	4630      	mov	r0, r6
   849f6:	950a      	str	r5, [sp, #40]	; 0x28
   849f8:	f7fe ff50 	bl	8389c <strlen>
   849fc:	940f      	str	r4, [sp, #60]	; 0x3c
   849fe:	900e      	str	r0, [sp, #56]	; 0x38
   84a00:	f8cd b01c 	str.w	fp, [sp, #28]
   84a04:	4603      	mov	r3, r0
   84a06:	f7ff b9e7 	b.w	83dd8 <_svfprintf_r+0x4e0>
   84a0a:	272d      	movs	r7, #45	; 0x2d
   84a0c:	2300      	movs	r3, #0
   84a0e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   84a12:	930a      	str	r3, [sp, #40]	; 0x28
   84a14:	f7ff b895 	b.w	83b42 <_svfprintf_r+0x24a>
   84a18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84a1a:	461a      	mov	r2, r3
   84a1c:	9312      	str	r3, [sp, #72]	; 0x48
   84a1e:	3303      	adds	r3, #3
   84a20:	db04      	blt.n	84a2c <_svfprintf_r+0x1134>
   84a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84a24:	4619      	mov	r1, r3
   84a26:	4291      	cmp	r1, r2
   84a28:	f6bf af5e 	bge.w	848e8 <_svfprintf_r+0xff0>
   84a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84a2e:	3b02      	subs	r3, #2
   84a30:	9311      	str	r3, [sp, #68]	; 0x44
   84a32:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84a34:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   84a38:	3b01      	subs	r3, #1
   84a3a:	2b00      	cmp	r3, #0
   84a3c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   84a40:	bfb4      	ite	lt
   84a42:	222d      	movlt	r2, #45	; 0x2d
   84a44:	222b      	movge	r2, #43	; 0x2b
   84a46:	931f      	str	r3, [sp, #124]	; 0x7c
   84a48:	bfb8      	it	lt
   84a4a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   84a4c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   84a50:	bfb8      	it	lt
   84a52:	f1c3 0301 	rsblt	r3, r3, #1
   84a56:	2b09      	cmp	r3, #9
   84a58:	f340 811f 	ble.w	84c9a <_svfprintf_r+0x13a2>
   84a5c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   84a60:	4601      	mov	r1, r0
   84a62:	4c68      	ldr	r4, [pc, #416]	; (84c04 <_svfprintf_r+0x130c>)
   84a64:	e000      	b.n	84a68 <_svfprintf_r+0x1170>
   84a66:	4611      	mov	r1, r2
   84a68:	fb84 5203 	smull	r5, r2, r4, r3
   84a6c:	17dd      	asrs	r5, r3, #31
   84a6e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   84a72:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   84a76:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   84a7a:	3230      	adds	r2, #48	; 0x30
   84a7c:	2d09      	cmp	r5, #9
   84a7e:	f801 2c01 	strb.w	r2, [r1, #-1]
   84a82:	462b      	mov	r3, r5
   84a84:	f101 32ff 	add.w	r2, r1, #4294967295
   84a88:	dced      	bgt.n	84a66 <_svfprintf_r+0x116e>
   84a8a:	3330      	adds	r3, #48	; 0x30
   84a8c:	3902      	subs	r1, #2
   84a8e:	b2dc      	uxtb	r4, r3
   84a90:	4288      	cmp	r0, r1
   84a92:	f802 4c01 	strb.w	r4, [r2, #-1]
   84a96:	f240 8192 	bls.w	84dbe <_svfprintf_r+0x14c6>
   84a9a:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   84a9e:	4613      	mov	r3, r2
   84aa0:	e001      	b.n	84aa6 <_svfprintf_r+0x11ae>
   84aa2:	f813 4b01 	ldrb.w	r4, [r3], #1
   84aa6:	4283      	cmp	r3, r0
   84aa8:	f801 4b01 	strb.w	r4, [r1], #1
   84aac:	d1f9      	bne.n	84aa2 <_svfprintf_r+0x11aa>
   84aae:	3301      	adds	r3, #1
   84ab0:	1a9b      	subs	r3, r3, r2
   84ab2:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   84ab6:	4413      	add	r3, r2
   84ab8:	aa21      	add	r2, sp, #132	; 0x84
   84aba:	1a9b      	subs	r3, r3, r2
   84abc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   84abe:	931b      	str	r3, [sp, #108]	; 0x6c
   84ac0:	2a01      	cmp	r2, #1
   84ac2:	4413      	add	r3, r2
   84ac4:	930e      	str	r3, [sp, #56]	; 0x38
   84ac6:	f340 8148 	ble.w	84d5a <_svfprintf_r+0x1462>
   84aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84acc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84ace:	4413      	add	r3, r2
   84ad0:	930e      	str	r3, [sp, #56]	; 0x38
   84ad2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84ad6:	9308      	str	r3, [sp, #32]
   84ad8:	2300      	movs	r3, #0
   84ada:	9312      	str	r3, [sp, #72]	; 0x48
   84adc:	e714      	b.n	84908 <_svfprintf_r+0x1010>
   84ade:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84ae2:	f7ff b876 	b.w	83bd2 <_svfprintf_r+0x2da>
   84ae6:	aa25      	add	r2, sp, #148	; 0x94
   84ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84aea:	980c      	ldr	r0, [sp, #48]	; 0x30
   84aec:	f002 fa84 	bl	86ff8 <__ssprint_r>
   84af0:	2800      	cmp	r0, #0
   84af2:	f47e afde 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84af6:	46c8      	mov	r8, r9
   84af8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84afa:	e4fb      	b.n	844f4 <_svfprintf_r+0xbfc>
   84afc:	4623      	mov	r3, r4
   84afe:	e6e3      	b.n	848c8 <_svfprintf_r+0xfd0>
   84b00:	aa25      	add	r2, sp, #148	; 0x94
   84b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b04:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b06:	f002 fa77 	bl	86ff8 <__ssprint_r>
   84b0a:	2800      	cmp	r0, #0
   84b0c:	f47e afd1 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84b10:	46c8      	mov	r8, r9
   84b12:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84b14:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b16:	e5d3      	b.n	846c0 <_svfprintf_r+0xdc8>
   84b18:	aa25      	add	r2, sp, #148	; 0x94
   84b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b1e:	f002 fa6b 	bl	86ff8 <__ssprint_r>
   84b22:	2800      	cmp	r0, #0
   84b24:	f47e afc5 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84b28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   84b2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84b2c:	46c8      	mov	r8, r9
   84b2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b30:	1a9a      	subs	r2, r3, r2
   84b32:	e5dd      	b.n	846f0 <_svfprintf_r+0xdf8>
   84b34:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84b36:	f7ff b8fe 	b.w	83d36 <_svfprintf_r+0x43e>
   84b3a:	aa25      	add	r2, sp, #148	; 0x94
   84b3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84b3e:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b40:	f002 fa5a 	bl	86ff8 <__ssprint_r>
   84b44:	2800      	cmp	r0, #0
   84b46:	f47e afb4 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84b4a:	46c8      	mov	r8, r9
   84b4c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   84b4e:	e5b0      	b.n	846b2 <_svfprintf_r+0xdba>
   84b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84b52:	4637      	mov	r7, r6
   84b54:	2b06      	cmp	r3, #6
   84b56:	bf28      	it	cs
   84b58:	2306      	movcs	r3, #6
   84b5a:	960a      	str	r6, [sp, #40]	; 0x28
   84b5c:	9612      	str	r6, [sp, #72]	; 0x48
   84b5e:	9308      	str	r3, [sp, #32]
   84b60:	940f      	str	r4, [sp, #60]	; 0x3c
   84b62:	f8cd b01c 	str.w	fp, [sp, #28]
   84b66:	930e      	str	r3, [sp, #56]	; 0x38
   84b68:	4e27      	ldr	r6, [pc, #156]	; (84c08 <_svfprintf_r+0x1310>)
   84b6a:	f7fe bfe9 	b.w	83b40 <_svfprintf_r+0x248>
   84b6e:	2306      	movs	r3, #6
   84b70:	930a      	str	r3, [sp, #40]	; 0x28
   84b72:	e663      	b.n	8483c <_svfprintf_r+0xf44>
   84b74:	232d      	movs	r3, #45	; 0x2d
   84b76:	461f      	mov	r7, r3
   84b78:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   84b7c:	f7ff ba28 	b.w	83fd0 <_svfprintf_r+0x6d8>
   84b80:	2003      	movs	r0, #3
   84b82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   84b84:	a923      	add	r1, sp, #140	; 0x8c
   84b86:	e88d 0011 	stmia.w	sp, {r0, r4}
   84b8a:	9104      	str	r1, [sp, #16]
   84b8c:	a820      	add	r0, sp, #128	; 0x80
   84b8e:	a91f      	add	r1, sp, #124	; 0x7c
   84b90:	9003      	str	r0, [sp, #12]
   84b92:	9a08      	ldr	r2, [sp, #32]
   84b94:	463b      	mov	r3, r7
   84b96:	9102      	str	r1, [sp, #8]
   84b98:	980c      	ldr	r0, [sp, #48]	; 0x30
   84b9a:	f000 f9d1 	bl	84f40 <_dtoa_r>
   84b9e:	4625      	mov	r5, r4
   84ba0:	4606      	mov	r6, r0
   84ba2:	1904      	adds	r4, r0, r4
   84ba4:	e719      	b.n	849da <_svfprintf_r+0x10e2>
   84ba6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84ba8:	4d15      	ldr	r5, [pc, #84]	; (84c00 <_svfprintf_r+0x1308>)
   84baa:	f7ff bb7e 	b.w	842aa <_svfprintf_r+0x9b2>
   84bae:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84bb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   84bb2:	4413      	add	r3, r2
   84bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84bb6:	930e      	str	r3, [sp, #56]	; 0x38
   84bb8:	2a00      	cmp	r2, #0
   84bba:	f340 80c7 	ble.w	84d4c <_svfprintf_r+0x1454>
   84bbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84bc2:	9308      	str	r3, [sp, #32]
   84bc4:	2367      	movs	r3, #103	; 0x67
   84bc6:	9311      	str	r3, [sp, #68]	; 0x44
   84bc8:	e69e      	b.n	84908 <_svfprintf_r+0x1010>
   84bca:	2b00      	cmp	r3, #0
   84bcc:	f340 80e1 	ble.w	84d92 <_svfprintf_r+0x149a>
   84bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84bd2:	2a00      	cmp	r2, #0
   84bd4:	f040 80b0 	bne.w	84d38 <_svfprintf_r+0x1440>
   84bd8:	f01b 0f01 	tst.w	fp, #1
   84bdc:	f040 80ac 	bne.w	84d38 <_svfprintf_r+0x1440>
   84be0:	9308      	str	r3, [sp, #32]
   84be2:	930e      	str	r3, [sp, #56]	; 0x38
   84be4:	e690      	b.n	84908 <_svfprintf_r+0x1010>
   84be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84be8:	940f      	str	r4, [sp, #60]	; 0x3c
   84bea:	9308      	str	r3, [sp, #32]
   84bec:	930e      	str	r3, [sp, #56]	; 0x38
   84bee:	900a      	str	r0, [sp, #40]	; 0x28
   84bf0:	f8cd b01c 	str.w	fp, [sp, #28]
   84bf4:	9012      	str	r0, [sp, #72]	; 0x48
   84bf6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   84bfa:	f7fe bfa1 	b.w	83b40 <_svfprintf_r+0x248>
   84bfe:	bf00      	nop
   84c00:	0008a068 	.word	0x0008a068
   84c04:	66666667 	.word	0x66666667
   84c08:	0008a04c 	.word	0x0008a04c
   84c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84c0e:	2b47      	cmp	r3, #71	; 0x47
   84c10:	f47f ae46 	bne.w	848a0 <_svfprintf_r+0xfa8>
   84c14:	f01b 0f01 	tst.w	fp, #1
   84c18:	f47f aeda 	bne.w	849d0 <_svfprintf_r+0x10d8>
   84c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84c1e:	1b9b      	subs	r3, r3, r6
   84c20:	9313      	str	r3, [sp, #76]	; 0x4c
   84c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84c24:	2b47      	cmp	r3, #71	; 0x47
   84c26:	f43f aef7 	beq.w	84a18 <_svfprintf_r+0x1120>
   84c2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   84c2c:	9312      	str	r3, [sp, #72]	; 0x48
   84c2e:	e700      	b.n	84a32 <_svfprintf_r+0x113a>
   84c30:	2000      	movs	r0, #0
   84c32:	900a      	str	r0, [sp, #40]	; 0x28
   84c34:	f7fe bebc 	b.w	839b0 <_svfprintf_r+0xb8>
   84c38:	424f      	negs	r7, r1
   84c3a:	3110      	adds	r1, #16
   84c3c:	da35      	bge.n	84caa <_svfprintf_r+0x13b2>
   84c3e:	2410      	movs	r4, #16
   84c40:	4d6a      	ldr	r5, [pc, #424]	; (84dec <_svfprintf_r+0x14f4>)
   84c42:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   84c46:	e004      	b.n	84c52 <_svfprintf_r+0x135a>
   84c48:	f108 0808 	add.w	r8, r8, #8
   84c4c:	3f10      	subs	r7, #16
   84c4e:	2f10      	cmp	r7, #16
   84c50:	dd2c      	ble.n	84cac <_svfprintf_r+0x13b4>
   84c52:	3301      	adds	r3, #1
   84c54:	3210      	adds	r2, #16
   84c56:	2b07      	cmp	r3, #7
   84c58:	9227      	str	r2, [sp, #156]	; 0x9c
   84c5a:	9326      	str	r3, [sp, #152]	; 0x98
   84c5c:	f8c8 5000 	str.w	r5, [r8]
   84c60:	f8c8 4004 	str.w	r4, [r8, #4]
   84c64:	ddf0      	ble.n	84c48 <_svfprintf_r+0x1350>
   84c66:	aa25      	add	r2, sp, #148	; 0x94
   84c68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c6a:	4658      	mov	r0, fp
   84c6c:	f002 f9c4 	bl	86ff8 <__ssprint_r>
   84c70:	2800      	cmp	r0, #0
   84c72:	f47e af1e 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84c76:	46c8      	mov	r8, r9
   84c78:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84c7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84c7c:	e7e6      	b.n	84c4c <_svfprintf_r+0x1354>
   84c7e:	aa25      	add	r2, sp, #148	; 0x94
   84c80:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84c82:	980c      	ldr	r0, [sp, #48]	; 0x30
   84c84:	f002 f9b8 	bl	86ff8 <__ssprint_r>
   84c88:	2800      	cmp	r0, #0
   84c8a:	f47e af12 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84c8e:	46c8      	mov	r8, r9
   84c90:	991f      	ldr	r1, [sp, #124]	; 0x7c
   84c92:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84c94:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84c96:	f7ff bbc3 	b.w	84420 <_svfprintf_r+0xb28>
   84c9a:	2230      	movs	r2, #48	; 0x30
   84c9c:	4413      	add	r3, r2
   84c9e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   84ca2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   84ca6:	ab22      	add	r3, sp, #136	; 0x88
   84ca8:	e706      	b.n	84ab8 <_svfprintf_r+0x11c0>
   84caa:	4d50      	ldr	r5, [pc, #320]	; (84dec <_svfprintf_r+0x14f4>)
   84cac:	3301      	adds	r3, #1
   84cae:	443a      	add	r2, r7
   84cb0:	2b07      	cmp	r3, #7
   84cb2:	e888 00a0 	stmia.w	r8, {r5, r7}
   84cb6:	9227      	str	r2, [sp, #156]	; 0x9c
   84cb8:	9326      	str	r3, [sp, #152]	; 0x98
   84cba:	f108 0808 	add.w	r8, r8, #8
   84cbe:	f77f abb2 	ble.w	84426 <_svfprintf_r+0xb2e>
   84cc2:	aa25      	add	r2, sp, #148	; 0x94
   84cc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   84cc6:	980c      	ldr	r0, [sp, #48]	; 0x30
   84cc8:	f002 f996 	bl	86ff8 <__ssprint_r>
   84ccc:	2800      	cmp	r0, #0
   84cce:	f47e aef0 	bne.w	83ab2 <_svfprintf_r+0x1ba>
   84cd2:	46c8      	mov	r8, r9
   84cd4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   84cd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84cd8:	f7ff bba5 	b.w	84426 <_svfprintf_r+0xb2e>
   84cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84cde:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84ce0:	4413      	add	r3, r2
   84ce2:	930e      	str	r3, [sp, #56]	; 0x38
   84ce4:	e76b      	b.n	84bbe <_svfprintf_r+0x12c6>
   84ce6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   84ce8:	e5ee      	b.n	848c8 <_svfprintf_r+0xfd0>
   84cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84cec:	4d3f      	ldr	r5, [pc, #252]	; (84dec <_svfprintf_r+0x14f4>)
   84cee:	e4bb      	b.n	84668 <_svfprintf_r+0xd70>
   84cf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   84cf2:	9808      	ldr	r0, [sp, #32]
   84cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   84cf6:	4639      	mov	r1, r7
   84cf8:	f003 f9b4 	bl	88064 <__aeabi_dcmpeq>
   84cfc:	2800      	cmp	r0, #0
   84cfe:	f47f ae70 	bne.w	849e2 <_svfprintf_r+0x10ea>
   84d02:	f1c5 0501 	rsb	r5, r5, #1
   84d06:	951f      	str	r5, [sp, #124]	; 0x7c
   84d08:	442c      	add	r4, r5
   84d0a:	e5ca      	b.n	848a2 <_svfprintf_r+0xfaa>
   84d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84d0e:	4e38      	ldr	r6, [pc, #224]	; (84df0 <_svfprintf_r+0x14f8>)
   84d10:	2b00      	cmp	r3, #0
   84d12:	bfbe      	ittt	lt
   84d14:	232d      	movlt	r3, #45	; 0x2d
   84d16:	461f      	movlt	r7, r3
   84d18:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   84d1c:	f04f 0303 	mov.w	r3, #3
   84d20:	461a      	mov	r2, r3
   84d22:	9308      	str	r3, [sp, #32]
   84d24:	f04f 0300 	mov.w	r3, #0
   84d28:	bfa8      	it	ge
   84d2a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   84d2e:	4619      	mov	r1, r3
   84d30:	930a      	str	r3, [sp, #40]	; 0x28
   84d32:	4b30      	ldr	r3, [pc, #192]	; (84df4 <_svfprintf_r+0x14fc>)
   84d34:	f7ff b954 	b.w	83fe0 <_svfprintf_r+0x6e8>
   84d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84d3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   84d3c:	4413      	add	r3, r2
   84d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84d40:	441a      	add	r2, r3
   84d42:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   84d46:	920e      	str	r2, [sp, #56]	; 0x38
   84d48:	9308      	str	r3, [sp, #32]
   84d4a:	e5dd      	b.n	84908 <_svfprintf_r+0x1010>
   84d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84d4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   84d50:	f1c3 0301 	rsb	r3, r3, #1
   84d54:	441a      	add	r2, r3
   84d56:	4613      	mov	r3, r2
   84d58:	e7c3      	b.n	84ce2 <_svfprintf_r+0x13ea>
   84d5a:	f01b 0301 	ands.w	r3, fp, #1
   84d5e:	9312      	str	r3, [sp, #72]	; 0x48
   84d60:	f47f aeb3 	bne.w	84aca <_svfprintf_r+0x11d2>
   84d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84d66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   84d6a:	9308      	str	r3, [sp, #32]
   84d6c:	e5cc      	b.n	84908 <_svfprintf_r+0x1010>
   84d6e:	4d1f      	ldr	r5, [pc, #124]	; (84dec <_svfprintf_r+0x14f4>)
   84d70:	e43c      	b.n	845ec <_svfprintf_r+0xcf4>
   84d72:	9b26      	ldr	r3, [sp, #152]	; 0x98
   84d74:	4d1d      	ldr	r5, [pc, #116]	; (84dec <_svfprintf_r+0x14f4>)
   84d76:	e491      	b.n	8469c <_svfprintf_r+0xda4>
   84d78:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   84d7a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   84d7e:	6828      	ldr	r0, [r5, #0]
   84d80:	46a2      	mov	sl, r4
   84d82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   84d86:	900a      	str	r0, [sp, #40]	; 0x28
   84d88:	4628      	mov	r0, r5
   84d8a:	3004      	adds	r0, #4
   84d8c:	900f      	str	r0, [sp, #60]	; 0x3c
   84d8e:	f7fe be0d 	b.w	839ac <_svfprintf_r+0xb4>
   84d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84d94:	b913      	cbnz	r3, 84d9c <_svfprintf_r+0x14a4>
   84d96:	f01b 0f01 	tst.w	fp, #1
   84d9a:	d002      	beq.n	84da2 <_svfprintf_r+0x14aa>
   84d9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84d9e:	3301      	adds	r3, #1
   84da0:	e7cd      	b.n	84d3e <_svfprintf_r+0x1446>
   84da2:	2301      	movs	r3, #1
   84da4:	e71c      	b.n	84be0 <_svfprintf_r+0x12e8>
   84da6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84daa:	f7ff b980 	b.w	840ae <_svfprintf_r+0x7b6>
   84dae:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84db2:	f7ff b93a 	b.w	8402a <_svfprintf_r+0x732>
   84db6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84dba:	f7ff b84f 	b.w	83e5c <_svfprintf_r+0x564>
   84dbe:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   84dc2:	e679      	b.n	84ab8 <_svfprintf_r+0x11c0>
   84dc4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84dc8:	f7ff b9b2 	b.w	84130 <_svfprintf_r+0x838>
   84dcc:	f04f 32ff 	mov.w	r2, #4294967295
   84dd0:	230c      	movs	r3, #12
   84dd2:	9209      	str	r2, [sp, #36]	; 0x24
   84dd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84dd6:	6013      	str	r3, [r2, #0]
   84dd8:	f7fe be74 	b.w	83ac4 <_svfprintf_r+0x1cc>
   84ddc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84de0:	f7ff b8c4 	b.w	83f6c <_svfprintf_r+0x674>
   84de4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   84de8:	f7ff b878 	b.w	83edc <_svfprintf_r+0x5e4>
   84dec:	0008a068 	.word	0x0008a068
   84df0:	0008a020 	.word	0x0008a020
   84df4:	0008a01c 	.word	0x0008a01c

00084df8 <register_fini>:
   84df8:	4b02      	ldr	r3, [pc, #8]	; (84e04 <register_fini+0xc>)
   84dfa:	b113      	cbz	r3, 84e02 <register_fini+0xa>
   84dfc:	4802      	ldr	r0, [pc, #8]	; (84e08 <register_fini+0x10>)
   84dfe:	f000 b805 	b.w	84e0c <atexit>
   84e02:	4770      	bx	lr
   84e04:	00000000 	.word	0x00000000
   84e08:	00085fe5 	.word	0x00085fe5

00084e0c <atexit>:
   84e0c:	2300      	movs	r3, #0
   84e0e:	4601      	mov	r1, r0
   84e10:	461a      	mov	r2, r3
   84e12:	4618      	mov	r0, r3
   84e14:	f002 b984 	b.w	87120 <__register_exitproc>

00084e18 <quorem>:
   84e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e1c:	6903      	ldr	r3, [r0, #16]
   84e1e:	690f      	ldr	r7, [r1, #16]
   84e20:	b083      	sub	sp, #12
   84e22:	429f      	cmp	r7, r3
   84e24:	f300 8088 	bgt.w	84f38 <quorem+0x120>
   84e28:	3f01      	subs	r7, #1
   84e2a:	f101 0614 	add.w	r6, r1, #20
   84e2e:	f100 0a14 	add.w	sl, r0, #20
   84e32:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   84e36:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84e3a:	3301      	adds	r3, #1
   84e3c:	fbb2 f8f3 	udiv	r8, r2, r3
   84e40:	00bb      	lsls	r3, r7, #2
   84e42:	9300      	str	r3, [sp, #0]
   84e44:	eb06 0903 	add.w	r9, r6, r3
   84e48:	4453      	add	r3, sl
   84e4a:	9301      	str	r3, [sp, #4]
   84e4c:	f1b8 0f00 	cmp.w	r8, #0
   84e50:	d03b      	beq.n	84eca <quorem+0xb2>
   84e52:	2300      	movs	r3, #0
   84e54:	46b4      	mov	ip, r6
   84e56:	461c      	mov	r4, r3
   84e58:	46d6      	mov	lr, sl
   84e5a:	f85c 2b04 	ldr.w	r2, [ip], #4
   84e5e:	f8de 5000 	ldr.w	r5, [lr]
   84e62:	fa1f fb82 	uxth.w	fp, r2
   84e66:	fb08 330b 	mla	r3, r8, fp, r3
   84e6a:	0c12      	lsrs	r2, r2, #16
   84e6c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   84e70:	fb08 bb02 	mla	fp, r8, r2, fp
   84e74:	b29a      	uxth	r2, r3
   84e76:	1aa2      	subs	r2, r4, r2
   84e78:	b2ab      	uxth	r3, r5
   84e7a:	fa1f f48b 	uxth.w	r4, fp
   84e7e:	441a      	add	r2, r3
   84e80:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   84e84:	eb04 4422 	add.w	r4, r4, r2, asr #16
   84e88:	b292      	uxth	r2, r2
   84e8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   84e8e:	45e1      	cmp	r9, ip
   84e90:	f84e 2b04 	str.w	r2, [lr], #4
   84e94:	ea4f 4424 	mov.w	r4, r4, asr #16
   84e98:	ea4f 431b 	mov.w	r3, fp, lsr #16
   84e9c:	d2dd      	bcs.n	84e5a <quorem+0x42>
   84e9e:	9b00      	ldr	r3, [sp, #0]
   84ea0:	f85a 3003 	ldr.w	r3, [sl, r3]
   84ea4:	b98b      	cbnz	r3, 84eca <quorem+0xb2>
   84ea6:	9c01      	ldr	r4, [sp, #4]
   84ea8:	1f23      	subs	r3, r4, #4
   84eaa:	459a      	cmp	sl, r3
   84eac:	d20c      	bcs.n	84ec8 <quorem+0xb0>
   84eae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84eb2:	b94b      	cbnz	r3, 84ec8 <quorem+0xb0>
   84eb4:	f1a4 0308 	sub.w	r3, r4, #8
   84eb8:	e002      	b.n	84ec0 <quorem+0xa8>
   84eba:	681a      	ldr	r2, [r3, #0]
   84ebc:	3b04      	subs	r3, #4
   84ebe:	b91a      	cbnz	r2, 84ec8 <quorem+0xb0>
   84ec0:	459a      	cmp	sl, r3
   84ec2:	f107 37ff 	add.w	r7, r7, #4294967295
   84ec6:	d3f8      	bcc.n	84eba <quorem+0xa2>
   84ec8:	6107      	str	r7, [r0, #16]
   84eca:	4604      	mov	r4, r0
   84ecc:	f001 ff40 	bl	86d50 <__mcmp>
   84ed0:	2800      	cmp	r0, #0
   84ed2:	db2d      	blt.n	84f30 <quorem+0x118>
   84ed4:	4655      	mov	r5, sl
   84ed6:	2300      	movs	r3, #0
   84ed8:	f108 0801 	add.w	r8, r8, #1
   84edc:	f856 1b04 	ldr.w	r1, [r6], #4
   84ee0:	6828      	ldr	r0, [r5, #0]
   84ee2:	b28a      	uxth	r2, r1
   84ee4:	1a9a      	subs	r2, r3, r2
   84ee6:	0c0b      	lsrs	r3, r1, #16
   84ee8:	b281      	uxth	r1, r0
   84eea:	440a      	add	r2, r1
   84eec:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   84ef0:	eb03 4322 	add.w	r3, r3, r2, asr #16
   84ef4:	b292      	uxth	r2, r2
   84ef6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   84efa:	45b1      	cmp	r9, r6
   84efc:	f845 2b04 	str.w	r2, [r5], #4
   84f00:	ea4f 4323 	mov.w	r3, r3, asr #16
   84f04:	d2ea      	bcs.n	84edc <quorem+0xc4>
   84f06:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   84f0a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   84f0e:	b97a      	cbnz	r2, 84f30 <quorem+0x118>
   84f10:	1f1a      	subs	r2, r3, #4
   84f12:	4592      	cmp	sl, r2
   84f14:	d20b      	bcs.n	84f2e <quorem+0x116>
   84f16:	f853 2c04 	ldr.w	r2, [r3, #-4]
   84f1a:	b942      	cbnz	r2, 84f2e <quorem+0x116>
   84f1c:	3b08      	subs	r3, #8
   84f1e:	e002      	b.n	84f26 <quorem+0x10e>
   84f20:	681a      	ldr	r2, [r3, #0]
   84f22:	3b04      	subs	r3, #4
   84f24:	b91a      	cbnz	r2, 84f2e <quorem+0x116>
   84f26:	459a      	cmp	sl, r3
   84f28:	f107 37ff 	add.w	r7, r7, #4294967295
   84f2c:	d3f8      	bcc.n	84f20 <quorem+0x108>
   84f2e:	6127      	str	r7, [r4, #16]
   84f30:	4640      	mov	r0, r8
   84f32:	b003      	add	sp, #12
   84f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f38:	2000      	movs	r0, #0
   84f3a:	b003      	add	sp, #12
   84f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00084f40 <_dtoa_r>:
   84f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f44:	6c05      	ldr	r5, [r0, #64]	; 0x40
   84f46:	b09b      	sub	sp, #108	; 0x6c
   84f48:	4604      	mov	r4, r0
   84f4a:	4692      	mov	sl, r2
   84f4c:	469b      	mov	fp, r3
   84f4e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   84f50:	b14d      	cbz	r5, 84f66 <_dtoa_r+0x26>
   84f52:	2301      	movs	r3, #1
   84f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
   84f56:	4629      	mov	r1, r5
   84f58:	4093      	lsls	r3, r2
   84f5a:	60ab      	str	r3, [r5, #8]
   84f5c:	606a      	str	r2, [r5, #4]
   84f5e:	f001 fd1f 	bl	869a0 <_Bfree>
   84f62:	2300      	movs	r3, #0
   84f64:	6423      	str	r3, [r4, #64]	; 0x40
   84f66:	f1bb 0f00 	cmp.w	fp, #0
   84f6a:	465d      	mov	r5, fp
   84f6c:	db35      	blt.n	84fda <_dtoa_r+0x9a>
   84f6e:	2300      	movs	r3, #0
   84f70:	6033      	str	r3, [r6, #0]
   84f72:	4b9d      	ldr	r3, [pc, #628]	; (851e8 <_dtoa_r+0x2a8>)
   84f74:	43ab      	bics	r3, r5
   84f76:	d015      	beq.n	84fa4 <_dtoa_r+0x64>
   84f78:	2200      	movs	r2, #0
   84f7a:	2300      	movs	r3, #0
   84f7c:	4650      	mov	r0, sl
   84f7e:	4659      	mov	r1, fp
   84f80:	f003 f870 	bl	88064 <__aeabi_dcmpeq>
   84f84:	4680      	mov	r8, r0
   84f86:	2800      	cmp	r0, #0
   84f88:	d02d      	beq.n	84fe6 <_dtoa_r+0xa6>
   84f8a:	2301      	movs	r3, #1
   84f8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84f8e:	6013      	str	r3, [r2, #0]
   84f90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84f92:	2b00      	cmp	r3, #0
   84f94:	f000 80bd 	beq.w	85112 <_dtoa_r+0x1d2>
   84f98:	4894      	ldr	r0, [pc, #592]	; (851ec <_dtoa_r+0x2ac>)
   84f9a:	6018      	str	r0, [r3, #0]
   84f9c:	3801      	subs	r0, #1
   84f9e:	b01b      	add	sp, #108	; 0x6c
   84fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84fa4:	f242 730f 	movw	r3, #9999	; 0x270f
   84fa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84faa:	6013      	str	r3, [r2, #0]
   84fac:	f1ba 0f00 	cmp.w	sl, #0
   84fb0:	d10d      	bne.n	84fce <_dtoa_r+0x8e>
   84fb2:	f3c5 0513 	ubfx	r5, r5, #0, #20
   84fb6:	b955      	cbnz	r5, 84fce <_dtoa_r+0x8e>
   84fb8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84fba:	488d      	ldr	r0, [pc, #564]	; (851f0 <_dtoa_r+0x2b0>)
   84fbc:	2b00      	cmp	r3, #0
   84fbe:	d0ee      	beq.n	84f9e <_dtoa_r+0x5e>
   84fc0:	f100 0308 	add.w	r3, r0, #8
   84fc4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   84fc6:	6013      	str	r3, [r2, #0]
   84fc8:	b01b      	add	sp, #108	; 0x6c
   84fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84fce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   84fd0:	4888      	ldr	r0, [pc, #544]	; (851f4 <_dtoa_r+0x2b4>)
   84fd2:	2b00      	cmp	r3, #0
   84fd4:	d0e3      	beq.n	84f9e <_dtoa_r+0x5e>
   84fd6:	1cc3      	adds	r3, r0, #3
   84fd8:	e7f4      	b.n	84fc4 <_dtoa_r+0x84>
   84fda:	2301      	movs	r3, #1
   84fdc:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   84fe0:	6033      	str	r3, [r6, #0]
   84fe2:	46ab      	mov	fp, r5
   84fe4:	e7c5      	b.n	84f72 <_dtoa_r+0x32>
   84fe6:	aa18      	add	r2, sp, #96	; 0x60
   84fe8:	ab19      	add	r3, sp, #100	; 0x64
   84fea:	9201      	str	r2, [sp, #4]
   84fec:	9300      	str	r3, [sp, #0]
   84fee:	4652      	mov	r2, sl
   84ff0:	465b      	mov	r3, fp
   84ff2:	4620      	mov	r0, r4
   84ff4:	f001 ff56 	bl	86ea4 <__d2b>
   84ff8:	0d2b      	lsrs	r3, r5, #20
   84ffa:	4681      	mov	r9, r0
   84ffc:	d071      	beq.n	850e2 <_dtoa_r+0x1a2>
   84ffe:	4650      	mov	r0, sl
   85000:	f3cb 0213 	ubfx	r2, fp, #0, #20
   85004:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   85008:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8500a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8500e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   85012:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   85016:	2200      	movs	r2, #0
   85018:	4b77      	ldr	r3, [pc, #476]	; (851f8 <_dtoa_r+0x2b8>)
   8501a:	f002 fc07 	bl	8782c <__aeabi_dsub>
   8501e:	a36c      	add	r3, pc, #432	; (adr r3, 851d0 <_dtoa_r+0x290>)
   85020:	e9d3 2300 	ldrd	r2, r3, [r3]
   85024:	f002 fdb6 	bl	87b94 <__aeabi_dmul>
   85028:	a36b      	add	r3, pc, #428	; (adr r3, 851d8 <_dtoa_r+0x298>)
   8502a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8502e:	f002 fbff 	bl	87830 <__adddf3>
   85032:	e9cd 0102 	strd	r0, r1, [sp, #8]
   85036:	4630      	mov	r0, r6
   85038:	f002 fd46 	bl	87ac8 <__aeabi_i2d>
   8503c:	a368      	add	r3, pc, #416	; (adr r3, 851e0 <_dtoa_r+0x2a0>)
   8503e:	e9d3 2300 	ldrd	r2, r3, [r3]
   85042:	f002 fda7 	bl	87b94 <__aeabi_dmul>
   85046:	4602      	mov	r2, r0
   85048:	460b      	mov	r3, r1
   8504a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8504e:	f002 fbef 	bl	87830 <__adddf3>
   85052:	e9cd 0104 	strd	r0, r1, [sp, #16]
   85056:	f003 f84d 	bl	880f4 <__aeabi_d2iz>
   8505a:	2200      	movs	r2, #0
   8505c:	9002      	str	r0, [sp, #8]
   8505e:	2300      	movs	r3, #0
   85060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85064:	f003 f808 	bl	88078 <__aeabi_dcmplt>
   85068:	2800      	cmp	r0, #0
   8506a:	f040 816d 	bne.w	85348 <_dtoa_r+0x408>
   8506e:	9d02      	ldr	r5, [sp, #8]
   85070:	2d16      	cmp	r5, #22
   85072:	f200 8157 	bhi.w	85324 <_dtoa_r+0x3e4>
   85076:	4961      	ldr	r1, [pc, #388]	; (851fc <_dtoa_r+0x2bc>)
   85078:	4652      	mov	r2, sl
   8507a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   8507e:	465b      	mov	r3, fp
   85080:	e9d1 0100 	ldrd	r0, r1, [r1]
   85084:	f003 f816 	bl	880b4 <__aeabi_dcmpgt>
   85088:	2800      	cmp	r0, #0
   8508a:	f000 81be 	beq.w	8540a <_dtoa_r+0x4ca>
   8508e:	1e6b      	subs	r3, r5, #1
   85090:	9302      	str	r3, [sp, #8]
   85092:	2300      	movs	r3, #0
   85094:	930e      	str	r3, [sp, #56]	; 0x38
   85096:	1bbf      	subs	r7, r7, r6
   85098:	1e7b      	subs	r3, r7, #1
   8509a:	9308      	str	r3, [sp, #32]
   8509c:	f100 814e 	bmi.w	8533c <_dtoa_r+0x3fc>
   850a0:	2300      	movs	r3, #0
   850a2:	930a      	str	r3, [sp, #40]	; 0x28
   850a4:	9b02      	ldr	r3, [sp, #8]
   850a6:	2b00      	cmp	r3, #0
   850a8:	f2c0 813f 	blt.w	8532a <_dtoa_r+0x3ea>
   850ac:	9a08      	ldr	r2, [sp, #32]
   850ae:	930d      	str	r3, [sp, #52]	; 0x34
   850b0:	4611      	mov	r1, r2
   850b2:	4419      	add	r1, r3
   850b4:	2300      	movs	r3, #0
   850b6:	9108      	str	r1, [sp, #32]
   850b8:	930c      	str	r3, [sp, #48]	; 0x30
   850ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   850bc:	2b09      	cmp	r3, #9
   850be:	d82a      	bhi.n	85116 <_dtoa_r+0x1d6>
   850c0:	2b05      	cmp	r3, #5
   850c2:	f340 8658 	ble.w	85d76 <_dtoa_r+0xe36>
   850c6:	2500      	movs	r5, #0
   850c8:	3b04      	subs	r3, #4
   850ca:	9324      	str	r3, [sp, #144]	; 0x90
   850cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   850ce:	3b02      	subs	r3, #2
   850d0:	2b03      	cmp	r3, #3
   850d2:	f200 863f 	bhi.w	85d54 <_dtoa_r+0xe14>
   850d6:	e8df f013 	tbh	[pc, r3, lsl #1]
   850da:	03ce      	.short	0x03ce
   850dc:	03d902c3 	.word	0x03d902c3
   850e0:	045b      	.short	0x045b
   850e2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   850e4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   850e6:	443e      	add	r6, r7
   850e8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   850ec:	2b20      	cmp	r3, #32
   850ee:	f340 8187 	ble.w	85400 <_dtoa_r+0x4c0>
   850f2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   850f6:	f206 4012 	addw	r0, r6, #1042	; 0x412
   850fa:	409d      	lsls	r5, r3
   850fc:	fa2a f000 	lsr.w	r0, sl, r0
   85100:	4328      	orrs	r0, r5
   85102:	f002 fcd1 	bl	87aa8 <__aeabi_ui2d>
   85106:	2301      	movs	r3, #1
   85108:	3e01      	subs	r6, #1
   8510a:	9314      	str	r3, [sp, #80]	; 0x50
   8510c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   85110:	e781      	b.n	85016 <_dtoa_r+0xd6>
   85112:	483b      	ldr	r0, [pc, #236]	; (85200 <_dtoa_r+0x2c0>)
   85114:	e743      	b.n	84f9e <_dtoa_r+0x5e>
   85116:	2100      	movs	r1, #0
   85118:	4620      	mov	r0, r4
   8511a:	6461      	str	r1, [r4, #68]	; 0x44
   8511c:	9125      	str	r1, [sp, #148]	; 0x94
   8511e:	f001 fc19 	bl	86954 <_Balloc>
   85122:	f04f 33ff 	mov.w	r3, #4294967295
   85126:	9307      	str	r3, [sp, #28]
   85128:	930f      	str	r3, [sp, #60]	; 0x3c
   8512a:	2301      	movs	r3, #1
   8512c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   8512e:	9004      	str	r0, [sp, #16]
   85130:	6420      	str	r0, [r4, #64]	; 0x40
   85132:	9224      	str	r2, [sp, #144]	; 0x90
   85134:	930b      	str	r3, [sp, #44]	; 0x2c
   85136:	9b19      	ldr	r3, [sp, #100]	; 0x64
   85138:	2b00      	cmp	r3, #0
   8513a:	f2c0 80d3 	blt.w	852e4 <_dtoa_r+0x3a4>
   8513e:	9a02      	ldr	r2, [sp, #8]
   85140:	2a0e      	cmp	r2, #14
   85142:	f300 80cf 	bgt.w	852e4 <_dtoa_r+0x3a4>
   85146:	4b2d      	ldr	r3, [pc, #180]	; (851fc <_dtoa_r+0x2bc>)
   85148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8514c:	e9d3 2300 	ldrd	r2, r3, [r3]
   85150:	e9cd 2308 	strd	r2, r3, [sp, #32]
   85154:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85156:	2b00      	cmp	r3, #0
   85158:	f2c0 83b4 	blt.w	858c4 <_dtoa_r+0x984>
   8515c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   85160:	4650      	mov	r0, sl
   85162:	462a      	mov	r2, r5
   85164:	4633      	mov	r3, r6
   85166:	4659      	mov	r1, fp
   85168:	f002 fe3e 	bl	87de8 <__aeabi_ddiv>
   8516c:	f002 ffc2 	bl	880f4 <__aeabi_d2iz>
   85170:	4680      	mov	r8, r0
   85172:	f002 fca9 	bl	87ac8 <__aeabi_i2d>
   85176:	462a      	mov	r2, r5
   85178:	4633      	mov	r3, r6
   8517a:	f002 fd0b 	bl	87b94 <__aeabi_dmul>
   8517e:	4602      	mov	r2, r0
   85180:	460b      	mov	r3, r1
   85182:	4650      	mov	r0, sl
   85184:	4659      	mov	r1, fp
   85186:	f002 fb51 	bl	8782c <__aeabi_dsub>
   8518a:	9e07      	ldr	r6, [sp, #28]
   8518c:	9f04      	ldr	r7, [sp, #16]
   8518e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   85192:	2e01      	cmp	r6, #1
   85194:	703d      	strb	r5, [r7, #0]
   85196:	4602      	mov	r2, r0
   85198:	460b      	mov	r3, r1
   8519a:	f107 0501 	add.w	r5, r7, #1
   8519e:	d064      	beq.n	8526a <_dtoa_r+0x32a>
   851a0:	2200      	movs	r2, #0
   851a2:	4b18      	ldr	r3, [pc, #96]	; (85204 <_dtoa_r+0x2c4>)
   851a4:	f002 fcf6 	bl	87b94 <__aeabi_dmul>
   851a8:	2200      	movs	r2, #0
   851aa:	2300      	movs	r3, #0
   851ac:	4606      	mov	r6, r0
   851ae:	460f      	mov	r7, r1
   851b0:	f002 ff58 	bl	88064 <__aeabi_dcmpeq>
   851b4:	2800      	cmp	r0, #0
   851b6:	f040 8082 	bne.w	852be <_dtoa_r+0x37e>
   851ba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   851be:	f04f 0a00 	mov.w	sl, #0
   851c2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   851c6:	f04f 0b00 	mov.w	fp, #0
   851ca:	940b      	str	r4, [sp, #44]	; 0x2c
   851cc:	e029      	b.n	85222 <_dtoa_r+0x2e2>
   851ce:	bf00      	nop
   851d0:	636f4361 	.word	0x636f4361
   851d4:	3fd287a7 	.word	0x3fd287a7
   851d8:	8b60c8b3 	.word	0x8b60c8b3
   851dc:	3fc68a28 	.word	0x3fc68a28
   851e0:	509f79fb 	.word	0x509f79fb
   851e4:	3fd34413 	.word	0x3fd34413
   851e8:	7ff00000 	.word	0x7ff00000
   851ec:	0008a055 	.word	0x0008a055
   851f0:	0008a078 	.word	0x0008a078
   851f4:	0008a084 	.word	0x0008a084
   851f8:	3ff80000 	.word	0x3ff80000
   851fc:	0008a0b0 	.word	0x0008a0b0
   85200:	0008a054 	.word	0x0008a054
   85204:	40240000 	.word	0x40240000
   85208:	2200      	movs	r2, #0
   8520a:	4b81      	ldr	r3, [pc, #516]	; (85410 <_dtoa_r+0x4d0>)
   8520c:	f002 fcc2 	bl	87b94 <__aeabi_dmul>
   85210:	4652      	mov	r2, sl
   85212:	465b      	mov	r3, fp
   85214:	4606      	mov	r6, r0
   85216:	460f      	mov	r7, r1
   85218:	f002 ff24 	bl	88064 <__aeabi_dcmpeq>
   8521c:	2800      	cmp	r0, #0
   8521e:	f040 83ba 	bne.w	85996 <_dtoa_r+0xa56>
   85222:	4642      	mov	r2, r8
   85224:	464b      	mov	r3, r9
   85226:	4630      	mov	r0, r6
   85228:	4639      	mov	r1, r7
   8522a:	f002 fddd 	bl	87de8 <__aeabi_ddiv>
   8522e:	f002 ff61 	bl	880f4 <__aeabi_d2iz>
   85232:	4604      	mov	r4, r0
   85234:	f002 fc48 	bl	87ac8 <__aeabi_i2d>
   85238:	4642      	mov	r2, r8
   8523a:	464b      	mov	r3, r9
   8523c:	f002 fcaa 	bl	87b94 <__aeabi_dmul>
   85240:	4602      	mov	r2, r0
   85242:	460b      	mov	r3, r1
   85244:	4630      	mov	r0, r6
   85246:	4639      	mov	r1, r7
   85248:	f002 faf0 	bl	8782c <__aeabi_dsub>
   8524c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   85250:	f805 6b01 	strb.w	r6, [r5], #1
   85254:	9e04      	ldr	r6, [sp, #16]
   85256:	9f07      	ldr	r7, [sp, #28]
   85258:	1bae      	subs	r6, r5, r6
   8525a:	42be      	cmp	r6, r7
   8525c:	4602      	mov	r2, r0
   8525e:	460b      	mov	r3, r1
   85260:	d1d2      	bne.n	85208 <_dtoa_r+0x2c8>
   85262:	46a0      	mov	r8, r4
   85264:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85268:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8526a:	4610      	mov	r0, r2
   8526c:	4619      	mov	r1, r3
   8526e:	f002 fadf 	bl	87830 <__adddf3>
   85272:	4606      	mov	r6, r0
   85274:	460f      	mov	r7, r1
   85276:	4602      	mov	r2, r0
   85278:	460b      	mov	r3, r1
   8527a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8527e:	f002 fefb 	bl	88078 <__aeabi_dcmplt>
   85282:	b948      	cbnz	r0, 85298 <_dtoa_r+0x358>
   85284:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   85288:	4632      	mov	r2, r6
   8528a:	463b      	mov	r3, r7
   8528c:	f002 feea 	bl	88064 <__aeabi_dcmpeq>
   85290:	b1a8      	cbz	r0, 852be <_dtoa_r+0x37e>
   85292:	f018 0f01 	tst.w	r8, #1
   85296:	d012      	beq.n	852be <_dtoa_r+0x37e>
   85298:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8529c:	1e6b      	subs	r3, r5, #1
   8529e:	9a04      	ldr	r2, [sp, #16]
   852a0:	e004      	b.n	852ac <_dtoa_r+0x36c>
   852a2:	429a      	cmp	r2, r3
   852a4:	f000 8402 	beq.w	85aac <_dtoa_r+0xb6c>
   852a8:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   852ac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   852b0:	f103 0501 	add.w	r5, r3, #1
   852b4:	d0f5      	beq.n	852a2 <_dtoa_r+0x362>
   852b6:	f108 0801 	add.w	r8, r8, #1
   852ba:	f883 8000 	strb.w	r8, [r3]
   852be:	4649      	mov	r1, r9
   852c0:	4620      	mov	r0, r4
   852c2:	f001 fb6d 	bl	869a0 <_Bfree>
   852c6:	2200      	movs	r2, #0
   852c8:	9b02      	ldr	r3, [sp, #8]
   852ca:	702a      	strb	r2, [r5, #0]
   852cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   852ce:	3301      	adds	r3, #1
   852d0:	6013      	str	r3, [r2, #0]
   852d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   852d4:	2b00      	cmp	r3, #0
   852d6:	f000 839f 	beq.w	85a18 <_dtoa_r+0xad8>
   852da:	9804      	ldr	r0, [sp, #16]
   852dc:	601d      	str	r5, [r3, #0]
   852de:	b01b      	add	sp, #108	; 0x6c
   852e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   852e6:	2a00      	cmp	r2, #0
   852e8:	d03e      	beq.n	85368 <_dtoa_r+0x428>
   852ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
   852ec:	2a01      	cmp	r2, #1
   852ee:	f340 8311 	ble.w	85914 <_dtoa_r+0x9d4>
   852f2:	9b07      	ldr	r3, [sp, #28]
   852f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   852f6:	1e5f      	subs	r7, r3, #1
   852f8:	42ba      	cmp	r2, r7
   852fa:	f2c0 8390 	blt.w	85a1e <_dtoa_r+0xade>
   852fe:	1bd7      	subs	r7, r2, r7
   85300:	9b07      	ldr	r3, [sp, #28]
   85302:	2b00      	cmp	r3, #0
   85304:	f2c0 848c 	blt.w	85c20 <_dtoa_r+0xce0>
   85308:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8530a:	9b07      	ldr	r3, [sp, #28]
   8530c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8530e:	2101      	movs	r1, #1
   85310:	441a      	add	r2, r3
   85312:	920a      	str	r2, [sp, #40]	; 0x28
   85314:	9a08      	ldr	r2, [sp, #32]
   85316:	4620      	mov	r0, r4
   85318:	441a      	add	r2, r3
   8531a:	9208      	str	r2, [sp, #32]
   8531c:	f001 fbdc 	bl	86ad8 <__i2b>
   85320:	4606      	mov	r6, r0
   85322:	e023      	b.n	8536c <_dtoa_r+0x42c>
   85324:	2301      	movs	r3, #1
   85326:	930e      	str	r3, [sp, #56]	; 0x38
   85328:	e6b5      	b.n	85096 <_dtoa_r+0x156>
   8532a:	2300      	movs	r3, #0
   8532c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8532e:	930d      	str	r3, [sp, #52]	; 0x34
   85330:	9b02      	ldr	r3, [sp, #8]
   85332:	1ad2      	subs	r2, r2, r3
   85334:	425b      	negs	r3, r3
   85336:	920a      	str	r2, [sp, #40]	; 0x28
   85338:	930c      	str	r3, [sp, #48]	; 0x30
   8533a:	e6be      	b.n	850ba <_dtoa_r+0x17a>
   8533c:	f1c7 0301 	rsb	r3, r7, #1
   85340:	930a      	str	r3, [sp, #40]	; 0x28
   85342:	2300      	movs	r3, #0
   85344:	9308      	str	r3, [sp, #32]
   85346:	e6ad      	b.n	850a4 <_dtoa_r+0x164>
   85348:	9d02      	ldr	r5, [sp, #8]
   8534a:	4628      	mov	r0, r5
   8534c:	f002 fbbc 	bl	87ac8 <__aeabi_i2d>
   85350:	4602      	mov	r2, r0
   85352:	460b      	mov	r3, r1
   85354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   85358:	f002 fe84 	bl	88064 <__aeabi_dcmpeq>
   8535c:	2800      	cmp	r0, #0
   8535e:	f47f ae86 	bne.w	8506e <_dtoa_r+0x12e>
   85362:	1e6b      	subs	r3, r5, #1
   85364:	9302      	str	r3, [sp, #8]
   85366:	e682      	b.n	8506e <_dtoa_r+0x12e>
   85368:	ad0a      	add	r5, sp, #40	; 0x28
   8536a:	cde0      	ldmia	r5, {r5, r6, r7}
   8536c:	2d00      	cmp	r5, #0
   8536e:	dd0c      	ble.n	8538a <_dtoa_r+0x44a>
   85370:	9908      	ldr	r1, [sp, #32]
   85372:	2900      	cmp	r1, #0
   85374:	460b      	mov	r3, r1
   85376:	dd08      	ble.n	8538a <_dtoa_r+0x44a>
   85378:	42a9      	cmp	r1, r5
   8537a:	bfa8      	it	ge
   8537c:	462b      	movge	r3, r5
   8537e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   85380:	1aed      	subs	r5, r5, r3
   85382:	1ad2      	subs	r2, r2, r3
   85384:	1acb      	subs	r3, r1, r3
   85386:	920a      	str	r2, [sp, #40]	; 0x28
   85388:	9308      	str	r3, [sp, #32]
   8538a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8538c:	b1d3      	cbz	r3, 853c4 <_dtoa_r+0x484>
   8538e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85390:	2b00      	cmp	r3, #0
   85392:	f000 82b8 	beq.w	85906 <_dtoa_r+0x9c6>
   85396:	2f00      	cmp	r7, #0
   85398:	dd10      	ble.n	853bc <_dtoa_r+0x47c>
   8539a:	4631      	mov	r1, r6
   8539c:	463a      	mov	r2, r7
   8539e:	4620      	mov	r0, r4
   853a0:	f001 fc36 	bl	86c10 <__pow5mult>
   853a4:	464a      	mov	r2, r9
   853a6:	4601      	mov	r1, r0
   853a8:	4606      	mov	r6, r0
   853aa:	4620      	mov	r0, r4
   853ac:	f001 fb9e 	bl	86aec <__multiply>
   853b0:	4603      	mov	r3, r0
   853b2:	4649      	mov	r1, r9
   853b4:	4620      	mov	r0, r4
   853b6:	4699      	mov	r9, r3
   853b8:	f001 faf2 	bl	869a0 <_Bfree>
   853bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   853be:	1bda      	subs	r2, r3, r7
   853c0:	f040 82a2 	bne.w	85908 <_dtoa_r+0x9c8>
   853c4:	2101      	movs	r1, #1
   853c6:	4620      	mov	r0, r4
   853c8:	f001 fb86 	bl	86ad8 <__i2b>
   853cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   853ce:	4680      	mov	r8, r0
   853d0:	2b00      	cmp	r3, #0
   853d2:	dd1f      	ble.n	85414 <_dtoa_r+0x4d4>
   853d4:	4601      	mov	r1, r0
   853d6:	461a      	mov	r2, r3
   853d8:	4620      	mov	r0, r4
   853da:	f001 fc19 	bl	86c10 <__pow5mult>
   853de:	9b24      	ldr	r3, [sp, #144]	; 0x90
   853e0:	4680      	mov	r8, r0
   853e2:	2b01      	cmp	r3, #1
   853e4:	f340 8255 	ble.w	85892 <_dtoa_r+0x952>
   853e8:	2300      	movs	r3, #0
   853ea:	930c      	str	r3, [sp, #48]	; 0x30
   853ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
   853f0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   853f4:	6918      	ldr	r0, [r3, #16]
   853f6:	f001 fb1f 	bl	86a38 <__hi0bits>
   853fa:	f1c0 0020 	rsb	r0, r0, #32
   853fe:	e013      	b.n	85428 <_dtoa_r+0x4e8>
   85400:	f1c3 0520 	rsb	r5, r3, #32
   85404:	fa0a f005 	lsl.w	r0, sl, r5
   85408:	e67b      	b.n	85102 <_dtoa_r+0x1c2>
   8540a:	900e      	str	r0, [sp, #56]	; 0x38
   8540c:	e643      	b.n	85096 <_dtoa_r+0x156>
   8540e:	bf00      	nop
   85410:	40240000 	.word	0x40240000
   85414:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85416:	2b01      	cmp	r3, #1
   85418:	f340 8285 	ble.w	85926 <_dtoa_r+0x9e6>
   8541c:	2300      	movs	r3, #0
   8541e:	930c      	str	r3, [sp, #48]	; 0x30
   85420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   85422:	2001      	movs	r0, #1
   85424:	2b00      	cmp	r3, #0
   85426:	d1e1      	bne.n	853ec <_dtoa_r+0x4ac>
   85428:	9a08      	ldr	r2, [sp, #32]
   8542a:	4410      	add	r0, r2
   8542c:	f010 001f 	ands.w	r0, r0, #31
   85430:	f000 80a1 	beq.w	85576 <_dtoa_r+0x636>
   85434:	f1c0 0320 	rsb	r3, r0, #32
   85438:	2b04      	cmp	r3, #4
   8543a:	f340 8486 	ble.w	85d4a <_dtoa_r+0xe0a>
   8543e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85440:	f1c0 001c 	rsb	r0, r0, #28
   85444:	4403      	add	r3, r0
   85446:	930a      	str	r3, [sp, #40]	; 0x28
   85448:	4613      	mov	r3, r2
   8544a:	4403      	add	r3, r0
   8544c:	4405      	add	r5, r0
   8544e:	9308      	str	r3, [sp, #32]
   85450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85452:	2b00      	cmp	r3, #0
   85454:	dd05      	ble.n	85462 <_dtoa_r+0x522>
   85456:	4649      	mov	r1, r9
   85458:	461a      	mov	r2, r3
   8545a:	4620      	mov	r0, r4
   8545c:	f001 fc28 	bl	86cb0 <__lshift>
   85460:	4681      	mov	r9, r0
   85462:	9b08      	ldr	r3, [sp, #32]
   85464:	2b00      	cmp	r3, #0
   85466:	dd05      	ble.n	85474 <_dtoa_r+0x534>
   85468:	4641      	mov	r1, r8
   8546a:	461a      	mov	r2, r3
   8546c:	4620      	mov	r0, r4
   8546e:	f001 fc1f 	bl	86cb0 <__lshift>
   85472:	4680      	mov	r8, r0
   85474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85476:	2b00      	cmp	r3, #0
   85478:	f040 8086 	bne.w	85588 <_dtoa_r+0x648>
   8547c:	9b07      	ldr	r3, [sp, #28]
   8547e:	2b00      	cmp	r3, #0
   85480:	f340 8264 	ble.w	8594c <_dtoa_r+0xa0c>
   85484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85486:	2b00      	cmp	r3, #0
   85488:	f000 8098 	beq.w	855bc <_dtoa_r+0x67c>
   8548c:	2d00      	cmp	r5, #0
   8548e:	dd05      	ble.n	8549c <_dtoa_r+0x55c>
   85490:	4631      	mov	r1, r6
   85492:	462a      	mov	r2, r5
   85494:	4620      	mov	r0, r4
   85496:	f001 fc0b 	bl	86cb0 <__lshift>
   8549a:	4606      	mov	r6, r0
   8549c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8549e:	2b00      	cmp	r3, #0
   854a0:	f040 8336 	bne.w	85b10 <_dtoa_r+0xbd0>
   854a4:	9608      	str	r6, [sp, #32]
   854a6:	9b07      	ldr	r3, [sp, #28]
   854a8:	9a04      	ldr	r2, [sp, #16]
   854aa:	3b01      	subs	r3, #1
   854ac:	18d3      	adds	r3, r2, r3
   854ae:	930b      	str	r3, [sp, #44]	; 0x2c
   854b0:	4617      	mov	r7, r2
   854b2:	f00a 0301 	and.w	r3, sl, #1
   854b6:	46c2      	mov	sl, r8
   854b8:	f8dd b020 	ldr.w	fp, [sp, #32]
   854bc:	930c      	str	r3, [sp, #48]	; 0x30
   854be:	4651      	mov	r1, sl
   854c0:	4648      	mov	r0, r9
   854c2:	f7ff fca9 	bl	84e18 <quorem>
   854c6:	4631      	mov	r1, r6
   854c8:	4605      	mov	r5, r0
   854ca:	4648      	mov	r0, r9
   854cc:	f001 fc40 	bl	86d50 <__mcmp>
   854d0:	465a      	mov	r2, fp
   854d2:	9007      	str	r0, [sp, #28]
   854d4:	4651      	mov	r1, sl
   854d6:	4620      	mov	r0, r4
   854d8:	f001 fc56 	bl	86d88 <__mdiff>
   854dc:	68c2      	ldr	r2, [r0, #12]
   854de:	4680      	mov	r8, r0
   854e0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   854e4:	2a00      	cmp	r2, #0
   854e6:	f040 8229 	bne.w	8593c <_dtoa_r+0x9fc>
   854ea:	4601      	mov	r1, r0
   854ec:	4648      	mov	r0, r9
   854ee:	930a      	str	r3, [sp, #40]	; 0x28
   854f0:	f001 fc2e 	bl	86d50 <__mcmp>
   854f4:	4641      	mov	r1, r8
   854f6:	9008      	str	r0, [sp, #32]
   854f8:	4620      	mov	r0, r4
   854fa:	f001 fa51 	bl	869a0 <_Bfree>
   854fe:	9a08      	ldr	r2, [sp, #32]
   85500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85502:	b932      	cbnz	r2, 85512 <_dtoa_r+0x5d2>
   85504:	9924      	ldr	r1, [sp, #144]	; 0x90
   85506:	b921      	cbnz	r1, 85512 <_dtoa_r+0x5d2>
   85508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8550a:	2a00      	cmp	r2, #0
   8550c:	f000 83ee 	beq.w	85cec <_dtoa_r+0xdac>
   85510:	9a24      	ldr	r2, [sp, #144]	; 0x90
   85512:	9907      	ldr	r1, [sp, #28]
   85514:	2900      	cmp	r1, #0
   85516:	f2c0 829f 	blt.w	85a58 <_dtoa_r+0xb18>
   8551a:	d105      	bne.n	85528 <_dtoa_r+0x5e8>
   8551c:	9924      	ldr	r1, [sp, #144]	; 0x90
   8551e:	b919      	cbnz	r1, 85528 <_dtoa_r+0x5e8>
   85520:	990c      	ldr	r1, [sp, #48]	; 0x30
   85522:	2900      	cmp	r1, #0
   85524:	f000 8298 	beq.w	85a58 <_dtoa_r+0xb18>
   85528:	2a00      	cmp	r2, #0
   8552a:	f300 8305 	bgt.w	85b38 <_dtoa_r+0xbf8>
   8552e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   85530:	f107 0801 	add.w	r8, r7, #1
   85534:	4297      	cmp	r7, r2
   85536:	703b      	strb	r3, [r7, #0]
   85538:	4645      	mov	r5, r8
   8553a:	f000 830b 	beq.w	85b54 <_dtoa_r+0xc14>
   8553e:	4649      	mov	r1, r9
   85540:	2300      	movs	r3, #0
   85542:	220a      	movs	r2, #10
   85544:	4620      	mov	r0, r4
   85546:	f001 fa35 	bl	869b4 <__multadd>
   8554a:	455e      	cmp	r6, fp
   8554c:	4681      	mov	r9, r0
   8554e:	4631      	mov	r1, r6
   85550:	f04f 0300 	mov.w	r3, #0
   85554:	f04f 020a 	mov.w	r2, #10
   85558:	4620      	mov	r0, r4
   8555a:	f000 81e9 	beq.w	85930 <_dtoa_r+0x9f0>
   8555e:	f001 fa29 	bl	869b4 <__multadd>
   85562:	4659      	mov	r1, fp
   85564:	4606      	mov	r6, r0
   85566:	2300      	movs	r3, #0
   85568:	220a      	movs	r2, #10
   8556a:	4620      	mov	r0, r4
   8556c:	f001 fa22 	bl	869b4 <__multadd>
   85570:	4647      	mov	r7, r8
   85572:	4683      	mov	fp, r0
   85574:	e7a3      	b.n	854be <_dtoa_r+0x57e>
   85576:	201c      	movs	r0, #28
   85578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8557a:	4405      	add	r5, r0
   8557c:	4403      	add	r3, r0
   8557e:	930a      	str	r3, [sp, #40]	; 0x28
   85580:	9b08      	ldr	r3, [sp, #32]
   85582:	4403      	add	r3, r0
   85584:	9308      	str	r3, [sp, #32]
   85586:	e763      	b.n	85450 <_dtoa_r+0x510>
   85588:	4641      	mov	r1, r8
   8558a:	4648      	mov	r0, r9
   8558c:	f001 fbe0 	bl	86d50 <__mcmp>
   85590:	2800      	cmp	r0, #0
   85592:	f6bf af73 	bge.w	8547c <_dtoa_r+0x53c>
   85596:	9f02      	ldr	r7, [sp, #8]
   85598:	4649      	mov	r1, r9
   8559a:	2300      	movs	r3, #0
   8559c:	220a      	movs	r2, #10
   8559e:	4620      	mov	r0, r4
   855a0:	3f01      	subs	r7, #1
   855a2:	9702      	str	r7, [sp, #8]
   855a4:	f001 fa06 	bl	869b4 <__multadd>
   855a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   855aa:	4681      	mov	r9, r0
   855ac:	2b00      	cmp	r3, #0
   855ae:	f040 83b5 	bne.w	85d1c <_dtoa_r+0xddc>
   855b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   855b4:	2b00      	cmp	r3, #0
   855b6:	f340 83be 	ble.w	85d36 <_dtoa_r+0xdf6>
   855ba:	9307      	str	r3, [sp, #28]
   855bc:	f8dd a010 	ldr.w	sl, [sp, #16]
   855c0:	9f07      	ldr	r7, [sp, #28]
   855c2:	4655      	mov	r5, sl
   855c4:	e006      	b.n	855d4 <_dtoa_r+0x694>
   855c6:	4649      	mov	r1, r9
   855c8:	2300      	movs	r3, #0
   855ca:	220a      	movs	r2, #10
   855cc:	4620      	mov	r0, r4
   855ce:	f001 f9f1 	bl	869b4 <__multadd>
   855d2:	4681      	mov	r9, r0
   855d4:	4641      	mov	r1, r8
   855d6:	4648      	mov	r0, r9
   855d8:	f7ff fc1e 	bl	84e18 <quorem>
   855dc:	3030      	adds	r0, #48	; 0x30
   855de:	f805 0b01 	strb.w	r0, [r5], #1
   855e2:	eba5 030a 	sub.w	r3, r5, sl
   855e6:	42bb      	cmp	r3, r7
   855e8:	dbed      	blt.n	855c6 <_dtoa_r+0x686>
   855ea:	9b04      	ldr	r3, [sp, #16]
   855ec:	9a07      	ldr	r2, [sp, #28]
   855ee:	4682      	mov	sl, r0
   855f0:	2a01      	cmp	r2, #1
   855f2:	bfac      	ite	ge
   855f4:	189b      	addge	r3, r3, r2
   855f6:	3301      	addlt	r3, #1
   855f8:	f04f 0b00 	mov.w	fp, #0
   855fc:	461d      	mov	r5, r3
   855fe:	4649      	mov	r1, r9
   85600:	2201      	movs	r2, #1
   85602:	4620      	mov	r0, r4
   85604:	f001 fb54 	bl	86cb0 <__lshift>
   85608:	4641      	mov	r1, r8
   8560a:	4681      	mov	r9, r0
   8560c:	f001 fba0 	bl	86d50 <__mcmp>
   85610:	2800      	cmp	r0, #0
   85612:	f340 823f 	ble.w	85a94 <_dtoa_r+0xb54>
   85616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   8561a:	1e6b      	subs	r3, r5, #1
   8561c:	9904      	ldr	r1, [sp, #16]
   8561e:	e004      	b.n	8562a <_dtoa_r+0x6ea>
   85620:	428b      	cmp	r3, r1
   85622:	f000 81ae 	beq.w	85982 <_dtoa_r+0xa42>
   85626:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   8562a:	2a39      	cmp	r2, #57	; 0x39
   8562c:	f103 0501 	add.w	r5, r3, #1
   85630:	d0f6      	beq.n	85620 <_dtoa_r+0x6e0>
   85632:	3201      	adds	r2, #1
   85634:	701a      	strb	r2, [r3, #0]
   85636:	4641      	mov	r1, r8
   85638:	4620      	mov	r0, r4
   8563a:	f001 f9b1 	bl	869a0 <_Bfree>
   8563e:	2e00      	cmp	r6, #0
   85640:	f43f ae3d 	beq.w	852be <_dtoa_r+0x37e>
   85644:	f1bb 0f00 	cmp.w	fp, #0
   85648:	d005      	beq.n	85656 <_dtoa_r+0x716>
   8564a:	45b3      	cmp	fp, r6
   8564c:	d003      	beq.n	85656 <_dtoa_r+0x716>
   8564e:	4659      	mov	r1, fp
   85650:	4620      	mov	r0, r4
   85652:	f001 f9a5 	bl	869a0 <_Bfree>
   85656:	4631      	mov	r1, r6
   85658:	4620      	mov	r0, r4
   8565a:	f001 f9a1 	bl	869a0 <_Bfree>
   8565e:	e62e      	b.n	852be <_dtoa_r+0x37e>
   85660:	2300      	movs	r3, #0
   85662:	930b      	str	r3, [sp, #44]	; 0x2c
   85664:	9b02      	ldr	r3, [sp, #8]
   85666:	9a25      	ldr	r2, [sp, #148]	; 0x94
   85668:	4413      	add	r3, r2
   8566a:	930f      	str	r3, [sp, #60]	; 0x3c
   8566c:	3301      	adds	r3, #1
   8566e:	2b01      	cmp	r3, #1
   85670:	461f      	mov	r7, r3
   85672:	461e      	mov	r6, r3
   85674:	bfb8      	it	lt
   85676:	2701      	movlt	r7, #1
   85678:	9307      	str	r3, [sp, #28]
   8567a:	2100      	movs	r1, #0
   8567c:	2f17      	cmp	r7, #23
   8567e:	6461      	str	r1, [r4, #68]	; 0x44
   85680:	d90a      	bls.n	85698 <_dtoa_r+0x758>
   85682:	2201      	movs	r2, #1
   85684:	2304      	movs	r3, #4
   85686:	005b      	lsls	r3, r3, #1
   85688:	f103 0014 	add.w	r0, r3, #20
   8568c:	4287      	cmp	r7, r0
   8568e:	4611      	mov	r1, r2
   85690:	f102 0201 	add.w	r2, r2, #1
   85694:	d2f7      	bcs.n	85686 <_dtoa_r+0x746>
   85696:	6461      	str	r1, [r4, #68]	; 0x44
   85698:	4620      	mov	r0, r4
   8569a:	f001 f95b 	bl	86954 <_Balloc>
   8569e:	2e0e      	cmp	r6, #14
   856a0:	9004      	str	r0, [sp, #16]
   856a2:	6420      	str	r0, [r4, #64]	; 0x40
   856a4:	f63f ad47 	bhi.w	85136 <_dtoa_r+0x1f6>
   856a8:	2d00      	cmp	r5, #0
   856aa:	f43f ad44 	beq.w	85136 <_dtoa_r+0x1f6>
   856ae:	9902      	ldr	r1, [sp, #8]
   856b0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   856b4:	2900      	cmp	r1, #0
   856b6:	f340 8203 	ble.w	85ac0 <_dtoa_r+0xb80>
   856ba:	4bb9      	ldr	r3, [pc, #740]	; (859a0 <_dtoa_r+0xa60>)
   856bc:	f001 020f 	and.w	r2, r1, #15
   856c0:	110d      	asrs	r5, r1, #4
   856c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   856c6:	06e9      	lsls	r1, r5, #27
   856c8:	e9d3 6700 	ldrd	r6, r7, [r3]
   856cc:	f140 81af 	bpl.w	85a2e <_dtoa_r+0xaee>
   856d0:	4bb4      	ldr	r3, [pc, #720]	; (859a4 <_dtoa_r+0xa64>)
   856d2:	4650      	mov	r0, sl
   856d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   856d8:	4659      	mov	r1, fp
   856da:	f002 fb85 	bl	87de8 <__aeabi_ddiv>
   856de:	f04f 0a03 	mov.w	sl, #3
   856e2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   856e6:	f005 050f 	and.w	r5, r5, #15
   856ea:	b18d      	cbz	r5, 85710 <_dtoa_r+0x7d0>
   856ec:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 859a4 <_dtoa_r+0xa64>
   856f0:	07ea      	lsls	r2, r5, #31
   856f2:	d509      	bpl.n	85708 <_dtoa_r+0x7c8>
   856f4:	e9d8 2300 	ldrd	r2, r3, [r8]
   856f8:	4630      	mov	r0, r6
   856fa:	4639      	mov	r1, r7
   856fc:	f002 fa4a 	bl	87b94 <__aeabi_dmul>
   85700:	4606      	mov	r6, r0
   85702:	460f      	mov	r7, r1
   85704:	f10a 0a01 	add.w	sl, sl, #1
   85708:	106d      	asrs	r5, r5, #1
   8570a:	f108 0808 	add.w	r8, r8, #8
   8570e:	d1ef      	bne.n	856f0 <_dtoa_r+0x7b0>
   85710:	463b      	mov	r3, r7
   85712:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   85716:	4632      	mov	r2, r6
   85718:	f002 fb66 	bl	87de8 <__aeabi_ddiv>
   8571c:	4607      	mov	r7, r0
   8571e:	4688      	mov	r8, r1
   85720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85722:	b143      	cbz	r3, 85736 <_dtoa_r+0x7f6>
   85724:	2200      	movs	r2, #0
   85726:	4ba0      	ldr	r3, [pc, #640]	; (859a8 <_dtoa_r+0xa68>)
   85728:	4638      	mov	r0, r7
   8572a:	4641      	mov	r1, r8
   8572c:	f002 fca4 	bl	88078 <__aeabi_dcmplt>
   85730:	2800      	cmp	r0, #0
   85732:	f040 8287 	bne.w	85c44 <_dtoa_r+0xd04>
   85736:	4650      	mov	r0, sl
   85738:	f002 f9c6 	bl	87ac8 <__aeabi_i2d>
   8573c:	463a      	mov	r2, r7
   8573e:	4643      	mov	r3, r8
   85740:	f002 fa28 	bl	87b94 <__aeabi_dmul>
   85744:	4b99      	ldr	r3, [pc, #612]	; (859ac <_dtoa_r+0xa6c>)
   85746:	2200      	movs	r2, #0
   85748:	f002 f872 	bl	87830 <__adddf3>
   8574c:	9b07      	ldr	r3, [sp, #28]
   8574e:	4605      	mov	r5, r0
   85750:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85754:	2b00      	cmp	r3, #0
   85756:	f000 813f 	beq.w	859d8 <_dtoa_r+0xa98>
   8575a:	9b02      	ldr	r3, [sp, #8]
   8575c:	9315      	str	r3, [sp, #84]	; 0x54
   8575e:	9b07      	ldr	r3, [sp, #28]
   85760:	9312      	str	r3, [sp, #72]	; 0x48
   85762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85764:	2b00      	cmp	r3, #0
   85766:	f000 81fb 	beq.w	85b60 <_dtoa_r+0xc20>
   8576a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8576c:	4b8c      	ldr	r3, [pc, #560]	; (859a0 <_dtoa_r+0xa60>)
   8576e:	2000      	movs	r0, #0
   85770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85774:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85778:	498d      	ldr	r1, [pc, #564]	; (859b0 <_dtoa_r+0xa70>)
   8577a:	f002 fb35 	bl	87de8 <__aeabi_ddiv>
   8577e:	462a      	mov	r2, r5
   85780:	4633      	mov	r3, r6
   85782:	f002 f853 	bl	8782c <__aeabi_dsub>
   85786:	4682      	mov	sl, r0
   85788:	468b      	mov	fp, r1
   8578a:	4638      	mov	r0, r7
   8578c:	4641      	mov	r1, r8
   8578e:	f002 fcb1 	bl	880f4 <__aeabi_d2iz>
   85792:	4605      	mov	r5, r0
   85794:	f002 f998 	bl	87ac8 <__aeabi_i2d>
   85798:	4602      	mov	r2, r0
   8579a:	460b      	mov	r3, r1
   8579c:	4638      	mov	r0, r7
   8579e:	4641      	mov	r1, r8
   857a0:	f002 f844 	bl	8782c <__aeabi_dsub>
   857a4:	3530      	adds	r5, #48	; 0x30
   857a6:	fa5f f885 	uxtb.w	r8, r5
   857aa:	9d04      	ldr	r5, [sp, #16]
   857ac:	4606      	mov	r6, r0
   857ae:	460f      	mov	r7, r1
   857b0:	f885 8000 	strb.w	r8, [r5]
   857b4:	4602      	mov	r2, r0
   857b6:	460b      	mov	r3, r1
   857b8:	4650      	mov	r0, sl
   857ba:	4659      	mov	r1, fp
   857bc:	3501      	adds	r5, #1
   857be:	f002 fc79 	bl	880b4 <__aeabi_dcmpgt>
   857c2:	2800      	cmp	r0, #0
   857c4:	d154      	bne.n	85870 <_dtoa_r+0x930>
   857c6:	4632      	mov	r2, r6
   857c8:	463b      	mov	r3, r7
   857ca:	2000      	movs	r0, #0
   857cc:	4976      	ldr	r1, [pc, #472]	; (859a8 <_dtoa_r+0xa68>)
   857ce:	f002 f82d 	bl	8782c <__aeabi_dsub>
   857d2:	4602      	mov	r2, r0
   857d4:	460b      	mov	r3, r1
   857d6:	4650      	mov	r0, sl
   857d8:	4659      	mov	r1, fp
   857da:	f002 fc6b 	bl	880b4 <__aeabi_dcmpgt>
   857de:	2800      	cmp	r0, #0
   857e0:	f040 8270 	bne.w	85cc4 <_dtoa_r+0xd84>
   857e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   857e6:	2a01      	cmp	r2, #1
   857e8:	f000 8112 	beq.w	85a10 <_dtoa_r+0xad0>
   857ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   857ee:	9a04      	ldr	r2, [sp, #16]
   857f0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   857f4:	4413      	add	r3, r2
   857f6:	4699      	mov	r9, r3
   857f8:	e00f      	b.n	8581a <_dtoa_r+0x8da>
   857fa:	4632      	mov	r2, r6
   857fc:	463b      	mov	r3, r7
   857fe:	2000      	movs	r0, #0
   85800:	4969      	ldr	r1, [pc, #420]	; (859a8 <_dtoa_r+0xa68>)
   85802:	f002 f813 	bl	8782c <__aeabi_dsub>
   85806:	4652      	mov	r2, sl
   85808:	465b      	mov	r3, fp
   8580a:	f002 fc35 	bl	88078 <__aeabi_dcmplt>
   8580e:	2800      	cmp	r0, #0
   85810:	f040 8256 	bne.w	85cc0 <_dtoa_r+0xd80>
   85814:	454d      	cmp	r5, r9
   85816:	f000 80f9 	beq.w	85a0c <_dtoa_r+0xacc>
   8581a:	4650      	mov	r0, sl
   8581c:	4659      	mov	r1, fp
   8581e:	2200      	movs	r2, #0
   85820:	4b64      	ldr	r3, [pc, #400]	; (859b4 <_dtoa_r+0xa74>)
   85822:	f002 f9b7 	bl	87b94 <__aeabi_dmul>
   85826:	2200      	movs	r2, #0
   85828:	4b62      	ldr	r3, [pc, #392]	; (859b4 <_dtoa_r+0xa74>)
   8582a:	4682      	mov	sl, r0
   8582c:	468b      	mov	fp, r1
   8582e:	4630      	mov	r0, r6
   85830:	4639      	mov	r1, r7
   85832:	f002 f9af 	bl	87b94 <__aeabi_dmul>
   85836:	460f      	mov	r7, r1
   85838:	4606      	mov	r6, r0
   8583a:	f002 fc5b 	bl	880f4 <__aeabi_d2iz>
   8583e:	4680      	mov	r8, r0
   85840:	f002 f942 	bl	87ac8 <__aeabi_i2d>
   85844:	4602      	mov	r2, r0
   85846:	460b      	mov	r3, r1
   85848:	4630      	mov	r0, r6
   8584a:	4639      	mov	r1, r7
   8584c:	f001 ffee 	bl	8782c <__aeabi_dsub>
   85850:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85854:	fa5f f888 	uxtb.w	r8, r8
   85858:	f805 8b01 	strb.w	r8, [r5], #1
   8585c:	4652      	mov	r2, sl
   8585e:	465b      	mov	r3, fp
   85860:	4606      	mov	r6, r0
   85862:	460f      	mov	r7, r1
   85864:	f002 fc08 	bl	88078 <__aeabi_dcmplt>
   85868:	2800      	cmp	r0, #0
   8586a:	d0c6      	beq.n	857fa <_dtoa_r+0x8ba>
   8586c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85870:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85872:	9302      	str	r3, [sp, #8]
   85874:	e523      	b.n	852be <_dtoa_r+0x37e>
   85876:	2300      	movs	r3, #0
   85878:	930b      	str	r3, [sp, #44]	; 0x2c
   8587a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8587c:	2b00      	cmp	r3, #0
   8587e:	f340 80dd 	ble.w	85a3c <_dtoa_r+0xafc>
   85882:	461f      	mov	r7, r3
   85884:	461e      	mov	r6, r3
   85886:	930f      	str	r3, [sp, #60]	; 0x3c
   85888:	9307      	str	r3, [sp, #28]
   8588a:	e6f6      	b.n	8567a <_dtoa_r+0x73a>
   8588c:	2301      	movs	r3, #1
   8588e:	930b      	str	r3, [sp, #44]	; 0x2c
   85890:	e7f3      	b.n	8587a <_dtoa_r+0x93a>
   85892:	f1ba 0f00 	cmp.w	sl, #0
   85896:	f47f ada7 	bne.w	853e8 <_dtoa_r+0x4a8>
   8589a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8589e:	2b00      	cmp	r3, #0
   858a0:	f47f adbc 	bne.w	8541c <_dtoa_r+0x4dc>
   858a4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   858a8:	0d3f      	lsrs	r7, r7, #20
   858aa:	053f      	lsls	r7, r7, #20
   858ac:	2f00      	cmp	r7, #0
   858ae:	f000 820d 	beq.w	85ccc <_dtoa_r+0xd8c>
   858b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   858b4:	3301      	adds	r3, #1
   858b6:	930a      	str	r3, [sp, #40]	; 0x28
   858b8:	9b08      	ldr	r3, [sp, #32]
   858ba:	3301      	adds	r3, #1
   858bc:	9308      	str	r3, [sp, #32]
   858be:	2301      	movs	r3, #1
   858c0:	930c      	str	r3, [sp, #48]	; 0x30
   858c2:	e5ad      	b.n	85420 <_dtoa_r+0x4e0>
   858c4:	9b07      	ldr	r3, [sp, #28]
   858c6:	2b00      	cmp	r3, #0
   858c8:	f73f ac48 	bgt.w	8515c <_dtoa_r+0x21c>
   858cc:	f040 8222 	bne.w	85d14 <_dtoa_r+0xdd4>
   858d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   858d4:	2200      	movs	r2, #0
   858d6:	4b38      	ldr	r3, [pc, #224]	; (859b8 <_dtoa_r+0xa78>)
   858d8:	f002 f95c 	bl	87b94 <__aeabi_dmul>
   858dc:	4652      	mov	r2, sl
   858de:	465b      	mov	r3, fp
   858e0:	f002 fbde 	bl	880a0 <__aeabi_dcmpge>
   858e4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   858e8:	4646      	mov	r6, r8
   858ea:	2800      	cmp	r0, #0
   858ec:	d041      	beq.n	85972 <_dtoa_r+0xa32>
   858ee:	9b25      	ldr	r3, [sp, #148]	; 0x94
   858f0:	9d04      	ldr	r5, [sp, #16]
   858f2:	43db      	mvns	r3, r3
   858f4:	9302      	str	r3, [sp, #8]
   858f6:	4641      	mov	r1, r8
   858f8:	4620      	mov	r0, r4
   858fa:	f001 f851 	bl	869a0 <_Bfree>
   858fe:	2e00      	cmp	r6, #0
   85900:	f43f acdd 	beq.w	852be <_dtoa_r+0x37e>
   85904:	e6a7      	b.n	85656 <_dtoa_r+0x716>
   85906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   85908:	4649      	mov	r1, r9
   8590a:	4620      	mov	r0, r4
   8590c:	f001 f980 	bl	86c10 <__pow5mult>
   85910:	4681      	mov	r9, r0
   85912:	e557      	b.n	853c4 <_dtoa_r+0x484>
   85914:	9a14      	ldr	r2, [sp, #80]	; 0x50
   85916:	2a00      	cmp	r2, #0
   85918:	f000 8188 	beq.w	85c2c <_dtoa_r+0xcec>
   8591c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85920:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85922:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85924:	e4f2      	b.n	8530c <_dtoa_r+0x3cc>
   85926:	f1ba 0f00 	cmp.w	sl, #0
   8592a:	f47f ad77 	bne.w	8541c <_dtoa_r+0x4dc>
   8592e:	e7b4      	b.n	8589a <_dtoa_r+0x95a>
   85930:	f001 f840 	bl	869b4 <__multadd>
   85934:	4647      	mov	r7, r8
   85936:	4606      	mov	r6, r0
   85938:	4683      	mov	fp, r0
   8593a:	e5c0      	b.n	854be <_dtoa_r+0x57e>
   8593c:	4601      	mov	r1, r0
   8593e:	4620      	mov	r0, r4
   85940:	9308      	str	r3, [sp, #32]
   85942:	f001 f82d 	bl	869a0 <_Bfree>
   85946:	2201      	movs	r2, #1
   85948:	9b08      	ldr	r3, [sp, #32]
   8594a:	e5e2      	b.n	85512 <_dtoa_r+0x5d2>
   8594c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8594e:	2b02      	cmp	r3, #2
   85950:	f77f ad98 	ble.w	85484 <_dtoa_r+0x544>
   85954:	9b07      	ldr	r3, [sp, #28]
   85956:	2b00      	cmp	r3, #0
   85958:	d1c9      	bne.n	858ee <_dtoa_r+0x9ae>
   8595a:	4641      	mov	r1, r8
   8595c:	2205      	movs	r2, #5
   8595e:	4620      	mov	r0, r4
   85960:	f001 f828 	bl	869b4 <__multadd>
   85964:	4601      	mov	r1, r0
   85966:	4680      	mov	r8, r0
   85968:	4648      	mov	r0, r9
   8596a:	f001 f9f1 	bl	86d50 <__mcmp>
   8596e:	2800      	cmp	r0, #0
   85970:	ddbd      	ble.n	858ee <_dtoa_r+0x9ae>
   85972:	2331      	movs	r3, #49	; 0x31
   85974:	9a02      	ldr	r2, [sp, #8]
   85976:	9904      	ldr	r1, [sp, #16]
   85978:	3201      	adds	r2, #1
   8597a:	9202      	str	r2, [sp, #8]
   8597c:	700b      	strb	r3, [r1, #0]
   8597e:	1c4d      	adds	r5, r1, #1
   85980:	e7b9      	b.n	858f6 <_dtoa_r+0x9b6>
   85982:	2331      	movs	r3, #49	; 0x31
   85984:	9a02      	ldr	r2, [sp, #8]
   85986:	3201      	adds	r2, #1
   85988:	9202      	str	r2, [sp, #8]
   8598a:	9a04      	ldr	r2, [sp, #16]
   8598c:	7013      	strb	r3, [r2, #0]
   8598e:	e652      	b.n	85636 <_dtoa_r+0x6f6>
   85990:	2301      	movs	r3, #1
   85992:	930b      	str	r3, [sp, #44]	; 0x2c
   85994:	e666      	b.n	85664 <_dtoa_r+0x724>
   85996:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8599a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   8599c:	e48f      	b.n	852be <_dtoa_r+0x37e>
   8599e:	bf00      	nop
   859a0:	0008a0b0 	.word	0x0008a0b0
   859a4:	0008a088 	.word	0x0008a088
   859a8:	3ff00000 	.word	0x3ff00000
   859ac:	401c0000 	.word	0x401c0000
   859b0:	3fe00000 	.word	0x3fe00000
   859b4:	40240000 	.word	0x40240000
   859b8:	40140000 	.word	0x40140000
   859bc:	4650      	mov	r0, sl
   859be:	f002 f883 	bl	87ac8 <__aeabi_i2d>
   859c2:	463a      	mov	r2, r7
   859c4:	4643      	mov	r3, r8
   859c6:	f002 f8e5 	bl	87b94 <__aeabi_dmul>
   859ca:	2200      	movs	r2, #0
   859cc:	4bc1      	ldr	r3, [pc, #772]	; (85cd4 <_dtoa_r+0xd94>)
   859ce:	f001 ff2f 	bl	87830 <__adddf3>
   859d2:	4605      	mov	r5, r0
   859d4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   859d8:	4641      	mov	r1, r8
   859da:	2200      	movs	r2, #0
   859dc:	4bbe      	ldr	r3, [pc, #760]	; (85cd8 <_dtoa_r+0xd98>)
   859de:	4638      	mov	r0, r7
   859e0:	f001 ff24 	bl	8782c <__aeabi_dsub>
   859e4:	462a      	mov	r2, r5
   859e6:	4633      	mov	r3, r6
   859e8:	4682      	mov	sl, r0
   859ea:	468b      	mov	fp, r1
   859ec:	f002 fb62 	bl	880b4 <__aeabi_dcmpgt>
   859f0:	4680      	mov	r8, r0
   859f2:	2800      	cmp	r0, #0
   859f4:	f040 8110 	bne.w	85c18 <_dtoa_r+0xcd8>
   859f8:	462a      	mov	r2, r5
   859fa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   859fe:	4650      	mov	r0, sl
   85a00:	4659      	mov	r1, fp
   85a02:	f002 fb39 	bl	88078 <__aeabi_dcmplt>
   85a06:	b118      	cbz	r0, 85a10 <_dtoa_r+0xad0>
   85a08:	4646      	mov	r6, r8
   85a0a:	e770      	b.n	858ee <_dtoa_r+0x9ae>
   85a0c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85a10:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   85a14:	f7ff bb8f 	b.w	85136 <_dtoa_r+0x1f6>
   85a18:	9804      	ldr	r0, [sp, #16]
   85a1a:	f7ff bac0 	b.w	84f9e <_dtoa_r+0x5e>
   85a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   85a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   85a22:	1afb      	subs	r3, r7, r3
   85a24:	441a      	add	r2, r3
   85a26:	970c      	str	r7, [sp, #48]	; 0x30
   85a28:	920d      	str	r2, [sp, #52]	; 0x34
   85a2a:	2700      	movs	r7, #0
   85a2c:	e468      	b.n	85300 <_dtoa_r+0x3c0>
   85a2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   85a32:	f04f 0a02 	mov.w	sl, #2
   85a36:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   85a3a:	e656      	b.n	856ea <_dtoa_r+0x7aa>
   85a3c:	2100      	movs	r1, #0
   85a3e:	2301      	movs	r3, #1
   85a40:	4620      	mov	r0, r4
   85a42:	6461      	str	r1, [r4, #68]	; 0x44
   85a44:	9325      	str	r3, [sp, #148]	; 0x94
   85a46:	f000 ff85 	bl	86954 <_Balloc>
   85a4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85a4c:	9004      	str	r0, [sp, #16]
   85a4e:	9307      	str	r3, [sp, #28]
   85a50:	9b25      	ldr	r3, [sp, #148]	; 0x94
   85a52:	6420      	str	r0, [r4, #64]	; 0x40
   85a54:	930f      	str	r3, [sp, #60]	; 0x3c
   85a56:	e627      	b.n	856a8 <_dtoa_r+0x768>
   85a58:	2a00      	cmp	r2, #0
   85a5a:	46d0      	mov	r8, sl
   85a5c:	f8cd b020 	str.w	fp, [sp, #32]
   85a60:	469a      	mov	sl, r3
   85a62:	dd11      	ble.n	85a88 <_dtoa_r+0xb48>
   85a64:	4649      	mov	r1, r9
   85a66:	2201      	movs	r2, #1
   85a68:	4620      	mov	r0, r4
   85a6a:	f001 f921 	bl	86cb0 <__lshift>
   85a6e:	4641      	mov	r1, r8
   85a70:	4681      	mov	r9, r0
   85a72:	f001 f96d 	bl	86d50 <__mcmp>
   85a76:	2800      	cmp	r0, #0
   85a78:	f340 8145 	ble.w	85d06 <_dtoa_r+0xdc6>
   85a7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85a80:	f000 8105 	beq.w	85c8e <_dtoa_r+0xd4e>
   85a84:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   85a88:	46b3      	mov	fp, r6
   85a8a:	f887 a000 	strb.w	sl, [r7]
   85a8e:	1c7d      	adds	r5, r7, #1
   85a90:	9e08      	ldr	r6, [sp, #32]
   85a92:	e5d0      	b.n	85636 <_dtoa_r+0x6f6>
   85a94:	d104      	bne.n	85aa0 <_dtoa_r+0xb60>
   85a96:	f01a 0f01 	tst.w	sl, #1
   85a9a:	d001      	beq.n	85aa0 <_dtoa_r+0xb60>
   85a9c:	e5bb      	b.n	85616 <_dtoa_r+0x6d6>
   85a9e:	4615      	mov	r5, r2
   85aa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   85aa4:	1e6a      	subs	r2, r5, #1
   85aa6:	2b30      	cmp	r3, #48	; 0x30
   85aa8:	d0f9      	beq.n	85a9e <_dtoa_r+0xb5e>
   85aaa:	e5c4      	b.n	85636 <_dtoa_r+0x6f6>
   85aac:	2230      	movs	r2, #48	; 0x30
   85aae:	9904      	ldr	r1, [sp, #16]
   85ab0:	700a      	strb	r2, [r1, #0]
   85ab2:	9a02      	ldr	r2, [sp, #8]
   85ab4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85ab8:	3201      	adds	r2, #1
   85aba:	9202      	str	r2, [sp, #8]
   85abc:	f7ff bbfb 	b.w	852b6 <_dtoa_r+0x376>
   85ac0:	f000 80bb 	beq.w	85c3a <_dtoa_r+0xcfa>
   85ac4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   85ac8:	9b02      	ldr	r3, [sp, #8]
   85aca:	f04f 0a02 	mov.w	sl, #2
   85ace:	425d      	negs	r5, r3
   85ad0:	4b82      	ldr	r3, [pc, #520]	; (85cdc <_dtoa_r+0xd9c>)
   85ad2:	f005 020f 	and.w	r2, r5, #15
   85ad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85ada:	e9d3 2300 	ldrd	r2, r3, [r3]
   85ade:	f002 f859 	bl	87b94 <__aeabi_dmul>
   85ae2:	112d      	asrs	r5, r5, #4
   85ae4:	4607      	mov	r7, r0
   85ae6:	4688      	mov	r8, r1
   85ae8:	f43f ae1a 	beq.w	85720 <_dtoa_r+0x7e0>
   85aec:	4e7c      	ldr	r6, [pc, #496]	; (85ce0 <_dtoa_r+0xda0>)
   85aee:	07eb      	lsls	r3, r5, #31
   85af0:	d509      	bpl.n	85b06 <_dtoa_r+0xbc6>
   85af2:	e9d6 2300 	ldrd	r2, r3, [r6]
   85af6:	4638      	mov	r0, r7
   85af8:	4641      	mov	r1, r8
   85afa:	f002 f84b 	bl	87b94 <__aeabi_dmul>
   85afe:	4607      	mov	r7, r0
   85b00:	4688      	mov	r8, r1
   85b02:	f10a 0a01 	add.w	sl, sl, #1
   85b06:	106d      	asrs	r5, r5, #1
   85b08:	f106 0608 	add.w	r6, r6, #8
   85b0c:	d1ef      	bne.n	85aee <_dtoa_r+0xbae>
   85b0e:	e607      	b.n	85720 <_dtoa_r+0x7e0>
   85b10:	6871      	ldr	r1, [r6, #4]
   85b12:	4620      	mov	r0, r4
   85b14:	f000 ff1e 	bl	86954 <_Balloc>
   85b18:	4605      	mov	r5, r0
   85b1a:	6933      	ldr	r3, [r6, #16]
   85b1c:	f106 010c 	add.w	r1, r6, #12
   85b20:	3302      	adds	r3, #2
   85b22:	009a      	lsls	r2, r3, #2
   85b24:	300c      	adds	r0, #12
   85b26:	f7fd fcdb 	bl	834e0 <memcpy>
   85b2a:	4629      	mov	r1, r5
   85b2c:	2201      	movs	r2, #1
   85b2e:	4620      	mov	r0, r4
   85b30:	f001 f8be 	bl	86cb0 <__lshift>
   85b34:	9008      	str	r0, [sp, #32]
   85b36:	e4b6      	b.n	854a6 <_dtoa_r+0x566>
   85b38:	2b39      	cmp	r3, #57	; 0x39
   85b3a:	f8cd b020 	str.w	fp, [sp, #32]
   85b3e:	46d0      	mov	r8, sl
   85b40:	f000 80a5 	beq.w	85c8e <_dtoa_r+0xd4e>
   85b44:	f103 0a01 	add.w	sl, r3, #1
   85b48:	46b3      	mov	fp, r6
   85b4a:	f887 a000 	strb.w	sl, [r7]
   85b4e:	1c7d      	adds	r5, r7, #1
   85b50:	9e08      	ldr	r6, [sp, #32]
   85b52:	e570      	b.n	85636 <_dtoa_r+0x6f6>
   85b54:	465a      	mov	r2, fp
   85b56:	46d0      	mov	r8, sl
   85b58:	46b3      	mov	fp, r6
   85b5a:	469a      	mov	sl, r3
   85b5c:	4616      	mov	r6, r2
   85b5e:	e54e      	b.n	855fe <_dtoa_r+0x6be>
   85b60:	9812      	ldr	r0, [sp, #72]	; 0x48
   85b62:	495e      	ldr	r1, [pc, #376]	; (85cdc <_dtoa_r+0xd9c>)
   85b64:	462a      	mov	r2, r5
   85b66:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   85b6a:	4633      	mov	r3, r6
   85b6c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   85b70:	f002 f810 	bl	87b94 <__aeabi_dmul>
   85b74:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   85b78:	4638      	mov	r0, r7
   85b7a:	4641      	mov	r1, r8
   85b7c:	f002 faba 	bl	880f4 <__aeabi_d2iz>
   85b80:	4605      	mov	r5, r0
   85b82:	f001 ffa1 	bl	87ac8 <__aeabi_i2d>
   85b86:	4602      	mov	r2, r0
   85b88:	460b      	mov	r3, r1
   85b8a:	4638      	mov	r0, r7
   85b8c:	4641      	mov	r1, r8
   85b8e:	f001 fe4d 	bl	8782c <__aeabi_dsub>
   85b92:	4606      	mov	r6, r0
   85b94:	9812      	ldr	r0, [sp, #72]	; 0x48
   85b96:	9a04      	ldr	r2, [sp, #16]
   85b98:	3530      	adds	r5, #48	; 0x30
   85b9a:	2801      	cmp	r0, #1
   85b9c:	7015      	strb	r5, [r2, #0]
   85b9e:	460f      	mov	r7, r1
   85ba0:	f102 0501 	add.w	r5, r2, #1
   85ba4:	d026      	beq.n	85bf4 <_dtoa_r+0xcb4>
   85ba6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   85ba8:	9a04      	ldr	r2, [sp, #16]
   85baa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   85bae:	4413      	add	r3, r2
   85bb0:	f04f 0a00 	mov.w	sl, #0
   85bb4:	4699      	mov	r9, r3
   85bb6:	f8df b130 	ldr.w	fp, [pc, #304]	; 85ce8 <_dtoa_r+0xda8>
   85bba:	4652      	mov	r2, sl
   85bbc:	465b      	mov	r3, fp
   85bbe:	4630      	mov	r0, r6
   85bc0:	4639      	mov	r1, r7
   85bc2:	f001 ffe7 	bl	87b94 <__aeabi_dmul>
   85bc6:	460f      	mov	r7, r1
   85bc8:	4606      	mov	r6, r0
   85bca:	f002 fa93 	bl	880f4 <__aeabi_d2iz>
   85bce:	4680      	mov	r8, r0
   85bd0:	f001 ff7a 	bl	87ac8 <__aeabi_i2d>
   85bd4:	4602      	mov	r2, r0
   85bd6:	460b      	mov	r3, r1
   85bd8:	4630      	mov	r0, r6
   85bda:	4639      	mov	r1, r7
   85bdc:	f001 fe26 	bl	8782c <__aeabi_dsub>
   85be0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85be4:	f805 8b01 	strb.w	r8, [r5], #1
   85be8:	454d      	cmp	r5, r9
   85bea:	4606      	mov	r6, r0
   85bec:	460f      	mov	r7, r1
   85bee:	d1e4      	bne.n	85bba <_dtoa_r+0xc7a>
   85bf0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85bf4:	2200      	movs	r2, #0
   85bf6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   85bfa:	4b3a      	ldr	r3, [pc, #232]	; (85ce4 <_dtoa_r+0xda4>)
   85bfc:	f001 fe18 	bl	87830 <__adddf3>
   85c00:	4632      	mov	r2, r6
   85c02:	463b      	mov	r3, r7
   85c04:	f002 fa38 	bl	88078 <__aeabi_dcmplt>
   85c08:	2800      	cmp	r0, #0
   85c0a:	d046      	beq.n	85c9a <_dtoa_r+0xd5a>
   85c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85c0e:	9302      	str	r3, [sp, #8]
   85c10:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   85c14:	f7ff bb42 	b.w	8529c <_dtoa_r+0x35c>
   85c18:	f04f 0800 	mov.w	r8, #0
   85c1c:	4646      	mov	r6, r8
   85c1e:	e6a8      	b.n	85972 <_dtoa_r+0xa32>
   85c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   85c22:	9a07      	ldr	r2, [sp, #28]
   85c24:	1a9d      	subs	r5, r3, r2
   85c26:	2300      	movs	r3, #0
   85c28:	f7ff bb70 	b.w	8530c <_dtoa_r+0x3cc>
   85c2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   85c2e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85c30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   85c34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   85c36:	f7ff bb69 	b.w	8530c <_dtoa_r+0x3cc>
   85c3a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   85c3e:	f04f 0a02 	mov.w	sl, #2
   85c42:	e56d      	b.n	85720 <_dtoa_r+0x7e0>
   85c44:	9b07      	ldr	r3, [sp, #28]
   85c46:	2b00      	cmp	r3, #0
   85c48:	f43f aeb8 	beq.w	859bc <_dtoa_r+0xa7c>
   85c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85c4e:	2b00      	cmp	r3, #0
   85c50:	f77f aede 	ble.w	85a10 <_dtoa_r+0xad0>
   85c54:	2200      	movs	r2, #0
   85c56:	4b24      	ldr	r3, [pc, #144]	; (85ce8 <_dtoa_r+0xda8>)
   85c58:	4638      	mov	r0, r7
   85c5a:	4641      	mov	r1, r8
   85c5c:	f001 ff9a 	bl	87b94 <__aeabi_dmul>
   85c60:	4607      	mov	r7, r0
   85c62:	4688      	mov	r8, r1
   85c64:	f10a 0001 	add.w	r0, sl, #1
   85c68:	f001 ff2e 	bl	87ac8 <__aeabi_i2d>
   85c6c:	463a      	mov	r2, r7
   85c6e:	4643      	mov	r3, r8
   85c70:	f001 ff90 	bl	87b94 <__aeabi_dmul>
   85c74:	2200      	movs	r2, #0
   85c76:	4b17      	ldr	r3, [pc, #92]	; (85cd4 <_dtoa_r+0xd94>)
   85c78:	f001 fdda 	bl	87830 <__adddf3>
   85c7c:	9a02      	ldr	r2, [sp, #8]
   85c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85c80:	3a01      	subs	r2, #1
   85c82:	4605      	mov	r5, r0
   85c84:	9215      	str	r2, [sp, #84]	; 0x54
   85c86:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   85c8a:	9312      	str	r3, [sp, #72]	; 0x48
   85c8c:	e569      	b.n	85762 <_dtoa_r+0x822>
   85c8e:	2239      	movs	r2, #57	; 0x39
   85c90:	46b3      	mov	fp, r6
   85c92:	703a      	strb	r2, [r7, #0]
   85c94:	9e08      	ldr	r6, [sp, #32]
   85c96:	1c7d      	adds	r5, r7, #1
   85c98:	e4bf      	b.n	8561a <_dtoa_r+0x6da>
   85c9a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   85c9e:	2000      	movs	r0, #0
   85ca0:	4910      	ldr	r1, [pc, #64]	; (85ce4 <_dtoa_r+0xda4>)
   85ca2:	f001 fdc3 	bl	8782c <__aeabi_dsub>
   85ca6:	4632      	mov	r2, r6
   85ca8:	463b      	mov	r3, r7
   85caa:	f002 fa03 	bl	880b4 <__aeabi_dcmpgt>
   85cae:	b908      	cbnz	r0, 85cb4 <_dtoa_r+0xd74>
   85cb0:	e6ae      	b.n	85a10 <_dtoa_r+0xad0>
   85cb2:	4615      	mov	r5, r2
   85cb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   85cb8:	1e6a      	subs	r2, r5, #1
   85cba:	2b30      	cmp	r3, #48	; 0x30
   85cbc:	d0f9      	beq.n	85cb2 <_dtoa_r+0xd72>
   85cbe:	e5d7      	b.n	85870 <_dtoa_r+0x930>
   85cc0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   85cc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   85cc6:	9302      	str	r3, [sp, #8]
   85cc8:	f7ff bae8 	b.w	8529c <_dtoa_r+0x35c>
   85ccc:	970c      	str	r7, [sp, #48]	; 0x30
   85cce:	f7ff bba7 	b.w	85420 <_dtoa_r+0x4e0>
   85cd2:	bf00      	nop
   85cd4:	401c0000 	.word	0x401c0000
   85cd8:	40140000 	.word	0x40140000
   85cdc:	0008a0b0 	.word	0x0008a0b0
   85ce0:	0008a088 	.word	0x0008a088
   85ce4:	3fe00000 	.word	0x3fe00000
   85ce8:	40240000 	.word	0x40240000
   85cec:	2b39      	cmp	r3, #57	; 0x39
   85cee:	f8cd b020 	str.w	fp, [sp, #32]
   85cf2:	46d0      	mov	r8, sl
   85cf4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   85cf8:	469a      	mov	sl, r3
   85cfa:	d0c8      	beq.n	85c8e <_dtoa_r+0xd4e>
   85cfc:	f1bb 0f00 	cmp.w	fp, #0
   85d00:	f73f aec0 	bgt.w	85a84 <_dtoa_r+0xb44>
   85d04:	e6c0      	b.n	85a88 <_dtoa_r+0xb48>
   85d06:	f47f aebf 	bne.w	85a88 <_dtoa_r+0xb48>
   85d0a:	f01a 0f01 	tst.w	sl, #1
   85d0e:	f43f aebb 	beq.w	85a88 <_dtoa_r+0xb48>
   85d12:	e6b3      	b.n	85a7c <_dtoa_r+0xb3c>
   85d14:	f04f 0800 	mov.w	r8, #0
   85d18:	4646      	mov	r6, r8
   85d1a:	e5e8      	b.n	858ee <_dtoa_r+0x9ae>
   85d1c:	4631      	mov	r1, r6
   85d1e:	2300      	movs	r3, #0
   85d20:	220a      	movs	r2, #10
   85d22:	4620      	mov	r0, r4
   85d24:	f000 fe46 	bl	869b4 <__multadd>
   85d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85d2a:	4606      	mov	r6, r0
   85d2c:	2b00      	cmp	r3, #0
   85d2e:	dd07      	ble.n	85d40 <_dtoa_r+0xe00>
   85d30:	9307      	str	r3, [sp, #28]
   85d32:	f7ff bbab 	b.w	8548c <_dtoa_r+0x54c>
   85d36:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85d38:	2b02      	cmp	r3, #2
   85d3a:	dc1f      	bgt.n	85d7c <_dtoa_r+0xe3c>
   85d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85d3e:	e43c      	b.n	855ba <_dtoa_r+0x67a>
   85d40:	9b24      	ldr	r3, [sp, #144]	; 0x90
   85d42:	2b02      	cmp	r3, #2
   85d44:	dc1a      	bgt.n	85d7c <_dtoa_r+0xe3c>
   85d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85d48:	e7f2      	b.n	85d30 <_dtoa_r+0xdf0>
   85d4a:	f43f ab81 	beq.w	85450 <_dtoa_r+0x510>
   85d4e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   85d52:	e411      	b.n	85578 <_dtoa_r+0x638>
   85d54:	2500      	movs	r5, #0
   85d56:	4620      	mov	r0, r4
   85d58:	6465      	str	r5, [r4, #68]	; 0x44
   85d5a:	4629      	mov	r1, r5
   85d5c:	f000 fdfa 	bl	86954 <_Balloc>
   85d60:	f04f 33ff 	mov.w	r3, #4294967295
   85d64:	9307      	str	r3, [sp, #28]
   85d66:	930f      	str	r3, [sp, #60]	; 0x3c
   85d68:	2301      	movs	r3, #1
   85d6a:	9004      	str	r0, [sp, #16]
   85d6c:	9525      	str	r5, [sp, #148]	; 0x94
   85d6e:	6420      	str	r0, [r4, #64]	; 0x40
   85d70:	930b      	str	r3, [sp, #44]	; 0x2c
   85d72:	f7ff b9e0 	b.w	85136 <_dtoa_r+0x1f6>
   85d76:	2501      	movs	r5, #1
   85d78:	f7ff b9a8 	b.w	850cc <_dtoa_r+0x18c>
   85d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85d7e:	9307      	str	r3, [sp, #28]
   85d80:	e5e8      	b.n	85954 <_dtoa_r+0xa14>
   85d82:	bf00      	nop

00085d84 <__sflush_r>:
   85d84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   85d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85d8c:	b29a      	uxth	r2, r3
   85d8e:	460d      	mov	r5, r1
   85d90:	0711      	lsls	r1, r2, #28
   85d92:	4680      	mov	r8, r0
   85d94:	d43a      	bmi.n	85e0c <__sflush_r+0x88>
   85d96:	686a      	ldr	r2, [r5, #4]
   85d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85d9c:	2a00      	cmp	r2, #0
   85d9e:	81ab      	strh	r3, [r5, #12]
   85da0:	dd70      	ble.n	85e84 <__sflush_r+0x100>
   85da2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85da4:	2c00      	cmp	r4, #0
   85da6:	d04a      	beq.n	85e3e <__sflush_r+0xba>
   85da8:	2200      	movs	r2, #0
   85daa:	b29b      	uxth	r3, r3
   85dac:	f8d8 6000 	ldr.w	r6, [r8]
   85db0:	f8c8 2000 	str.w	r2, [r8]
   85db4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   85db8:	d068      	beq.n	85e8c <__sflush_r+0x108>
   85dba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   85dbc:	075f      	lsls	r7, r3, #29
   85dbe:	d505      	bpl.n	85dcc <__sflush_r+0x48>
   85dc0:	6869      	ldr	r1, [r5, #4]
   85dc2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   85dc4:	1a52      	subs	r2, r2, r1
   85dc6:	b10b      	cbz	r3, 85dcc <__sflush_r+0x48>
   85dc8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   85dca:	1ad2      	subs	r2, r2, r3
   85dcc:	2300      	movs	r3, #0
   85dce:	69e9      	ldr	r1, [r5, #28]
   85dd0:	4640      	mov	r0, r8
   85dd2:	47a0      	blx	r4
   85dd4:	1c44      	adds	r4, r0, #1
   85dd6:	d03d      	beq.n	85e54 <__sflush_r+0xd0>
   85dd8:	2100      	movs	r1, #0
   85dda:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85dde:	692a      	ldr	r2, [r5, #16]
   85de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85de4:	81ab      	strh	r3, [r5, #12]
   85de6:	04db      	lsls	r3, r3, #19
   85de8:	6069      	str	r1, [r5, #4]
   85dea:	602a      	str	r2, [r5, #0]
   85dec:	d448      	bmi.n	85e80 <__sflush_r+0xfc>
   85dee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   85df0:	f8c8 6000 	str.w	r6, [r8]
   85df4:	b319      	cbz	r1, 85e3e <__sflush_r+0xba>
   85df6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85dfa:	4299      	cmp	r1, r3
   85dfc:	d002      	beq.n	85e04 <__sflush_r+0x80>
   85dfe:	4640      	mov	r0, r8
   85e00:	f000 f95a 	bl	860b8 <_free_r>
   85e04:	2000      	movs	r0, #0
   85e06:	6328      	str	r0, [r5, #48]	; 0x30
   85e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85e0c:	692e      	ldr	r6, [r5, #16]
   85e0e:	b1b6      	cbz	r6, 85e3e <__sflush_r+0xba>
   85e10:	0791      	lsls	r1, r2, #30
   85e12:	bf18      	it	ne
   85e14:	2300      	movne	r3, #0
   85e16:	682c      	ldr	r4, [r5, #0]
   85e18:	bf08      	it	eq
   85e1a:	696b      	ldreq	r3, [r5, #20]
   85e1c:	602e      	str	r6, [r5, #0]
   85e1e:	1ba4      	subs	r4, r4, r6
   85e20:	60ab      	str	r3, [r5, #8]
   85e22:	e00a      	b.n	85e3a <__sflush_r+0xb6>
   85e24:	4623      	mov	r3, r4
   85e26:	4632      	mov	r2, r6
   85e28:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85e2a:	69e9      	ldr	r1, [r5, #28]
   85e2c:	4640      	mov	r0, r8
   85e2e:	47b8      	blx	r7
   85e30:	2800      	cmp	r0, #0
   85e32:	eba4 0400 	sub.w	r4, r4, r0
   85e36:	4406      	add	r6, r0
   85e38:	dd04      	ble.n	85e44 <__sflush_r+0xc0>
   85e3a:	2c00      	cmp	r4, #0
   85e3c:	dcf2      	bgt.n	85e24 <__sflush_r+0xa0>
   85e3e:	2000      	movs	r0, #0
   85e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85e44:	89ab      	ldrh	r3, [r5, #12]
   85e46:	f04f 30ff 	mov.w	r0, #4294967295
   85e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85e4e:	81ab      	strh	r3, [r5, #12]
   85e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85e54:	f8d8 4000 	ldr.w	r4, [r8]
   85e58:	2c1d      	cmp	r4, #29
   85e5a:	d8f3      	bhi.n	85e44 <__sflush_r+0xc0>
   85e5c:	4b16      	ldr	r3, [pc, #88]	; (85eb8 <__sflush_r+0x134>)
   85e5e:	40e3      	lsrs	r3, r4
   85e60:	43db      	mvns	r3, r3
   85e62:	f013 0301 	ands.w	r3, r3, #1
   85e66:	d1ed      	bne.n	85e44 <__sflush_r+0xc0>
   85e68:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   85e6c:	6929      	ldr	r1, [r5, #16]
   85e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   85e72:	81aa      	strh	r2, [r5, #12]
   85e74:	04d2      	lsls	r2, r2, #19
   85e76:	606b      	str	r3, [r5, #4]
   85e78:	6029      	str	r1, [r5, #0]
   85e7a:	d5b8      	bpl.n	85dee <__sflush_r+0x6a>
   85e7c:	2c00      	cmp	r4, #0
   85e7e:	d1b6      	bne.n	85dee <__sflush_r+0x6a>
   85e80:	6528      	str	r0, [r5, #80]	; 0x50
   85e82:	e7b4      	b.n	85dee <__sflush_r+0x6a>
   85e84:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85e86:	2a00      	cmp	r2, #0
   85e88:	dc8b      	bgt.n	85da2 <__sflush_r+0x1e>
   85e8a:	e7d8      	b.n	85e3e <__sflush_r+0xba>
   85e8c:	2301      	movs	r3, #1
   85e8e:	69e9      	ldr	r1, [r5, #28]
   85e90:	4640      	mov	r0, r8
   85e92:	47a0      	blx	r4
   85e94:	1c43      	adds	r3, r0, #1
   85e96:	4602      	mov	r2, r0
   85e98:	d002      	beq.n	85ea0 <__sflush_r+0x11c>
   85e9a:	89ab      	ldrh	r3, [r5, #12]
   85e9c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85e9e:	e78d      	b.n	85dbc <__sflush_r+0x38>
   85ea0:	f8d8 3000 	ldr.w	r3, [r8]
   85ea4:	2b00      	cmp	r3, #0
   85ea6:	d0f8      	beq.n	85e9a <__sflush_r+0x116>
   85ea8:	2b1d      	cmp	r3, #29
   85eaa:	d001      	beq.n	85eb0 <__sflush_r+0x12c>
   85eac:	2b16      	cmp	r3, #22
   85eae:	d1c9      	bne.n	85e44 <__sflush_r+0xc0>
   85eb0:	f8c8 6000 	str.w	r6, [r8]
   85eb4:	e7c3      	b.n	85e3e <__sflush_r+0xba>
   85eb6:	bf00      	nop
   85eb8:	20400001 	.word	0x20400001

00085ebc <_fflush_r>:
   85ebc:	b538      	push	{r3, r4, r5, lr}
   85ebe:	460d      	mov	r5, r1
   85ec0:	4604      	mov	r4, r0
   85ec2:	b108      	cbz	r0, 85ec8 <_fflush_r+0xc>
   85ec4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85ec6:	b1bb      	cbz	r3, 85ef8 <_fflush_r+0x3c>
   85ec8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   85ecc:	b188      	cbz	r0, 85ef2 <_fflush_r+0x36>
   85ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   85ed0:	07db      	lsls	r3, r3, #31
   85ed2:	d401      	bmi.n	85ed8 <_fflush_r+0x1c>
   85ed4:	0581      	lsls	r1, r0, #22
   85ed6:	d517      	bpl.n	85f08 <_fflush_r+0x4c>
   85ed8:	4620      	mov	r0, r4
   85eda:	4629      	mov	r1, r5
   85edc:	f7ff ff52 	bl	85d84 <__sflush_r>
   85ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   85ee2:	4604      	mov	r4, r0
   85ee4:	07da      	lsls	r2, r3, #31
   85ee6:	d402      	bmi.n	85eee <_fflush_r+0x32>
   85ee8:	89ab      	ldrh	r3, [r5, #12]
   85eea:	059b      	lsls	r3, r3, #22
   85eec:	d507      	bpl.n	85efe <_fflush_r+0x42>
   85eee:	4620      	mov	r0, r4
   85ef0:	bd38      	pop	{r3, r4, r5, pc}
   85ef2:	4604      	mov	r4, r0
   85ef4:	4620      	mov	r0, r4
   85ef6:	bd38      	pop	{r3, r4, r5, pc}
   85ef8:	f000 f838 	bl	85f6c <__sinit>
   85efc:	e7e4      	b.n	85ec8 <_fflush_r+0xc>
   85efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
   85f00:	f000 f9fc 	bl	862fc <__retarget_lock_release_recursive>
   85f04:	4620      	mov	r0, r4
   85f06:	bd38      	pop	{r3, r4, r5, pc}
   85f08:	6da8      	ldr	r0, [r5, #88]	; 0x58
   85f0a:	f000 f9f5 	bl	862f8 <__retarget_lock_acquire_recursive>
   85f0e:	e7e3      	b.n	85ed8 <_fflush_r+0x1c>

00085f10 <_cleanup_r>:
   85f10:	4901      	ldr	r1, [pc, #4]	; (85f18 <_cleanup_r+0x8>)
   85f12:	f000 b9b7 	b.w	86284 <_fwalk_reent>
   85f16:	bf00      	nop
   85f18:	00087269 	.word	0x00087269

00085f1c <std.isra.0>:
   85f1c:	2300      	movs	r3, #0
   85f1e:	b510      	push	{r4, lr}
   85f20:	4604      	mov	r4, r0
   85f22:	8181      	strh	r1, [r0, #12]
   85f24:	81c2      	strh	r2, [r0, #14]
   85f26:	6003      	str	r3, [r0, #0]
   85f28:	6043      	str	r3, [r0, #4]
   85f2a:	6083      	str	r3, [r0, #8]
   85f2c:	6643      	str	r3, [r0, #100]	; 0x64
   85f2e:	6103      	str	r3, [r0, #16]
   85f30:	6143      	str	r3, [r0, #20]
   85f32:	6183      	str	r3, [r0, #24]
   85f34:	4619      	mov	r1, r3
   85f36:	2208      	movs	r2, #8
   85f38:	305c      	adds	r0, #92	; 0x5c
   85f3a:	f7fd fb47 	bl	835cc <memset>
   85f3e:	4807      	ldr	r0, [pc, #28]	; (85f5c <std.isra.0+0x40>)
   85f40:	4907      	ldr	r1, [pc, #28]	; (85f60 <std.isra.0+0x44>)
   85f42:	4a08      	ldr	r2, [pc, #32]	; (85f64 <std.isra.0+0x48>)
   85f44:	4b08      	ldr	r3, [pc, #32]	; (85f68 <std.isra.0+0x4c>)
   85f46:	6220      	str	r0, [r4, #32]
   85f48:	61e4      	str	r4, [r4, #28]
   85f4a:	6261      	str	r1, [r4, #36]	; 0x24
   85f4c:	62a2      	str	r2, [r4, #40]	; 0x28
   85f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
   85f50:	f104 0058 	add.w	r0, r4, #88	; 0x58
   85f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85f58:	f000 b9ca 	b.w	862f0 <__retarget_lock_init_recursive>
   85f5c:	00086f71 	.word	0x00086f71
   85f60:	00086f95 	.word	0x00086f95
   85f64:	00086fd1 	.word	0x00086fd1
   85f68:	00086ff1 	.word	0x00086ff1

00085f6c <__sinit>:
   85f6c:	b510      	push	{r4, lr}
   85f6e:	4604      	mov	r4, r0
   85f70:	4814      	ldr	r0, [pc, #80]	; (85fc4 <__sinit+0x58>)
   85f72:	f000 f9c1 	bl	862f8 <__retarget_lock_acquire_recursive>
   85f76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   85f78:	b9fa      	cbnz	r2, 85fba <__sinit+0x4e>
   85f7a:	2003      	movs	r0, #3
   85f7c:	4912      	ldr	r1, [pc, #72]	; (85fc8 <__sinit+0x5c>)
   85f7e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   85f82:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   85f86:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   85f8a:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   85f8e:	63e1      	str	r1, [r4, #60]	; 0x3c
   85f90:	6860      	ldr	r0, [r4, #4]
   85f92:	2104      	movs	r1, #4
   85f94:	f7ff ffc2 	bl	85f1c <std.isra.0>
   85f98:	68a0      	ldr	r0, [r4, #8]
   85f9a:	2201      	movs	r2, #1
   85f9c:	2109      	movs	r1, #9
   85f9e:	f7ff ffbd 	bl	85f1c <std.isra.0>
   85fa2:	68e0      	ldr	r0, [r4, #12]
   85fa4:	2202      	movs	r2, #2
   85fa6:	2112      	movs	r1, #18
   85fa8:	f7ff ffb8 	bl	85f1c <std.isra.0>
   85fac:	2301      	movs	r3, #1
   85fae:	4805      	ldr	r0, [pc, #20]	; (85fc4 <__sinit+0x58>)
   85fb0:	63a3      	str	r3, [r4, #56]	; 0x38
   85fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85fb6:	f000 b9a1 	b.w	862fc <__retarget_lock_release_recursive>
   85fba:	4802      	ldr	r0, [pc, #8]	; (85fc4 <__sinit+0x58>)
   85fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85fc0:	f000 b99c 	b.w	862fc <__retarget_lock_release_recursive>
   85fc4:	2007147c 	.word	0x2007147c
   85fc8:	00085f11 	.word	0x00085f11

00085fcc <__sfp_lock_acquire>:
   85fcc:	4801      	ldr	r0, [pc, #4]	; (85fd4 <__sfp_lock_acquire+0x8>)
   85fce:	f000 b993 	b.w	862f8 <__retarget_lock_acquire_recursive>
   85fd2:	bf00      	nop
   85fd4:	20071490 	.word	0x20071490

00085fd8 <__sfp_lock_release>:
   85fd8:	4801      	ldr	r0, [pc, #4]	; (85fe0 <__sfp_lock_release+0x8>)
   85fda:	f000 b98f 	b.w	862fc <__retarget_lock_release_recursive>
   85fde:	bf00      	nop
   85fe0:	20071490 	.word	0x20071490

00085fe4 <__libc_fini_array>:
   85fe4:	b538      	push	{r3, r4, r5, lr}
   85fe6:	4c0a      	ldr	r4, [pc, #40]	; (86010 <__libc_fini_array+0x2c>)
   85fe8:	4d0a      	ldr	r5, [pc, #40]	; (86014 <__libc_fini_array+0x30>)
   85fea:	1b64      	subs	r4, r4, r5
   85fec:	10a4      	asrs	r4, r4, #2
   85fee:	d00a      	beq.n	86006 <__libc_fini_array+0x22>
   85ff0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85ff4:	3b01      	subs	r3, #1
   85ff6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85ffa:	3c01      	subs	r4, #1
   85ffc:	f855 3904 	ldr.w	r3, [r5], #-4
   86000:	4798      	blx	r3
   86002:	2c00      	cmp	r4, #0
   86004:	d1f9      	bne.n	85ffa <__libc_fini_array+0x16>
   86006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8600a:	f004 b94f 	b.w	8a2ac <_fini>
   8600e:	bf00      	nop
   86010:	0008a2bc 	.word	0x0008a2bc
   86014:	0008a2b8 	.word	0x0008a2b8

00086018 <_malloc_trim_r>:
   86018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8601a:	460c      	mov	r4, r1
   8601c:	4f23      	ldr	r7, [pc, #140]	; (860ac <_malloc_trim_r+0x94>)
   8601e:	4606      	mov	r6, r0
   86020:	f000 fc8c 	bl	8693c <__malloc_lock>
   86024:	68bb      	ldr	r3, [r7, #8]
   86026:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8602a:	685d      	ldr	r5, [r3, #4]
   8602c:	310f      	adds	r1, #15
   8602e:	f025 0503 	bic.w	r5, r5, #3
   86032:	4429      	add	r1, r5
   86034:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   86038:	f021 010f 	bic.w	r1, r1, #15
   8603c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   86040:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   86044:	db07      	blt.n	86056 <_malloc_trim_r+0x3e>
   86046:	2100      	movs	r1, #0
   86048:	4630      	mov	r0, r6
   8604a:	f000 ff7f 	bl	86f4c <_sbrk_r>
   8604e:	68bb      	ldr	r3, [r7, #8]
   86050:	442b      	add	r3, r5
   86052:	4298      	cmp	r0, r3
   86054:	d004      	beq.n	86060 <_malloc_trim_r+0x48>
   86056:	4630      	mov	r0, r6
   86058:	f000 fc76 	bl	86948 <__malloc_unlock>
   8605c:	2000      	movs	r0, #0
   8605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86060:	4261      	negs	r1, r4
   86062:	4630      	mov	r0, r6
   86064:	f000 ff72 	bl	86f4c <_sbrk_r>
   86068:	3001      	adds	r0, #1
   8606a:	d00d      	beq.n	86088 <_malloc_trim_r+0x70>
   8606c:	4b10      	ldr	r3, [pc, #64]	; (860b0 <_malloc_trim_r+0x98>)
   8606e:	68ba      	ldr	r2, [r7, #8]
   86070:	6819      	ldr	r1, [r3, #0]
   86072:	1b2d      	subs	r5, r5, r4
   86074:	f045 0501 	orr.w	r5, r5, #1
   86078:	4630      	mov	r0, r6
   8607a:	1b09      	subs	r1, r1, r4
   8607c:	6055      	str	r5, [r2, #4]
   8607e:	6019      	str	r1, [r3, #0]
   86080:	f000 fc62 	bl	86948 <__malloc_unlock>
   86084:	2001      	movs	r0, #1
   86086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86088:	2100      	movs	r1, #0
   8608a:	4630      	mov	r0, r6
   8608c:	f000 ff5e 	bl	86f4c <_sbrk_r>
   86090:	68ba      	ldr	r2, [r7, #8]
   86092:	1a83      	subs	r3, r0, r2
   86094:	2b0f      	cmp	r3, #15
   86096:	ddde      	ble.n	86056 <_malloc_trim_r+0x3e>
   86098:	4c06      	ldr	r4, [pc, #24]	; (860b4 <_malloc_trim_r+0x9c>)
   8609a:	4905      	ldr	r1, [pc, #20]	; (860b0 <_malloc_trim_r+0x98>)
   8609c:	6824      	ldr	r4, [r4, #0]
   8609e:	f043 0301 	orr.w	r3, r3, #1
   860a2:	1b00      	subs	r0, r0, r4
   860a4:	6053      	str	r3, [r2, #4]
   860a6:	6008      	str	r0, [r1, #0]
   860a8:	e7d5      	b.n	86056 <_malloc_trim_r+0x3e>
   860aa:	bf00      	nop
   860ac:	200705ec 	.word	0x200705ec
   860b0:	20071424 	.word	0x20071424
   860b4:	200709f4 	.word	0x200709f4

000860b8 <_free_r>:
   860b8:	2900      	cmp	r1, #0
   860ba:	d044      	beq.n	86146 <_free_r+0x8e>
   860bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   860c0:	460d      	mov	r5, r1
   860c2:	4680      	mov	r8, r0
   860c4:	f000 fc3a 	bl	8693c <__malloc_lock>
   860c8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   860cc:	4969      	ldr	r1, [pc, #420]	; (86274 <_free_r+0x1bc>)
   860ce:	f1a5 0408 	sub.w	r4, r5, #8
   860d2:	f027 0301 	bic.w	r3, r7, #1
   860d6:	18e2      	adds	r2, r4, r3
   860d8:	688e      	ldr	r6, [r1, #8]
   860da:	6850      	ldr	r0, [r2, #4]
   860dc:	42b2      	cmp	r2, r6
   860de:	f020 0003 	bic.w	r0, r0, #3
   860e2:	d05e      	beq.n	861a2 <_free_r+0xea>
   860e4:	07fe      	lsls	r6, r7, #31
   860e6:	6050      	str	r0, [r2, #4]
   860e8:	d40b      	bmi.n	86102 <_free_r+0x4a>
   860ea:	f855 7c08 	ldr.w	r7, [r5, #-8]
   860ee:	f101 0e08 	add.w	lr, r1, #8
   860f2:	1be4      	subs	r4, r4, r7
   860f4:	68a5      	ldr	r5, [r4, #8]
   860f6:	443b      	add	r3, r7
   860f8:	4575      	cmp	r5, lr
   860fa:	d06d      	beq.n	861d8 <_free_r+0x120>
   860fc:	68e7      	ldr	r7, [r4, #12]
   860fe:	60ef      	str	r7, [r5, #12]
   86100:	60bd      	str	r5, [r7, #8]
   86102:	1815      	adds	r5, r2, r0
   86104:	686d      	ldr	r5, [r5, #4]
   86106:	07ed      	lsls	r5, r5, #31
   86108:	d53e      	bpl.n	86188 <_free_r+0xd0>
   8610a:	f043 0201 	orr.w	r2, r3, #1
   8610e:	6062      	str	r2, [r4, #4]
   86110:	50e3      	str	r3, [r4, r3]
   86112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86116:	d217      	bcs.n	86148 <_free_r+0x90>
   86118:	2201      	movs	r2, #1
   8611a:	08db      	lsrs	r3, r3, #3
   8611c:	1098      	asrs	r0, r3, #2
   8611e:	684d      	ldr	r5, [r1, #4]
   86120:	4413      	add	r3, r2
   86122:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   86126:	4082      	lsls	r2, r0
   86128:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8612c:	432a      	orrs	r2, r5
   8612e:	3808      	subs	r0, #8
   86130:	60e0      	str	r0, [r4, #12]
   86132:	60a7      	str	r7, [r4, #8]
   86134:	604a      	str	r2, [r1, #4]
   86136:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8613a:	60fc      	str	r4, [r7, #12]
   8613c:	4640      	mov	r0, r8
   8613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86142:	f000 bc01 	b.w	86948 <__malloc_unlock>
   86146:	4770      	bx	lr
   86148:	0a5a      	lsrs	r2, r3, #9
   8614a:	2a04      	cmp	r2, #4
   8614c:	d852      	bhi.n	861f4 <_free_r+0x13c>
   8614e:	099a      	lsrs	r2, r3, #6
   86150:	f102 0739 	add.w	r7, r2, #57	; 0x39
   86154:	00ff      	lsls	r7, r7, #3
   86156:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8615a:	19c8      	adds	r0, r1, r7
   8615c:	59ca      	ldr	r2, [r1, r7]
   8615e:	3808      	subs	r0, #8
   86160:	4290      	cmp	r0, r2
   86162:	d04f      	beq.n	86204 <_free_r+0x14c>
   86164:	6851      	ldr	r1, [r2, #4]
   86166:	f021 0103 	bic.w	r1, r1, #3
   8616a:	428b      	cmp	r3, r1
   8616c:	d232      	bcs.n	861d4 <_free_r+0x11c>
   8616e:	6892      	ldr	r2, [r2, #8]
   86170:	4290      	cmp	r0, r2
   86172:	d1f7      	bne.n	86164 <_free_r+0xac>
   86174:	68c3      	ldr	r3, [r0, #12]
   86176:	60a0      	str	r0, [r4, #8]
   86178:	60e3      	str	r3, [r4, #12]
   8617a:	609c      	str	r4, [r3, #8]
   8617c:	60c4      	str	r4, [r0, #12]
   8617e:	4640      	mov	r0, r8
   86180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86184:	f000 bbe0 	b.w	86948 <__malloc_unlock>
   86188:	6895      	ldr	r5, [r2, #8]
   8618a:	4f3b      	ldr	r7, [pc, #236]	; (86278 <_free_r+0x1c0>)
   8618c:	4403      	add	r3, r0
   8618e:	42bd      	cmp	r5, r7
   86190:	d040      	beq.n	86214 <_free_r+0x15c>
   86192:	68d0      	ldr	r0, [r2, #12]
   86194:	f043 0201 	orr.w	r2, r3, #1
   86198:	60e8      	str	r0, [r5, #12]
   8619a:	6085      	str	r5, [r0, #8]
   8619c:	6062      	str	r2, [r4, #4]
   8619e:	50e3      	str	r3, [r4, r3]
   861a0:	e7b7      	b.n	86112 <_free_r+0x5a>
   861a2:	07ff      	lsls	r7, r7, #31
   861a4:	4403      	add	r3, r0
   861a6:	d407      	bmi.n	861b8 <_free_r+0x100>
   861a8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   861ac:	1b64      	subs	r4, r4, r5
   861ae:	68e2      	ldr	r2, [r4, #12]
   861b0:	68a0      	ldr	r0, [r4, #8]
   861b2:	442b      	add	r3, r5
   861b4:	60c2      	str	r2, [r0, #12]
   861b6:	6090      	str	r0, [r2, #8]
   861b8:	4a30      	ldr	r2, [pc, #192]	; (8627c <_free_r+0x1c4>)
   861ba:	f043 0001 	orr.w	r0, r3, #1
   861be:	6812      	ldr	r2, [r2, #0]
   861c0:	6060      	str	r0, [r4, #4]
   861c2:	4293      	cmp	r3, r2
   861c4:	608c      	str	r4, [r1, #8]
   861c6:	d3b9      	bcc.n	8613c <_free_r+0x84>
   861c8:	4b2d      	ldr	r3, [pc, #180]	; (86280 <_free_r+0x1c8>)
   861ca:	4640      	mov	r0, r8
   861cc:	6819      	ldr	r1, [r3, #0]
   861ce:	f7ff ff23 	bl	86018 <_malloc_trim_r>
   861d2:	e7b3      	b.n	8613c <_free_r+0x84>
   861d4:	4610      	mov	r0, r2
   861d6:	e7cd      	b.n	86174 <_free_r+0xbc>
   861d8:	1811      	adds	r1, r2, r0
   861da:	6849      	ldr	r1, [r1, #4]
   861dc:	07c9      	lsls	r1, r1, #31
   861de:	d444      	bmi.n	8626a <_free_r+0x1b2>
   861e0:	6891      	ldr	r1, [r2, #8]
   861e2:	4403      	add	r3, r0
   861e4:	68d2      	ldr	r2, [r2, #12]
   861e6:	f043 0001 	orr.w	r0, r3, #1
   861ea:	60ca      	str	r2, [r1, #12]
   861ec:	6091      	str	r1, [r2, #8]
   861ee:	6060      	str	r0, [r4, #4]
   861f0:	50e3      	str	r3, [r4, r3]
   861f2:	e7a3      	b.n	8613c <_free_r+0x84>
   861f4:	2a14      	cmp	r2, #20
   861f6:	d816      	bhi.n	86226 <_free_r+0x16e>
   861f8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   861fc:	00ff      	lsls	r7, r7, #3
   861fe:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   86202:	e7aa      	b.n	8615a <_free_r+0xa2>
   86204:	2301      	movs	r3, #1
   86206:	10aa      	asrs	r2, r5, #2
   86208:	684d      	ldr	r5, [r1, #4]
   8620a:	4093      	lsls	r3, r2
   8620c:	432b      	orrs	r3, r5
   8620e:	604b      	str	r3, [r1, #4]
   86210:	4603      	mov	r3, r0
   86212:	e7b0      	b.n	86176 <_free_r+0xbe>
   86214:	f043 0201 	orr.w	r2, r3, #1
   86218:	614c      	str	r4, [r1, #20]
   8621a:	610c      	str	r4, [r1, #16]
   8621c:	60e5      	str	r5, [r4, #12]
   8621e:	60a5      	str	r5, [r4, #8]
   86220:	6062      	str	r2, [r4, #4]
   86222:	50e3      	str	r3, [r4, r3]
   86224:	e78a      	b.n	8613c <_free_r+0x84>
   86226:	2a54      	cmp	r2, #84	; 0x54
   86228:	d806      	bhi.n	86238 <_free_r+0x180>
   8622a:	0b1a      	lsrs	r2, r3, #12
   8622c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   86230:	00ff      	lsls	r7, r7, #3
   86232:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   86236:	e790      	b.n	8615a <_free_r+0xa2>
   86238:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8623c:	d806      	bhi.n	8624c <_free_r+0x194>
   8623e:	0bda      	lsrs	r2, r3, #15
   86240:	f102 0778 	add.w	r7, r2, #120	; 0x78
   86244:	00ff      	lsls	r7, r7, #3
   86246:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8624a:	e786      	b.n	8615a <_free_r+0xa2>
   8624c:	f240 5054 	movw	r0, #1364	; 0x554
   86250:	4282      	cmp	r2, r0
   86252:	d806      	bhi.n	86262 <_free_r+0x1aa>
   86254:	0c9a      	lsrs	r2, r3, #18
   86256:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8625a:	00ff      	lsls	r7, r7, #3
   8625c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   86260:	e77b      	b.n	8615a <_free_r+0xa2>
   86262:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   86266:	257e      	movs	r5, #126	; 0x7e
   86268:	e777      	b.n	8615a <_free_r+0xa2>
   8626a:	f043 0101 	orr.w	r1, r3, #1
   8626e:	6061      	str	r1, [r4, #4]
   86270:	6013      	str	r3, [r2, #0]
   86272:	e763      	b.n	8613c <_free_r+0x84>
   86274:	200705ec 	.word	0x200705ec
   86278:	200705f4 	.word	0x200705f4
   8627c:	200709f8 	.word	0x200709f8
   86280:	20071454 	.word	0x20071454

00086284 <_fwalk_reent>:
   86284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86288:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8628c:	d01e      	beq.n	862cc <_fwalk_reent+0x48>
   8628e:	4688      	mov	r8, r1
   86290:	4607      	mov	r7, r0
   86292:	f04f 0900 	mov.w	r9, #0
   86296:	6875      	ldr	r5, [r6, #4]
   86298:	68b4      	ldr	r4, [r6, #8]
   8629a:	3d01      	subs	r5, #1
   8629c:	d410      	bmi.n	862c0 <_fwalk_reent+0x3c>
   8629e:	89a3      	ldrh	r3, [r4, #12]
   862a0:	3d01      	subs	r5, #1
   862a2:	2b01      	cmp	r3, #1
   862a4:	d908      	bls.n	862b8 <_fwalk_reent+0x34>
   862a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   862aa:	3301      	adds	r3, #1
   862ac:	d004      	beq.n	862b8 <_fwalk_reent+0x34>
   862ae:	4621      	mov	r1, r4
   862b0:	4638      	mov	r0, r7
   862b2:	47c0      	blx	r8
   862b4:	ea49 0900 	orr.w	r9, r9, r0
   862b8:	1c6b      	adds	r3, r5, #1
   862ba:	f104 0468 	add.w	r4, r4, #104	; 0x68
   862be:	d1ee      	bne.n	8629e <_fwalk_reent+0x1a>
   862c0:	6836      	ldr	r6, [r6, #0]
   862c2:	2e00      	cmp	r6, #0
   862c4:	d1e7      	bne.n	86296 <_fwalk_reent+0x12>
   862c6:	4648      	mov	r0, r9
   862c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   862cc:	46b1      	mov	r9, r6
   862ce:	4648      	mov	r0, r9
   862d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000862d4 <_localeconv_r>:
   862d4:	4a04      	ldr	r2, [pc, #16]	; (862e8 <_localeconv_r+0x14>)
   862d6:	4b05      	ldr	r3, [pc, #20]	; (862ec <_localeconv_r+0x18>)
   862d8:	6812      	ldr	r2, [r2, #0]
   862da:	6b50      	ldr	r0, [r2, #52]	; 0x34
   862dc:	2800      	cmp	r0, #0
   862de:	bf08      	it	eq
   862e0:	4618      	moveq	r0, r3
   862e2:	30f0      	adds	r0, #240	; 0xf0
   862e4:	4770      	bx	lr
   862e6:	bf00      	nop
   862e8:	200701bc 	.word	0x200701bc
   862ec:	200709fc 	.word	0x200709fc

000862f0 <__retarget_lock_init_recursive>:
   862f0:	4770      	bx	lr
   862f2:	bf00      	nop

000862f4 <__retarget_lock_close_recursive>:
   862f4:	4770      	bx	lr
   862f6:	bf00      	nop

000862f8 <__retarget_lock_acquire_recursive>:
   862f8:	4770      	bx	lr
   862fa:	bf00      	nop

000862fc <__retarget_lock_release_recursive>:
   862fc:	4770      	bx	lr
   862fe:	bf00      	nop

00086300 <__swhatbuf_r>:
   86300:	b570      	push	{r4, r5, r6, lr}
   86302:	460c      	mov	r4, r1
   86304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86308:	b090      	sub	sp, #64	; 0x40
   8630a:	2900      	cmp	r1, #0
   8630c:	4615      	mov	r5, r2
   8630e:	461e      	mov	r6, r3
   86310:	db14      	blt.n	8633c <__swhatbuf_r+0x3c>
   86312:	aa01      	add	r2, sp, #4
   86314:	f001 f80a 	bl	8732c <_fstat_r>
   86318:	2800      	cmp	r0, #0
   8631a:	db0f      	blt.n	8633c <__swhatbuf_r+0x3c>
   8631c:	9a02      	ldr	r2, [sp, #8]
   8631e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86322:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   86326:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8632a:	fab2 f282 	clz	r2, r2
   8632e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   86332:	0952      	lsrs	r2, r2, #5
   86334:	6032      	str	r2, [r6, #0]
   86336:	602b      	str	r3, [r5, #0]
   86338:	b010      	add	sp, #64	; 0x40
   8633a:	bd70      	pop	{r4, r5, r6, pc}
   8633c:	2300      	movs	r3, #0
   8633e:	89a2      	ldrh	r2, [r4, #12]
   86340:	6033      	str	r3, [r6, #0]
   86342:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   86346:	d004      	beq.n	86352 <__swhatbuf_r+0x52>
   86348:	2240      	movs	r2, #64	; 0x40
   8634a:	4618      	mov	r0, r3
   8634c:	602a      	str	r2, [r5, #0]
   8634e:	b010      	add	sp, #64	; 0x40
   86350:	bd70      	pop	{r4, r5, r6, pc}
   86352:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86356:	602b      	str	r3, [r5, #0]
   86358:	b010      	add	sp, #64	; 0x40
   8635a:	bd70      	pop	{r4, r5, r6, pc}

0008635c <malloc>:
   8635c:	4b02      	ldr	r3, [pc, #8]	; (86368 <malloc+0xc>)
   8635e:	4601      	mov	r1, r0
   86360:	6818      	ldr	r0, [r3, #0]
   86362:	f000 b803 	b.w	8636c <_malloc_r>
   86366:	bf00      	nop
   86368:	200701bc 	.word	0x200701bc

0008636c <_malloc_r>:
   8636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86370:	f101 060b 	add.w	r6, r1, #11
   86374:	2e16      	cmp	r6, #22
   86376:	b083      	sub	sp, #12
   86378:	4605      	mov	r5, r0
   8637a:	f240 809e 	bls.w	864ba <_malloc_r+0x14e>
   8637e:	f036 0607 	bics.w	r6, r6, #7
   86382:	f100 80bd 	bmi.w	86500 <_malloc_r+0x194>
   86386:	42b1      	cmp	r1, r6
   86388:	f200 80ba 	bhi.w	86500 <_malloc_r+0x194>
   8638c:	f000 fad6 	bl	8693c <__malloc_lock>
   86390:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   86394:	f0c0 8285 	bcc.w	868a2 <_malloc_r+0x536>
   86398:	0a73      	lsrs	r3, r6, #9
   8639a:	f000 80b8 	beq.w	8650e <_malloc_r+0x1a2>
   8639e:	2b04      	cmp	r3, #4
   863a0:	f200 816c 	bhi.w	8667c <_malloc_r+0x310>
   863a4:	09b3      	lsrs	r3, r6, #6
   863a6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   863aa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   863ae:	00c1      	lsls	r1, r0, #3
   863b0:	4fb8      	ldr	r7, [pc, #736]	; (86694 <_malloc_r+0x328>)
   863b2:	4439      	add	r1, r7
   863b4:	684c      	ldr	r4, [r1, #4]
   863b6:	3908      	subs	r1, #8
   863b8:	42a1      	cmp	r1, r4
   863ba:	d106      	bne.n	863ca <_malloc_r+0x5e>
   863bc:	e00c      	b.n	863d8 <_malloc_r+0x6c>
   863be:	2a00      	cmp	r2, #0
   863c0:	f280 80ab 	bge.w	8651a <_malloc_r+0x1ae>
   863c4:	68e4      	ldr	r4, [r4, #12]
   863c6:	42a1      	cmp	r1, r4
   863c8:	d006      	beq.n	863d8 <_malloc_r+0x6c>
   863ca:	6863      	ldr	r3, [r4, #4]
   863cc:	f023 0303 	bic.w	r3, r3, #3
   863d0:	1b9a      	subs	r2, r3, r6
   863d2:	2a0f      	cmp	r2, #15
   863d4:	ddf3      	ble.n	863be <_malloc_r+0x52>
   863d6:	4670      	mov	r0, lr
   863d8:	693c      	ldr	r4, [r7, #16]
   863da:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 866a8 <_malloc_r+0x33c>
   863de:	4574      	cmp	r4, lr
   863e0:	f000 819e 	beq.w	86720 <_malloc_r+0x3b4>
   863e4:	6863      	ldr	r3, [r4, #4]
   863e6:	f023 0303 	bic.w	r3, r3, #3
   863ea:	1b9a      	subs	r2, r3, r6
   863ec:	2a0f      	cmp	r2, #15
   863ee:	f300 8183 	bgt.w	866f8 <_malloc_r+0x38c>
   863f2:	2a00      	cmp	r2, #0
   863f4:	f8c7 e014 	str.w	lr, [r7, #20]
   863f8:	f8c7 e010 	str.w	lr, [r7, #16]
   863fc:	f280 8091 	bge.w	86522 <_malloc_r+0x1b6>
   86400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86404:	f080 8154 	bcs.w	866b0 <_malloc_r+0x344>
   86408:	2201      	movs	r2, #1
   8640a:	08db      	lsrs	r3, r3, #3
   8640c:	6879      	ldr	r1, [r7, #4]
   8640e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   86412:	4413      	add	r3, r2
   86414:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   86418:	fa02 f20c 	lsl.w	r2, r2, ip
   8641c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   86420:	430a      	orrs	r2, r1
   86422:	f1ac 0108 	sub.w	r1, ip, #8
   86426:	60e1      	str	r1, [r4, #12]
   86428:	f8c4 8008 	str.w	r8, [r4, #8]
   8642c:	607a      	str	r2, [r7, #4]
   8642e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   86432:	f8c8 400c 	str.w	r4, [r8, #12]
   86436:	2401      	movs	r4, #1
   86438:	1083      	asrs	r3, r0, #2
   8643a:	409c      	lsls	r4, r3
   8643c:	4294      	cmp	r4, r2
   8643e:	d87d      	bhi.n	8653c <_malloc_r+0x1d0>
   86440:	4214      	tst	r4, r2
   86442:	d106      	bne.n	86452 <_malloc_r+0xe6>
   86444:	f020 0003 	bic.w	r0, r0, #3
   86448:	0064      	lsls	r4, r4, #1
   8644a:	4214      	tst	r4, r2
   8644c:	f100 0004 	add.w	r0, r0, #4
   86450:	d0fa      	beq.n	86448 <_malloc_r+0xdc>
   86452:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   86456:	46cc      	mov	ip, r9
   86458:	4680      	mov	r8, r0
   8645a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8645e:	459c      	cmp	ip, r3
   86460:	d107      	bne.n	86472 <_malloc_r+0x106>
   86462:	e15f      	b.n	86724 <_malloc_r+0x3b8>
   86464:	2a00      	cmp	r2, #0
   86466:	f280 816d 	bge.w	86744 <_malloc_r+0x3d8>
   8646a:	68db      	ldr	r3, [r3, #12]
   8646c:	459c      	cmp	ip, r3
   8646e:	f000 8159 	beq.w	86724 <_malloc_r+0x3b8>
   86472:	6859      	ldr	r1, [r3, #4]
   86474:	f021 0103 	bic.w	r1, r1, #3
   86478:	1b8a      	subs	r2, r1, r6
   8647a:	2a0f      	cmp	r2, #15
   8647c:	ddf2      	ble.n	86464 <_malloc_r+0xf8>
   8647e:	68dc      	ldr	r4, [r3, #12]
   86480:	f8d3 c008 	ldr.w	ip, [r3, #8]
   86484:	f046 0801 	orr.w	r8, r6, #1
   86488:	4628      	mov	r0, r5
   8648a:	441e      	add	r6, r3
   8648c:	f042 0501 	orr.w	r5, r2, #1
   86490:	f8c3 8004 	str.w	r8, [r3, #4]
   86494:	f8cc 400c 	str.w	r4, [ip, #12]
   86498:	f8c4 c008 	str.w	ip, [r4, #8]
   8649c:	617e      	str	r6, [r7, #20]
   8649e:	613e      	str	r6, [r7, #16]
   864a0:	f8c6 e00c 	str.w	lr, [r6, #12]
   864a4:	f8c6 e008 	str.w	lr, [r6, #8]
   864a8:	6075      	str	r5, [r6, #4]
   864aa:	505a      	str	r2, [r3, r1]
   864ac:	9300      	str	r3, [sp, #0]
   864ae:	f000 fa4b 	bl	86948 <__malloc_unlock>
   864b2:	9b00      	ldr	r3, [sp, #0]
   864b4:	f103 0408 	add.w	r4, r3, #8
   864b8:	e01e      	b.n	864f8 <_malloc_r+0x18c>
   864ba:	2910      	cmp	r1, #16
   864bc:	d820      	bhi.n	86500 <_malloc_r+0x194>
   864be:	f000 fa3d 	bl	8693c <__malloc_lock>
   864c2:	2610      	movs	r6, #16
   864c4:	2318      	movs	r3, #24
   864c6:	2002      	movs	r0, #2
   864c8:	4f72      	ldr	r7, [pc, #456]	; (86694 <_malloc_r+0x328>)
   864ca:	443b      	add	r3, r7
   864cc:	685c      	ldr	r4, [r3, #4]
   864ce:	f1a3 0208 	sub.w	r2, r3, #8
   864d2:	4294      	cmp	r4, r2
   864d4:	f000 812f 	beq.w	86736 <_malloc_r+0x3ca>
   864d8:	6863      	ldr	r3, [r4, #4]
   864da:	68e1      	ldr	r1, [r4, #12]
   864dc:	f023 0303 	bic.w	r3, r3, #3
   864e0:	4423      	add	r3, r4
   864e2:	685a      	ldr	r2, [r3, #4]
   864e4:	68a6      	ldr	r6, [r4, #8]
   864e6:	f042 0201 	orr.w	r2, r2, #1
   864ea:	60f1      	str	r1, [r6, #12]
   864ec:	4628      	mov	r0, r5
   864ee:	608e      	str	r6, [r1, #8]
   864f0:	605a      	str	r2, [r3, #4]
   864f2:	f000 fa29 	bl	86948 <__malloc_unlock>
   864f6:	3408      	adds	r4, #8
   864f8:	4620      	mov	r0, r4
   864fa:	b003      	add	sp, #12
   864fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86500:	2400      	movs	r4, #0
   86502:	230c      	movs	r3, #12
   86504:	4620      	mov	r0, r4
   86506:	602b      	str	r3, [r5, #0]
   86508:	b003      	add	sp, #12
   8650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8650e:	2040      	movs	r0, #64	; 0x40
   86510:	f44f 7100 	mov.w	r1, #512	; 0x200
   86514:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   86518:	e74a      	b.n	863b0 <_malloc_r+0x44>
   8651a:	4423      	add	r3, r4
   8651c:	685a      	ldr	r2, [r3, #4]
   8651e:	68e1      	ldr	r1, [r4, #12]
   86520:	e7e0      	b.n	864e4 <_malloc_r+0x178>
   86522:	4423      	add	r3, r4
   86524:	685a      	ldr	r2, [r3, #4]
   86526:	4628      	mov	r0, r5
   86528:	f042 0201 	orr.w	r2, r2, #1
   8652c:	605a      	str	r2, [r3, #4]
   8652e:	3408      	adds	r4, #8
   86530:	f000 fa0a 	bl	86948 <__malloc_unlock>
   86534:	4620      	mov	r0, r4
   86536:	b003      	add	sp, #12
   86538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8653c:	68bc      	ldr	r4, [r7, #8]
   8653e:	6863      	ldr	r3, [r4, #4]
   86540:	f023 0803 	bic.w	r8, r3, #3
   86544:	45b0      	cmp	r8, r6
   86546:	d304      	bcc.n	86552 <_malloc_r+0x1e6>
   86548:	eba8 0306 	sub.w	r3, r8, r6
   8654c:	2b0f      	cmp	r3, #15
   8654e:	f300 8085 	bgt.w	8665c <_malloc_r+0x2f0>
   86552:	f8df 9158 	ldr.w	r9, [pc, #344]	; 866ac <_malloc_r+0x340>
   86556:	4b50      	ldr	r3, [pc, #320]	; (86698 <_malloc_r+0x32c>)
   86558:	f8d9 2000 	ldr.w	r2, [r9]
   8655c:	681b      	ldr	r3, [r3, #0]
   8655e:	3201      	adds	r2, #1
   86560:	4433      	add	r3, r6
   86562:	eb04 0a08 	add.w	sl, r4, r8
   86566:	f000 8154 	beq.w	86812 <_malloc_r+0x4a6>
   8656a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8656e:	330f      	adds	r3, #15
   86570:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   86574:	f02b 0b0f 	bic.w	fp, fp, #15
   86578:	4659      	mov	r1, fp
   8657a:	4628      	mov	r0, r5
   8657c:	f000 fce6 	bl	86f4c <_sbrk_r>
   86580:	1c41      	adds	r1, r0, #1
   86582:	4602      	mov	r2, r0
   86584:	f000 80fb 	beq.w	8677e <_malloc_r+0x412>
   86588:	4582      	cmp	sl, r0
   8658a:	f200 80f6 	bhi.w	8677a <_malloc_r+0x40e>
   8658e:	4b43      	ldr	r3, [pc, #268]	; (8669c <_malloc_r+0x330>)
   86590:	6819      	ldr	r1, [r3, #0]
   86592:	4459      	add	r1, fp
   86594:	6019      	str	r1, [r3, #0]
   86596:	f000 814c 	beq.w	86832 <_malloc_r+0x4c6>
   8659a:	f8d9 0000 	ldr.w	r0, [r9]
   8659e:	3001      	adds	r0, #1
   865a0:	bf1b      	ittet	ne
   865a2:	eba2 0a0a 	subne.w	sl, r2, sl
   865a6:	4451      	addne	r1, sl
   865a8:	f8c9 2000 	streq.w	r2, [r9]
   865ac:	6019      	strne	r1, [r3, #0]
   865ae:	f012 0107 	ands.w	r1, r2, #7
   865b2:	f000 8114 	beq.w	867de <_malloc_r+0x472>
   865b6:	f1c1 0008 	rsb	r0, r1, #8
   865ba:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   865be:	4402      	add	r2, r0
   865c0:	3108      	adds	r1, #8
   865c2:	eb02 090b 	add.w	r9, r2, fp
   865c6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   865ca:	eba1 0909 	sub.w	r9, r1, r9
   865ce:	4649      	mov	r1, r9
   865d0:	4628      	mov	r0, r5
   865d2:	9301      	str	r3, [sp, #4]
   865d4:	9200      	str	r2, [sp, #0]
   865d6:	f000 fcb9 	bl	86f4c <_sbrk_r>
   865da:	1c43      	adds	r3, r0, #1
   865dc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   865e0:	f000 8142 	beq.w	86868 <_malloc_r+0x4fc>
   865e4:	1a80      	subs	r0, r0, r2
   865e6:	4448      	add	r0, r9
   865e8:	f040 0001 	orr.w	r0, r0, #1
   865ec:	6819      	ldr	r1, [r3, #0]
   865ee:	42bc      	cmp	r4, r7
   865f0:	4449      	add	r1, r9
   865f2:	60ba      	str	r2, [r7, #8]
   865f4:	6019      	str	r1, [r3, #0]
   865f6:	6050      	str	r0, [r2, #4]
   865f8:	d017      	beq.n	8662a <_malloc_r+0x2be>
   865fa:	f1b8 0f0f 	cmp.w	r8, #15
   865fe:	f240 80fa 	bls.w	867f6 <_malloc_r+0x48a>
   86602:	f04f 0c05 	mov.w	ip, #5
   86606:	6862      	ldr	r2, [r4, #4]
   86608:	f1a8 000c 	sub.w	r0, r8, #12
   8660c:	f020 0007 	bic.w	r0, r0, #7
   86610:	f002 0201 	and.w	r2, r2, #1
   86614:	eb04 0e00 	add.w	lr, r4, r0
   86618:	4302      	orrs	r2, r0
   8661a:	280f      	cmp	r0, #15
   8661c:	6062      	str	r2, [r4, #4]
   8661e:	f8ce c004 	str.w	ip, [lr, #4]
   86622:	f8ce c008 	str.w	ip, [lr, #8]
   86626:	f200 8116 	bhi.w	86856 <_malloc_r+0x4ea>
   8662a:	4b1d      	ldr	r3, [pc, #116]	; (866a0 <_malloc_r+0x334>)
   8662c:	68bc      	ldr	r4, [r7, #8]
   8662e:	681a      	ldr	r2, [r3, #0]
   86630:	4291      	cmp	r1, r2
   86632:	bf88      	it	hi
   86634:	6019      	strhi	r1, [r3, #0]
   86636:	4b1b      	ldr	r3, [pc, #108]	; (866a4 <_malloc_r+0x338>)
   86638:	681a      	ldr	r2, [r3, #0]
   8663a:	4291      	cmp	r1, r2
   8663c:	6862      	ldr	r2, [r4, #4]
   8663e:	bf88      	it	hi
   86640:	6019      	strhi	r1, [r3, #0]
   86642:	f022 0203 	bic.w	r2, r2, #3
   86646:	4296      	cmp	r6, r2
   86648:	eba2 0306 	sub.w	r3, r2, r6
   8664c:	d801      	bhi.n	86652 <_malloc_r+0x2e6>
   8664e:	2b0f      	cmp	r3, #15
   86650:	dc04      	bgt.n	8665c <_malloc_r+0x2f0>
   86652:	4628      	mov	r0, r5
   86654:	f000 f978 	bl	86948 <__malloc_unlock>
   86658:	2400      	movs	r4, #0
   8665a:	e74d      	b.n	864f8 <_malloc_r+0x18c>
   8665c:	f046 0201 	orr.w	r2, r6, #1
   86660:	f043 0301 	orr.w	r3, r3, #1
   86664:	4426      	add	r6, r4
   86666:	6062      	str	r2, [r4, #4]
   86668:	4628      	mov	r0, r5
   8666a:	60be      	str	r6, [r7, #8]
   8666c:	3408      	adds	r4, #8
   8666e:	6073      	str	r3, [r6, #4]
   86670:	f000 f96a 	bl	86948 <__malloc_unlock>
   86674:	4620      	mov	r0, r4
   86676:	b003      	add	sp, #12
   86678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8667c:	2b14      	cmp	r3, #20
   8667e:	d970      	bls.n	86762 <_malloc_r+0x3f6>
   86680:	2b54      	cmp	r3, #84	; 0x54
   86682:	f200 80a2 	bhi.w	867ca <_malloc_r+0x45e>
   86686:	0b33      	lsrs	r3, r6, #12
   86688:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8668c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   86690:	00c1      	lsls	r1, r0, #3
   86692:	e68d      	b.n	863b0 <_malloc_r+0x44>
   86694:	200705ec 	.word	0x200705ec
   86698:	20071454 	.word	0x20071454
   8669c:	20071424 	.word	0x20071424
   866a0:	2007144c 	.word	0x2007144c
   866a4:	20071450 	.word	0x20071450
   866a8:	200705f4 	.word	0x200705f4
   866ac:	200709f4 	.word	0x200709f4
   866b0:	0a5a      	lsrs	r2, r3, #9
   866b2:	2a04      	cmp	r2, #4
   866b4:	d95b      	bls.n	8676e <_malloc_r+0x402>
   866b6:	2a14      	cmp	r2, #20
   866b8:	f200 80ae 	bhi.w	86818 <_malloc_r+0x4ac>
   866bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   866c0:	00c9      	lsls	r1, r1, #3
   866c2:	325b      	adds	r2, #91	; 0x5b
   866c4:	eb07 0c01 	add.w	ip, r7, r1
   866c8:	5879      	ldr	r1, [r7, r1]
   866ca:	f1ac 0c08 	sub.w	ip, ip, #8
   866ce:	458c      	cmp	ip, r1
   866d0:	f000 8088 	beq.w	867e4 <_malloc_r+0x478>
   866d4:	684a      	ldr	r2, [r1, #4]
   866d6:	f022 0203 	bic.w	r2, r2, #3
   866da:	4293      	cmp	r3, r2
   866dc:	d273      	bcs.n	867c6 <_malloc_r+0x45a>
   866de:	6889      	ldr	r1, [r1, #8]
   866e0:	458c      	cmp	ip, r1
   866e2:	d1f7      	bne.n	866d4 <_malloc_r+0x368>
   866e4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   866e8:	687a      	ldr	r2, [r7, #4]
   866ea:	60e3      	str	r3, [r4, #12]
   866ec:	f8c4 c008 	str.w	ip, [r4, #8]
   866f0:	609c      	str	r4, [r3, #8]
   866f2:	f8cc 400c 	str.w	r4, [ip, #12]
   866f6:	e69e      	b.n	86436 <_malloc_r+0xca>
   866f8:	f046 0c01 	orr.w	ip, r6, #1
   866fc:	f042 0101 	orr.w	r1, r2, #1
   86700:	4426      	add	r6, r4
   86702:	f8c4 c004 	str.w	ip, [r4, #4]
   86706:	4628      	mov	r0, r5
   86708:	617e      	str	r6, [r7, #20]
   8670a:	613e      	str	r6, [r7, #16]
   8670c:	f8c6 e00c 	str.w	lr, [r6, #12]
   86710:	f8c6 e008 	str.w	lr, [r6, #8]
   86714:	6071      	str	r1, [r6, #4]
   86716:	50e2      	str	r2, [r4, r3]
   86718:	f000 f916 	bl	86948 <__malloc_unlock>
   8671c:	3408      	adds	r4, #8
   8671e:	e6eb      	b.n	864f8 <_malloc_r+0x18c>
   86720:	687a      	ldr	r2, [r7, #4]
   86722:	e688      	b.n	86436 <_malloc_r+0xca>
   86724:	f108 0801 	add.w	r8, r8, #1
   86728:	f018 0f03 	tst.w	r8, #3
   8672c:	f10c 0c08 	add.w	ip, ip, #8
   86730:	f47f ae93 	bne.w	8645a <_malloc_r+0xee>
   86734:	e02d      	b.n	86792 <_malloc_r+0x426>
   86736:	68dc      	ldr	r4, [r3, #12]
   86738:	42a3      	cmp	r3, r4
   8673a:	bf08      	it	eq
   8673c:	3002      	addeq	r0, #2
   8673e:	f43f ae4b 	beq.w	863d8 <_malloc_r+0x6c>
   86742:	e6c9      	b.n	864d8 <_malloc_r+0x16c>
   86744:	461c      	mov	r4, r3
   86746:	4419      	add	r1, r3
   86748:	684a      	ldr	r2, [r1, #4]
   8674a:	68db      	ldr	r3, [r3, #12]
   8674c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   86750:	f042 0201 	orr.w	r2, r2, #1
   86754:	604a      	str	r2, [r1, #4]
   86756:	4628      	mov	r0, r5
   86758:	60f3      	str	r3, [r6, #12]
   8675a:	609e      	str	r6, [r3, #8]
   8675c:	f000 f8f4 	bl	86948 <__malloc_unlock>
   86760:	e6ca      	b.n	864f8 <_malloc_r+0x18c>
   86762:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   86766:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8676a:	00c1      	lsls	r1, r0, #3
   8676c:	e620      	b.n	863b0 <_malloc_r+0x44>
   8676e:	099a      	lsrs	r2, r3, #6
   86770:	f102 0139 	add.w	r1, r2, #57	; 0x39
   86774:	00c9      	lsls	r1, r1, #3
   86776:	3238      	adds	r2, #56	; 0x38
   86778:	e7a4      	b.n	866c4 <_malloc_r+0x358>
   8677a:	42bc      	cmp	r4, r7
   8677c:	d054      	beq.n	86828 <_malloc_r+0x4bc>
   8677e:	68bc      	ldr	r4, [r7, #8]
   86780:	6862      	ldr	r2, [r4, #4]
   86782:	f022 0203 	bic.w	r2, r2, #3
   86786:	e75e      	b.n	86646 <_malloc_r+0x2da>
   86788:	f859 3908 	ldr.w	r3, [r9], #-8
   8678c:	4599      	cmp	r9, r3
   8678e:	f040 8086 	bne.w	8689e <_malloc_r+0x532>
   86792:	f010 0f03 	tst.w	r0, #3
   86796:	f100 30ff 	add.w	r0, r0, #4294967295
   8679a:	d1f5      	bne.n	86788 <_malloc_r+0x41c>
   8679c:	687b      	ldr	r3, [r7, #4]
   8679e:	ea23 0304 	bic.w	r3, r3, r4
   867a2:	607b      	str	r3, [r7, #4]
   867a4:	0064      	lsls	r4, r4, #1
   867a6:	429c      	cmp	r4, r3
   867a8:	f63f aec8 	bhi.w	8653c <_malloc_r+0x1d0>
   867ac:	2c00      	cmp	r4, #0
   867ae:	f43f aec5 	beq.w	8653c <_malloc_r+0x1d0>
   867b2:	421c      	tst	r4, r3
   867b4:	4640      	mov	r0, r8
   867b6:	f47f ae4c 	bne.w	86452 <_malloc_r+0xe6>
   867ba:	0064      	lsls	r4, r4, #1
   867bc:	421c      	tst	r4, r3
   867be:	f100 0004 	add.w	r0, r0, #4
   867c2:	d0fa      	beq.n	867ba <_malloc_r+0x44e>
   867c4:	e645      	b.n	86452 <_malloc_r+0xe6>
   867c6:	468c      	mov	ip, r1
   867c8:	e78c      	b.n	866e4 <_malloc_r+0x378>
   867ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   867ce:	d815      	bhi.n	867fc <_malloc_r+0x490>
   867d0:	0bf3      	lsrs	r3, r6, #15
   867d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   867d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   867da:	00c1      	lsls	r1, r0, #3
   867dc:	e5e8      	b.n	863b0 <_malloc_r+0x44>
   867de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   867e2:	e6ee      	b.n	865c2 <_malloc_r+0x256>
   867e4:	2101      	movs	r1, #1
   867e6:	687b      	ldr	r3, [r7, #4]
   867e8:	1092      	asrs	r2, r2, #2
   867ea:	fa01 f202 	lsl.w	r2, r1, r2
   867ee:	431a      	orrs	r2, r3
   867f0:	607a      	str	r2, [r7, #4]
   867f2:	4663      	mov	r3, ip
   867f4:	e779      	b.n	866ea <_malloc_r+0x37e>
   867f6:	2301      	movs	r3, #1
   867f8:	6053      	str	r3, [r2, #4]
   867fa:	e72a      	b.n	86652 <_malloc_r+0x2e6>
   867fc:	f240 5254 	movw	r2, #1364	; 0x554
   86800:	4293      	cmp	r3, r2
   86802:	d822      	bhi.n	8684a <_malloc_r+0x4de>
   86804:	0cb3      	lsrs	r3, r6, #18
   86806:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8680a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8680e:	00c1      	lsls	r1, r0, #3
   86810:	e5ce      	b.n	863b0 <_malloc_r+0x44>
   86812:	f103 0b10 	add.w	fp, r3, #16
   86816:	e6af      	b.n	86578 <_malloc_r+0x20c>
   86818:	2a54      	cmp	r2, #84	; 0x54
   8681a:	d829      	bhi.n	86870 <_malloc_r+0x504>
   8681c:	0b1a      	lsrs	r2, r3, #12
   8681e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   86822:	00c9      	lsls	r1, r1, #3
   86824:	326e      	adds	r2, #110	; 0x6e
   86826:	e74d      	b.n	866c4 <_malloc_r+0x358>
   86828:	4b20      	ldr	r3, [pc, #128]	; (868ac <_malloc_r+0x540>)
   8682a:	6819      	ldr	r1, [r3, #0]
   8682c:	4459      	add	r1, fp
   8682e:	6019      	str	r1, [r3, #0]
   86830:	e6b3      	b.n	8659a <_malloc_r+0x22e>
   86832:	f3ca 000b 	ubfx	r0, sl, #0, #12
   86836:	2800      	cmp	r0, #0
   86838:	f47f aeaf 	bne.w	8659a <_malloc_r+0x22e>
   8683c:	eb08 030b 	add.w	r3, r8, fp
   86840:	68ba      	ldr	r2, [r7, #8]
   86842:	f043 0301 	orr.w	r3, r3, #1
   86846:	6053      	str	r3, [r2, #4]
   86848:	e6ef      	b.n	8662a <_malloc_r+0x2be>
   8684a:	207f      	movs	r0, #127	; 0x7f
   8684c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   86850:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   86854:	e5ac      	b.n	863b0 <_malloc_r+0x44>
   86856:	f104 0108 	add.w	r1, r4, #8
   8685a:	4628      	mov	r0, r5
   8685c:	9300      	str	r3, [sp, #0]
   8685e:	f7ff fc2b 	bl	860b8 <_free_r>
   86862:	9b00      	ldr	r3, [sp, #0]
   86864:	6819      	ldr	r1, [r3, #0]
   86866:	e6e0      	b.n	8662a <_malloc_r+0x2be>
   86868:	2001      	movs	r0, #1
   8686a:	f04f 0900 	mov.w	r9, #0
   8686e:	e6bd      	b.n	865ec <_malloc_r+0x280>
   86870:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86874:	d805      	bhi.n	86882 <_malloc_r+0x516>
   86876:	0bda      	lsrs	r2, r3, #15
   86878:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8687c:	00c9      	lsls	r1, r1, #3
   8687e:	3277      	adds	r2, #119	; 0x77
   86880:	e720      	b.n	866c4 <_malloc_r+0x358>
   86882:	f240 5154 	movw	r1, #1364	; 0x554
   86886:	428a      	cmp	r2, r1
   86888:	d805      	bhi.n	86896 <_malloc_r+0x52a>
   8688a:	0c9a      	lsrs	r2, r3, #18
   8688c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86890:	00c9      	lsls	r1, r1, #3
   86892:	327c      	adds	r2, #124	; 0x7c
   86894:	e716      	b.n	866c4 <_malloc_r+0x358>
   86896:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8689a:	227e      	movs	r2, #126	; 0x7e
   8689c:	e712      	b.n	866c4 <_malloc_r+0x358>
   8689e:	687b      	ldr	r3, [r7, #4]
   868a0:	e780      	b.n	867a4 <_malloc_r+0x438>
   868a2:	08f0      	lsrs	r0, r6, #3
   868a4:	f106 0308 	add.w	r3, r6, #8
   868a8:	e60e      	b.n	864c8 <_malloc_r+0x15c>
   868aa:	bf00      	nop
   868ac:	20071424 	.word	0x20071424

000868b0 <memchr>:
   868b0:	0783      	lsls	r3, r0, #30
   868b2:	b470      	push	{r4, r5, r6}
   868b4:	b2cd      	uxtb	r5, r1
   868b6:	d03d      	beq.n	86934 <memchr+0x84>
   868b8:	1e54      	subs	r4, r2, #1
   868ba:	b30a      	cbz	r2, 86900 <memchr+0x50>
   868bc:	7803      	ldrb	r3, [r0, #0]
   868be:	42ab      	cmp	r3, r5
   868c0:	d01f      	beq.n	86902 <memchr+0x52>
   868c2:	1c43      	adds	r3, r0, #1
   868c4:	e005      	b.n	868d2 <memchr+0x22>
   868c6:	f114 34ff 	adds.w	r4, r4, #4294967295
   868ca:	d319      	bcc.n	86900 <memchr+0x50>
   868cc:	7802      	ldrb	r2, [r0, #0]
   868ce:	42aa      	cmp	r2, r5
   868d0:	d017      	beq.n	86902 <memchr+0x52>
   868d2:	f013 0f03 	tst.w	r3, #3
   868d6:	4618      	mov	r0, r3
   868d8:	f103 0301 	add.w	r3, r3, #1
   868dc:	d1f3      	bne.n	868c6 <memchr+0x16>
   868de:	2c03      	cmp	r4, #3
   868e0:	d811      	bhi.n	86906 <memchr+0x56>
   868e2:	b34c      	cbz	r4, 86938 <memchr+0x88>
   868e4:	7803      	ldrb	r3, [r0, #0]
   868e6:	42ab      	cmp	r3, r5
   868e8:	d00b      	beq.n	86902 <memchr+0x52>
   868ea:	4404      	add	r4, r0
   868ec:	1c43      	adds	r3, r0, #1
   868ee:	e002      	b.n	868f6 <memchr+0x46>
   868f0:	7802      	ldrb	r2, [r0, #0]
   868f2:	42aa      	cmp	r2, r5
   868f4:	d005      	beq.n	86902 <memchr+0x52>
   868f6:	429c      	cmp	r4, r3
   868f8:	4618      	mov	r0, r3
   868fa:	f103 0301 	add.w	r3, r3, #1
   868fe:	d1f7      	bne.n	868f0 <memchr+0x40>
   86900:	2000      	movs	r0, #0
   86902:	bc70      	pop	{r4, r5, r6}
   86904:	4770      	bx	lr
   86906:	0209      	lsls	r1, r1, #8
   86908:	b289      	uxth	r1, r1
   8690a:	4329      	orrs	r1, r5
   8690c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   86910:	6803      	ldr	r3, [r0, #0]
   86912:	4606      	mov	r6, r0
   86914:	404b      	eors	r3, r1
   86916:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8691a:	ea22 0303 	bic.w	r3, r2, r3
   8691e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   86922:	f100 0004 	add.w	r0, r0, #4
   86926:	d103      	bne.n	86930 <memchr+0x80>
   86928:	3c04      	subs	r4, #4
   8692a:	2c03      	cmp	r4, #3
   8692c:	d8f0      	bhi.n	86910 <memchr+0x60>
   8692e:	e7d8      	b.n	868e2 <memchr+0x32>
   86930:	4630      	mov	r0, r6
   86932:	e7d7      	b.n	868e4 <memchr+0x34>
   86934:	4614      	mov	r4, r2
   86936:	e7d2      	b.n	868de <memchr+0x2e>
   86938:	4620      	mov	r0, r4
   8693a:	e7e2      	b.n	86902 <memchr+0x52>

0008693c <__malloc_lock>:
   8693c:	4801      	ldr	r0, [pc, #4]	; (86944 <__malloc_lock+0x8>)
   8693e:	f7ff bcdb 	b.w	862f8 <__retarget_lock_acquire_recursive>
   86942:	bf00      	nop
   86944:	20071480 	.word	0x20071480

00086948 <__malloc_unlock>:
   86948:	4801      	ldr	r0, [pc, #4]	; (86950 <__malloc_unlock+0x8>)
   8694a:	f7ff bcd7 	b.w	862fc <__retarget_lock_release_recursive>
   8694e:	bf00      	nop
   86950:	20071480 	.word	0x20071480

00086954 <_Balloc>:
   86954:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86956:	b570      	push	{r4, r5, r6, lr}
   86958:	4605      	mov	r5, r0
   8695a:	460c      	mov	r4, r1
   8695c:	b14b      	cbz	r3, 86972 <_Balloc+0x1e>
   8695e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   86962:	b180      	cbz	r0, 86986 <_Balloc+0x32>
   86964:	6802      	ldr	r2, [r0, #0]
   86966:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8696a:	2300      	movs	r3, #0
   8696c:	6103      	str	r3, [r0, #16]
   8696e:	60c3      	str	r3, [r0, #12]
   86970:	bd70      	pop	{r4, r5, r6, pc}
   86972:	2221      	movs	r2, #33	; 0x21
   86974:	2104      	movs	r1, #4
   86976:	f000 fc35 	bl	871e4 <_calloc_r>
   8697a:	64e8      	str	r0, [r5, #76]	; 0x4c
   8697c:	4603      	mov	r3, r0
   8697e:	2800      	cmp	r0, #0
   86980:	d1ed      	bne.n	8695e <_Balloc+0xa>
   86982:	2000      	movs	r0, #0
   86984:	bd70      	pop	{r4, r5, r6, pc}
   86986:	2101      	movs	r1, #1
   86988:	fa01 f604 	lsl.w	r6, r1, r4
   8698c:	1d72      	adds	r2, r6, #5
   8698e:	4628      	mov	r0, r5
   86990:	0092      	lsls	r2, r2, #2
   86992:	f000 fc27 	bl	871e4 <_calloc_r>
   86996:	2800      	cmp	r0, #0
   86998:	d0f3      	beq.n	86982 <_Balloc+0x2e>
   8699a:	6044      	str	r4, [r0, #4]
   8699c:	6086      	str	r6, [r0, #8]
   8699e:	e7e4      	b.n	8696a <_Balloc+0x16>

000869a0 <_Bfree>:
   869a0:	b131      	cbz	r1, 869b0 <_Bfree+0x10>
   869a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   869a4:	684a      	ldr	r2, [r1, #4]
   869a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   869aa:	6008      	str	r0, [r1, #0]
   869ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   869b0:	4770      	bx	lr
   869b2:	bf00      	nop

000869b4 <__multadd>:
   869b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   869b6:	460c      	mov	r4, r1
   869b8:	4605      	mov	r5, r0
   869ba:	f04f 0e00 	mov.w	lr, #0
   869be:	690e      	ldr	r6, [r1, #16]
   869c0:	b083      	sub	sp, #12
   869c2:	f101 0714 	add.w	r7, r1, #20
   869c6:	6838      	ldr	r0, [r7, #0]
   869c8:	f10e 0e01 	add.w	lr, lr, #1
   869cc:	b281      	uxth	r1, r0
   869ce:	fb02 3301 	mla	r3, r2, r1, r3
   869d2:	0c01      	lsrs	r1, r0, #16
   869d4:	0c18      	lsrs	r0, r3, #16
   869d6:	fb02 0101 	mla	r1, r2, r1, r0
   869da:	b29b      	uxth	r3, r3
   869dc:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   869e0:	4576      	cmp	r6, lr
   869e2:	f847 3b04 	str.w	r3, [r7], #4
   869e6:	ea4f 4311 	mov.w	r3, r1, lsr #16
   869ea:	dcec      	bgt.n	869c6 <__multadd+0x12>
   869ec:	b13b      	cbz	r3, 869fe <__multadd+0x4a>
   869ee:	68a2      	ldr	r2, [r4, #8]
   869f0:	4296      	cmp	r6, r2
   869f2:	da07      	bge.n	86a04 <__multadd+0x50>
   869f4:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   869f8:	3601      	adds	r6, #1
   869fa:	6153      	str	r3, [r2, #20]
   869fc:	6126      	str	r6, [r4, #16]
   869fe:	4620      	mov	r0, r4
   86a00:	b003      	add	sp, #12
   86a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a04:	6861      	ldr	r1, [r4, #4]
   86a06:	4628      	mov	r0, r5
   86a08:	3101      	adds	r1, #1
   86a0a:	9301      	str	r3, [sp, #4]
   86a0c:	f7ff ffa2 	bl	86954 <_Balloc>
   86a10:	4607      	mov	r7, r0
   86a12:	6922      	ldr	r2, [r4, #16]
   86a14:	f104 010c 	add.w	r1, r4, #12
   86a18:	3202      	adds	r2, #2
   86a1a:	0092      	lsls	r2, r2, #2
   86a1c:	300c      	adds	r0, #12
   86a1e:	f7fc fd5f 	bl	834e0 <memcpy>
   86a22:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   86a24:	6861      	ldr	r1, [r4, #4]
   86a26:	9b01      	ldr	r3, [sp, #4]
   86a28:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86a2c:	6020      	str	r0, [r4, #0]
   86a2e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   86a32:	463c      	mov	r4, r7
   86a34:	e7de      	b.n	869f4 <__multadd+0x40>
   86a36:	bf00      	nop

00086a38 <__hi0bits>:
   86a38:	0c02      	lsrs	r2, r0, #16
   86a3a:	0412      	lsls	r2, r2, #16
   86a3c:	4603      	mov	r3, r0
   86a3e:	b9b2      	cbnz	r2, 86a6e <__hi0bits+0x36>
   86a40:	0403      	lsls	r3, r0, #16
   86a42:	2010      	movs	r0, #16
   86a44:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   86a48:	bf04      	itt	eq
   86a4a:	021b      	lsleq	r3, r3, #8
   86a4c:	3008      	addeq	r0, #8
   86a4e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   86a52:	bf04      	itt	eq
   86a54:	011b      	lsleq	r3, r3, #4
   86a56:	3004      	addeq	r0, #4
   86a58:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   86a5c:	bf04      	itt	eq
   86a5e:	009b      	lsleq	r3, r3, #2
   86a60:	3002      	addeq	r0, #2
   86a62:	2b00      	cmp	r3, #0
   86a64:	db02      	blt.n	86a6c <__hi0bits+0x34>
   86a66:	005b      	lsls	r3, r3, #1
   86a68:	d403      	bmi.n	86a72 <__hi0bits+0x3a>
   86a6a:	2020      	movs	r0, #32
   86a6c:	4770      	bx	lr
   86a6e:	2000      	movs	r0, #0
   86a70:	e7e8      	b.n	86a44 <__hi0bits+0xc>
   86a72:	3001      	adds	r0, #1
   86a74:	4770      	bx	lr
   86a76:	bf00      	nop

00086a78 <__lo0bits>:
   86a78:	6803      	ldr	r3, [r0, #0]
   86a7a:	4601      	mov	r1, r0
   86a7c:	f013 0207 	ands.w	r2, r3, #7
   86a80:	d007      	beq.n	86a92 <__lo0bits+0x1a>
   86a82:	07da      	lsls	r2, r3, #31
   86a84:	d421      	bmi.n	86aca <__lo0bits+0x52>
   86a86:	0798      	lsls	r0, r3, #30
   86a88:	d421      	bmi.n	86ace <__lo0bits+0x56>
   86a8a:	089b      	lsrs	r3, r3, #2
   86a8c:	600b      	str	r3, [r1, #0]
   86a8e:	2002      	movs	r0, #2
   86a90:	4770      	bx	lr
   86a92:	b298      	uxth	r0, r3
   86a94:	b198      	cbz	r0, 86abe <__lo0bits+0x46>
   86a96:	4610      	mov	r0, r2
   86a98:	f013 0fff 	tst.w	r3, #255	; 0xff
   86a9c:	bf04      	itt	eq
   86a9e:	0a1b      	lsreq	r3, r3, #8
   86aa0:	3008      	addeq	r0, #8
   86aa2:	071a      	lsls	r2, r3, #28
   86aa4:	bf04      	itt	eq
   86aa6:	091b      	lsreq	r3, r3, #4
   86aa8:	3004      	addeq	r0, #4
   86aaa:	079a      	lsls	r2, r3, #30
   86aac:	bf04      	itt	eq
   86aae:	089b      	lsreq	r3, r3, #2
   86ab0:	3002      	addeq	r0, #2
   86ab2:	07da      	lsls	r2, r3, #31
   86ab4:	d407      	bmi.n	86ac6 <__lo0bits+0x4e>
   86ab6:	085b      	lsrs	r3, r3, #1
   86ab8:	d104      	bne.n	86ac4 <__lo0bits+0x4c>
   86aba:	2020      	movs	r0, #32
   86abc:	4770      	bx	lr
   86abe:	0c1b      	lsrs	r3, r3, #16
   86ac0:	2010      	movs	r0, #16
   86ac2:	e7e9      	b.n	86a98 <__lo0bits+0x20>
   86ac4:	3001      	adds	r0, #1
   86ac6:	600b      	str	r3, [r1, #0]
   86ac8:	4770      	bx	lr
   86aca:	2000      	movs	r0, #0
   86acc:	4770      	bx	lr
   86ace:	085b      	lsrs	r3, r3, #1
   86ad0:	600b      	str	r3, [r1, #0]
   86ad2:	2001      	movs	r0, #1
   86ad4:	4770      	bx	lr
   86ad6:	bf00      	nop

00086ad8 <__i2b>:
   86ad8:	b510      	push	{r4, lr}
   86ada:	460c      	mov	r4, r1
   86adc:	2101      	movs	r1, #1
   86ade:	f7ff ff39 	bl	86954 <_Balloc>
   86ae2:	2201      	movs	r2, #1
   86ae4:	6144      	str	r4, [r0, #20]
   86ae6:	6102      	str	r2, [r0, #16]
   86ae8:	bd10      	pop	{r4, pc}
   86aea:	bf00      	nop

00086aec <__multiply>:
   86aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86af0:	690c      	ldr	r4, [r1, #16]
   86af2:	6915      	ldr	r5, [r2, #16]
   86af4:	b083      	sub	sp, #12
   86af6:	42ac      	cmp	r4, r5
   86af8:	468b      	mov	fp, r1
   86afa:	4616      	mov	r6, r2
   86afc:	da04      	bge.n	86b08 <__multiply+0x1c>
   86afe:	4622      	mov	r2, r4
   86b00:	46b3      	mov	fp, r6
   86b02:	462c      	mov	r4, r5
   86b04:	460e      	mov	r6, r1
   86b06:	4615      	mov	r5, r2
   86b08:	f8db 3008 	ldr.w	r3, [fp, #8]
   86b0c:	eb04 0805 	add.w	r8, r4, r5
   86b10:	f8db 1004 	ldr.w	r1, [fp, #4]
   86b14:	4598      	cmp	r8, r3
   86b16:	bfc8      	it	gt
   86b18:	3101      	addgt	r1, #1
   86b1a:	f7ff ff1b 	bl	86954 <_Balloc>
   86b1e:	f100 0914 	add.w	r9, r0, #20
   86b22:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   86b26:	45d1      	cmp	r9, sl
   86b28:	9000      	str	r0, [sp, #0]
   86b2a:	d205      	bcs.n	86b38 <__multiply+0x4c>
   86b2c:	464b      	mov	r3, r9
   86b2e:	2100      	movs	r1, #0
   86b30:	f843 1b04 	str.w	r1, [r3], #4
   86b34:	459a      	cmp	sl, r3
   86b36:	d8fb      	bhi.n	86b30 <__multiply+0x44>
   86b38:	f106 0c14 	add.w	ip, r6, #20
   86b3c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   86b40:	f10b 0b14 	add.w	fp, fp, #20
   86b44:	459c      	cmp	ip, r3
   86b46:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   86b4a:	d24b      	bcs.n	86be4 <__multiply+0xf8>
   86b4c:	f8cd a004 	str.w	sl, [sp, #4]
   86b50:	469a      	mov	sl, r3
   86b52:	f8dc 5000 	ldr.w	r5, [ip]
   86b56:	b2af      	uxth	r7, r5
   86b58:	b1e7      	cbz	r7, 86b94 <__multiply+0xa8>
   86b5a:	464d      	mov	r5, r9
   86b5c:	465e      	mov	r6, fp
   86b5e:	2100      	movs	r1, #0
   86b60:	f856 2b04 	ldr.w	r2, [r6], #4
   86b64:	6828      	ldr	r0, [r5, #0]
   86b66:	b293      	uxth	r3, r2
   86b68:	b284      	uxth	r4, r0
   86b6a:	0c12      	lsrs	r2, r2, #16
   86b6c:	fb07 4303 	mla	r3, r7, r3, r4
   86b70:	0c00      	lsrs	r0, r0, #16
   86b72:	fb07 0202 	mla	r2, r7, r2, r0
   86b76:	440b      	add	r3, r1
   86b78:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   86b7c:	b29b      	uxth	r3, r3
   86b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   86b82:	45b6      	cmp	lr, r6
   86b84:	f845 3b04 	str.w	r3, [r5], #4
   86b88:	ea4f 4111 	mov.w	r1, r1, lsr #16
   86b8c:	d8e8      	bhi.n	86b60 <__multiply+0x74>
   86b8e:	6029      	str	r1, [r5, #0]
   86b90:	f8dc 5000 	ldr.w	r5, [ip]
   86b94:	0c2d      	lsrs	r5, r5, #16
   86b96:	d01d      	beq.n	86bd4 <__multiply+0xe8>
   86b98:	f8d9 3000 	ldr.w	r3, [r9]
   86b9c:	4648      	mov	r0, r9
   86b9e:	461c      	mov	r4, r3
   86ba0:	4659      	mov	r1, fp
   86ba2:	2200      	movs	r2, #0
   86ba4:	880e      	ldrh	r6, [r1, #0]
   86ba6:	0c24      	lsrs	r4, r4, #16
   86ba8:	fb05 4406 	mla	r4, r5, r6, r4
   86bac:	b29b      	uxth	r3, r3
   86bae:	4422      	add	r2, r4
   86bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86bb4:	f840 3b04 	str.w	r3, [r0], #4
   86bb8:	f851 3b04 	ldr.w	r3, [r1], #4
   86bbc:	6804      	ldr	r4, [r0, #0]
   86bbe:	0c1b      	lsrs	r3, r3, #16
   86bc0:	b2a6      	uxth	r6, r4
   86bc2:	fb05 6303 	mla	r3, r5, r3, r6
   86bc6:	458e      	cmp	lr, r1
   86bc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   86bcc:	ea4f 4213 	mov.w	r2, r3, lsr #16
   86bd0:	d8e8      	bhi.n	86ba4 <__multiply+0xb8>
   86bd2:	6003      	str	r3, [r0, #0]
   86bd4:	f10c 0c04 	add.w	ip, ip, #4
   86bd8:	45e2      	cmp	sl, ip
   86bda:	f109 0904 	add.w	r9, r9, #4
   86bde:	d8b8      	bhi.n	86b52 <__multiply+0x66>
   86be0:	f8dd a004 	ldr.w	sl, [sp, #4]
   86be4:	f1b8 0f00 	cmp.w	r8, #0
   86be8:	dd0b      	ble.n	86c02 <__multiply+0x116>
   86bea:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   86bee:	f1aa 0a04 	sub.w	sl, sl, #4
   86bf2:	b11b      	cbz	r3, 86bfc <__multiply+0x110>
   86bf4:	e005      	b.n	86c02 <__multiply+0x116>
   86bf6:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   86bfa:	b913      	cbnz	r3, 86c02 <__multiply+0x116>
   86bfc:	f1b8 0801 	subs.w	r8, r8, #1
   86c00:	d1f9      	bne.n	86bf6 <__multiply+0x10a>
   86c02:	9800      	ldr	r0, [sp, #0]
   86c04:	f8c0 8010 	str.w	r8, [r0, #16]
   86c08:	b003      	add	sp, #12
   86c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c0e:	bf00      	nop

00086c10 <__pow5mult>:
   86c10:	f012 0303 	ands.w	r3, r2, #3
   86c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86c18:	4614      	mov	r4, r2
   86c1a:	4607      	mov	r7, r0
   86c1c:	d12e      	bne.n	86c7c <__pow5mult+0x6c>
   86c1e:	460d      	mov	r5, r1
   86c20:	10a4      	asrs	r4, r4, #2
   86c22:	d01c      	beq.n	86c5e <__pow5mult+0x4e>
   86c24:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   86c26:	b396      	cbz	r6, 86c8e <__pow5mult+0x7e>
   86c28:	07e3      	lsls	r3, r4, #31
   86c2a:	f04f 0800 	mov.w	r8, #0
   86c2e:	d406      	bmi.n	86c3e <__pow5mult+0x2e>
   86c30:	1064      	asrs	r4, r4, #1
   86c32:	d014      	beq.n	86c5e <__pow5mult+0x4e>
   86c34:	6830      	ldr	r0, [r6, #0]
   86c36:	b1a8      	cbz	r0, 86c64 <__pow5mult+0x54>
   86c38:	4606      	mov	r6, r0
   86c3a:	07e3      	lsls	r3, r4, #31
   86c3c:	d5f8      	bpl.n	86c30 <__pow5mult+0x20>
   86c3e:	4632      	mov	r2, r6
   86c40:	4629      	mov	r1, r5
   86c42:	4638      	mov	r0, r7
   86c44:	f7ff ff52 	bl	86aec <__multiply>
   86c48:	b1b5      	cbz	r5, 86c78 <__pow5mult+0x68>
   86c4a:	686a      	ldr	r2, [r5, #4]
   86c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86c4e:	1064      	asrs	r4, r4, #1
   86c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86c54:	6029      	str	r1, [r5, #0]
   86c56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   86c5a:	4605      	mov	r5, r0
   86c5c:	d1ea      	bne.n	86c34 <__pow5mult+0x24>
   86c5e:	4628      	mov	r0, r5
   86c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86c64:	4632      	mov	r2, r6
   86c66:	4631      	mov	r1, r6
   86c68:	4638      	mov	r0, r7
   86c6a:	f7ff ff3f 	bl	86aec <__multiply>
   86c6e:	6030      	str	r0, [r6, #0]
   86c70:	f8c0 8000 	str.w	r8, [r0]
   86c74:	4606      	mov	r6, r0
   86c76:	e7e0      	b.n	86c3a <__pow5mult+0x2a>
   86c78:	4605      	mov	r5, r0
   86c7a:	e7d9      	b.n	86c30 <__pow5mult+0x20>
   86c7c:	4a0b      	ldr	r2, [pc, #44]	; (86cac <__pow5mult+0x9c>)
   86c7e:	3b01      	subs	r3, #1
   86c80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86c84:	2300      	movs	r3, #0
   86c86:	f7ff fe95 	bl	869b4 <__multadd>
   86c8a:	4605      	mov	r5, r0
   86c8c:	e7c8      	b.n	86c20 <__pow5mult+0x10>
   86c8e:	2101      	movs	r1, #1
   86c90:	4638      	mov	r0, r7
   86c92:	f7ff fe5f 	bl	86954 <_Balloc>
   86c96:	f240 2171 	movw	r1, #625	; 0x271
   86c9a:	2201      	movs	r2, #1
   86c9c:	2300      	movs	r3, #0
   86c9e:	6141      	str	r1, [r0, #20]
   86ca0:	6102      	str	r2, [r0, #16]
   86ca2:	4606      	mov	r6, r0
   86ca4:	64b8      	str	r0, [r7, #72]	; 0x48
   86ca6:	6003      	str	r3, [r0, #0]
   86ca8:	e7be      	b.n	86c28 <__pow5mult+0x18>
   86caa:	bf00      	nop
   86cac:	0008a178 	.word	0x0008a178

00086cb0 <__lshift>:
   86cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86cb4:	690b      	ldr	r3, [r1, #16]
   86cb6:	1154      	asrs	r4, r2, #5
   86cb8:	eb04 0803 	add.w	r8, r4, r3
   86cbc:	688b      	ldr	r3, [r1, #8]
   86cbe:	f108 0501 	add.w	r5, r8, #1
   86cc2:	429d      	cmp	r5, r3
   86cc4:	460e      	mov	r6, r1
   86cc6:	4691      	mov	r9, r2
   86cc8:	4607      	mov	r7, r0
   86cca:	6849      	ldr	r1, [r1, #4]
   86ccc:	dd04      	ble.n	86cd8 <__lshift+0x28>
   86cce:	005b      	lsls	r3, r3, #1
   86cd0:	429d      	cmp	r5, r3
   86cd2:	f101 0101 	add.w	r1, r1, #1
   86cd6:	dcfa      	bgt.n	86cce <__lshift+0x1e>
   86cd8:	4638      	mov	r0, r7
   86cda:	f7ff fe3b 	bl	86954 <_Balloc>
   86cde:	2c00      	cmp	r4, #0
   86ce0:	f100 0314 	add.w	r3, r0, #20
   86ce4:	dd06      	ble.n	86cf4 <__lshift+0x44>
   86ce6:	2100      	movs	r1, #0
   86ce8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   86cec:	f843 1b04 	str.w	r1, [r3], #4
   86cf0:	429a      	cmp	r2, r3
   86cf2:	d1fb      	bne.n	86cec <__lshift+0x3c>
   86cf4:	6934      	ldr	r4, [r6, #16]
   86cf6:	f106 0114 	add.w	r1, r6, #20
   86cfa:	f019 091f 	ands.w	r9, r9, #31
   86cfe:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   86d02:	d01d      	beq.n	86d40 <__lshift+0x90>
   86d04:	2200      	movs	r2, #0
   86d06:	f1c9 0c20 	rsb	ip, r9, #32
   86d0a:	680c      	ldr	r4, [r1, #0]
   86d0c:	fa04 f409 	lsl.w	r4, r4, r9
   86d10:	4314      	orrs	r4, r2
   86d12:	f843 4b04 	str.w	r4, [r3], #4
   86d16:	f851 2b04 	ldr.w	r2, [r1], #4
   86d1a:	458e      	cmp	lr, r1
   86d1c:	fa22 f20c 	lsr.w	r2, r2, ip
   86d20:	d8f3      	bhi.n	86d0a <__lshift+0x5a>
   86d22:	601a      	str	r2, [r3, #0]
   86d24:	b10a      	cbz	r2, 86d2a <__lshift+0x7a>
   86d26:	f108 0502 	add.w	r5, r8, #2
   86d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86d2c:	6872      	ldr	r2, [r6, #4]
   86d2e:	3d01      	subs	r5, #1
   86d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86d34:	6105      	str	r5, [r0, #16]
   86d36:	6031      	str	r1, [r6, #0]
   86d38:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86d40:	3b04      	subs	r3, #4
   86d42:	f851 2b04 	ldr.w	r2, [r1], #4
   86d46:	458e      	cmp	lr, r1
   86d48:	f843 2f04 	str.w	r2, [r3, #4]!
   86d4c:	d8f9      	bhi.n	86d42 <__lshift+0x92>
   86d4e:	e7ec      	b.n	86d2a <__lshift+0x7a>

00086d50 <__mcmp>:
   86d50:	b430      	push	{r4, r5}
   86d52:	690b      	ldr	r3, [r1, #16]
   86d54:	4605      	mov	r5, r0
   86d56:	6900      	ldr	r0, [r0, #16]
   86d58:	1ac0      	subs	r0, r0, r3
   86d5a:	d10f      	bne.n	86d7c <__mcmp+0x2c>
   86d5c:	009b      	lsls	r3, r3, #2
   86d5e:	3514      	adds	r5, #20
   86d60:	3114      	adds	r1, #20
   86d62:	4419      	add	r1, r3
   86d64:	442b      	add	r3, r5
   86d66:	e001      	b.n	86d6c <__mcmp+0x1c>
   86d68:	429d      	cmp	r5, r3
   86d6a:	d207      	bcs.n	86d7c <__mcmp+0x2c>
   86d6c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   86d70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86d74:	4294      	cmp	r4, r2
   86d76:	d0f7      	beq.n	86d68 <__mcmp+0x18>
   86d78:	d302      	bcc.n	86d80 <__mcmp+0x30>
   86d7a:	2001      	movs	r0, #1
   86d7c:	bc30      	pop	{r4, r5}
   86d7e:	4770      	bx	lr
   86d80:	f04f 30ff 	mov.w	r0, #4294967295
   86d84:	e7fa      	b.n	86d7c <__mcmp+0x2c>
   86d86:	bf00      	nop

00086d88 <__mdiff>:
   86d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86d8c:	690c      	ldr	r4, [r1, #16]
   86d8e:	4689      	mov	r9, r1
   86d90:	6911      	ldr	r1, [r2, #16]
   86d92:	4692      	mov	sl, r2
   86d94:	1a64      	subs	r4, r4, r1
   86d96:	2c00      	cmp	r4, #0
   86d98:	d117      	bne.n	86dca <__mdiff+0x42>
   86d9a:	0089      	lsls	r1, r1, #2
   86d9c:	f109 0714 	add.w	r7, r9, #20
   86da0:	f102 0614 	add.w	r6, r2, #20
   86da4:	187b      	adds	r3, r7, r1
   86da6:	4431      	add	r1, r6
   86da8:	e001      	b.n	86dae <__mdiff+0x26>
   86daa:	429f      	cmp	r7, r3
   86dac:	d265      	bcs.n	86e7a <__mdiff+0xf2>
   86dae:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   86db2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   86db6:	4295      	cmp	r5, r2
   86db8:	d0f7      	beq.n	86daa <__mdiff+0x22>
   86dba:	d267      	bcs.n	86e8c <__mdiff+0x104>
   86dbc:	464b      	mov	r3, r9
   86dbe:	46bb      	mov	fp, r7
   86dc0:	46d1      	mov	r9, sl
   86dc2:	4637      	mov	r7, r6
   86dc4:	469a      	mov	sl, r3
   86dc6:	2401      	movs	r4, #1
   86dc8:	e005      	b.n	86dd6 <__mdiff+0x4e>
   86dca:	db61      	blt.n	86e90 <__mdiff+0x108>
   86dcc:	2400      	movs	r4, #0
   86dce:	f109 0714 	add.w	r7, r9, #20
   86dd2:	f10a 0b14 	add.w	fp, sl, #20
   86dd6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   86dda:	f7ff fdbb 	bl	86954 <_Balloc>
   86dde:	465d      	mov	r5, fp
   86de0:	f04f 0800 	mov.w	r8, #0
   86de4:	f8d9 e010 	ldr.w	lr, [r9, #16]
   86de8:	f8da 3010 	ldr.w	r3, [sl, #16]
   86dec:	463e      	mov	r6, r7
   86dee:	60c4      	str	r4, [r0, #12]
   86df0:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   86df4:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   86df8:	f100 0414 	add.w	r4, r0, #20
   86dfc:	f856 9b04 	ldr.w	r9, [r6], #4
   86e00:	f855 2b04 	ldr.w	r2, [r5], #4
   86e04:	fa1f f389 	uxth.w	r3, r9
   86e08:	4443      	add	r3, r8
   86e0a:	fa1f f882 	uxth.w	r8, r2
   86e0e:	0c12      	lsrs	r2, r2, #16
   86e10:	eba3 0308 	sub.w	r3, r3, r8
   86e14:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   86e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
   86e1c:	b29b      	uxth	r3, r3
   86e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   86e22:	45ac      	cmp	ip, r5
   86e24:	f844 3b04 	str.w	r3, [r4], #4
   86e28:	ea4f 4822 	mov.w	r8, r2, asr #16
   86e2c:	d8e6      	bhi.n	86dfc <__mdiff+0x74>
   86e2e:	42b7      	cmp	r7, r6
   86e30:	d917      	bls.n	86e62 <__mdiff+0xda>
   86e32:	46a4      	mov	ip, r4
   86e34:	4635      	mov	r5, r6
   86e36:	f855 3b04 	ldr.w	r3, [r5], #4
   86e3a:	b299      	uxth	r1, r3
   86e3c:	4441      	add	r1, r8
   86e3e:	140a      	asrs	r2, r1, #16
   86e40:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   86e44:	b289      	uxth	r1, r1
   86e46:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   86e4a:	42af      	cmp	r7, r5
   86e4c:	f84c 3b04 	str.w	r3, [ip], #4
   86e50:	ea4f 4822 	mov.w	r8, r2, asr #16
   86e54:	d8ef      	bhi.n	86e36 <__mdiff+0xae>
   86e56:	43f6      	mvns	r6, r6
   86e58:	4437      	add	r7, r6
   86e5a:	f027 0703 	bic.w	r7, r7, #3
   86e5e:	3704      	adds	r7, #4
   86e60:	443c      	add	r4, r7
   86e62:	3c04      	subs	r4, #4
   86e64:	b92b      	cbnz	r3, 86e72 <__mdiff+0xea>
   86e66:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   86e6a:	f10e 3eff 	add.w	lr, lr, #4294967295
   86e6e:	2b00      	cmp	r3, #0
   86e70:	d0f9      	beq.n	86e66 <__mdiff+0xde>
   86e72:	f8c0 e010 	str.w	lr, [r0, #16]
   86e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e7a:	2100      	movs	r1, #0
   86e7c:	f7ff fd6a 	bl	86954 <_Balloc>
   86e80:	2201      	movs	r2, #1
   86e82:	2300      	movs	r3, #0
   86e84:	6102      	str	r2, [r0, #16]
   86e86:	6143      	str	r3, [r0, #20]
   86e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86e8c:	46b3      	mov	fp, r6
   86e8e:	e7a2      	b.n	86dd6 <__mdiff+0x4e>
   86e90:	464b      	mov	r3, r9
   86e92:	f109 0b14 	add.w	fp, r9, #20
   86e96:	f102 0714 	add.w	r7, r2, #20
   86e9a:	4691      	mov	r9, r2
   86e9c:	2401      	movs	r4, #1
   86e9e:	469a      	mov	sl, r3
   86ea0:	e799      	b.n	86dd6 <__mdiff+0x4e>
   86ea2:	bf00      	nop

00086ea4 <__d2b>:
   86ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   86ea6:	2101      	movs	r1, #1
   86ea8:	b083      	sub	sp, #12
   86eaa:	461c      	mov	r4, r3
   86eac:	f3c3 550a 	ubfx	r5, r3, #20, #11
   86eb0:	4616      	mov	r6, r2
   86eb2:	f7ff fd4f 	bl	86954 <_Balloc>
   86eb6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   86eba:	4607      	mov	r7, r0
   86ebc:	b10d      	cbz	r5, 86ec2 <__d2b+0x1e>
   86ebe:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   86ec2:	9401      	str	r4, [sp, #4]
   86ec4:	b306      	cbz	r6, 86f08 <__d2b+0x64>
   86ec6:	a802      	add	r0, sp, #8
   86ec8:	f840 6d08 	str.w	r6, [r0, #-8]!
   86ecc:	f7ff fdd4 	bl	86a78 <__lo0bits>
   86ed0:	2800      	cmp	r0, #0
   86ed2:	d130      	bne.n	86f36 <__d2b+0x92>
   86ed4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   86ed8:	617a      	str	r2, [r7, #20]
   86eda:	2b00      	cmp	r3, #0
   86edc:	bf0c      	ite	eq
   86ede:	2101      	moveq	r1, #1
   86ee0:	2102      	movne	r1, #2
   86ee2:	61bb      	str	r3, [r7, #24]
   86ee4:	6139      	str	r1, [r7, #16]
   86ee6:	b9d5      	cbnz	r5, 86f1e <__d2b+0x7a>
   86ee8:	9a08      	ldr	r2, [sp, #32]
   86eea:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   86eee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   86ef2:	6010      	str	r0, [r2, #0]
   86ef4:	6918      	ldr	r0, [r3, #16]
   86ef6:	f7ff fd9f 	bl	86a38 <__hi0bits>
   86efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86efc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   86f00:	6018      	str	r0, [r3, #0]
   86f02:	4638      	mov	r0, r7
   86f04:	b003      	add	sp, #12
   86f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86f08:	a801      	add	r0, sp, #4
   86f0a:	f7ff fdb5 	bl	86a78 <__lo0bits>
   86f0e:	2201      	movs	r2, #1
   86f10:	9b01      	ldr	r3, [sp, #4]
   86f12:	4611      	mov	r1, r2
   86f14:	3020      	adds	r0, #32
   86f16:	613a      	str	r2, [r7, #16]
   86f18:	617b      	str	r3, [r7, #20]
   86f1a:	2d00      	cmp	r5, #0
   86f1c:	d0e4      	beq.n	86ee8 <__d2b+0x44>
   86f1e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   86f22:	9a08      	ldr	r2, [sp, #32]
   86f24:	4403      	add	r3, r0
   86f26:	6013      	str	r3, [r2, #0]
   86f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86f2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   86f2e:	6018      	str	r0, [r3, #0]
   86f30:	4638      	mov	r0, r7
   86f32:	b003      	add	sp, #12
   86f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86f36:	9b01      	ldr	r3, [sp, #4]
   86f38:	f1c0 0220 	rsb	r2, r0, #32
   86f3c:	9900      	ldr	r1, [sp, #0]
   86f3e:	fa03 f202 	lsl.w	r2, r3, r2
   86f42:	430a      	orrs	r2, r1
   86f44:	40c3      	lsrs	r3, r0
   86f46:	9301      	str	r3, [sp, #4]
   86f48:	617a      	str	r2, [r7, #20]
   86f4a:	e7c6      	b.n	86eda <__d2b+0x36>

00086f4c <_sbrk_r>:
   86f4c:	b538      	push	{r3, r4, r5, lr}
   86f4e:	2300      	movs	r3, #0
   86f50:	4c06      	ldr	r4, [pc, #24]	; (86f6c <_sbrk_r+0x20>)
   86f52:	4605      	mov	r5, r0
   86f54:	4608      	mov	r0, r1
   86f56:	6023      	str	r3, [r4, #0]
   86f58:	f7fc f8fc 	bl	83154 <_sbrk>
   86f5c:	1c43      	adds	r3, r0, #1
   86f5e:	d000      	beq.n	86f62 <_sbrk_r+0x16>
   86f60:	bd38      	pop	{r3, r4, r5, pc}
   86f62:	6823      	ldr	r3, [r4, #0]
   86f64:	2b00      	cmp	r3, #0
   86f66:	d0fb      	beq.n	86f60 <_sbrk_r+0x14>
   86f68:	602b      	str	r3, [r5, #0]
   86f6a:	bd38      	pop	{r3, r4, r5, pc}
   86f6c:	20071494 	.word	0x20071494

00086f70 <__sread>:
   86f70:	b510      	push	{r4, lr}
   86f72:	460c      	mov	r4, r1
   86f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86f78:	f000 fa7c 	bl	87474 <_read_r>
   86f7c:	2800      	cmp	r0, #0
   86f7e:	db03      	blt.n	86f88 <__sread+0x18>
   86f80:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86f82:	4403      	add	r3, r0
   86f84:	6523      	str	r3, [r4, #80]	; 0x50
   86f86:	bd10      	pop	{r4, pc}
   86f88:	89a3      	ldrh	r3, [r4, #12]
   86f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86f8e:	81a3      	strh	r3, [r4, #12]
   86f90:	bd10      	pop	{r4, pc}
   86f92:	bf00      	nop

00086f94 <__swrite>:
   86f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86f98:	460c      	mov	r4, r1
   86f9a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86f9e:	461f      	mov	r7, r3
   86fa0:	05cb      	lsls	r3, r1, #23
   86fa2:	4616      	mov	r6, r2
   86fa4:	4605      	mov	r5, r0
   86fa6:	d507      	bpl.n	86fb8 <__swrite+0x24>
   86fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86fac:	2302      	movs	r3, #2
   86fae:	2200      	movs	r2, #0
   86fb0:	f000 f9d0 	bl	87354 <_lseek_r>
   86fb4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   86fb8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86fbc:	81a1      	strh	r1, [r4, #12]
   86fbe:	463b      	mov	r3, r7
   86fc0:	4632      	mov	r2, r6
   86fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86fc6:	4628      	mov	r0, r5
   86fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86fcc:	f000 b892 	b.w	870f4 <_write_r>

00086fd0 <__sseek>:
   86fd0:	b510      	push	{r4, lr}
   86fd2:	460c      	mov	r4, r1
   86fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86fd8:	f000 f9bc 	bl	87354 <_lseek_r>
   86fdc:	89a3      	ldrh	r3, [r4, #12]
   86fde:	1c42      	adds	r2, r0, #1
   86fe0:	bf0e      	itee	eq
   86fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   86fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   86fea:	6520      	strne	r0, [r4, #80]	; 0x50
   86fec:	81a3      	strh	r3, [r4, #12]
   86fee:	bd10      	pop	{r4, pc}

00086ff0 <__sclose>:
   86ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86ff4:	f000 b926 	b.w	87244 <_close_r>

00086ff8 <__ssprint_r>:
   86ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ffc:	6893      	ldr	r3, [r2, #8]
   86ffe:	b083      	sub	sp, #12
   87000:	4690      	mov	r8, r2
   87002:	2b00      	cmp	r3, #0
   87004:	d070      	beq.n	870e8 <__ssprint_r+0xf0>
   87006:	4682      	mov	sl, r0
   87008:	460c      	mov	r4, r1
   8700a:	6817      	ldr	r7, [r2, #0]
   8700c:	688d      	ldr	r5, [r1, #8]
   8700e:	6808      	ldr	r0, [r1, #0]
   87010:	e042      	b.n	87098 <__ssprint_r+0xa0>
   87012:	89a3      	ldrh	r3, [r4, #12]
   87014:	f413 6f90 	tst.w	r3, #1152	; 0x480
   87018:	d02e      	beq.n	87078 <__ssprint_r+0x80>
   8701a:	6965      	ldr	r5, [r4, #20]
   8701c:	6921      	ldr	r1, [r4, #16]
   8701e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   87022:	eba0 0b01 	sub.w	fp, r0, r1
   87026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8702a:	f10b 0001 	add.w	r0, fp, #1
   8702e:	106d      	asrs	r5, r5, #1
   87030:	4430      	add	r0, r6
   87032:	42a8      	cmp	r0, r5
   87034:	462a      	mov	r2, r5
   87036:	bf84      	itt	hi
   87038:	4605      	movhi	r5, r0
   8703a:	462a      	movhi	r2, r5
   8703c:	055b      	lsls	r3, r3, #21
   8703e:	d538      	bpl.n	870b2 <__ssprint_r+0xba>
   87040:	4611      	mov	r1, r2
   87042:	4650      	mov	r0, sl
   87044:	f7ff f992 	bl	8636c <_malloc_r>
   87048:	2800      	cmp	r0, #0
   8704a:	d03c      	beq.n	870c6 <__ssprint_r+0xce>
   8704c:	465a      	mov	r2, fp
   8704e:	6921      	ldr	r1, [r4, #16]
   87050:	9001      	str	r0, [sp, #4]
   87052:	f7fc fa45 	bl	834e0 <memcpy>
   87056:	89a2      	ldrh	r2, [r4, #12]
   87058:	9b01      	ldr	r3, [sp, #4]
   8705a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8705e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   87062:	81a2      	strh	r2, [r4, #12]
   87064:	eba5 020b 	sub.w	r2, r5, fp
   87068:	eb03 000b 	add.w	r0, r3, fp
   8706c:	6165      	str	r5, [r4, #20]
   8706e:	46b3      	mov	fp, r6
   87070:	4635      	mov	r5, r6
   87072:	6123      	str	r3, [r4, #16]
   87074:	6020      	str	r0, [r4, #0]
   87076:	60a2      	str	r2, [r4, #8]
   87078:	465a      	mov	r2, fp
   8707a:	4649      	mov	r1, r9
   8707c:	f000 f996 	bl	873ac <memmove>
   87080:	f8d8 3008 	ldr.w	r3, [r8, #8]
   87084:	68a2      	ldr	r2, [r4, #8]
   87086:	6820      	ldr	r0, [r4, #0]
   87088:	1b55      	subs	r5, r2, r5
   8708a:	4458      	add	r0, fp
   8708c:	1b9e      	subs	r6, r3, r6
   8708e:	60a5      	str	r5, [r4, #8]
   87090:	6020      	str	r0, [r4, #0]
   87092:	f8c8 6008 	str.w	r6, [r8, #8]
   87096:	b33e      	cbz	r6, 870e8 <__ssprint_r+0xf0>
   87098:	687e      	ldr	r6, [r7, #4]
   8709a:	463b      	mov	r3, r7
   8709c:	3708      	adds	r7, #8
   8709e:	2e00      	cmp	r6, #0
   870a0:	d0fa      	beq.n	87098 <__ssprint_r+0xa0>
   870a2:	42ae      	cmp	r6, r5
   870a4:	f8d3 9000 	ldr.w	r9, [r3]
   870a8:	46ab      	mov	fp, r5
   870aa:	d2b2      	bcs.n	87012 <__ssprint_r+0x1a>
   870ac:	4635      	mov	r5, r6
   870ae:	46b3      	mov	fp, r6
   870b0:	e7e2      	b.n	87078 <__ssprint_r+0x80>
   870b2:	4650      	mov	r0, sl
   870b4:	f000 f9f4 	bl	874a0 <_realloc_r>
   870b8:	4603      	mov	r3, r0
   870ba:	2800      	cmp	r0, #0
   870bc:	d1d2      	bne.n	87064 <__ssprint_r+0x6c>
   870be:	6921      	ldr	r1, [r4, #16]
   870c0:	4650      	mov	r0, sl
   870c2:	f7fe fff9 	bl	860b8 <_free_r>
   870c6:	230c      	movs	r3, #12
   870c8:	2200      	movs	r2, #0
   870ca:	f04f 30ff 	mov.w	r0, #4294967295
   870ce:	f8ca 3000 	str.w	r3, [sl]
   870d2:	89a3      	ldrh	r3, [r4, #12]
   870d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   870d8:	81a3      	strh	r3, [r4, #12]
   870da:	f8c8 2008 	str.w	r2, [r8, #8]
   870de:	f8c8 2004 	str.w	r2, [r8, #4]
   870e2:	b003      	add	sp, #12
   870e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   870e8:	2000      	movs	r0, #0
   870ea:	f8c8 0004 	str.w	r0, [r8, #4]
   870ee:	b003      	add	sp, #12
   870f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000870f4 <_write_r>:
   870f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   870f6:	460e      	mov	r6, r1
   870f8:	2500      	movs	r5, #0
   870fa:	4c08      	ldr	r4, [pc, #32]	; (8711c <_write_r+0x28>)
   870fc:	4611      	mov	r1, r2
   870fe:	4607      	mov	r7, r0
   87100:	461a      	mov	r2, r3
   87102:	4630      	mov	r0, r6
   87104:	6025      	str	r5, [r4, #0]
   87106:	f7fb fa7d 	bl	82604 <_write>
   8710a:	1c43      	adds	r3, r0, #1
   8710c:	d000      	beq.n	87110 <_write_r+0x1c>
   8710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87110:	6823      	ldr	r3, [r4, #0]
   87112:	2b00      	cmp	r3, #0
   87114:	d0fb      	beq.n	8710e <_write_r+0x1a>
   87116:	603b      	str	r3, [r7, #0]
   87118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8711a:	bf00      	nop
   8711c:	20071494 	.word	0x20071494

00087120 <__register_exitproc>:
   87120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   87124:	4d2c      	ldr	r5, [pc, #176]	; (871d8 <__register_exitproc+0xb8>)
   87126:	4606      	mov	r6, r0
   87128:	6828      	ldr	r0, [r5, #0]
   8712a:	4698      	mov	r8, r3
   8712c:	460f      	mov	r7, r1
   8712e:	4691      	mov	r9, r2
   87130:	f7ff f8e2 	bl	862f8 <__retarget_lock_acquire_recursive>
   87134:	4b29      	ldr	r3, [pc, #164]	; (871dc <__register_exitproc+0xbc>)
   87136:	681c      	ldr	r4, [r3, #0]
   87138:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8713c:	2b00      	cmp	r3, #0
   8713e:	d03e      	beq.n	871be <__register_exitproc+0x9e>
   87140:	685a      	ldr	r2, [r3, #4]
   87142:	2a1f      	cmp	r2, #31
   87144:	dc1c      	bgt.n	87180 <__register_exitproc+0x60>
   87146:	f102 0e01 	add.w	lr, r2, #1
   8714a:	b176      	cbz	r6, 8716a <__register_exitproc+0x4a>
   8714c:	2101      	movs	r1, #1
   8714e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   87152:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   87156:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8715a:	4091      	lsls	r1, r2
   8715c:	4308      	orrs	r0, r1
   8715e:	2e02      	cmp	r6, #2
   87160:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   87164:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   87168:	d023      	beq.n	871b2 <__register_exitproc+0x92>
   8716a:	3202      	adds	r2, #2
   8716c:	f8c3 e004 	str.w	lr, [r3, #4]
   87170:	6828      	ldr	r0, [r5, #0]
   87172:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   87176:	f7ff f8c1 	bl	862fc <__retarget_lock_release_recursive>
   8717a:	2000      	movs	r0, #0
   8717c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   87180:	4b17      	ldr	r3, [pc, #92]	; (871e0 <__register_exitproc+0xc0>)
   87182:	b30b      	cbz	r3, 871c8 <__register_exitproc+0xa8>
   87184:	f44f 70c8 	mov.w	r0, #400	; 0x190
   87188:	f7ff f8e8 	bl	8635c <malloc>
   8718c:	4603      	mov	r3, r0
   8718e:	b1d8      	cbz	r0, 871c8 <__register_exitproc+0xa8>
   87190:	2000      	movs	r0, #0
   87192:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   87196:	f04f 0e01 	mov.w	lr, #1
   8719a:	6058      	str	r0, [r3, #4]
   8719c:	6019      	str	r1, [r3, #0]
   8719e:	4602      	mov	r2, r0
   871a0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   871a4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   871a8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   871ac:	2e00      	cmp	r6, #0
   871ae:	d0dc      	beq.n	8716a <__register_exitproc+0x4a>
   871b0:	e7cc      	b.n	8714c <__register_exitproc+0x2c>
   871b2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   871b6:	4301      	orrs	r1, r0
   871b8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   871bc:	e7d5      	b.n	8716a <__register_exitproc+0x4a>
   871be:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   871c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   871c6:	e7bb      	b.n	87140 <__register_exitproc+0x20>
   871c8:	6828      	ldr	r0, [r5, #0]
   871ca:	f7ff f897 	bl	862fc <__retarget_lock_release_recursive>
   871ce:	f04f 30ff 	mov.w	r0, #4294967295
   871d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   871d6:	bf00      	nop
   871d8:	200705e8 	.word	0x200705e8
   871dc:	0008a010 	.word	0x0008a010
   871e0:	0008635d 	.word	0x0008635d

000871e4 <_calloc_r>:
   871e4:	b510      	push	{r4, lr}
   871e6:	fb02 f101 	mul.w	r1, r2, r1
   871ea:	f7ff f8bf 	bl	8636c <_malloc_r>
   871ee:	4604      	mov	r4, r0
   871f0:	b1d8      	cbz	r0, 8722a <_calloc_r+0x46>
   871f2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   871f6:	f022 0203 	bic.w	r2, r2, #3
   871fa:	3a04      	subs	r2, #4
   871fc:	2a24      	cmp	r2, #36	; 0x24
   871fe:	d818      	bhi.n	87232 <_calloc_r+0x4e>
   87200:	2a13      	cmp	r2, #19
   87202:	d914      	bls.n	8722e <_calloc_r+0x4a>
   87204:	2300      	movs	r3, #0
   87206:	2a1b      	cmp	r2, #27
   87208:	6003      	str	r3, [r0, #0]
   8720a:	6043      	str	r3, [r0, #4]
   8720c:	d916      	bls.n	8723c <_calloc_r+0x58>
   8720e:	2a24      	cmp	r2, #36	; 0x24
   87210:	6083      	str	r3, [r0, #8]
   87212:	60c3      	str	r3, [r0, #12]
   87214:	bf11      	iteee	ne
   87216:	f100 0210 	addne.w	r2, r0, #16
   8721a:	6103      	streq	r3, [r0, #16]
   8721c:	6143      	streq	r3, [r0, #20]
   8721e:	f100 0218 	addeq.w	r2, r0, #24
   87222:	2300      	movs	r3, #0
   87224:	6013      	str	r3, [r2, #0]
   87226:	6053      	str	r3, [r2, #4]
   87228:	6093      	str	r3, [r2, #8]
   8722a:	4620      	mov	r0, r4
   8722c:	bd10      	pop	{r4, pc}
   8722e:	4602      	mov	r2, r0
   87230:	e7f7      	b.n	87222 <_calloc_r+0x3e>
   87232:	2100      	movs	r1, #0
   87234:	f7fc f9ca 	bl	835cc <memset>
   87238:	4620      	mov	r0, r4
   8723a:	bd10      	pop	{r4, pc}
   8723c:	f100 0208 	add.w	r2, r0, #8
   87240:	e7ef      	b.n	87222 <_calloc_r+0x3e>
   87242:	bf00      	nop

00087244 <_close_r>:
   87244:	b538      	push	{r3, r4, r5, lr}
   87246:	2300      	movs	r3, #0
   87248:	4c06      	ldr	r4, [pc, #24]	; (87264 <_close_r+0x20>)
   8724a:	4605      	mov	r5, r0
   8724c:	4608      	mov	r0, r1
   8724e:	6023      	str	r3, [r4, #0]
   87250:	f7fb ff9c 	bl	8318c <_close>
   87254:	1c43      	adds	r3, r0, #1
   87256:	d000      	beq.n	8725a <_close_r+0x16>
   87258:	bd38      	pop	{r3, r4, r5, pc}
   8725a:	6823      	ldr	r3, [r4, #0]
   8725c:	2b00      	cmp	r3, #0
   8725e:	d0fb      	beq.n	87258 <_close_r+0x14>
   87260:	602b      	str	r3, [r5, #0]
   87262:	bd38      	pop	{r3, r4, r5, pc}
   87264:	20071494 	.word	0x20071494

00087268 <_fclose_r>:
   87268:	b570      	push	{r4, r5, r6, lr}
   8726a:	b159      	cbz	r1, 87284 <_fclose_r+0x1c>
   8726c:	4605      	mov	r5, r0
   8726e:	460c      	mov	r4, r1
   87270:	b110      	cbz	r0, 87278 <_fclose_r+0x10>
   87272:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87274:	2b00      	cmp	r3, #0
   87276:	d03c      	beq.n	872f2 <_fclose_r+0x8a>
   87278:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8727a:	07d8      	lsls	r0, r3, #31
   8727c:	d505      	bpl.n	8728a <_fclose_r+0x22>
   8727e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87282:	b92b      	cbnz	r3, 87290 <_fclose_r+0x28>
   87284:	2600      	movs	r6, #0
   87286:	4630      	mov	r0, r6
   87288:	bd70      	pop	{r4, r5, r6, pc}
   8728a:	89a3      	ldrh	r3, [r4, #12]
   8728c:	0599      	lsls	r1, r3, #22
   8728e:	d53c      	bpl.n	8730a <_fclose_r+0xa2>
   87290:	4621      	mov	r1, r4
   87292:	4628      	mov	r0, r5
   87294:	f7fe fd76 	bl	85d84 <__sflush_r>
   87298:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8729a:	4606      	mov	r6, r0
   8729c:	b133      	cbz	r3, 872ac <_fclose_r+0x44>
   8729e:	69e1      	ldr	r1, [r4, #28]
   872a0:	4628      	mov	r0, r5
   872a2:	4798      	blx	r3
   872a4:	2800      	cmp	r0, #0
   872a6:	bfb8      	it	lt
   872a8:	f04f 36ff 	movlt.w	r6, #4294967295
   872ac:	89a3      	ldrh	r3, [r4, #12]
   872ae:	061a      	lsls	r2, r3, #24
   872b0:	d422      	bmi.n	872f8 <_fclose_r+0x90>
   872b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   872b4:	b141      	cbz	r1, 872c8 <_fclose_r+0x60>
   872b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   872ba:	4299      	cmp	r1, r3
   872bc:	d002      	beq.n	872c4 <_fclose_r+0x5c>
   872be:	4628      	mov	r0, r5
   872c0:	f7fe fefa 	bl	860b8 <_free_r>
   872c4:	2300      	movs	r3, #0
   872c6:	6323      	str	r3, [r4, #48]	; 0x30
   872c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   872ca:	b121      	cbz	r1, 872d6 <_fclose_r+0x6e>
   872cc:	4628      	mov	r0, r5
   872ce:	f7fe fef3 	bl	860b8 <_free_r>
   872d2:	2300      	movs	r3, #0
   872d4:	6463      	str	r3, [r4, #68]	; 0x44
   872d6:	f7fe fe79 	bl	85fcc <__sfp_lock_acquire>
   872da:	2200      	movs	r2, #0
   872dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   872de:	81a2      	strh	r2, [r4, #12]
   872e0:	07db      	lsls	r3, r3, #31
   872e2:	d50e      	bpl.n	87302 <_fclose_r+0x9a>
   872e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   872e6:	f7ff f805 	bl	862f4 <__retarget_lock_close_recursive>
   872ea:	f7fe fe75 	bl	85fd8 <__sfp_lock_release>
   872ee:	4630      	mov	r0, r6
   872f0:	bd70      	pop	{r4, r5, r6, pc}
   872f2:	f7fe fe3b 	bl	85f6c <__sinit>
   872f6:	e7bf      	b.n	87278 <_fclose_r+0x10>
   872f8:	6921      	ldr	r1, [r4, #16]
   872fa:	4628      	mov	r0, r5
   872fc:	f7fe fedc 	bl	860b8 <_free_r>
   87300:	e7d7      	b.n	872b2 <_fclose_r+0x4a>
   87302:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87304:	f7fe fffa 	bl	862fc <__retarget_lock_release_recursive>
   87308:	e7ec      	b.n	872e4 <_fclose_r+0x7c>
   8730a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8730c:	f7fe fff4 	bl	862f8 <__retarget_lock_acquire_recursive>
   87310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87314:	2b00      	cmp	r3, #0
   87316:	d1bb      	bne.n	87290 <_fclose_r+0x28>
   87318:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8731a:	f016 0601 	ands.w	r6, r6, #1
   8731e:	d1b1      	bne.n	87284 <_fclose_r+0x1c>
   87320:	6da0      	ldr	r0, [r4, #88]	; 0x58
   87322:	f7fe ffeb 	bl	862fc <__retarget_lock_release_recursive>
   87326:	4630      	mov	r0, r6
   87328:	bd70      	pop	{r4, r5, r6, pc}
   8732a:	bf00      	nop

0008732c <_fstat_r>:
   8732c:	b570      	push	{r4, r5, r6, lr}
   8732e:	460d      	mov	r5, r1
   87330:	2300      	movs	r3, #0
   87332:	4c07      	ldr	r4, [pc, #28]	; (87350 <_fstat_r+0x24>)
   87334:	4606      	mov	r6, r0
   87336:	4611      	mov	r1, r2
   87338:	4628      	mov	r0, r5
   8733a:	6023      	str	r3, [r4, #0]
   8733c:	f7fb ff29 	bl	83192 <_fstat>
   87340:	1c43      	adds	r3, r0, #1
   87342:	d000      	beq.n	87346 <_fstat_r+0x1a>
   87344:	bd70      	pop	{r4, r5, r6, pc}
   87346:	6823      	ldr	r3, [r4, #0]
   87348:	2b00      	cmp	r3, #0
   8734a:	d0fb      	beq.n	87344 <_fstat_r+0x18>
   8734c:	6033      	str	r3, [r6, #0]
   8734e:	bd70      	pop	{r4, r5, r6, pc}
   87350:	20071494 	.word	0x20071494

00087354 <_lseek_r>:
   87354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87356:	460e      	mov	r6, r1
   87358:	2500      	movs	r5, #0
   8735a:	4c08      	ldr	r4, [pc, #32]	; (8737c <_lseek_r+0x28>)
   8735c:	4611      	mov	r1, r2
   8735e:	4607      	mov	r7, r0
   87360:	461a      	mov	r2, r3
   87362:	4630      	mov	r0, r6
   87364:	6025      	str	r5, [r4, #0]
   87366:	f7fb ff19 	bl	8319c <_lseek>
   8736a:	1c43      	adds	r3, r0, #1
   8736c:	d000      	beq.n	87370 <_lseek_r+0x1c>
   8736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87370:	6823      	ldr	r3, [r4, #0]
   87372:	2b00      	cmp	r3, #0
   87374:	d0fb      	beq.n	8736e <_lseek_r+0x1a>
   87376:	603b      	str	r3, [r7, #0]
   87378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8737a:	bf00      	nop
   8737c:	20071494 	.word	0x20071494

00087380 <__ascii_mbtowc>:
   87380:	b082      	sub	sp, #8
   87382:	b149      	cbz	r1, 87398 <__ascii_mbtowc+0x18>
   87384:	b15a      	cbz	r2, 8739e <__ascii_mbtowc+0x1e>
   87386:	b16b      	cbz	r3, 873a4 <__ascii_mbtowc+0x24>
   87388:	7813      	ldrb	r3, [r2, #0]
   8738a:	600b      	str	r3, [r1, #0]
   8738c:	7812      	ldrb	r2, [r2, #0]
   8738e:	1c10      	adds	r0, r2, #0
   87390:	bf18      	it	ne
   87392:	2001      	movne	r0, #1
   87394:	b002      	add	sp, #8
   87396:	4770      	bx	lr
   87398:	a901      	add	r1, sp, #4
   8739a:	2a00      	cmp	r2, #0
   8739c:	d1f3      	bne.n	87386 <__ascii_mbtowc+0x6>
   8739e:	4610      	mov	r0, r2
   873a0:	b002      	add	sp, #8
   873a2:	4770      	bx	lr
   873a4:	f06f 0001 	mvn.w	r0, #1
   873a8:	e7f4      	b.n	87394 <__ascii_mbtowc+0x14>
   873aa:	bf00      	nop

000873ac <memmove>:
   873ac:	4288      	cmp	r0, r1
   873ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   873b0:	d90d      	bls.n	873ce <memmove+0x22>
   873b2:	188b      	adds	r3, r1, r2
   873b4:	4298      	cmp	r0, r3
   873b6:	d20a      	bcs.n	873ce <memmove+0x22>
   873b8:	1884      	adds	r4, r0, r2
   873ba:	2a00      	cmp	r2, #0
   873bc:	d051      	beq.n	87462 <memmove+0xb6>
   873be:	4622      	mov	r2, r4
   873c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   873c4:	4299      	cmp	r1, r3
   873c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   873ca:	d1f9      	bne.n	873c0 <memmove+0x14>
   873cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   873ce:	2a0f      	cmp	r2, #15
   873d0:	d948      	bls.n	87464 <memmove+0xb8>
   873d2:	ea41 0300 	orr.w	r3, r1, r0
   873d6:	079b      	lsls	r3, r3, #30
   873d8:	d146      	bne.n	87468 <memmove+0xbc>
   873da:	4615      	mov	r5, r2
   873dc:	f100 0410 	add.w	r4, r0, #16
   873e0:	f101 0310 	add.w	r3, r1, #16
   873e4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   873e8:	3d10      	subs	r5, #16
   873ea:	f844 6c10 	str.w	r6, [r4, #-16]
   873ee:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   873f2:	2d0f      	cmp	r5, #15
   873f4:	f844 6c0c 	str.w	r6, [r4, #-12]
   873f8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   873fc:	f104 0410 	add.w	r4, r4, #16
   87400:	f844 6c18 	str.w	r6, [r4, #-24]
   87404:	f853 6c04 	ldr.w	r6, [r3, #-4]
   87408:	f103 0310 	add.w	r3, r3, #16
   8740c:	f844 6c14 	str.w	r6, [r4, #-20]
   87410:	d8e8      	bhi.n	873e4 <memmove+0x38>
   87412:	f1a2 0310 	sub.w	r3, r2, #16
   87416:	f023 030f 	bic.w	r3, r3, #15
   8741a:	f002 0e0f 	and.w	lr, r2, #15
   8741e:	3310      	adds	r3, #16
   87420:	f1be 0f03 	cmp.w	lr, #3
   87424:	4419      	add	r1, r3
   87426:	4403      	add	r3, r0
   87428:	d921      	bls.n	8746e <memmove+0xc2>
   8742a:	460e      	mov	r6, r1
   8742c:	4674      	mov	r4, lr
   8742e:	1f1d      	subs	r5, r3, #4
   87430:	f856 7b04 	ldr.w	r7, [r6], #4
   87434:	3c04      	subs	r4, #4
   87436:	2c03      	cmp	r4, #3
   87438:	f845 7f04 	str.w	r7, [r5, #4]!
   8743c:	d8f8      	bhi.n	87430 <memmove+0x84>
   8743e:	f1ae 0404 	sub.w	r4, lr, #4
   87442:	f024 0403 	bic.w	r4, r4, #3
   87446:	3404      	adds	r4, #4
   87448:	4421      	add	r1, r4
   8744a:	4423      	add	r3, r4
   8744c:	f002 0203 	and.w	r2, r2, #3
   87450:	b162      	cbz	r2, 8746c <memmove+0xc0>
   87452:	3b01      	subs	r3, #1
   87454:	440a      	add	r2, r1
   87456:	f811 4b01 	ldrb.w	r4, [r1], #1
   8745a:	428a      	cmp	r2, r1
   8745c:	f803 4f01 	strb.w	r4, [r3, #1]!
   87460:	d1f9      	bne.n	87456 <memmove+0xaa>
   87462:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87464:	4603      	mov	r3, r0
   87466:	e7f3      	b.n	87450 <memmove+0xa4>
   87468:	4603      	mov	r3, r0
   8746a:	e7f2      	b.n	87452 <memmove+0xa6>
   8746c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8746e:	4672      	mov	r2, lr
   87470:	e7ee      	b.n	87450 <memmove+0xa4>
   87472:	bf00      	nop

00087474 <_read_r>:
   87474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87476:	460e      	mov	r6, r1
   87478:	2500      	movs	r5, #0
   8747a:	4c08      	ldr	r4, [pc, #32]	; (8749c <_read_r+0x28>)
   8747c:	4611      	mov	r1, r2
   8747e:	4607      	mov	r7, r0
   87480:	461a      	mov	r2, r3
   87482:	4630      	mov	r0, r6
   87484:	6025      	str	r5, [r4, #0]
   87486:	f7fb f89f 	bl	825c8 <_read>
   8748a:	1c43      	adds	r3, r0, #1
   8748c:	d000      	beq.n	87490 <_read_r+0x1c>
   8748e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   87490:	6823      	ldr	r3, [r4, #0]
   87492:	2b00      	cmp	r3, #0
   87494:	d0fb      	beq.n	8748e <_read_r+0x1a>
   87496:	603b      	str	r3, [r7, #0]
   87498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8749a:	bf00      	nop
   8749c:	20071494 	.word	0x20071494

000874a0 <_realloc_r>:
   874a0:	2900      	cmp	r1, #0
   874a2:	f000 8094 	beq.w	875ce <_realloc_r+0x12e>
   874a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   874aa:	460c      	mov	r4, r1
   874ac:	4615      	mov	r5, r2
   874ae:	b083      	sub	sp, #12
   874b0:	4680      	mov	r8, r0
   874b2:	f105 060b 	add.w	r6, r5, #11
   874b6:	f7ff fa41 	bl	8693c <__malloc_lock>
   874ba:	f854 ec04 	ldr.w	lr, [r4, #-4]
   874be:	2e16      	cmp	r6, #22
   874c0:	f02e 0703 	bic.w	r7, lr, #3
   874c4:	f1a4 0908 	sub.w	r9, r4, #8
   874c8:	d83c      	bhi.n	87544 <_realloc_r+0xa4>
   874ca:	2210      	movs	r2, #16
   874cc:	4616      	mov	r6, r2
   874ce:	42b5      	cmp	r5, r6
   874d0:	d83d      	bhi.n	8754e <_realloc_r+0xae>
   874d2:	4297      	cmp	r7, r2
   874d4:	da43      	bge.n	8755e <_realloc_r+0xbe>
   874d6:	4bc6      	ldr	r3, [pc, #792]	; (877f0 <_realloc_r+0x350>)
   874d8:	eb09 0007 	add.w	r0, r9, r7
   874dc:	6899      	ldr	r1, [r3, #8]
   874de:	4288      	cmp	r0, r1
   874e0:	f000 80c3 	beq.w	8766a <_realloc_r+0x1ca>
   874e4:	6843      	ldr	r3, [r0, #4]
   874e6:	f023 0101 	bic.w	r1, r3, #1
   874ea:	4401      	add	r1, r0
   874ec:	6849      	ldr	r1, [r1, #4]
   874ee:	07c9      	lsls	r1, r1, #31
   874f0:	d54d      	bpl.n	8758e <_realloc_r+0xee>
   874f2:	f01e 0f01 	tst.w	lr, #1
   874f6:	f000 809b 	beq.w	87630 <_realloc_r+0x190>
   874fa:	4629      	mov	r1, r5
   874fc:	4640      	mov	r0, r8
   874fe:	f7fe ff35 	bl	8636c <_malloc_r>
   87502:	4605      	mov	r5, r0
   87504:	2800      	cmp	r0, #0
   87506:	d03b      	beq.n	87580 <_realloc_r+0xe0>
   87508:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8750c:	f1a0 0208 	sub.w	r2, r0, #8
   87510:	f023 0301 	bic.w	r3, r3, #1
   87514:	444b      	add	r3, r9
   87516:	429a      	cmp	r2, r3
   87518:	f000 812b 	beq.w	87772 <_realloc_r+0x2d2>
   8751c:	1f3a      	subs	r2, r7, #4
   8751e:	2a24      	cmp	r2, #36	; 0x24
   87520:	f200 8118 	bhi.w	87754 <_realloc_r+0x2b4>
   87524:	2a13      	cmp	r2, #19
   87526:	f200 80eb 	bhi.w	87700 <_realloc_r+0x260>
   8752a:	4603      	mov	r3, r0
   8752c:	4622      	mov	r2, r4
   8752e:	6811      	ldr	r1, [r2, #0]
   87530:	6019      	str	r1, [r3, #0]
   87532:	6851      	ldr	r1, [r2, #4]
   87534:	6059      	str	r1, [r3, #4]
   87536:	6892      	ldr	r2, [r2, #8]
   87538:	609a      	str	r2, [r3, #8]
   8753a:	4621      	mov	r1, r4
   8753c:	4640      	mov	r0, r8
   8753e:	f7fe fdbb 	bl	860b8 <_free_r>
   87542:	e01d      	b.n	87580 <_realloc_r+0xe0>
   87544:	f026 0607 	bic.w	r6, r6, #7
   87548:	2e00      	cmp	r6, #0
   8754a:	4632      	mov	r2, r6
   8754c:	dabf      	bge.n	874ce <_realloc_r+0x2e>
   8754e:	2500      	movs	r5, #0
   87550:	230c      	movs	r3, #12
   87552:	4628      	mov	r0, r5
   87554:	f8c8 3000 	str.w	r3, [r8]
   87558:	b003      	add	sp, #12
   8755a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8755e:	4625      	mov	r5, r4
   87560:	1bbb      	subs	r3, r7, r6
   87562:	2b0f      	cmp	r3, #15
   87564:	f8d9 2004 	ldr.w	r2, [r9, #4]
   87568:	d81d      	bhi.n	875a6 <_realloc_r+0x106>
   8756a:	f002 0201 	and.w	r2, r2, #1
   8756e:	433a      	orrs	r2, r7
   87570:	eb09 0107 	add.w	r1, r9, r7
   87574:	f8c9 2004 	str.w	r2, [r9, #4]
   87578:	684b      	ldr	r3, [r1, #4]
   8757a:	f043 0301 	orr.w	r3, r3, #1
   8757e:	604b      	str	r3, [r1, #4]
   87580:	4640      	mov	r0, r8
   87582:	f7ff f9e1 	bl	86948 <__malloc_unlock>
   87586:	4628      	mov	r0, r5
   87588:	b003      	add	sp, #12
   8758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8758e:	f023 0303 	bic.w	r3, r3, #3
   87592:	18f9      	adds	r1, r7, r3
   87594:	4291      	cmp	r1, r2
   87596:	db1d      	blt.n	875d4 <_realloc_r+0x134>
   87598:	68c3      	ldr	r3, [r0, #12]
   8759a:	6882      	ldr	r2, [r0, #8]
   8759c:	4625      	mov	r5, r4
   8759e:	60d3      	str	r3, [r2, #12]
   875a0:	460f      	mov	r7, r1
   875a2:	609a      	str	r2, [r3, #8]
   875a4:	e7dc      	b.n	87560 <_realloc_r+0xc0>
   875a6:	f002 0201 	and.w	r2, r2, #1
   875aa:	eb09 0106 	add.w	r1, r9, r6
   875ae:	f043 0301 	orr.w	r3, r3, #1
   875b2:	4332      	orrs	r2, r6
   875b4:	f8c9 2004 	str.w	r2, [r9, #4]
   875b8:	444f      	add	r7, r9
   875ba:	604b      	str	r3, [r1, #4]
   875bc:	687b      	ldr	r3, [r7, #4]
   875be:	3108      	adds	r1, #8
   875c0:	f043 0301 	orr.w	r3, r3, #1
   875c4:	607b      	str	r3, [r7, #4]
   875c6:	4640      	mov	r0, r8
   875c8:	f7fe fd76 	bl	860b8 <_free_r>
   875cc:	e7d8      	b.n	87580 <_realloc_r+0xe0>
   875ce:	4611      	mov	r1, r2
   875d0:	f7fe becc 	b.w	8636c <_malloc_r>
   875d4:	f01e 0f01 	tst.w	lr, #1
   875d8:	d18f      	bne.n	874fa <_realloc_r+0x5a>
   875da:	f854 1c08 	ldr.w	r1, [r4, #-8]
   875de:	eba9 0a01 	sub.w	sl, r9, r1
   875e2:	f8da 1004 	ldr.w	r1, [sl, #4]
   875e6:	f021 0103 	bic.w	r1, r1, #3
   875ea:	440b      	add	r3, r1
   875ec:	443b      	add	r3, r7
   875ee:	4293      	cmp	r3, r2
   875f0:	db26      	blt.n	87640 <_realloc_r+0x1a0>
   875f2:	4655      	mov	r5, sl
   875f4:	68c1      	ldr	r1, [r0, #12]
   875f6:	6880      	ldr	r0, [r0, #8]
   875f8:	1f3a      	subs	r2, r7, #4
   875fa:	60c1      	str	r1, [r0, #12]
   875fc:	6088      	str	r0, [r1, #8]
   875fe:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87602:	f8da 100c 	ldr.w	r1, [sl, #12]
   87606:	2a24      	cmp	r2, #36	; 0x24
   87608:	60c1      	str	r1, [r0, #12]
   8760a:	6088      	str	r0, [r1, #8]
   8760c:	d826      	bhi.n	8765c <_realloc_r+0x1bc>
   8760e:	2a13      	cmp	r2, #19
   87610:	f240 8081 	bls.w	87716 <_realloc_r+0x276>
   87614:	6821      	ldr	r1, [r4, #0]
   87616:	2a1b      	cmp	r2, #27
   87618:	f8ca 1008 	str.w	r1, [sl, #8]
   8761c:	6861      	ldr	r1, [r4, #4]
   8761e:	f8ca 100c 	str.w	r1, [sl, #12]
   87622:	f200 80ad 	bhi.w	87780 <_realloc_r+0x2e0>
   87626:	f104 0008 	add.w	r0, r4, #8
   8762a:	f10a 0210 	add.w	r2, sl, #16
   8762e:	e074      	b.n	8771a <_realloc_r+0x27a>
   87630:	f854 3c08 	ldr.w	r3, [r4, #-8]
   87634:	eba9 0a03 	sub.w	sl, r9, r3
   87638:	f8da 1004 	ldr.w	r1, [sl, #4]
   8763c:	f021 0103 	bic.w	r1, r1, #3
   87640:	187b      	adds	r3, r7, r1
   87642:	4293      	cmp	r3, r2
   87644:	f6ff af59 	blt.w	874fa <_realloc_r+0x5a>
   87648:	4655      	mov	r5, sl
   8764a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8764e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   87652:	1f3a      	subs	r2, r7, #4
   87654:	2a24      	cmp	r2, #36	; 0x24
   87656:	60c1      	str	r1, [r0, #12]
   87658:	6088      	str	r0, [r1, #8]
   8765a:	d9d8      	bls.n	8760e <_realloc_r+0x16e>
   8765c:	4621      	mov	r1, r4
   8765e:	4628      	mov	r0, r5
   87660:	461f      	mov	r7, r3
   87662:	46d1      	mov	r9, sl
   87664:	f7ff fea2 	bl	873ac <memmove>
   87668:	e77a      	b.n	87560 <_realloc_r+0xc0>
   8766a:	6841      	ldr	r1, [r0, #4]
   8766c:	f106 0010 	add.w	r0, r6, #16
   87670:	f021 0b03 	bic.w	fp, r1, #3
   87674:	44bb      	add	fp, r7
   87676:	4583      	cmp	fp, r0
   87678:	da58      	bge.n	8772c <_realloc_r+0x28c>
   8767a:	f01e 0f01 	tst.w	lr, #1
   8767e:	f47f af3c 	bne.w	874fa <_realloc_r+0x5a>
   87682:	f854 1c08 	ldr.w	r1, [r4, #-8]
   87686:	eba9 0a01 	sub.w	sl, r9, r1
   8768a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8768e:	f021 0103 	bic.w	r1, r1, #3
   87692:	448b      	add	fp, r1
   87694:	4558      	cmp	r0, fp
   87696:	dcd3      	bgt.n	87640 <_realloc_r+0x1a0>
   87698:	4655      	mov	r5, sl
   8769a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8769e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   876a2:	1f3a      	subs	r2, r7, #4
   876a4:	2a24      	cmp	r2, #36	; 0x24
   876a6:	60c1      	str	r1, [r0, #12]
   876a8:	6088      	str	r0, [r1, #8]
   876aa:	f200 808d 	bhi.w	877c8 <_realloc_r+0x328>
   876ae:	2a13      	cmp	r2, #19
   876b0:	f240 8087 	bls.w	877c2 <_realloc_r+0x322>
   876b4:	6821      	ldr	r1, [r4, #0]
   876b6:	2a1b      	cmp	r2, #27
   876b8:	f8ca 1008 	str.w	r1, [sl, #8]
   876bc:	6861      	ldr	r1, [r4, #4]
   876be:	f8ca 100c 	str.w	r1, [sl, #12]
   876c2:	f200 8088 	bhi.w	877d6 <_realloc_r+0x336>
   876c6:	f104 0108 	add.w	r1, r4, #8
   876ca:	f10a 0210 	add.w	r2, sl, #16
   876ce:	6808      	ldr	r0, [r1, #0]
   876d0:	6010      	str	r0, [r2, #0]
   876d2:	6848      	ldr	r0, [r1, #4]
   876d4:	6050      	str	r0, [r2, #4]
   876d6:	6889      	ldr	r1, [r1, #8]
   876d8:	6091      	str	r1, [r2, #8]
   876da:	ebab 0206 	sub.w	r2, fp, r6
   876de:	eb0a 0106 	add.w	r1, sl, r6
   876e2:	f042 0201 	orr.w	r2, r2, #1
   876e6:	6099      	str	r1, [r3, #8]
   876e8:	604a      	str	r2, [r1, #4]
   876ea:	f8da 3004 	ldr.w	r3, [sl, #4]
   876ee:	4640      	mov	r0, r8
   876f0:	f003 0301 	and.w	r3, r3, #1
   876f4:	431e      	orrs	r6, r3
   876f6:	f8ca 6004 	str.w	r6, [sl, #4]
   876fa:	f7ff f925 	bl	86948 <__malloc_unlock>
   876fe:	e742      	b.n	87586 <_realloc_r+0xe6>
   87700:	6823      	ldr	r3, [r4, #0]
   87702:	2a1b      	cmp	r2, #27
   87704:	6003      	str	r3, [r0, #0]
   87706:	6863      	ldr	r3, [r4, #4]
   87708:	6043      	str	r3, [r0, #4]
   8770a:	d827      	bhi.n	8775c <_realloc_r+0x2bc>
   8770c:	f100 0308 	add.w	r3, r0, #8
   87710:	f104 0208 	add.w	r2, r4, #8
   87714:	e70b      	b.n	8752e <_realloc_r+0x8e>
   87716:	4620      	mov	r0, r4
   87718:	462a      	mov	r2, r5
   8771a:	6801      	ldr	r1, [r0, #0]
   8771c:	461f      	mov	r7, r3
   8771e:	6011      	str	r1, [r2, #0]
   87720:	6841      	ldr	r1, [r0, #4]
   87722:	46d1      	mov	r9, sl
   87724:	6051      	str	r1, [r2, #4]
   87726:	6883      	ldr	r3, [r0, #8]
   87728:	6093      	str	r3, [r2, #8]
   8772a:	e719      	b.n	87560 <_realloc_r+0xc0>
   8772c:	ebab 0b06 	sub.w	fp, fp, r6
   87730:	eb09 0106 	add.w	r1, r9, r6
   87734:	f04b 0201 	orr.w	r2, fp, #1
   87738:	6099      	str	r1, [r3, #8]
   8773a:	604a      	str	r2, [r1, #4]
   8773c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87740:	4640      	mov	r0, r8
   87742:	f003 0301 	and.w	r3, r3, #1
   87746:	431e      	orrs	r6, r3
   87748:	f844 6c04 	str.w	r6, [r4, #-4]
   8774c:	f7ff f8fc 	bl	86948 <__malloc_unlock>
   87750:	4625      	mov	r5, r4
   87752:	e718      	b.n	87586 <_realloc_r+0xe6>
   87754:	4621      	mov	r1, r4
   87756:	f7ff fe29 	bl	873ac <memmove>
   8775a:	e6ee      	b.n	8753a <_realloc_r+0x9a>
   8775c:	68a3      	ldr	r3, [r4, #8]
   8775e:	2a24      	cmp	r2, #36	; 0x24
   87760:	6083      	str	r3, [r0, #8]
   87762:	68e3      	ldr	r3, [r4, #12]
   87764:	60c3      	str	r3, [r0, #12]
   87766:	d018      	beq.n	8779a <_realloc_r+0x2fa>
   87768:	f100 0310 	add.w	r3, r0, #16
   8776c:	f104 0210 	add.w	r2, r4, #16
   87770:	e6dd      	b.n	8752e <_realloc_r+0x8e>
   87772:	f850 3c04 	ldr.w	r3, [r0, #-4]
   87776:	4625      	mov	r5, r4
   87778:	f023 0303 	bic.w	r3, r3, #3
   8777c:	441f      	add	r7, r3
   8777e:	e6ef      	b.n	87560 <_realloc_r+0xc0>
   87780:	68a1      	ldr	r1, [r4, #8]
   87782:	2a24      	cmp	r2, #36	; 0x24
   87784:	f8ca 1010 	str.w	r1, [sl, #16]
   87788:	68e1      	ldr	r1, [r4, #12]
   8778a:	f8ca 1014 	str.w	r1, [sl, #20]
   8778e:	d00d      	beq.n	877ac <_realloc_r+0x30c>
   87790:	f104 0010 	add.w	r0, r4, #16
   87794:	f10a 0218 	add.w	r2, sl, #24
   87798:	e7bf      	b.n	8771a <_realloc_r+0x27a>
   8779a:	6922      	ldr	r2, [r4, #16]
   8779c:	f100 0318 	add.w	r3, r0, #24
   877a0:	6102      	str	r2, [r0, #16]
   877a2:	6961      	ldr	r1, [r4, #20]
   877a4:	f104 0218 	add.w	r2, r4, #24
   877a8:	6141      	str	r1, [r0, #20]
   877aa:	e6c0      	b.n	8752e <_realloc_r+0x8e>
   877ac:	6922      	ldr	r2, [r4, #16]
   877ae:	f104 0018 	add.w	r0, r4, #24
   877b2:	f8ca 2018 	str.w	r2, [sl, #24]
   877b6:	6961      	ldr	r1, [r4, #20]
   877b8:	f10a 0220 	add.w	r2, sl, #32
   877bc:	f8ca 101c 	str.w	r1, [sl, #28]
   877c0:	e7ab      	b.n	8771a <_realloc_r+0x27a>
   877c2:	4621      	mov	r1, r4
   877c4:	462a      	mov	r2, r5
   877c6:	e782      	b.n	876ce <_realloc_r+0x22e>
   877c8:	4621      	mov	r1, r4
   877ca:	4628      	mov	r0, r5
   877cc:	9301      	str	r3, [sp, #4]
   877ce:	f7ff fded 	bl	873ac <memmove>
   877d2:	9b01      	ldr	r3, [sp, #4]
   877d4:	e781      	b.n	876da <_realloc_r+0x23a>
   877d6:	68a1      	ldr	r1, [r4, #8]
   877d8:	2a24      	cmp	r2, #36	; 0x24
   877da:	f8ca 1010 	str.w	r1, [sl, #16]
   877de:	68e1      	ldr	r1, [r4, #12]
   877e0:	f8ca 1014 	str.w	r1, [sl, #20]
   877e4:	d006      	beq.n	877f4 <_realloc_r+0x354>
   877e6:	f104 0110 	add.w	r1, r4, #16
   877ea:	f10a 0218 	add.w	r2, sl, #24
   877ee:	e76e      	b.n	876ce <_realloc_r+0x22e>
   877f0:	200705ec 	.word	0x200705ec
   877f4:	6922      	ldr	r2, [r4, #16]
   877f6:	f104 0118 	add.w	r1, r4, #24
   877fa:	f8ca 2018 	str.w	r2, [sl, #24]
   877fe:	6960      	ldr	r0, [r4, #20]
   87800:	f10a 0220 	add.w	r2, sl, #32
   87804:	f8ca 001c 	str.w	r0, [sl, #28]
   87808:	e761      	b.n	876ce <_realloc_r+0x22e>
   8780a:	bf00      	nop

0008780c <__ascii_wctomb>:
   8780c:	b119      	cbz	r1, 87816 <__ascii_wctomb+0xa>
   8780e:	2aff      	cmp	r2, #255	; 0xff
   87810:	d803      	bhi.n	8781a <__ascii_wctomb+0xe>
   87812:	700a      	strb	r2, [r1, #0]
   87814:	2101      	movs	r1, #1
   87816:	4608      	mov	r0, r1
   87818:	4770      	bx	lr
   8781a:	238a      	movs	r3, #138	; 0x8a
   8781c:	f04f 31ff 	mov.w	r1, #4294967295
   87820:	6003      	str	r3, [r0, #0]
   87822:	e7f8      	b.n	87816 <__ascii_wctomb+0xa>

00087824 <__aeabi_drsub>:
   87824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87828:	e002      	b.n	87830 <__adddf3>
   8782a:	bf00      	nop

0008782c <__aeabi_dsub>:
   8782c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087830 <__adddf3>:
   87830:	b530      	push	{r4, r5, lr}
   87832:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87836:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8783a:	ea94 0f05 	teq	r4, r5
   8783e:	bf08      	it	eq
   87840:	ea90 0f02 	teqeq	r0, r2
   87844:	bf1f      	itttt	ne
   87846:	ea54 0c00 	orrsne.w	ip, r4, r0
   8784a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8784e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87852:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87856:	f000 80e2 	beq.w	87a1e <__adddf3+0x1ee>
   8785a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8785e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87862:	bfb8      	it	lt
   87864:	426d      	neglt	r5, r5
   87866:	dd0c      	ble.n	87882 <__adddf3+0x52>
   87868:	442c      	add	r4, r5
   8786a:	ea80 0202 	eor.w	r2, r0, r2
   8786e:	ea81 0303 	eor.w	r3, r1, r3
   87872:	ea82 0000 	eor.w	r0, r2, r0
   87876:	ea83 0101 	eor.w	r1, r3, r1
   8787a:	ea80 0202 	eor.w	r2, r0, r2
   8787e:	ea81 0303 	eor.w	r3, r1, r3
   87882:	2d36      	cmp	r5, #54	; 0x36
   87884:	bf88      	it	hi
   87886:	bd30      	pophi	{r4, r5, pc}
   87888:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8788c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87890:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   87894:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   87898:	d002      	beq.n	878a0 <__adddf3+0x70>
   8789a:	4240      	negs	r0, r0
   8789c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   878a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   878a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   878a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   878ac:	d002      	beq.n	878b4 <__adddf3+0x84>
   878ae:	4252      	negs	r2, r2
   878b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   878b4:	ea94 0f05 	teq	r4, r5
   878b8:	f000 80a7 	beq.w	87a0a <__adddf3+0x1da>
   878bc:	f1a4 0401 	sub.w	r4, r4, #1
   878c0:	f1d5 0e20 	rsbs	lr, r5, #32
   878c4:	db0d      	blt.n	878e2 <__adddf3+0xb2>
   878c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   878ca:	fa22 f205 	lsr.w	r2, r2, r5
   878ce:	1880      	adds	r0, r0, r2
   878d0:	f141 0100 	adc.w	r1, r1, #0
   878d4:	fa03 f20e 	lsl.w	r2, r3, lr
   878d8:	1880      	adds	r0, r0, r2
   878da:	fa43 f305 	asr.w	r3, r3, r5
   878de:	4159      	adcs	r1, r3
   878e0:	e00e      	b.n	87900 <__adddf3+0xd0>
   878e2:	f1a5 0520 	sub.w	r5, r5, #32
   878e6:	f10e 0e20 	add.w	lr, lr, #32
   878ea:	2a01      	cmp	r2, #1
   878ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   878f0:	bf28      	it	cs
   878f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   878f6:	fa43 f305 	asr.w	r3, r3, r5
   878fa:	18c0      	adds	r0, r0, r3
   878fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   87900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87904:	d507      	bpl.n	87916 <__adddf3+0xe6>
   87906:	f04f 0e00 	mov.w	lr, #0
   8790a:	f1dc 0c00 	rsbs	ip, ip, #0
   8790e:	eb7e 0000 	sbcs.w	r0, lr, r0
   87912:	eb6e 0101 	sbc.w	r1, lr, r1
   87916:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8791a:	d31b      	bcc.n	87954 <__adddf3+0x124>
   8791c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   87920:	d30c      	bcc.n	8793c <__adddf3+0x10c>
   87922:	0849      	lsrs	r1, r1, #1
   87924:	ea5f 0030 	movs.w	r0, r0, rrx
   87928:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8792c:	f104 0401 	add.w	r4, r4, #1
   87930:	ea4f 5244 	mov.w	r2, r4, lsl #21
   87934:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   87938:	f080 809a 	bcs.w	87a70 <__adddf3+0x240>
   8793c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   87940:	bf08      	it	eq
   87942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87946:	f150 0000 	adcs.w	r0, r0, #0
   8794a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8794e:	ea41 0105 	orr.w	r1, r1, r5
   87952:	bd30      	pop	{r4, r5, pc}
   87954:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87958:	4140      	adcs	r0, r0
   8795a:	eb41 0101 	adc.w	r1, r1, r1
   8795e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87962:	f1a4 0401 	sub.w	r4, r4, #1
   87966:	d1e9      	bne.n	8793c <__adddf3+0x10c>
   87968:	f091 0f00 	teq	r1, #0
   8796c:	bf04      	itt	eq
   8796e:	4601      	moveq	r1, r0
   87970:	2000      	moveq	r0, #0
   87972:	fab1 f381 	clz	r3, r1
   87976:	bf08      	it	eq
   87978:	3320      	addeq	r3, #32
   8797a:	f1a3 030b 	sub.w	r3, r3, #11
   8797e:	f1b3 0220 	subs.w	r2, r3, #32
   87982:	da0c      	bge.n	8799e <__adddf3+0x16e>
   87984:	320c      	adds	r2, #12
   87986:	dd08      	ble.n	8799a <__adddf3+0x16a>
   87988:	f102 0c14 	add.w	ip, r2, #20
   8798c:	f1c2 020c 	rsb	r2, r2, #12
   87990:	fa01 f00c 	lsl.w	r0, r1, ip
   87994:	fa21 f102 	lsr.w	r1, r1, r2
   87998:	e00c      	b.n	879b4 <__adddf3+0x184>
   8799a:	f102 0214 	add.w	r2, r2, #20
   8799e:	bfd8      	it	le
   879a0:	f1c2 0c20 	rsble	ip, r2, #32
   879a4:	fa01 f102 	lsl.w	r1, r1, r2
   879a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   879ac:	bfdc      	itt	le
   879ae:	ea41 010c 	orrle.w	r1, r1, ip
   879b2:	4090      	lslle	r0, r2
   879b4:	1ae4      	subs	r4, r4, r3
   879b6:	bfa2      	ittt	ge
   879b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   879bc:	4329      	orrge	r1, r5
   879be:	bd30      	popge	{r4, r5, pc}
   879c0:	ea6f 0404 	mvn.w	r4, r4
   879c4:	3c1f      	subs	r4, #31
   879c6:	da1c      	bge.n	87a02 <__adddf3+0x1d2>
   879c8:	340c      	adds	r4, #12
   879ca:	dc0e      	bgt.n	879ea <__adddf3+0x1ba>
   879cc:	f104 0414 	add.w	r4, r4, #20
   879d0:	f1c4 0220 	rsb	r2, r4, #32
   879d4:	fa20 f004 	lsr.w	r0, r0, r4
   879d8:	fa01 f302 	lsl.w	r3, r1, r2
   879dc:	ea40 0003 	orr.w	r0, r0, r3
   879e0:	fa21 f304 	lsr.w	r3, r1, r4
   879e4:	ea45 0103 	orr.w	r1, r5, r3
   879e8:	bd30      	pop	{r4, r5, pc}
   879ea:	f1c4 040c 	rsb	r4, r4, #12
   879ee:	f1c4 0220 	rsb	r2, r4, #32
   879f2:	fa20 f002 	lsr.w	r0, r0, r2
   879f6:	fa01 f304 	lsl.w	r3, r1, r4
   879fa:	ea40 0003 	orr.w	r0, r0, r3
   879fe:	4629      	mov	r1, r5
   87a00:	bd30      	pop	{r4, r5, pc}
   87a02:	fa21 f004 	lsr.w	r0, r1, r4
   87a06:	4629      	mov	r1, r5
   87a08:	bd30      	pop	{r4, r5, pc}
   87a0a:	f094 0f00 	teq	r4, #0
   87a0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   87a12:	bf06      	itte	eq
   87a14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   87a18:	3401      	addeq	r4, #1
   87a1a:	3d01      	subne	r5, #1
   87a1c:	e74e      	b.n	878bc <__adddf3+0x8c>
   87a1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87a22:	bf18      	it	ne
   87a24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87a28:	d029      	beq.n	87a7e <__adddf3+0x24e>
   87a2a:	ea94 0f05 	teq	r4, r5
   87a2e:	bf08      	it	eq
   87a30:	ea90 0f02 	teqeq	r0, r2
   87a34:	d005      	beq.n	87a42 <__adddf3+0x212>
   87a36:	ea54 0c00 	orrs.w	ip, r4, r0
   87a3a:	bf04      	itt	eq
   87a3c:	4619      	moveq	r1, r3
   87a3e:	4610      	moveq	r0, r2
   87a40:	bd30      	pop	{r4, r5, pc}
   87a42:	ea91 0f03 	teq	r1, r3
   87a46:	bf1e      	ittt	ne
   87a48:	2100      	movne	r1, #0
   87a4a:	2000      	movne	r0, #0
   87a4c:	bd30      	popne	{r4, r5, pc}
   87a4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   87a52:	d105      	bne.n	87a60 <__adddf3+0x230>
   87a54:	0040      	lsls	r0, r0, #1
   87a56:	4149      	adcs	r1, r1
   87a58:	bf28      	it	cs
   87a5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   87a5e:	bd30      	pop	{r4, r5, pc}
   87a60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   87a64:	bf3c      	itt	cc
   87a66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   87a6a:	bd30      	popcc	{r4, r5, pc}
   87a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87a70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   87a74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87a78:	f04f 0000 	mov.w	r0, #0
   87a7c:	bd30      	pop	{r4, r5, pc}
   87a7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87a82:	bf1a      	itte	ne
   87a84:	4619      	movne	r1, r3
   87a86:	4610      	movne	r0, r2
   87a88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   87a8c:	bf1c      	itt	ne
   87a8e:	460b      	movne	r3, r1
   87a90:	4602      	movne	r2, r0
   87a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87a96:	bf06      	itte	eq
   87a98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   87a9c:	ea91 0f03 	teqeq	r1, r3
   87aa0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   87aa4:	bd30      	pop	{r4, r5, pc}
   87aa6:	bf00      	nop

00087aa8 <__aeabi_ui2d>:
   87aa8:	f090 0f00 	teq	r0, #0
   87aac:	bf04      	itt	eq
   87aae:	2100      	moveq	r1, #0
   87ab0:	4770      	bxeq	lr
   87ab2:	b530      	push	{r4, r5, lr}
   87ab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87ab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87abc:	f04f 0500 	mov.w	r5, #0
   87ac0:	f04f 0100 	mov.w	r1, #0
   87ac4:	e750      	b.n	87968 <__adddf3+0x138>
   87ac6:	bf00      	nop

00087ac8 <__aeabi_i2d>:
   87ac8:	f090 0f00 	teq	r0, #0
   87acc:	bf04      	itt	eq
   87ace:	2100      	moveq	r1, #0
   87ad0:	4770      	bxeq	lr
   87ad2:	b530      	push	{r4, r5, lr}
   87ad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87ad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87adc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87ae0:	bf48      	it	mi
   87ae2:	4240      	negmi	r0, r0
   87ae4:	f04f 0100 	mov.w	r1, #0
   87ae8:	e73e      	b.n	87968 <__adddf3+0x138>
   87aea:	bf00      	nop

00087aec <__aeabi_f2d>:
   87aec:	0042      	lsls	r2, r0, #1
   87aee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   87af2:	ea4f 0131 	mov.w	r1, r1, rrx
   87af6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   87afa:	bf1f      	itttt	ne
   87afc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   87b00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87b04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   87b08:	4770      	bxne	lr
   87b0a:	f092 0f00 	teq	r2, #0
   87b0e:	bf14      	ite	ne
   87b10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87b14:	4770      	bxeq	lr
   87b16:	b530      	push	{r4, r5, lr}
   87b18:	f44f 7460 	mov.w	r4, #896	; 0x380
   87b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87b20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87b24:	e720      	b.n	87968 <__adddf3+0x138>
   87b26:	bf00      	nop

00087b28 <__aeabi_ul2d>:
   87b28:	ea50 0201 	orrs.w	r2, r0, r1
   87b2c:	bf08      	it	eq
   87b2e:	4770      	bxeq	lr
   87b30:	b530      	push	{r4, r5, lr}
   87b32:	f04f 0500 	mov.w	r5, #0
   87b36:	e00a      	b.n	87b4e <__aeabi_l2d+0x16>

00087b38 <__aeabi_l2d>:
   87b38:	ea50 0201 	orrs.w	r2, r0, r1
   87b3c:	bf08      	it	eq
   87b3e:	4770      	bxeq	lr
   87b40:	b530      	push	{r4, r5, lr}
   87b42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   87b46:	d502      	bpl.n	87b4e <__aeabi_l2d+0x16>
   87b48:	4240      	negs	r0, r0
   87b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87b4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87b52:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87b56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   87b5a:	f43f aedc 	beq.w	87916 <__adddf3+0xe6>
   87b5e:	f04f 0203 	mov.w	r2, #3
   87b62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87b66:	bf18      	it	ne
   87b68:	3203      	addne	r2, #3
   87b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87b6e:	bf18      	it	ne
   87b70:	3203      	addne	r2, #3
   87b72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   87b76:	f1c2 0320 	rsb	r3, r2, #32
   87b7a:	fa00 fc03 	lsl.w	ip, r0, r3
   87b7e:	fa20 f002 	lsr.w	r0, r0, r2
   87b82:	fa01 fe03 	lsl.w	lr, r1, r3
   87b86:	ea40 000e 	orr.w	r0, r0, lr
   87b8a:	fa21 f102 	lsr.w	r1, r1, r2
   87b8e:	4414      	add	r4, r2
   87b90:	e6c1      	b.n	87916 <__adddf3+0xe6>
   87b92:	bf00      	nop

00087b94 <__aeabi_dmul>:
   87b94:	b570      	push	{r4, r5, r6, lr}
   87b96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87b9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87b9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87ba2:	bf1d      	ittte	ne
   87ba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87ba8:	ea94 0f0c 	teqne	r4, ip
   87bac:	ea95 0f0c 	teqne	r5, ip
   87bb0:	f000 f8de 	bleq	87d70 <__aeabi_dmul+0x1dc>
   87bb4:	442c      	add	r4, r5
   87bb6:	ea81 0603 	eor.w	r6, r1, r3
   87bba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87bbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87bc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87bc6:	bf18      	it	ne
   87bc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87bcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87bd4:	d038      	beq.n	87c48 <__aeabi_dmul+0xb4>
   87bd6:	fba0 ce02 	umull	ip, lr, r0, r2
   87bda:	f04f 0500 	mov.w	r5, #0
   87bde:	fbe1 e502 	umlal	lr, r5, r1, r2
   87be2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87be6:	fbe0 e503 	umlal	lr, r5, r0, r3
   87bea:	f04f 0600 	mov.w	r6, #0
   87bee:	fbe1 5603 	umlal	r5, r6, r1, r3
   87bf2:	f09c 0f00 	teq	ip, #0
   87bf6:	bf18      	it	ne
   87bf8:	f04e 0e01 	orrne.w	lr, lr, #1
   87bfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87c00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87c04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87c08:	d204      	bcs.n	87c14 <__aeabi_dmul+0x80>
   87c0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87c0e:	416d      	adcs	r5, r5
   87c10:	eb46 0606 	adc.w	r6, r6, r6
   87c14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87c18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87c1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87c20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87c24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87c28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87c2c:	bf88      	it	hi
   87c2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87c32:	d81e      	bhi.n	87c72 <__aeabi_dmul+0xde>
   87c34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87c38:	bf08      	it	eq
   87c3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87c3e:	f150 0000 	adcs.w	r0, r0, #0
   87c42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87c46:	bd70      	pop	{r4, r5, r6, pc}
   87c48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87c4c:	ea46 0101 	orr.w	r1, r6, r1
   87c50:	ea40 0002 	orr.w	r0, r0, r2
   87c54:	ea81 0103 	eor.w	r1, r1, r3
   87c58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87c5c:	bfc2      	ittt	gt
   87c5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   87c62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87c66:	bd70      	popgt	{r4, r5, r6, pc}
   87c68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87c6c:	f04f 0e00 	mov.w	lr, #0
   87c70:	3c01      	subs	r4, #1
   87c72:	f300 80ab 	bgt.w	87dcc <__aeabi_dmul+0x238>
   87c76:	f114 0f36 	cmn.w	r4, #54	; 0x36
   87c7a:	bfde      	ittt	le
   87c7c:	2000      	movle	r0, #0
   87c7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   87c82:	bd70      	pople	{r4, r5, r6, pc}
   87c84:	f1c4 0400 	rsb	r4, r4, #0
   87c88:	3c20      	subs	r4, #32
   87c8a:	da35      	bge.n	87cf8 <__aeabi_dmul+0x164>
   87c8c:	340c      	adds	r4, #12
   87c8e:	dc1b      	bgt.n	87cc8 <__aeabi_dmul+0x134>
   87c90:	f104 0414 	add.w	r4, r4, #20
   87c94:	f1c4 0520 	rsb	r5, r4, #32
   87c98:	fa00 f305 	lsl.w	r3, r0, r5
   87c9c:	fa20 f004 	lsr.w	r0, r0, r4
   87ca0:	fa01 f205 	lsl.w	r2, r1, r5
   87ca4:	ea40 0002 	orr.w	r0, r0, r2
   87ca8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   87cac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87cb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87cb4:	fa21 f604 	lsr.w	r6, r1, r4
   87cb8:	eb42 0106 	adc.w	r1, r2, r6
   87cbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87cc0:	bf08      	it	eq
   87cc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87cc6:	bd70      	pop	{r4, r5, r6, pc}
   87cc8:	f1c4 040c 	rsb	r4, r4, #12
   87ccc:	f1c4 0520 	rsb	r5, r4, #32
   87cd0:	fa00 f304 	lsl.w	r3, r0, r4
   87cd4:	fa20 f005 	lsr.w	r0, r0, r5
   87cd8:	fa01 f204 	lsl.w	r2, r1, r4
   87cdc:	ea40 0002 	orr.w	r0, r0, r2
   87ce0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87ce4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   87ce8:	f141 0100 	adc.w	r1, r1, #0
   87cec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87cf0:	bf08      	it	eq
   87cf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87cf6:	bd70      	pop	{r4, r5, r6, pc}
   87cf8:	f1c4 0520 	rsb	r5, r4, #32
   87cfc:	fa00 f205 	lsl.w	r2, r0, r5
   87d00:	ea4e 0e02 	orr.w	lr, lr, r2
   87d04:	fa20 f304 	lsr.w	r3, r0, r4
   87d08:	fa01 f205 	lsl.w	r2, r1, r5
   87d0c:	ea43 0302 	orr.w	r3, r3, r2
   87d10:	fa21 f004 	lsr.w	r0, r1, r4
   87d14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87d18:	fa21 f204 	lsr.w	r2, r1, r4
   87d1c:	ea20 0002 	bic.w	r0, r0, r2
   87d20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   87d24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   87d28:	bf08      	it	eq
   87d2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   87d2e:	bd70      	pop	{r4, r5, r6, pc}
   87d30:	f094 0f00 	teq	r4, #0
   87d34:	d10f      	bne.n	87d56 <__aeabi_dmul+0x1c2>
   87d36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   87d3a:	0040      	lsls	r0, r0, #1
   87d3c:	eb41 0101 	adc.w	r1, r1, r1
   87d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87d44:	bf08      	it	eq
   87d46:	3c01      	subeq	r4, #1
   87d48:	d0f7      	beq.n	87d3a <__aeabi_dmul+0x1a6>
   87d4a:	ea41 0106 	orr.w	r1, r1, r6
   87d4e:	f095 0f00 	teq	r5, #0
   87d52:	bf18      	it	ne
   87d54:	4770      	bxne	lr
   87d56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   87d5a:	0052      	lsls	r2, r2, #1
   87d5c:	eb43 0303 	adc.w	r3, r3, r3
   87d60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   87d64:	bf08      	it	eq
   87d66:	3d01      	subeq	r5, #1
   87d68:	d0f7      	beq.n	87d5a <__aeabi_dmul+0x1c6>
   87d6a:	ea43 0306 	orr.w	r3, r3, r6
   87d6e:	4770      	bx	lr
   87d70:	ea94 0f0c 	teq	r4, ip
   87d74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87d78:	bf18      	it	ne
   87d7a:	ea95 0f0c 	teqne	r5, ip
   87d7e:	d00c      	beq.n	87d9a <__aeabi_dmul+0x206>
   87d80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87d84:	bf18      	it	ne
   87d86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87d8a:	d1d1      	bne.n	87d30 <__aeabi_dmul+0x19c>
   87d8c:	ea81 0103 	eor.w	r1, r1, r3
   87d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87d94:	f04f 0000 	mov.w	r0, #0
   87d98:	bd70      	pop	{r4, r5, r6, pc}
   87d9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87d9e:	bf06      	itte	eq
   87da0:	4610      	moveq	r0, r2
   87da2:	4619      	moveq	r1, r3
   87da4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87da8:	d019      	beq.n	87dde <__aeabi_dmul+0x24a>
   87daa:	ea94 0f0c 	teq	r4, ip
   87dae:	d102      	bne.n	87db6 <__aeabi_dmul+0x222>
   87db0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   87db4:	d113      	bne.n	87dde <__aeabi_dmul+0x24a>
   87db6:	ea95 0f0c 	teq	r5, ip
   87dba:	d105      	bne.n	87dc8 <__aeabi_dmul+0x234>
   87dbc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   87dc0:	bf1c      	itt	ne
   87dc2:	4610      	movne	r0, r2
   87dc4:	4619      	movne	r1, r3
   87dc6:	d10a      	bne.n	87dde <__aeabi_dmul+0x24a>
   87dc8:	ea81 0103 	eor.w	r1, r1, r3
   87dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   87dd0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87dd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87dd8:	f04f 0000 	mov.w	r0, #0
   87ddc:	bd70      	pop	{r4, r5, r6, pc}
   87dde:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   87de2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   87de6:	bd70      	pop	{r4, r5, r6, pc}

00087de8 <__aeabi_ddiv>:
   87de8:	b570      	push	{r4, r5, r6, lr}
   87dea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87dee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87df2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87df6:	bf1d      	ittte	ne
   87df8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87dfc:	ea94 0f0c 	teqne	r4, ip
   87e00:	ea95 0f0c 	teqne	r5, ip
   87e04:	f000 f8a7 	bleq	87f56 <__aeabi_ddiv+0x16e>
   87e08:	eba4 0405 	sub.w	r4, r4, r5
   87e0c:	ea81 0e03 	eor.w	lr, r1, r3
   87e10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87e14:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87e18:	f000 8088 	beq.w	87f2c <__aeabi_ddiv+0x144>
   87e1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87e20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   87e24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   87e28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   87e2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   87e30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   87e34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   87e38:	ea4f 2600 	mov.w	r6, r0, lsl #8
   87e3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   87e40:	429d      	cmp	r5, r3
   87e42:	bf08      	it	eq
   87e44:	4296      	cmpeq	r6, r2
   87e46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   87e4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   87e4e:	d202      	bcs.n	87e56 <__aeabi_ddiv+0x6e>
   87e50:	085b      	lsrs	r3, r3, #1
   87e52:	ea4f 0232 	mov.w	r2, r2, rrx
   87e56:	1ab6      	subs	r6, r6, r2
   87e58:	eb65 0503 	sbc.w	r5, r5, r3
   87e5c:	085b      	lsrs	r3, r3, #1
   87e5e:	ea4f 0232 	mov.w	r2, r2, rrx
   87e62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   87e66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   87e6a:	ebb6 0e02 	subs.w	lr, r6, r2
   87e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   87e72:	bf22      	ittt	cs
   87e74:	1ab6      	subcs	r6, r6, r2
   87e76:	4675      	movcs	r5, lr
   87e78:	ea40 000c 	orrcs.w	r0, r0, ip
   87e7c:	085b      	lsrs	r3, r3, #1
   87e7e:	ea4f 0232 	mov.w	r2, r2, rrx
   87e82:	ebb6 0e02 	subs.w	lr, r6, r2
   87e86:	eb75 0e03 	sbcs.w	lr, r5, r3
   87e8a:	bf22      	ittt	cs
   87e8c:	1ab6      	subcs	r6, r6, r2
   87e8e:	4675      	movcs	r5, lr
   87e90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   87e94:	085b      	lsrs	r3, r3, #1
   87e96:	ea4f 0232 	mov.w	r2, r2, rrx
   87e9a:	ebb6 0e02 	subs.w	lr, r6, r2
   87e9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   87ea2:	bf22      	ittt	cs
   87ea4:	1ab6      	subcs	r6, r6, r2
   87ea6:	4675      	movcs	r5, lr
   87ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   87eac:	085b      	lsrs	r3, r3, #1
   87eae:	ea4f 0232 	mov.w	r2, r2, rrx
   87eb2:	ebb6 0e02 	subs.w	lr, r6, r2
   87eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   87eba:	bf22      	ittt	cs
   87ebc:	1ab6      	subcs	r6, r6, r2
   87ebe:	4675      	movcs	r5, lr
   87ec0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   87ec4:	ea55 0e06 	orrs.w	lr, r5, r6
   87ec8:	d018      	beq.n	87efc <__aeabi_ddiv+0x114>
   87eca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   87ece:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   87ed2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   87ed6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   87eda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   87ede:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   87ee2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   87ee6:	d1c0      	bne.n	87e6a <__aeabi_ddiv+0x82>
   87ee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87eec:	d10b      	bne.n	87f06 <__aeabi_ddiv+0x11e>
   87eee:	ea41 0100 	orr.w	r1, r1, r0
   87ef2:	f04f 0000 	mov.w	r0, #0
   87ef6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   87efa:	e7b6      	b.n	87e6a <__aeabi_ddiv+0x82>
   87efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87f00:	bf04      	itt	eq
   87f02:	4301      	orreq	r1, r0
   87f04:	2000      	moveq	r0, #0
   87f06:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87f0a:	bf88      	it	hi
   87f0c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87f10:	f63f aeaf 	bhi.w	87c72 <__aeabi_dmul+0xde>
   87f14:	ebb5 0c03 	subs.w	ip, r5, r3
   87f18:	bf04      	itt	eq
   87f1a:	ebb6 0c02 	subseq.w	ip, r6, r2
   87f1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87f22:	f150 0000 	adcs.w	r0, r0, #0
   87f26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87f2a:	bd70      	pop	{r4, r5, r6, pc}
   87f2c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   87f30:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   87f34:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   87f38:	bfc2      	ittt	gt
   87f3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   87f3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87f42:	bd70      	popgt	{r4, r5, r6, pc}
   87f44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87f48:	f04f 0e00 	mov.w	lr, #0
   87f4c:	3c01      	subs	r4, #1
   87f4e:	e690      	b.n	87c72 <__aeabi_dmul+0xde>
   87f50:	ea45 0e06 	orr.w	lr, r5, r6
   87f54:	e68d      	b.n	87c72 <__aeabi_dmul+0xde>
   87f56:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   87f5a:	ea94 0f0c 	teq	r4, ip
   87f5e:	bf08      	it	eq
   87f60:	ea95 0f0c 	teqeq	r5, ip
   87f64:	f43f af3b 	beq.w	87dde <__aeabi_dmul+0x24a>
   87f68:	ea94 0f0c 	teq	r4, ip
   87f6c:	d10a      	bne.n	87f84 <__aeabi_ddiv+0x19c>
   87f6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87f72:	f47f af34 	bne.w	87dde <__aeabi_dmul+0x24a>
   87f76:	ea95 0f0c 	teq	r5, ip
   87f7a:	f47f af25 	bne.w	87dc8 <__aeabi_dmul+0x234>
   87f7e:	4610      	mov	r0, r2
   87f80:	4619      	mov	r1, r3
   87f82:	e72c      	b.n	87dde <__aeabi_dmul+0x24a>
   87f84:	ea95 0f0c 	teq	r5, ip
   87f88:	d106      	bne.n	87f98 <__aeabi_ddiv+0x1b0>
   87f8a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   87f8e:	f43f aefd 	beq.w	87d8c <__aeabi_dmul+0x1f8>
   87f92:	4610      	mov	r0, r2
   87f94:	4619      	mov	r1, r3
   87f96:	e722      	b.n	87dde <__aeabi_dmul+0x24a>
   87f98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   87f9c:	bf18      	it	ne
   87f9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   87fa2:	f47f aec5 	bne.w	87d30 <__aeabi_dmul+0x19c>
   87fa6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   87faa:	f47f af0d 	bne.w	87dc8 <__aeabi_dmul+0x234>
   87fae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   87fb2:	f47f aeeb 	bne.w	87d8c <__aeabi_dmul+0x1f8>
   87fb6:	e712      	b.n	87dde <__aeabi_dmul+0x24a>

00087fb8 <__gedf2>:
   87fb8:	f04f 3cff 	mov.w	ip, #4294967295
   87fbc:	e006      	b.n	87fcc <__cmpdf2+0x4>
   87fbe:	bf00      	nop

00087fc0 <__ledf2>:
   87fc0:	f04f 0c01 	mov.w	ip, #1
   87fc4:	e002      	b.n	87fcc <__cmpdf2+0x4>
   87fc6:	bf00      	nop

00087fc8 <__cmpdf2>:
   87fc8:	f04f 0c01 	mov.w	ip, #1
   87fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
   87fd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   87fd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   87fd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   87fdc:	bf18      	it	ne
   87fde:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   87fe2:	d01b      	beq.n	8801c <__cmpdf2+0x54>
   87fe4:	b001      	add	sp, #4
   87fe6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   87fea:	bf0c      	ite	eq
   87fec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   87ff0:	ea91 0f03 	teqne	r1, r3
   87ff4:	bf02      	ittt	eq
   87ff6:	ea90 0f02 	teqeq	r0, r2
   87ffa:	2000      	moveq	r0, #0
   87ffc:	4770      	bxeq	lr
   87ffe:	f110 0f00 	cmn.w	r0, #0
   88002:	ea91 0f03 	teq	r1, r3
   88006:	bf58      	it	pl
   88008:	4299      	cmppl	r1, r3
   8800a:	bf08      	it	eq
   8800c:	4290      	cmpeq	r0, r2
   8800e:	bf2c      	ite	cs
   88010:	17d8      	asrcs	r0, r3, #31
   88012:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   88016:	f040 0001 	orr.w	r0, r0, #1
   8801a:	4770      	bx	lr
   8801c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   88020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88024:	d102      	bne.n	8802c <__cmpdf2+0x64>
   88026:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8802a:	d107      	bne.n	8803c <__cmpdf2+0x74>
   8802c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88030:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88034:	d1d6      	bne.n	87fe4 <__cmpdf2+0x1c>
   88036:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8803a:	d0d3      	beq.n	87fe4 <__cmpdf2+0x1c>
   8803c:	f85d 0b04 	ldr.w	r0, [sp], #4
   88040:	4770      	bx	lr
   88042:	bf00      	nop

00088044 <__aeabi_cdrcmple>:
   88044:	4684      	mov	ip, r0
   88046:	4610      	mov	r0, r2
   88048:	4662      	mov	r2, ip
   8804a:	468c      	mov	ip, r1
   8804c:	4619      	mov	r1, r3
   8804e:	4663      	mov	r3, ip
   88050:	e000      	b.n	88054 <__aeabi_cdcmpeq>
   88052:	bf00      	nop

00088054 <__aeabi_cdcmpeq>:
   88054:	b501      	push	{r0, lr}
   88056:	f7ff ffb7 	bl	87fc8 <__cmpdf2>
   8805a:	2800      	cmp	r0, #0
   8805c:	bf48      	it	mi
   8805e:	f110 0f00 	cmnmi.w	r0, #0
   88062:	bd01      	pop	{r0, pc}

00088064 <__aeabi_dcmpeq>:
   88064:	f84d ed08 	str.w	lr, [sp, #-8]!
   88068:	f7ff fff4 	bl	88054 <__aeabi_cdcmpeq>
   8806c:	bf0c      	ite	eq
   8806e:	2001      	moveq	r0, #1
   88070:	2000      	movne	r0, #0
   88072:	f85d fb08 	ldr.w	pc, [sp], #8
   88076:	bf00      	nop

00088078 <__aeabi_dcmplt>:
   88078:	f84d ed08 	str.w	lr, [sp, #-8]!
   8807c:	f7ff ffea 	bl	88054 <__aeabi_cdcmpeq>
   88080:	bf34      	ite	cc
   88082:	2001      	movcc	r0, #1
   88084:	2000      	movcs	r0, #0
   88086:	f85d fb08 	ldr.w	pc, [sp], #8
   8808a:	bf00      	nop

0008808c <__aeabi_dcmple>:
   8808c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88090:	f7ff ffe0 	bl	88054 <__aeabi_cdcmpeq>
   88094:	bf94      	ite	ls
   88096:	2001      	movls	r0, #1
   88098:	2000      	movhi	r0, #0
   8809a:	f85d fb08 	ldr.w	pc, [sp], #8
   8809e:	bf00      	nop

000880a0 <__aeabi_dcmpge>:
   880a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   880a4:	f7ff ffce 	bl	88044 <__aeabi_cdrcmple>
   880a8:	bf94      	ite	ls
   880aa:	2001      	movls	r0, #1
   880ac:	2000      	movhi	r0, #0
   880ae:	f85d fb08 	ldr.w	pc, [sp], #8
   880b2:	bf00      	nop

000880b4 <__aeabi_dcmpgt>:
   880b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   880b8:	f7ff ffc4 	bl	88044 <__aeabi_cdrcmple>
   880bc:	bf34      	ite	cc
   880be:	2001      	movcc	r0, #1
   880c0:	2000      	movcs	r0, #0
   880c2:	f85d fb08 	ldr.w	pc, [sp], #8
   880c6:	bf00      	nop

000880c8 <__aeabi_dcmpun>:
   880c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   880cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   880d0:	d102      	bne.n	880d8 <__aeabi_dcmpun+0x10>
   880d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   880d6:	d10a      	bne.n	880ee <__aeabi_dcmpun+0x26>
   880d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   880dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   880e0:	d102      	bne.n	880e8 <__aeabi_dcmpun+0x20>
   880e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   880e6:	d102      	bne.n	880ee <__aeabi_dcmpun+0x26>
   880e8:	f04f 0000 	mov.w	r0, #0
   880ec:	4770      	bx	lr
   880ee:	f04f 0001 	mov.w	r0, #1
   880f2:	4770      	bx	lr

000880f4 <__aeabi_d2iz>:
   880f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   880f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   880fc:	d215      	bcs.n	8812a <__aeabi_d2iz+0x36>
   880fe:	d511      	bpl.n	88124 <__aeabi_d2iz+0x30>
   88100:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88104:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88108:	d912      	bls.n	88130 <__aeabi_d2iz+0x3c>
   8810a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8810e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   88112:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   88116:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8811a:	fa23 f002 	lsr.w	r0, r3, r2
   8811e:	bf18      	it	ne
   88120:	4240      	negne	r0, r0
   88122:	4770      	bx	lr
   88124:	f04f 0000 	mov.w	r0, #0
   88128:	4770      	bx	lr
   8812a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8812e:	d105      	bne.n	8813c <__aeabi_d2iz+0x48>
   88130:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   88134:	bf08      	it	eq
   88136:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8813a:	4770      	bx	lr
   8813c:	f04f 0000 	mov.w	r0, #0
   88140:	4770      	bx	lr
   88142:	bf00      	nop

00088144 <__aeabi_uldivmod>:
   88144:	b953      	cbnz	r3, 8815c <__aeabi_uldivmod+0x18>
   88146:	b94a      	cbnz	r2, 8815c <__aeabi_uldivmod+0x18>
   88148:	2900      	cmp	r1, #0
   8814a:	bf08      	it	eq
   8814c:	2800      	cmpeq	r0, #0
   8814e:	bf1c      	itt	ne
   88150:	f04f 31ff 	movne.w	r1, #4294967295
   88154:	f04f 30ff 	movne.w	r0, #4294967295
   88158:	f000 b97a 	b.w	88450 <__aeabi_idiv0>
   8815c:	f1ad 0c08 	sub.w	ip, sp, #8
   88160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   88164:	f000 f806 	bl	88174 <__udivmoddi4>
   88168:	f8dd e004 	ldr.w	lr, [sp, #4]
   8816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88170:	b004      	add	sp, #16
   88172:	4770      	bx	lr

00088174 <__udivmoddi4>:
   88174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   88178:	468c      	mov	ip, r1
   8817a:	460e      	mov	r6, r1
   8817c:	4604      	mov	r4, r0
   8817e:	9d08      	ldr	r5, [sp, #32]
   88180:	2b00      	cmp	r3, #0
   88182:	d150      	bne.n	88226 <__udivmoddi4+0xb2>
   88184:	428a      	cmp	r2, r1
   88186:	4617      	mov	r7, r2
   88188:	d96c      	bls.n	88264 <__udivmoddi4+0xf0>
   8818a:	fab2 fe82 	clz	lr, r2
   8818e:	f1be 0f00 	cmp.w	lr, #0
   88192:	d00b      	beq.n	881ac <__udivmoddi4+0x38>
   88194:	f1ce 0c20 	rsb	ip, lr, #32
   88198:	fa01 f60e 	lsl.w	r6, r1, lr
   8819c:	fa20 fc0c 	lsr.w	ip, r0, ip
   881a0:	fa02 f70e 	lsl.w	r7, r2, lr
   881a4:	ea4c 0c06 	orr.w	ip, ip, r6
   881a8:	fa00 f40e 	lsl.w	r4, r0, lr
   881ac:	0c3a      	lsrs	r2, r7, #16
   881ae:	fbbc f9f2 	udiv	r9, ip, r2
   881b2:	b2bb      	uxth	r3, r7
   881b4:	fb02 cc19 	mls	ip, r2, r9, ip
   881b8:	fb09 fa03 	mul.w	sl, r9, r3
   881bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   881c0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   881c4:	45b2      	cmp	sl, r6
   881c6:	d90a      	bls.n	881de <__udivmoddi4+0x6a>
   881c8:	19f6      	adds	r6, r6, r7
   881ca:	f109 31ff 	add.w	r1, r9, #4294967295
   881ce:	f080 8125 	bcs.w	8841c <__udivmoddi4+0x2a8>
   881d2:	45b2      	cmp	sl, r6
   881d4:	f240 8122 	bls.w	8841c <__udivmoddi4+0x2a8>
   881d8:	f1a9 0902 	sub.w	r9, r9, #2
   881dc:	443e      	add	r6, r7
   881de:	eba6 060a 	sub.w	r6, r6, sl
   881e2:	fbb6 f0f2 	udiv	r0, r6, r2
   881e6:	fb02 6610 	mls	r6, r2, r0, r6
   881ea:	fb00 f303 	mul.w	r3, r0, r3
   881ee:	b2a4      	uxth	r4, r4
   881f0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   881f4:	42a3      	cmp	r3, r4
   881f6:	d909      	bls.n	8820c <__udivmoddi4+0x98>
   881f8:	19e4      	adds	r4, r4, r7
   881fa:	f100 32ff 	add.w	r2, r0, #4294967295
   881fe:	f080 810b 	bcs.w	88418 <__udivmoddi4+0x2a4>
   88202:	42a3      	cmp	r3, r4
   88204:	f240 8108 	bls.w	88418 <__udivmoddi4+0x2a4>
   88208:	3802      	subs	r0, #2
   8820a:	443c      	add	r4, r7
   8820c:	2100      	movs	r1, #0
   8820e:	1ae4      	subs	r4, r4, r3
   88210:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   88214:	2d00      	cmp	r5, #0
   88216:	d062      	beq.n	882de <__udivmoddi4+0x16a>
   88218:	2300      	movs	r3, #0
   8821a:	fa24 f40e 	lsr.w	r4, r4, lr
   8821e:	602c      	str	r4, [r5, #0]
   88220:	606b      	str	r3, [r5, #4]
   88222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88226:	428b      	cmp	r3, r1
   88228:	d907      	bls.n	8823a <__udivmoddi4+0xc6>
   8822a:	2d00      	cmp	r5, #0
   8822c:	d055      	beq.n	882da <__udivmoddi4+0x166>
   8822e:	2100      	movs	r1, #0
   88230:	e885 0041 	stmia.w	r5, {r0, r6}
   88234:	4608      	mov	r0, r1
   88236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8823a:	fab3 f183 	clz	r1, r3
   8823e:	2900      	cmp	r1, #0
   88240:	f040 808f 	bne.w	88362 <__udivmoddi4+0x1ee>
   88244:	42b3      	cmp	r3, r6
   88246:	d302      	bcc.n	8824e <__udivmoddi4+0xda>
   88248:	4282      	cmp	r2, r0
   8824a:	f200 80fc 	bhi.w	88446 <__udivmoddi4+0x2d2>
   8824e:	1a84      	subs	r4, r0, r2
   88250:	eb66 0603 	sbc.w	r6, r6, r3
   88254:	2001      	movs	r0, #1
   88256:	46b4      	mov	ip, r6
   88258:	2d00      	cmp	r5, #0
   8825a:	d040      	beq.n	882de <__udivmoddi4+0x16a>
   8825c:	e885 1010 	stmia.w	r5, {r4, ip}
   88260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88264:	b912      	cbnz	r2, 8826c <__udivmoddi4+0xf8>
   88266:	2701      	movs	r7, #1
   88268:	fbb7 f7f2 	udiv	r7, r7, r2
   8826c:	fab7 fe87 	clz	lr, r7
   88270:	f1be 0f00 	cmp.w	lr, #0
   88274:	d135      	bne.n	882e2 <__udivmoddi4+0x16e>
   88276:	2101      	movs	r1, #1
   88278:	1bf6      	subs	r6, r6, r7
   8827a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8827e:	fa1f f887 	uxth.w	r8, r7
   88282:	fbb6 f2fc 	udiv	r2, r6, ip
   88286:	fb0c 6612 	mls	r6, ip, r2, r6
   8828a:	fb08 f002 	mul.w	r0, r8, r2
   8828e:	0c23      	lsrs	r3, r4, #16
   88290:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   88294:	42b0      	cmp	r0, r6
   88296:	d907      	bls.n	882a8 <__udivmoddi4+0x134>
   88298:	19f6      	adds	r6, r6, r7
   8829a:	f102 33ff 	add.w	r3, r2, #4294967295
   8829e:	d202      	bcs.n	882a6 <__udivmoddi4+0x132>
   882a0:	42b0      	cmp	r0, r6
   882a2:	f200 80d2 	bhi.w	8844a <__udivmoddi4+0x2d6>
   882a6:	461a      	mov	r2, r3
   882a8:	1a36      	subs	r6, r6, r0
   882aa:	fbb6 f0fc 	udiv	r0, r6, ip
   882ae:	fb0c 6610 	mls	r6, ip, r0, r6
   882b2:	fb08 f800 	mul.w	r8, r8, r0
   882b6:	b2a3      	uxth	r3, r4
   882b8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   882bc:	45a0      	cmp	r8, r4
   882be:	d907      	bls.n	882d0 <__udivmoddi4+0x15c>
   882c0:	19e4      	adds	r4, r4, r7
   882c2:	f100 33ff 	add.w	r3, r0, #4294967295
   882c6:	d202      	bcs.n	882ce <__udivmoddi4+0x15a>
   882c8:	45a0      	cmp	r8, r4
   882ca:	f200 80b9 	bhi.w	88440 <__udivmoddi4+0x2cc>
   882ce:	4618      	mov	r0, r3
   882d0:	eba4 0408 	sub.w	r4, r4, r8
   882d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   882d8:	e79c      	b.n	88214 <__udivmoddi4+0xa0>
   882da:	4629      	mov	r1, r5
   882dc:	4628      	mov	r0, r5
   882de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   882e2:	fa07 f70e 	lsl.w	r7, r7, lr
   882e6:	f1ce 0320 	rsb	r3, lr, #32
   882ea:	fa26 f203 	lsr.w	r2, r6, r3
   882ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   882f2:	fbb2 f1fc 	udiv	r1, r2, ip
   882f6:	fa1f f887 	uxth.w	r8, r7
   882fa:	fb0c 2211 	mls	r2, ip, r1, r2
   882fe:	fa06 f60e 	lsl.w	r6, r6, lr
   88302:	fa20 f303 	lsr.w	r3, r0, r3
   88306:	fb01 f908 	mul.w	r9, r1, r8
   8830a:	4333      	orrs	r3, r6
   8830c:	0c1e      	lsrs	r6, r3, #16
   8830e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88312:	45b1      	cmp	r9, r6
   88314:	fa00 f40e 	lsl.w	r4, r0, lr
   88318:	d909      	bls.n	8832e <__udivmoddi4+0x1ba>
   8831a:	19f6      	adds	r6, r6, r7
   8831c:	f101 32ff 	add.w	r2, r1, #4294967295
   88320:	f080 808c 	bcs.w	8843c <__udivmoddi4+0x2c8>
   88324:	45b1      	cmp	r9, r6
   88326:	f240 8089 	bls.w	8843c <__udivmoddi4+0x2c8>
   8832a:	3902      	subs	r1, #2
   8832c:	443e      	add	r6, r7
   8832e:	eba6 0609 	sub.w	r6, r6, r9
   88332:	fbb6 f0fc 	udiv	r0, r6, ip
   88336:	fb0c 6210 	mls	r2, ip, r0, r6
   8833a:	fb00 f908 	mul.w	r9, r0, r8
   8833e:	b29e      	uxth	r6, r3
   88340:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   88344:	45b1      	cmp	r9, r6
   88346:	d907      	bls.n	88358 <__udivmoddi4+0x1e4>
   88348:	19f6      	adds	r6, r6, r7
   8834a:	f100 33ff 	add.w	r3, r0, #4294967295
   8834e:	d271      	bcs.n	88434 <__udivmoddi4+0x2c0>
   88350:	45b1      	cmp	r9, r6
   88352:	d96f      	bls.n	88434 <__udivmoddi4+0x2c0>
   88354:	3802      	subs	r0, #2
   88356:	443e      	add	r6, r7
   88358:	eba6 0609 	sub.w	r6, r6, r9
   8835c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   88360:	e78f      	b.n	88282 <__udivmoddi4+0x10e>
   88362:	f1c1 0720 	rsb	r7, r1, #32
   88366:	fa22 f807 	lsr.w	r8, r2, r7
   8836a:	408b      	lsls	r3, r1
   8836c:	ea48 0303 	orr.w	r3, r8, r3
   88370:	fa26 f407 	lsr.w	r4, r6, r7
   88374:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   88378:	fbb4 f9fe 	udiv	r9, r4, lr
   8837c:	fa1f fc83 	uxth.w	ip, r3
   88380:	fb0e 4419 	mls	r4, lr, r9, r4
   88384:	408e      	lsls	r6, r1
   88386:	fa20 f807 	lsr.w	r8, r0, r7
   8838a:	fb09 fa0c 	mul.w	sl, r9, ip
   8838e:	ea48 0806 	orr.w	r8, r8, r6
   88392:	ea4f 4618 	mov.w	r6, r8, lsr #16
   88396:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8839a:	45a2      	cmp	sl, r4
   8839c:	fa02 f201 	lsl.w	r2, r2, r1
   883a0:	fa00 f601 	lsl.w	r6, r0, r1
   883a4:	d908      	bls.n	883b8 <__udivmoddi4+0x244>
   883a6:	18e4      	adds	r4, r4, r3
   883a8:	f109 30ff 	add.w	r0, r9, #4294967295
   883ac:	d244      	bcs.n	88438 <__udivmoddi4+0x2c4>
   883ae:	45a2      	cmp	sl, r4
   883b0:	d942      	bls.n	88438 <__udivmoddi4+0x2c4>
   883b2:	f1a9 0902 	sub.w	r9, r9, #2
   883b6:	441c      	add	r4, r3
   883b8:	eba4 040a 	sub.w	r4, r4, sl
   883bc:	fbb4 f0fe 	udiv	r0, r4, lr
   883c0:	fb0e 4410 	mls	r4, lr, r0, r4
   883c4:	fb00 fc0c 	mul.w	ip, r0, ip
   883c8:	fa1f f888 	uxth.w	r8, r8
   883cc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   883d0:	45a4      	cmp	ip, r4
   883d2:	d907      	bls.n	883e4 <__udivmoddi4+0x270>
   883d4:	18e4      	adds	r4, r4, r3
   883d6:	f100 3eff 	add.w	lr, r0, #4294967295
   883da:	d229      	bcs.n	88430 <__udivmoddi4+0x2bc>
   883dc:	45a4      	cmp	ip, r4
   883de:	d927      	bls.n	88430 <__udivmoddi4+0x2bc>
   883e0:	3802      	subs	r0, #2
   883e2:	441c      	add	r4, r3
   883e4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   883e8:	fba0 8902 	umull	r8, r9, r0, r2
   883ec:	eba4 0c0c 	sub.w	ip, r4, ip
   883f0:	45cc      	cmp	ip, r9
   883f2:	46c2      	mov	sl, r8
   883f4:	46ce      	mov	lr, r9
   883f6:	d315      	bcc.n	88424 <__udivmoddi4+0x2b0>
   883f8:	d012      	beq.n	88420 <__udivmoddi4+0x2ac>
   883fa:	b155      	cbz	r5, 88412 <__udivmoddi4+0x29e>
   883fc:	ebb6 030a 	subs.w	r3, r6, sl
   88400:	eb6c 060e 	sbc.w	r6, ip, lr
   88404:	fa06 f707 	lsl.w	r7, r6, r7
   88408:	40cb      	lsrs	r3, r1
   8840a:	431f      	orrs	r7, r3
   8840c:	40ce      	lsrs	r6, r1
   8840e:	602f      	str	r7, [r5, #0]
   88410:	606e      	str	r6, [r5, #4]
   88412:	2100      	movs	r1, #0
   88414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   88418:	4610      	mov	r0, r2
   8841a:	e6f7      	b.n	8820c <__udivmoddi4+0x98>
   8841c:	4689      	mov	r9, r1
   8841e:	e6de      	b.n	881de <__udivmoddi4+0x6a>
   88420:	4546      	cmp	r6, r8
   88422:	d2ea      	bcs.n	883fa <__udivmoddi4+0x286>
   88424:	ebb8 0a02 	subs.w	sl, r8, r2
   88428:	eb69 0e03 	sbc.w	lr, r9, r3
   8842c:	3801      	subs	r0, #1
   8842e:	e7e4      	b.n	883fa <__udivmoddi4+0x286>
   88430:	4670      	mov	r0, lr
   88432:	e7d7      	b.n	883e4 <__udivmoddi4+0x270>
   88434:	4618      	mov	r0, r3
   88436:	e78f      	b.n	88358 <__udivmoddi4+0x1e4>
   88438:	4681      	mov	r9, r0
   8843a:	e7bd      	b.n	883b8 <__udivmoddi4+0x244>
   8843c:	4611      	mov	r1, r2
   8843e:	e776      	b.n	8832e <__udivmoddi4+0x1ba>
   88440:	3802      	subs	r0, #2
   88442:	443c      	add	r4, r7
   88444:	e744      	b.n	882d0 <__udivmoddi4+0x15c>
   88446:	4608      	mov	r0, r1
   88448:	e706      	b.n	88258 <__udivmoddi4+0xe4>
   8844a:	3a02      	subs	r2, #2
   8844c:	443e      	add	r6, r7
   8844e:	e72b      	b.n	882a8 <__udivmoddi4+0x134>

00088450 <__aeabi_idiv0>:
   88450:	4770      	bx	lr
   88452:	bf00      	nop
   88454:	6f6d6544 	.word	0x6f6d6544
   88458:	7274736e 	.word	0x7274736e
   8845c:	6e697461 	.word	0x6e697461
   88460:	69772067 	.word	0x69772067
   88464:	74656764 	.word	0x74656764
   88468:	00000073 	.word	0x00000073
   8846c:	63696c43 	.word	0x63696c43
   88470:	0000006b 	.word	0x0000006b
   88474:	00643325 	.word	0x00643325

00088478 <sysfont_glyphs>:
	...
   8849c:	00300000 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
   884ac:	00300000 00000030 00000000 00000000     ..0.0...........
   884bc:	006c0000 006c006c 0000006c 00000000     ..l.l.l.l.......
	...
   884e0:	00480048 004800fc 00480048 004800fc     H.H...H.H.H...H.
   884f0:	00000048 00000000 00000000 00100000     H...............
   88500:	003c0010 00300040 00040008 00100078     ..<.@.0.....x...
   88510:	00000010 00000000 00000000 00000000     ................
   88520:	00a4007c 004800a8 00140010 004a002a     |.....H.....*.J.
   88530:	00000044 00000000 00000000 00700000     D.............p.
   88540:	00880088 00700088 008a0088 008c008a     ......p.........
   88550:	00000070 00000000 00000000 00100000     p...............
   88560:	00100010 00000000 00000000 00000000     ................
	...
   8857c:	00100008 00200010 00200020 00200020     ...... . . . . .
   8858c:	00100020 00080010 00000000 00000000      ...............
   8859c:	00100020 00080010 00080008 00080008      ...............
   885ac:	00100008 00200010 00000000 00000000     ...... .........
   885bc:	00280000 007c0010 00280010 00000000     ..(...|...(.....
	...
   885e4:	00100010 00fe0010 00100010 00000010     ................
	...
   8860c:	00180000 00300018 00000020 00000000     ......0. .......
	...
   88628:	00fe0000 00000000 00000000 00000000     ................
	...
   8864c:	00180000 00000018 00000000 00000000     ................
   8865c:	00000000 00080004 00100008 00200010     .............. .
   8866c:	00400020 00000040 00000000 00000000      .@.@...........
   8867c:	00780000 00840084 0094008c 00c400a4     ..x.............
   8868c:	00840084 00000078 00000000 00000000     ....x...........
   8869c:	00100000 00500030 00100010 00100010     ....0.P.........
   886ac:	00100010 0000007c 00000000 00000000     ....|...........
   886bc:	00700000 00080088 00100008 00200010     ..p........... .
   886cc:	00400020 000000fc 00000000 00000000      .@.............
   886dc:	00700000 00080088 00300008 00080008     ..p.......0.....
   886ec:	00880008 00000070 00000000 00000000     ....p...........
   886fc:	00080000 00280018 00480028 00880088     ......(.(.H.....
   8870c:	000800fc 00000008 00000000 00000000     ................
   8871c:	007c0000 00800080 00c400b8 00040004     ..|.............
   8872c:	00840004 00000078 00000000 00000000     ....x...........
   8873c:	00380000 00800040 00b00080 008400c8     ..8.@...........
   8874c:	00480084 00000030 00000000 00000000     ..H.0...........
   8875c:	00fc0000 00040004 00080008 00100010     ................
   8876c:	00200020 00000040 00000000 00000000      . .@...........
   8877c:	00780000 00840084 00780084 00840084     ..x.......x.....
   8878c:	00840084 00000078 00000000 00000000     ....x...........
   8879c:	00780000 00840084 008c0084 00040074     ..x.........t...
   887ac:	00100008 000000e0 00000000 00000000     ................
	...
   887c4:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
   887e4:	00600000 00000060 00600000 00c00060     ..`.`.....`.`...
   887f4:	00000080 00000000 00000000 00000000     ................
   88804:	00180004 00800060 00180060 00000004     ....`...`.......
	...
   88824:	007e0000 00000000 0000007e 00000000     ..~.....~.......
	...
   88844:	00300040 0002000c 0030000c 00000040     @.0.......0.@...
	...
   8885c:	00700000 00080088 00100008 00200020     ..p......... . .
   8886c:	00200000 00000020 00000000 00000000     .. . ...........
   8887c:	00000000 003c0000 00ba0042 00aa00aa     ......<.B.......
   8888c:	00bc00aa 003c0040 00000000 00000000     ....@.<.........
   8889c:	00100000 00280010 00280028 007c0044     ......(.(.(.D.|.
   888ac:	00820044 00000082 00000000 00000000     D...............
   888bc:	00f00000 00880088 00f00088 00880088     ................
   888cc:	00880088 000000f0 00000000 00000000     ................
   888dc:	00380000 00800044 00800080 00800080     ..8.D...........
   888ec:	00440080 00000038 00000000 00000000     ..D.8...........
   888fc:	00f00000 00840088 00840084 00840084     ................
   8890c:	00880084 000000f0 00000000 00000000     ................
   8891c:	007c0000 00400040 00780040 00400040     ..|.@.@.@.x.@.@.
   8892c:	00400040 0000007c 00000000 00000000     @.@.|...........
   8893c:	007c0000 00400040 00400040 00400078     ..|.@.@.@.@.x.@.
   8894c:	00400040 00000040 00000000 00000000     @.@.@...........
   8895c:	00380000 00800044 00800080 0084009c     ..8.D...........
   8896c:	00440084 0000003c 00000000 00000000     ..D.<...........
   8897c:	00840000 00840084 00fc0084 00840084     ................
   8898c:	00840084 00000084 00000000 00000000     ................
   8899c:	007c0000 00100010 00100010 00100010     ..|.............
   889ac:	00100010 0000007c 00000000 00000000     ....|...........
   889bc:	00f80000 00080008 00080008 00080008     ................
   889cc:	00100008 000000e0 00000000 00000000     ................
   889dc:	00840000 00880084 00a00090 008800d0     ................
   889ec:	00840088 00000084 00000000 00000000     ................
   889fc:	00800000 00800080 00800080 00800080     ................
   88a0c:	00800080 000000fc 00000000 00000000     ................
   88a1c:	00840000 00cc0084 00b400cc 008400b4     ................
   88a2c:	00840084 00000084 00000000 00000000     ................
   88a3c:	00840000 00c400c4 00a400a4 00940094     ................
   88a4c:	008c008c 00000084 00000000 00000000     ................
   88a5c:	00300000 00840048 00840084 00840084     ..0.H...........
   88a6c:	00480084 00000030 00000000 00000000     ..H.0...........
   88a7c:	00f00000 00840088 00840084 00f00088     ................
   88a8c:	00800080 00000080 00000000 00000000     ................
   88a9c:	00300000 00840048 00840084 00840084     ..0.H...........
   88aac:	00480084 00200030 0000001c 00000000     ..H.0. .........
   88abc:	00f00000 00840088 00880084 009000f0     ................
   88acc:	00840088 00000084 00000000 00000000     ................
   88adc:	00780000 00800084 00300040 00040008     ..x.....@.0.....
   88aec:	00840004 00000078 00000000 00000000     ....x...........
   88afc:	00fe0000 00100010 00100010 00100010     ................
   88b0c:	00100010 00000010 00000000 00000000     ................
   88b1c:	00840000 00840084 00840084 00840084     ................
   88b2c:	00840084 00000078 00000000 00000000     ....x...........
   88b3c:	00820000 00440082 00440044 00280044     ......D.D.D.D.(.
   88b4c:	00280028 00000010 00000000 00000000     (.(.............
   88b5c:	00840000 00840084 00b40084 00b400b4     ................
   88b6c:	00480078 00000048 00000000 00000000     x.H.H...........
   88b7c:	00820000 00440044 00100028 00280010     ....D.D.(.....(.
   88b8c:	00440044 00000082 00000000 00000000     D.D.............
   88b9c:	00820000 00440044 00280028 00100028     ....D.D.(.(.(...
   88bac:	00100010 00000010 00000000 00000000     ................
   88bbc:	00fc0000 00080004 00100008 00200010     .............. .
   88bcc:	00400040 000000fe 00000000 00000000     @.@.............
   88bdc:	008000e0 00800080 00800080 00800080     ................
   88bec:	00800080 00e00080 00000000 00000000     ................
   88bfc:	00400000 00200040 00100020 00080010     ..@.@. . .......
   88c0c:	00040008 00000004 00000000 00000000     ................
   88c1c:	002000e0 00200020 00200020 00200020     .. . . . . . . .
   88c2c:	00200020 00e00020 00000000 00000000      . . ...........
   88c3c:	00100000 00440028 00000000 00000000     ....(.D.........
	...
   88c70:	0000007c 00000000 00000000 00200000     |............. .
   88c80:	00080010 00000000 00000000 00000000     ................
	...
   88ca4:	00040078 007c0004 008c0084 00000076     x.....|.....v...
	...
   88cbc:	00800080 00800080 00c400b8 00840084     ................
   88ccc:	00880084 000000f0 00000000 00000000     ................
	...
   88ce4:	0080007c 00800080 00800080 0000007c     |...........|...
	...
   88cfc:	00020002 00020002 0042003e 00820082     ........>.B.....
   88d0c:	00420082 0000003e 00000000 00000000     ..B.>...........
	...
   88d24:	0082007c 00fe0082 00800080 0000007e     |...........~...
	...
   88d3c:	001c0000 00200020 002000fc 00200020     .... . ... . . .
   88d4c:	00200020 000000fc 00000000 00000000      . .............
	...
   88d64:	0084007c 00840084 008c0084 00040074     |...........t...
   88d74:	00380044 00000000 00800080 00800080     D.8.............
   88d84:	00c400b8 00840084 00840084 00000084     ................
	...
   88d9c:	00100000 00000000 00100070 00100010     ........p.......
   88dac:	00100010 0000007c 00000000 00000000     ....|...........
   88dbc:	00080000 00000000 00080078 00080008     ........x.......
   88dcc:	00080008 00080008 00e00010 00000000     ................
   88ddc:	00800080 00800080 00900088 00e000a0     ................
   88dec:	00880090 00000084 00000000 00000000     ................
   88dfc:	00f00000 00100010 00100010 00100010     ................
   88e0c:	00100010 000000fe 00000000 00000000     ................
	...
   88e24:	00d400ac 00940094 00940094 00000094     ................
	...
   88e44:	00c400b8 00840084 00840084 00000084     ................
	...
   88e64:	00840078 00840084 00840084 00000078     x...........x...
	...
   88e84:	00c400b8 00840084 00840084 008000f8     ................
   88e94:	00800080 00000000 00000000 00000000     ................
   88ea4:	0084007c 00840084 00840084 0004007c     |...........|...
   88eb4:	00040004 00000000 00000000 00000000     ................
   88ec4:	003000cc 00200020 00200020 000000f8     ..0. . . . .....
	...
   88ee4:	0080007c 00780080 00040004 000000f8     |.....x.........
	...
   88f00:	00200000 002000fc 00200020 00200020     .. ... . . . . .
   88f10:	0000001c 00000000 00000000 00000000     ................
   88f20:	00000000 00880088 00880088 00880088     ................
   88f30:	00000074 00000000 00000000 00000000     t...............
   88f40:	00000000 00440082 00280044 00100028     ......D.D.(.(...
   88f50:	00000010 00000000 00000000 00000000     ................
   88f60:	00000000 00840084 00b400b4 00480048     ............H.H.
   88f70:	00000048 00000000 00000000 00000000     H...............
   88f80:	00000000 00280044 00100028 00440028     ....D.(.(...(.D.
   88f90:	00000044 00000000 00000000 00000000     D...............
   88fa0:	00000000 00440082 00280044 00280028     ......D.D.(.(.(.
   88fb0:	00100010 00200020 00000000 00000000     .... . .........
   88fc0:	00000000 000400fc 00100008 00400020     ............ .@.
   88fd0:	000000fc 00000000 00000000 00100008     ................
   88fe0:	00080010 00100008 00080010 00100008     ................
   88ff0:	00080010 00000000 00000000 00100010     ................
   89000:	00100010 00000010 00100000 00100010     ................
   89010:	00100010 00000000 00000000 00100020     ............ ...
   89020:	00200010 00100020 00200010 00100020     .. . ..... . ...
   89030:	00200010 00000000                       .. .....

00089038 <atmel_logo_small_data>:
   89038:	ffffffff ffffffff ffffffff ffffffff     ................
   89048:	ffffffff ffffffff ffffffff ffffffff     ................
   89058:	ffffffff ffffffff ffffffff ffffffff     ................
   89068:	ffffffff ffffffff ffffffff ffffffff     ................
   89078:	ffffffff ffffffff ffffffff ffffffff     ................
   89088:	ffffffff ffffffff ffffffff ffffffff     ................
   89098:	ffffffff ffffffff ffffffff ffffffff     ................
   890a8:	ffffffff ffffffff ffffffff ffffffff     ................
   890b8:	ffffffff ffffffff ffffffff ffffffff     ................
   890c8:	ffffffff ffffffff ffffffff ffffffff     ................
   890d8:	ffffffff ffffffff ffffffff ffffffff     ................
   890e8:	ffffffff ffffffff ffffffff ffffffff     ................
   890f8:	ffffffff ffffffff ffffffff ffffffff     ................
   89108:	ffffffff ffffffff ffffffff ffffffff     ................
   89118:	ffffffff ffffffff ffffffff ffffffff     ................
   89128:	ffffffff ffffffff ffffffff ffffffff     ................
   89138:	ffffffff ffffffff ffffffff ffffffff     ................
   89148:	ffffffff ffffffff ffffffff ffffffff     ................
   89158:	ffffffff ffffffff ffffffff ffffffff     ................
   89168:	ffffffff ffffffff ffffffff ffffffff     ................
   89178:	ffffffff ffffffff ffffffff ffffffff     ................
   89188:	ffffffff ffffffff ffffffff ffffffff     ................
   89198:	ffffffff ffffffff ffffffff ffffffff     ................
   891a8:	ffffffff ffffffff ffffffff ffffffff     ................
   891b8:	ffffffff ffffffff ffffffff ffffffff     ................
   891c8:	ffffffff ffffffff ffffffff ffffffff     ................
   891d8:	ffffffff ffffffff ffffffff ffffffff     ................
   891e8:	ffffffff ffffffff ffffffff ffffffff     ................
   891f8:	ffffffff ffffffff ffffffff ffffffff     ................
   89208:	ffffffff ffffffff ffffffff ffffffff     ................
   89218:	ffffffff ffffffff ffffffff ffffffff     ................
   89228:	ffffffff 7edf7edf dff77edf ffffffff     .....~.~.~......
   89238:	7edfdff7 dff77edf ffffffff ffffffff     ...~.~..........
   89248:	ffffffff ffffffff ffffffff ffffffff     ................
   89258:	ffffffff ffffffff ffffffff ffffffff     ................
   89268:	ffffffff ffffffff ffffffff ffffffff     ................
   89278:	ffffffff ffffffff ffffffff ffffffff     ................
   89288:	ffffffff ffffffff dff7ffff 7edf7edf     .............~.~
   89298:	ffffbfef 9fe7ffff ffffffff ffffffff     ................
   892a8:	ffffffff ffffffff ffffffff ffffffff     ................
   892b8:	ffffffff ffffffff ffffffff 1c8effff     ................
   892c8:	d803d803 7da6d803 ffffffff d8037da6     .......}.....}..
   892d8:	7da6d803 ffffffff ffffffff ffffffff     ...}............
   892e8:	ffffffff ffffffff ffffffff ffffffff     ................
   892f8:	ffffffff ffffffff ffffffff ffffffff     ................
   89308:	ffffffff ffffffff ffffffff ffffffff     ................
   89318:	ffffffff ffffffff ffffffff ffffffff     ................
   89328:	ffffffff febeffff d803d803 ffff5b65     ............e[..
   89338:	1a4d7da6 ffffbb75 ffffffff ffffffff     .}M.u...........
   89348:	ffffffff ffffffff ffffffff ffffffff     ................
   89358:	ffffffff ffffffff d803bdb6 d803d803     ................
   89368:	7da6d803 ffffffff d8037da6 7da6d803     ...}.....}.....}
   89378:	ffffffff ffffffff ffffffff ffffffff     ................
   89388:	ffffffff ffffffff ffffffff ffffffff     ................
   89398:	ffffffff ffffffff ffffffff ffffffff     ................
   893a8:	ffffffff ffffffff ffffffff ffffffff     ................
   893b8:	ffffffff ffffffff ffffffff ffffffff     ................
   893c8:	febeffff d803d803 ffff5b65 7b653c96     ........e[...<e{
   893d8:	ffff9b75 ffffffff ffffffff ffffffff     u...............
   893e8:	ffffffff ffffffff ffffffff ffffffff     ................
   893f8:	3ecfffff d803f80b d803d803 7da6d803     ...>...........}
   89408:	ffffffff d8037da6 7da6d803 ffffffff     .....}.....}....
   89418:	ffffffff ffffffff ffffffff ffffffff     ................
   89428:	ffffffff ffffffff ffffffff ffffffff     ................
   89438:	ffffffff ffffffff ffffffff ffffffff     ................
   89448:	ffffffff ffffffff ffffffff ffffffff     ................
   89458:	ffffffff ffffffff ffffffff febeffff     ................
   89468:	d803d803 ffff5b65 7da6dff7 ffff9fe7     ....e[.....}....
   89478:	ffffffff ffffffff ffffffff ffffffff     ................
   89488:	ffffffff ffffffff ffffffff 591c9fe7     ...............Y
   89498:	d803d803 d803391c 7da6d803 ffffffff     .....9.....}....
   894a8:	d8037da6 7da6d803 ffffffff ffffffff     .}.....}........
   894b8:	ffffffff ffffffff ffffffff ffffffff     ................
   894c8:	ffffffff ffffffff ffffffff ffffffff     ................
   894d8:	ffffffff ffffffff ffffffff ffffffff     ................
   894e8:	ffffffff ffffffff ffffffff ffffffff     ................
   894f8:	ffffffff ffffffff febeffff d803d803     ................
   89508:	ffff5b65 ffffffff ffffffff ffffffff     e[..............
   89518:	ffffffff ffffffff ffffffff ffffffff     ................
   89528:	ffffffff dff7ffff d803b934 5b5dd803     ........4.....][
   89538:	d803fc85 7da6d803 1ec7ffff d803bb7d     .......}....}...
   89548:	bb7dd803 febefebe 5ed7febe ffffffff     ..}........^....
   89558:	ffffffff 5ed7ffff 7da67da6 ffff1ecf     .......^.}.}....
   89568:	ffffffff bfefffff 7da6bdae dff7bdae     ...........}....
   89578:	ffffffff ffffffff ffffffff ffffffff     ................
   89588:	1ec7ffff fc855c9e ddbe3c96 ffffdff7     .....\...<......
   89598:	ffffffff febeffff d803d803 ffff5b65     ............e[..
   895a8:	ffffffff ffffffff ffffffff ffffffff     ................
   895b8:	ffffffff ffffffff ffffffff ffffffff     ................
   895c8:	3a55ffff d803d803 dff7da3c d803fc85     ..U:....<.......
   895d8:	7da6d803 5924ffff d803d803 d803d803     ...}..$Y........
   895e8:	d803d803 5b65d803 ffffffff 3ecfffff     ......e[.......>
   895f8:	d803b934 d803d803 992cd803 ffff1ec7     4.........,.....
   89608:	f80bdb7d d803d803 f80bd803 ffffdb7d     }...........}...
   89618:	ffffffff ffffffff ddbeffff d803792c     ............,y..
   89628:	d803d803 d803d803 5c9e391c ffffffff     .........9.\....
   89638:	febeffff d803d803 ffff5b65 ffffffff     ........e[......
   89648:	ffffffff ffffffff ffffffff ffffffff     ................
   89658:	ffffffff ffffffff ffffffff d803db7d     ............}...
   89668:	7924d803 ffff9fe7 d803fc85 7da6d803     ..$y...........}
   89678:	5924ffff d803d803 d803d803 d803d803     ..$Y............
   89688:	5b65d803 ffffffff f80b3ecf d803d803     ..e[.....>......
   89698:	d803d803 d803d803 da3cd803 d803d803     ..........<.....
   896a8:	d803d803 d803d803 3a55d803 ffffffff     ..........U:....
   896b8:	ffffffff d8033c96 d803d803 d803d803     .....<..........
   896c8:	d803d803 d803d803 ffffdb7d febeffff     ........}.......
   896d8:	d803d803 ffff5b65 ffffffff ffffffff     ....e[..........
   896e8:	ffffffff ffffffff ffffffff ffffffff     ................
   896f8:	ffffffff 7d9effff d803d803 5ed7f80b     .......}.......^
   89708:	ffffffff d803fc85 7da6d803 bb75ffff     ...........}..u.
   89718:	d803da3c da3cd803 5b655b65 5c9e5b65     <.....<.e[e[e[.\
   89728:	ffffffff d803792c f80bd803 5b5d3a5d     ....,y......]:][
   89738:	d8031814 d803d803 d803d803 5b65b93c     ............<.e[
   89748:	d803b93c d803d803 ffff3c96 1ec7ffff     <........<......
   89758:	d803d803 fa44d803 7edfbdb6 7b6dfec6     ......D....~..m{
   89768:	d803d803 ddbed803 febeffff d803d803     ................
   89778:	ffff5b65 ffffffff ffffffff ffffffff     e[..............
   89788:	ffffffff ffffffff ffffffff ffffffff     ................
   89798:	d803fec6 d803d803 ffffddbe ffffffff     ................
   897a8:	d803fc85 7da6d803 ffffffff d8037da6     .......}.....}..
   897b8:	7da6d803 ffffffff ffffffff bdaeffff     ...}............
   897c8:	d803d803 5ed73814 ffffffff 79249fe7     .....8.^......$y
   897d8:	d803d803 fc85d803 ffffffff fc85ffff     ................
   897e8:	d803d803 ffff7924 fa4cffff d803d803     ....$y....L.....
   897f8:	ffff3a55 ffffffff ffffffff d803dc7d     U:..........}...
   89808:	da44d803 febeffff d803d803 ffff5b65     ..D.........e[..
   89818:	ffffffff ffffffff ffffffff ffffffff     ................
   89828:	ffffffff ffffffff 7edfffff d8033814     ...........~.8..
   89838:	db7dd803 7edf7edf ffffdff7 d803fc85     ..}..~.~........
   89848:	7da6d803 ffffffff d8037da6 7da6d803     ...}.....}.....}
   89858:	ffffffff ffffffff bb75ffff d803d803     ..........u.....
   89868:	ffff1c8e ffffffff 9da6ffff d803d803     ................
   89878:	ffff591c ffffffff ffffffff d803591c     .Y...........Y..
   89888:	9fe7d803 d803bfef d803d803 7edffdbe     ...............~
   89898:	7edf7edf 7edf7edf d8035ed7 d803d803     .~.~.~.~.^......
   898a8:	febebfef d803d803 ffff5b65 ffffffff     ........e[......
   898b8:	ffffffff ffffffff ffffffff ffffffff     ................
   898c8:	ffffffff 792cbfef d803d803 d803d803     ......,y........
   898d8:	d803d803 fffffebe d803fc85 7da6d803     ...............}
   898e8:	ffffffff d8037da6 7da6d803 ffffffff     .....}.....}....
   898f8:	ffffffff 5b65ffff d803d803 fffffebe     ......e[........
   89908:	ffffffff 7edfffff d803d803 ffffda44     .......~....D...
   89918:	ffffffff ffffffff d803da44 7edfd803     ........D......~
   89928:	d803fec6 d803d803 d803d803 d803d803     ................
   89938:	d803d803 d803d803 d803d803 febe1ec7     ................
   89948:	d803d803 ffff5b65 ffffffff ffffffff     ....e[..........
   89958:	ffffffff ffffffff ffffffff ffffffff     ................
   89968:	d803fa44 d803d803 d803d803 d803d803     D...............
   89978:	fffffebe d803fc85 7da6d803 ffffffff     ...........}....
   89988:	d8037da6 7da6d803 ffffffff ffffffff     .}.....}........
   89998:	5b65ffff d803d803 fffffebe ffffffff     ..e[............
   899a8:	7edfffff d803d803 ffffda44 ffffffff     ...~....D.......
   899b8:	ffffffff d803da44 7edfd803 d803febe     ....D......~....
   899c8:	d803d803 d803d803 d803d803 d803d803     ................
   899d8:	d803d803 d803d803 febefebe d803d803     ................
   899e8:	ffff5b65 ffffffff ffffffff ffffffff     e[..............
   899f8:	ffffffff ffffffff 7b6dffff d803d803     ..........m{....
   89a08:	fc85992c fc85fc85 fc85fc85 ffff7edf     ,............~..
   89a18:	d803fc85 7da6d803 ffffffff d8037da6     .......}.....}..
   89a28:	5c9ed803 ffffffff ffffffff 5b65ffff     ...\..........e[
   89a38:	d803d803 fffffebe ffffffff 7edfffff     ...............~
   89a48:	d803d803 ffffda44 ffffffff ffffffff     ....D...........
   89a58:	d803da44 7edfd803 d8031ecf f80bd803     D......~........
   89a68:	fc85fc85 fc85fc85 fc85fc85 fc85fc85     ................
   89a78:	fc85fc85 fec67edf d803d803 ffff5b65     .....~......e[..
   89a88:	ffffffff ffffffff ffffffff ffffffff     ................
   89a98:	ffffffff d8033c8e 391cd803 ffff9fe7     .....<.....9....
   89aa8:	ffffffff ffffffff ffffffff d803fc85     ................
   89ab8:	7da6d803 ffffffff d803bdae 5b5dd803     ...}..........][
   89ac8:	ffffffff ffffffff 5b65ffff d803d803     ..........e[....
   89ad8:	fffffebe ffffffff 7edfffff d803d803     ...........~....
   89ae8:	ffffda44 ffffffff ffffffff d803da44     D...........D...
   89af8:	7edfd803 f80bdff7 d803d803 ffff9fe7     ...~............
   89b08:	ffffffff ffffffff ffffffff ffffffff     ................
   89b18:	9fe7ffff d803d803 ffff792c ffffffff     ........,y......
   89b28:	ffffffff ffffffff ffffffff bdb6ffff     ................
   89b38:	d803d803 3ecff80b ffffffff ffffffff     .......>........
   89b48:	ffffffff ffffffff d803fc85 7da6d803     ...............}
   89b58:	ffffffff f80bdff7 d803d803 ffff7d9e     .............}..
   89b68:	ffffffff 5b65ffff d803d803 fffffebe     ......e[........
   89b78:	ffffffff 7edfffff d803d803 ffffda44     .......~....D...
   89b88:	ffffffff ffffffff d803da44 7edfd803     ........D......~
   89b98:	3a55ffff d803d803 ffff1a55 ffffffff     ..U:....U.......
   89ba8:	ffffffff fc85fec6 5c9efc85 ffffffff     ...........\....
   89bb8:	d803b934 9b6dd803 ffffffff ffffffff     4.....m.........
   89bc8:	ffffffff ffffffff f80b5ed7 d803d803     .........^......
   89bd8:	ffffbdae ffffffff ffffffff ffffffff     ................
   89be8:	ffffffff d803fc85 7da6d803 ffffffff     ...........}....
   89bf8:	fc85ffff d803d803 7924d803 1c86da44     ..........$yD...
   89c08:	5b65ffff d803d803 fffffebe ffffffff     ..e[............
   89c18:	7edfffff d803d803 ffffda44 ffffffff     ...~....D.......
   89c28:	ffffffff d803da44 7edfd803 5ed7ffff     ....D......~...^
   89c38:	d803d803 da3cd803 7edfbdb6 db7d5ed7     ......<....~.^}.
   89c48:	d803d803 3c96d803 ffffffff d803ddb6     .......<........
   89c58:	d803d803 da443814 ffffda44 ffffffff     .....8D.D.......
   89c68:	9fe7ffff d803591c 1c86d803 ffffffff     .....Y..........
   89c78:	ffffffff ffffffff ffffffff ffffffff     ................
   89c88:	d803fc85 7da6d803 ffffffff ffffffff     .......}........
   89c98:	d8033a5d d803d803 5b65d803 5b65ffff     ]:........e[..e[
   89ca8:	d803d803 fffffebe ffffffff 7edfffff     ...............~
   89cb8:	d803d803 ffffda44 ffffffff ffffffff     ....D...........
   89cc8:	d803da44 7edfd803 ffffffff d8035c9e     D......~.....\..
   89cd8:	d803d803 d803d803 d803d803 d803d803     ................
   89ce8:	ffff3a5d ffffffff 3c8effff d803d803     ]:.........<....
   89cf8:	d803d803 ffffd803 ffffffff b93cdff7     ..............<.
   89d08:	d803d803 ffff7b65 ffffffff ffffffff     ....e{..........
   89d18:	ffffffff ffffffff ffffffff d803fc85     ................
   89d28:	7da6d803 ffffffff ffffffff 7d9effff     ...}...........}
   89d38:	d803b934 5b65d803 5b65ffff d803d803     4.....e[..e[....
   89d48:	fffffebe ffffffff 7edfffff d803d803     ...........~....
   89d58:	ffffda44 ffffffff ffffffff d803da44     D...........D...
   89d68:	7edfd803 ffffffff fec6ffff d803b93c     ...~........<...
   89d78:	d803d803 d803d803 5c9e5924 ffffffff     ........$Y.\....
   89d88:	ffffffff ffffffff fa4cfec6 d803d803     ..........L.....
   89d98:	ffffd803 ffffffff ffffffff ffffffff     ................
   89da8:	ffffffff ffffffff ffffffff ffffffff     ................
   89db8:	ffffffff ffffffff ffffffff ffffffff     ................
   89dc8:	ffffffff ffffffff ffffffff dff7ffff     ................
   89dd8:	bfef7edf ffffffff ffffffff ffffffff     .~..............
   89de8:	ffffffff ffffffff ffffffff ffffffff     ................
   89df8:	ffffffff ffffffff ffffffff ffffffff     ................
   89e08:	ffffffff ffffffff 7edfffff 7da6bdb6     ...........~...}
   89e18:	5ed79dae ffffffff ffffffff ffffffff     ...^............
   89e28:	ffffffff ffffffff 7edfffff ffff7edf     ...........~.~..
   89e38:	ffffffff ffffffff ffffffff ffffffff     ................
   89e48:	ffffffff ffffffff ffffffff ffffffff     ................
   89e58:	ffffffff ffffffff ffffffff ffffffff     ................
   89e68:	ffffffff ffffffff ffffffff ffffffff     ................
   89e78:	ffffffff ffffffff ffffffff ffffffff     ................
   89e88:	ffffffff ffffffff ffffffff ffffffff     ................
   89e98:	ffffffff ffffffff ffffffff ffffffff     ................
   89ea8:	ffffffff ffffffff ffffffff ffffffff     ................
   89eb8:	ffffffff ffffffff ffffffff ffffffff     ................
   89ec8:	ffffffff ffffffff ffffffff ffffffff     ................
   89ed8:	ffffffff ffffffff ffffffff ffffffff     ................
   89ee8:	ffffffff ffffffff ffffffff ffffffff     ................
   89ef8:	ffffffff ffffffff ffffffff ffffffff     ................
   89f08:	ffffffff ffffffff ffffffff ffffffff     ................
   89f18:	ffffffff ffffffff ffffffff ffffffff     ................
   89f28:	ffffffff ffffffff ffffffff ffffffff     ................
   89f38:	ffffffff ffffffff ffffffff ffffffff     ................
   89f48:	ffffffff ffffffff ffffffff ffffffff     ................
   89f58:	ffffffff ffffffff ffffffff ffffffff     ................
   89f68:	ffffffff ffffffff ffffffff ffffffff     ................
   89f78:	ffffffff ffffffff ffffffff ffffffff     ................
   89f88:	ffffffff ffffffff ffffffff ffffffff     ................
   89f98:	ffffffff ffffffff ffffffff ffffffff     ................
   89fa8:	ffffffff ffffffff ffffffff ffffffff     ................
   89fb8:	ffffffff ffffffff ffffffff ffffffff     ................
   89fc8:	ffffffff ffffffff ffffffff ffffffff     ................
   89fd8:	ffffffff ffffffff ffffffff ffffffff     ................
   89fe8:	ffffffff ffffffff ffffffff ffffffff     ................
   89ff8:	ffffffff ffffffff ffffffff ffffffff     ................
   8a008:	ffffffff ffffffff                       ........

0008a010 <_global_impure_ptr>:
   8a010:	200701c0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8a020:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8a030:	46454443 00000000 33323130 37363534     CDEF....01234567
   8a040:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8a050:	0000296c 00000030                       l)..0...

0008a058 <blanks.7223>:
   8a058:	20202020 20202020 20202020 20202020                     

0008a068 <zeroes.7224>:
   8a068:	30303030 30303030 30303030 30303030     0000000000000000
   8a078:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0008a088 <__mprec_bigtens>:
   8a088:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8a098:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8a0a8:	7f73bf3c 75154fdd                       <.s..O.u

0008a0b0 <__mprec_tens>:
   8a0b0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8a0c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8a0d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8a0e0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8a0f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8a100:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8a110:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8a120:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8a130:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8a140:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8a150:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8a160:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8a170:	79d99db4 44ea7843                       ...yCx.D

0008a178 <p05.6055>:
   8a178:	00000005 00000019 0000007d 00000043     ........}...C...
   8a188:	49534f50 00000058 0000002e              POSIX.......

0008a194 <_ctype_>:
   8a194:	20202000 20202020 28282020 20282828     .         ((((( 
   8a1a4:	20202020 20202020 20202020 20202020                     
   8a1b4:	10108820 10101010 10101010 10101010      ...............
   8a1c4:	04040410 04040404 10040404 10101010     ................
   8a1d4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8a1e4:	01010101 01010101 01010101 10101010     ................
   8a1f4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8a204:	02020202 02020202 02020202 10101010     ................
   8a214:	00000020 00000000 00000000 00000000      ...............
	...

0008a298 <_init>:
   8a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a29a:	bf00      	nop
   8a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8a29e:	bc08      	pop	{r3}
   8a2a0:	469e      	mov	lr, r3
   8a2a2:	4770      	bx	lr

0008a2a4 <__init_array_start>:
   8a2a4:	00084df9 	.word	0x00084df9

0008a2a8 <__frame_dummy_init_array_entry>:
   8a2a8:	00080119                                ....

0008a2ac <_fini>:
   8a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a2ae:	bf00      	nop
   8a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8a2b2:	bc08      	pop	{r3}
   8a2b4:	469e      	mov	lr, r3
   8a2b6:	4770      	bx	lr

0008a2b8 <__fini_array_start>:
   8a2b8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701ac 	.word	0x200701ac

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <sysfont>:
20070138:	00000000 00088478 7d20100a              ....x..... }

20070144 <membag_list>:
20070144:	00000010 00000020 00000000 00000000     .... ...........
	...
2007015c:	00000020 00000020 00000000 00000000      ... ...........
	...
20070174:	00000040 00000004 00000000 00000000     @...............
	...
2007018c:	00000080 00000004 00000000 00000000     ................
	...

200701a4 <xNextTaskUnblockTime>:
200701a4:	ffffffff                                ....

200701a8 <g_interrupt_enabled>:
200701a8:	00000001                                ....

200701ac <SystemCoreClock>:
200701ac:	003d0900                                ..=.

200701b0 <atmel_logo_small>:
200701b0:	001a004e 00000002 00089038              N.......8...

200701bc <_impure_ptr>:
200701bc:	200701c0                                ... 

200701c0 <impure_data>:
200701c0:	00000000 200704ac 20070514 2007057c     ....... ... |.. 
	...
20070268:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070278:	0005deec 0000000b 00000000 00000000     ................
	...

200705e8 <__atexit_recursive_mutex>:
200705e8:	20071470                                p.. 

200705ec <__malloc_av_>:
	...
200705f4:	200705ec 200705ec 200705f4 200705f4     ... ... ... ... 
20070604:	200705fc 200705fc 20070604 20070604     ... ... ... ... 
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 

200709f4 <__malloc_sbrk_base>:
200709f4:	ffffffff                                ....

200709f8 <__malloc_trim_threshold>:
200709f8:	00020000                                ....

200709fc <__global_locale>:
200709fc:	00000043 00000000 00000000 00000000     C...............
	...
20070a1c:	00000043 00000000 00000000 00000000     C...............
	...
20070a3c:	00000043 00000000 00000000 00000000     C...............
	...
20070a5c:	00000043 00000000 00000000 00000000     C...............
	...
20070a7c:	00000043 00000000 00000000 00000000     C...............
	...
20070a9c:	00000043 00000000 00000000 00000000     C...............
	...
20070abc:	00000043 00000000 00000000 00000000     C...............
	...
20070adc:	0008780d 00087381 00000000 0008a194     .x...s..........
20070aec:	0008a190 0008a034 0008a034 0008a034     ....4...4...4...
20070afc:	0008a034 0008a034 0008a034 0008a034     4...4...4...4...
20070b0c:	0008a034 0008a034 ffffffff ffffffff     4...4...........
20070b1c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b44:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
